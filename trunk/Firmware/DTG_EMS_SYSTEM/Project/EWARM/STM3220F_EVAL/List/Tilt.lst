###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     12/Jan/2012  04:01:45 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\Tilt.c  #
#    Command line =  "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\Tilt.c #
#                    " -D USE_STDPERIPH_DRIVER -D STM32F2XX -D                #
#                    USE_STM3220F_EVAL -D USE_USB_OTG_FS -D                   #
#                    RTC_CLOCK_SOURCE_LSE -lC "F:\¹¬ÀÛ¾÷\[ NewDTG             #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\STM3220F_EVAL\List\" #
#                     -lA "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\E #
#                    WARM\STM3220F_EVAL\List\" -o "F:\¹¬ÀÛ¾÷\[ NewDTG         #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\STM3220F_EVAL\Obj\"  #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0\arm\INC\c\DLib_Config_Full.h" -I           #
#                    "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\ #
#                    ..\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG                              #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Libraries\CMSI #
#                    S\CM3\CoreSupport\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG               #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Libraries\CMSI #
#                    S\CM3\DeviceSupport\ST\STM32F2xx\" -I "F:\¹¬ÀÛ¾÷\[       #
#                    NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Librari #
#                    es\STM32F2xx_StdPeriph_Driver\inc\" -I "F:\¹¬ÀÛ¾÷\[      #
#                    NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Utiliti #
#                    es\STM32_EVAL\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG                   #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Utilities\STM3 #
#                    2_EVAL\Common\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG                   #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Utilities\STM3 #
#                    2_EVAL\STM3220F_EVAL\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG            #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Libraries\STM3 #
#                    2_USB_OTG_Driver\inc\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG            #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Libraries\STM3 #
#                    2_USB_Device_Library\Core\inc\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG   #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Libraries\STM3 #
#                    2_USB_Device_Library\Class\msc\inc\" -I "F:\¹¬ÀÛ¾÷\[     #
#                    NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\Usb\" -I   #
#                    "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\ #
#                    ..\Usb\Inc\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG                      #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\Usb\src\" -I      #
#                    "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\ #
#                    ..\..\Libraries\STM32_USB_HOST_Library\Core\inc\" -I     #
#                    "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\ #
#                    ..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\"   #
#                    -I "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWA #
#                    RM\..\..\Libraries\STM32_USB_Device_Library\Class\cdc\in #
#                    c\" -Ol --use_c++_inline                                 #
#    List file    =  F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\S #
#                    TM3220F_EVAL\List\Tilt.lst                               #
#    Object file  =  F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\S #
#                    TM3220F_EVAL\Obj\Tilt.o                                  #
#                                                                             #
#                                                                             #
###############################################################################

F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\Tilt.c
      1          
      2          #include "Tilt.h"
      3          #include "main.h"
      4          #include "Log.h"
      5          #include "Memory.h"
      6          #include "Voice.h"
      7          #include <math.h>			// atan
      8          #include <stdlib.h>		// abs 
      9          

   \                                 In section .bss, align 4
     10          struct _Tilt TiltInfo;
   \                     TiltInfo:
   \   00000000                      DS8 24
     11          

   \                                 In section .bss, align 4
     12          s16 Tilt_BufferX[100], Tilt_BufferY[100];
   \                     Tilt_BufferX:
   \   00000000                      DS8 200

   \                                 In section .bss, align 4
   \                     Tilt_BufferY:
   \   00000000                      DS8 200

   \                                 In section .bss, align 2
     13          u16 Tilt_BufferCount;
   \                     Tilt_BufferCount:
   \   00000000                      DS8 2
     14          

   \                                 In section .text, align 2, keep-with-next
     15          u8 MEMS_WhoAmI(void)
     16          {
   \                     MEMS_WhoAmI:
   \   00000000   10B5               PUSH     {R4,LR}
     17                // 0x32 µ¥ÀÌÅÍ°¡ ³ª¿À¸é Á¤»ó 
     18          	u8 Result ;
     19          	
     20          	TILT_CS_LOW();
   \   00000002   4FF48051           MOV      R1,#+4096
   \   00000006   ........           LDR.W    R0,??DataTable8  ;; 0x40020400
   \   0000000A   ........           BL       GPIO_ResetBits
     21          	
     22          	sFLASH_SendByte(0x8f);        // Read / WhoAmI ÄÚµå Àü¼Û
   \   0000000E   8F20               MOVS     R0,#+143
   \   00000010   ........           BL       sFLASH_SendByte
     23          	    
     24          	Result = sFLASH_SendByte(sFLASH_DUMMY_BYTE);    
   \   00000014   A520               MOVS     R0,#+165
   \   00000016   ........           BL       sFLASH_SendByte
   \   0000001A   0400               MOVS     R4,R0
     25                
     26          	TILT_CS_HIGH(); 
   \   0000001C   4FF48051           MOV      R1,#+4096
   \   00000020   ........           LDR.W    R0,??DataTable8  ;; 0x40020400
   \   00000024   ........           BL       GPIO_SetBits
     27          	return Result;
   \   00000028   2000               MOVS     R0,R4
   \   0000002A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   10BD               POP      {R4,PC}          ;; return
     28          }
     29          
     30          //////////////////////////////////////////////////
     31          //
     32          //  - LIS33DLH °ª ¹üÀ§
     33          //
     34          //  350mg 0x15E0
     35          //  1g    0x4000		16384
     36          // -350mg 0xEA20
     37          // -1g    0xC000		-16384
     38          
     39          

   \                                 In section .text, align 2, keep-with-next
     40          s32 CalDeg(s16 a, s16 b)		//°¢µµ °è»ê
     41          {
   \                     CalDeg:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0800               MOVS     R0,R1
     42          	s32   result;
     43          	float Deg;
     44          
     45             if(a > 10230)         a = 10230;
   \   00000006   42F2F771           MOVW     R1,#+10231
   \   0000000A   24B2               SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000000C   8C42               CMP      R4,R1
   \   0000000E   02DB               BLT.N    ??CalDeg_0
   \   00000010   42F2F674           MOVW     R4,#+10230
   \   00000014   06E0               B.N      ??CalDeg_1
     46             else if (a < -10230)  a = -10230;
   \                     ??CalDeg_0:
   \   00000016   ........           LDR.W    R1,??DataTable8_1  ;; 0xffffd80a
   \   0000001A   24B2               SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000001C   8C42               CMP      R4,R1
   \   0000001E   01DA               BGE.N    ??CalDeg_1
   \   00000020   ........           LDR.W    R4,??DataTable8_1  ;; 0xffffd80a
     47             
     48             if(b > 10230)         b = 10230;
   \                     ??CalDeg_1:
   \   00000024   42F2F771           MOVW     R1,#+10231
   \   00000028   00B2               SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000002A   8842               CMP      R0,R1
   \   0000002C   02DB               BLT.N    ??CalDeg_2
   \   0000002E   42F2F670           MOVW     R0,#+10230
   \   00000032   06E0               B.N      ??CalDeg_3
     49             else if (b < -10230)  b = -10230;
   \                     ??CalDeg_2:
   \   00000034   ........           LDR.W    R1,??DataTable8_1  ;; 0xffffd80a
   \   00000038   00B2               SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000003A   8842               CMP      R0,R1
   \   0000003C   01DA               BGE.N    ??CalDeg_3
   \   0000003E   ........           LDR.W    R0,??DataTable8_1  ;; 0xffffd80a
     50          
     51             if(a != 0) {   
   \                     ??CalDeg_3:
   \   00000042   24B2               SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000044   002C               CMP      R4,#+0
   \   00000046   1BD0               BEQ.N    ??CalDeg_4
     52               Deg = (float)b/(float)a;
   \   00000048   00B2               SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000004A   ........           BL       __aeabi_i2f
   \   0000004E   0500               MOVS     R5,R0
   \   00000050   24B2               SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000052   2000               MOVS     R0,R4
   \   00000054   ........           BL       __aeabi_i2f
   \   00000058   0100               MOVS     R1,R0
   \   0000005A   2800               MOVS     R0,R5
   \   0000005C   ........           BL       __aeabi_fdiv
   \   00000060   0200               MOVS     R2,R0
     53               Deg = (float)(atan(Deg)*(180/3.141592));  
   \   00000062   1000               MOVS     R0,R2
   \   00000064   ........           BL       __aeabi_f2d
   \   00000068   ........           BL       atan
   \   0000006C   ........           LDR.W    R2,??DataTable8_2  ;; 0x7e61df46
   \   00000070   ........           LDR.W    R3,??DataTable8_3  ;; 0x404ca5dc
   \   00000074   ........           BL       __aeabi_dmul
   \   00000078   ........           BL       __aeabi_d2f
   \   0000007C   0200               MOVS     R2,R0
   \   0000007E   00E0               B.N      ??CalDeg_5
     54             }  
     55             else {
     56               Deg = 0;
   \                     ??CalDeg_4:
   \   00000080   0022               MOVS     R2,#+0
     57             }
     58             
     59             if(Deg < 0){
   \                     ??CalDeg_5:
   \   00000082   1000               MOVS     R0,R2
   \   00000084   0021               MOVS     R1,#+0
   \   00000086   ........           BL       __aeabi_cfcmple
   \   0000008A   06D2               BCS.N    ??CalDeg_6
     60             	Deg =  -90 - Deg;
   \   0000008C   ........           LDR.W    R0,??DataTable8_4  ;; 0xc2b40000
   \   00000090   1100               MOVS     R1,R2
   \   00000092   ........           BL       __aeabi_fsub
   \   00000096   0200               MOVS     R2,R0
   \   00000098   0CE0               B.N      ??CalDeg_7
     61             }
     62             else if(Deg == 0)
   \                     ??CalDeg_6:
   \   0000009A   1000               MOVS     R0,R2
   \   0000009C   0021               MOVS     R1,#+0
   \   0000009E   ........           BL       __aeabi_cfcmpeq
   \   000000A2   01D1               BNE.N    ??CalDeg_8
     63             {
     64               Deg = 0;
   \   000000A4   0022               MOVS     R2,#+0
   \   000000A6   05E0               B.N      ??CalDeg_7
     65             }
     66             else{
     67              Deg = 90 - Deg;
   \                     ??CalDeg_8:
   \   000000A8   ........           LDR.W    R0,??DataTable8_5  ;; 0x42b40000
   \   000000AC   1100               MOVS     R1,R2
   \   000000AE   ........           BL       __aeabi_fsub
   \   000000B2   0200               MOVS     R2,R0
     68             }
     69             result = (vs32)Deg;
   \                     ??CalDeg_7:
   \   000000B4   1000               MOVS     R0,R2
   \   000000B6   ........           BL       __aeabi_f2iz
     70             
     71             return result;
   \   000000BA   32BD               POP      {R1,R4,R5,PC}    ;; return
     72          }
     73          
     74          

   \                                 In section .text, align 2, keep-with-next
     75          void MEMS_Config(void)
     76          {
   \                     MEMS_Config:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   83B0               SUB      SP,SP,#+12
     77          	// TILT CHIP ENABLE ¼¼ÆÃ
     78             GPIO_InitTypeDef GPIO_InitStructure;
     79              /*!< Configure Tilt pin in output pushpull mode ********************/
     80            GPIO_InitStructure.GPIO_Pin = TILT_CS_PIN;
   \   00000004   4FF48050           MOV      R0,#+4096
   \   00000008   0090               STR      R0,[SP, #+0]
     81            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   0000000A   0120               MOVS     R0,#+1
   \   0000000C   8DF80400           STRB     R0,[SP, #+4]
     82            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   8DF80600           STRB     R0,[SP, #+6]
     83            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000016   0220               MOVS     R0,#+2
   \   00000018   8DF80500           STRB     R0,[SP, #+5]
     84            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   0000001C   0020               MOVS     R0,#+0
   \   0000001E   8DF80700           STRB     R0,[SP, #+7]
     85            GPIO_Init(TILT_CS_GPIO_PORT, &GPIO_InitStructure);
   \   00000022   00A9               ADD      R1,SP,#+0
   \   00000024   ........           LDR.W    R0,??DataTable8  ;; 0x40020400
   \   00000028   ........           BL       GPIO_Init
     86          
     87          }
   \   0000002C   07BD               POP      {R0-R2,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
     88          void MEMS_Init(void)
     89          {
   \                     MEMS_Init:
   \   00000000   80B5               PUSH     {R7,LR}
     90          	
     91          /*	WriteMEMS(0x202F);    // CTRL_REG1
     92          	WriteMEMS(0x2100);    // CTRL_REG2
     93          	WriteMEMS(0x2200);    // CTRL_REG3	
     94          	WriteMEMS(0x2300);    // CTRL_REG4   
     95          	WriteMEMS(0x2400);    // CTRL_REG5   */
     96          /*    WriteMEMS(0x203f);    // CTRL_REG1
     97              WriteMEMS(0x213C);    // CTRL_REG2
     98              WriteMEMS(0x2236);    // CTRL_REG3
     99              WriteMEMS(0x2300);    // CTRL_REG4*/
    100          	
    101          	WriteMEMS(0x203F);    // CTRL_REG1
   \   00000002   42F23F00           MOVW     R0,#+8255
   \   00000006   ........           BL       WriteMEMS
    102               Delay(1);
   \   0000000A   0120               MOVS     R0,#+1
   \   0000000C   ........           BL       Delay
    103          	WriteMEMS(0x2100);    // CTRL_REG2
   \   00000010   4FF40450           MOV      R0,#+8448
   \   00000014   ........           BL       WriteMEMS
    104               Delay(1);
   \   00000018   0120               MOVS     R0,#+1
   \   0000001A   ........           BL       Delay
    105          	WriteMEMS(0x2212);    // CTRL_REG3
   \   0000001E   42F21220           MOVW     R0,#+8722
   \   00000022   ........           BL       WriteMEMS
    106               Delay(1);     
   \   00000026   0120               MOVS     R0,#+1
   \   00000028   ........           BL       Delay
    107          	WriteMEMS(0x2300);    // CTRL_REG4   	
   \   0000002C   4FF40C50           MOV      R0,#+8960
   \   00000030   ........           BL       WriteMEMS
    108               Delay(1);     
   \   00000034   0120               MOVS     R0,#+1
   \   00000036   ........           BL       Delay
    109          	WriteMEMS(0x2400);    // CTRL_REG5
   \   0000003A   4FF41050           MOV      R0,#+9216
   \   0000003E   ........           BL       WriteMEMS
    110               Delay(1);     
   \   00000042   0120               MOVS     R0,#+1
   \   00000044   ........           BL       Delay
    111          
    112          	WriteMEMS(0x203F);    // CTRL_REG1
   \   00000048   42F23F00           MOVW     R0,#+8255
   \   0000004C   ........           BL       WriteMEMS
    113          	WriteMEMS(0x2100);    // CTRL_REG2
   \   00000050   4FF40450           MOV      R0,#+8448
   \   00000054   ........           BL       WriteMEMS
    114          	WriteMEMS(0x2212);    // CTRL_REG3
   \   00000058   42F21220           MOVW     R0,#+8722
   \   0000005C   ........           BL       WriteMEMS
    115          	WriteMEMS(0x2300);    // CTRL_REG4   	
   \   00000060   4FF40C50           MOV      R0,#+8960
   \   00000064   ........           BL       WriteMEMS
    116          	WriteMEMS(0x2400);    // CTRL_REG5
   \   00000068   4FF41050           MOV      R0,#+9216
   \   0000006C   ........           BL       WriteMEMS
    117          #ifdef DEBUG_LOG 		
    118          	//------------------------ MEMS  Å×½ºÆ® --------------------------------    
    119          	Tilt_Check = MEMS_WhoAmI();
    120                
    121          	if( Tilt_Check == 0x32)
    122          	{
    123          		// LOG -------------------------------------------------------------------------
    124          		if( ( LOGWRITE & LOG_BASIC ) | ( LOGWRITE & LOG_TILT ))                       
    125          		{
    126          			sprintf((char*)Buffer,"TILT CHECK OK \r\n "); 
    127          			Write_Log(Buffer, NORMAL_LOG);
    128          		}            
    129          		// -----------------------------------------------------------------------------		
    130          	}
    131          	else
    132          	{
    133          		// LOG -------------------------------------------------------------------------
    134          		if( ( LOGWRITE & LOG_BASIC ) | ( LOGWRITE & LOG_TILT ))                         
    135          		{
    136          			sprintf((char*)Buffer,"TILT CHECK FAIL %x \r\n ",Tilt_Check ); 
    137          			Write_Log(Buffer, FAIL_LOG);
    138          		}            
    139          		// -----------------------------------------------------------------------------			
    140          	}
    141          #endif
    142          
    143          	//--------------------------------------------------------------------------		    
    144          
    145          }
   \   00000070   01BD               POP      {R0,PC}          ;; return
    146          /****************************************************************************
    147          SPI ROUTINE
    148          ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    149          u16 ReadMEMS(u16 add)
    150          {
   \                     ReadMEMS:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    151          	u16 temp;
    152          	
    153          	add &= 0xFF00;
   \   00000004   14F47F44           ANDS     R4,R4,#0xFF00
    154               TILT_CS_LOW();
   \   00000008   4FF48051           MOV      R1,#+4096
   \   0000000C   ........           LDR.W    R0,??DataTable8  ;; 0x40020400
   \   00000010   ........           BL       GPIO_ResetBits
    155               
    156               sFLASH_SendByte((( add >> 8 ) & 0xff) | 0x80 );        // Read / 
   \   00000014   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000016   200A               LSRS     R0,R4,#+8
   \   00000018   50F08000           ORRS     R0,R0,#0x80
   \   0000001C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   ........           BL       sFLASH_SendByte
    157               
    158               temp = sFLASH_SendByte( add & 0xff );  
   \   00000022   2000               MOVS     R0,R4
   \   00000024   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   ........           BL       sFLASH_SendByte
   \   0000002A   0400               MOVS     R4,R0
    159               
    160               TILT_CS_HIGH();
   \   0000002C   4FF48051           MOV      R1,#+4096
   \   00000030   ........           LDR.W    R0,??DataTable8  ;; 0x40020400
   \   00000034   ........           BL       GPIO_SetBits
    161          	return temp;
   \   00000038   2000               MOVS     R0,R4
   \   0000003A   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003C   10BD               POP      {R4,PC}          ;; return
    162          }
    163          

   \                                 In section .text, align 2, keep-with-next
    164          u16 WriteMEMS(u16 add)
    165          {
   \                     WriteMEMS:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    166          	u16 temp;
    167          	
    168               TILT_CS_LOW();
   \   00000004   4FF48051           MOV      R1,#+4096
   \   00000008   ........           LDR.W    R0,??DataTable8  ;; 0x40020400
   \   0000000C   ........           BL       GPIO_ResetBits
    169               sFLASH_SendByte((( add >> 8 ) & 0x7f)  );        // Read / 
   \   00000010   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000012   2012               ASRS     R0,R4,#+8
   \   00000014   10F07F00           ANDS     R0,R0,#0x7F
   \   00000018   ........           BL       sFLASH_SendByte
    170               
    171               temp = sFLASH_SendByte( add & 0xff );  
   \   0000001C   2000               MOVS     R0,R4
   \   0000001E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   ........           BL       sFLASH_SendByte
   \   00000024   0400               MOVS     R4,R0
    172               
    173               TILT_CS_HIGH();
   \   00000026   4FF48051           MOV      R1,#+4096
   \   0000002A   ........           LDR.W    R0,??DataTable8  ;; 0x40020400
   \   0000002E   ........           BL       GPIO_SetBits
    174               
    175          	return temp;
   \   00000032   2000               MOVS     R0,R4
   \   00000034   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000036   10BD               POP      {R4,PC}          ;; return
    176          }
    177          

   \                                 In section .text, align 2, keep-with-next
    178          void Tilt_Setting_Reference(void)
    179          {
   \                     Tilt_Setting_Reference:
   \   00000000   10B5               PUSH     {R4,LR}
    180          	if ((abs(TiltInfo.x) >= abs(TiltInfo.y)) && (abs(TiltInfo.x) >= abs(TiltInfo.z))) {
   \   00000002   ........           LDR.W    R0,??DataTable8_6
   \   00000006   B0F90000           LDRSH    R0,[R0, #+0]
   \   0000000A   ........           BL       abs
   \   0000000E   0400               MOVS     R4,R0
   \   00000010   ........           LDR.W    R0,??DataTable8_6
   \   00000014   B0F90200           LDRSH    R0,[R0, #+2]
   \   00000018   ........           BL       abs
   \   0000001C   8442               CMP      R4,R0
   \   0000001E   40DB               BLT.N    ??Tilt_Setting_Reference_0
   \   00000020   ........           LDR.W    R0,??DataTable8_6
   \   00000024   B0F90000           LDRSH    R0,[R0, #+0]
   \   00000028   ........           BL       abs
   \   0000002C   0400               MOVS     R4,R0
   \   0000002E   ........           LDR.W    R0,??DataTable8_6
   \   00000032   B0F90400           LDRSH    R0,[R0, #+4]
   \   00000036   ........           BL       abs
   \   0000003A   8442               CMP      R4,R0
   \   0000003C   31DB               BLT.N    ??Tilt_Setting_Reference_0
    181          		SFLASH_Memory.Tilt_Reference  = 'X';
   \   0000003E   ........           LDR.W    R0,??DataTable8_7
   \   00000042   5821               MOVS     R1,#+88
   \   00000044   80F87010           STRB     R1,[R0, #+112]
    182          		SFLASH_Memory.TiltRefY = CalDeg(TiltInfo.y,TiltInfo.x);
   \   00000048   ........           LDR.W    R0,??DataTable8_6
   \   0000004C   B0F90010           LDRSH    R1,[R0, #+0]
   \   00000050   ........           LDR.W    R0,??DataTable8_6
   \   00000054   B0F90200           LDRSH    R0,[R0, #+2]
   \   00000058   ........           BL       CalDeg
   \   0000005C   ........           LDR.W    R1,??DataTable8_7
   \   00000060   C1F87500           STR      R0,[R1, #+117]
    183          		SFLASH_Memory.TiltRefX = CalDeg(TiltInfo.z,TiltInfo.x);			
   \   00000064   ........           LDR.W    R0,??DataTable8_6
   \   00000068   B0F90010           LDRSH    R1,[R0, #+0]
   \   0000006C   ........           LDR.W    R0,??DataTable8_6
   \   00000070   B0F90400           LDRSH    R0,[R0, #+4]
   \   00000074   ........           BL       CalDeg
   \   00000078   ........           LDR.W    R1,??DataTable8_7
   \   0000007C   C1F87100           STR      R0,[R1, #+113]
    184          		SFLASH_Memory.EventRefX = TiltInfo.z;
   \   00000080   ........           LDR.W    R0,??DataTable8_7
   \   00000084   ........           LDR.W    R1,??DataTable8_6
   \   00000088   B1F90410           LDRSH    R1,[R1, #+4]
   \   0000008C   C0F87910           STR      R1,[R0, #+121]
    185          		SFLASH_Memory.EventRefY = TiltInfo.y;
   \   00000090   ........           LDR.W    R0,??DataTable8_7
   \   00000094   ........           LDR.W    R1,??DataTable8_6
   \   00000098   B1F90210           LDRSH    R1,[R1, #+2]
   \   0000009C   C0F87D10           STR      R1,[R0, #+125]
   \   000000A0   9EE0               B.N      ??Tilt_Setting_Reference_1
    186          	}
    187          	else if ((abs(TiltInfo.y) >= abs(TiltInfo.x)) && (abs(TiltInfo.y) >= abs(TiltInfo.z))) {
   \                     ??Tilt_Setting_Reference_0:
   \   000000A2   ........           LDR.W    R0,??DataTable8_6
   \   000000A6   B0F90200           LDRSH    R0,[R0, #+2]
   \   000000AA   ........           BL       abs
   \   000000AE   0400               MOVS     R4,R0
   \   000000B0   ........           LDR.W    R0,??DataTable8_6
   \   000000B4   B0F90000           LDRSH    R0,[R0, #+0]
   \   000000B8   ........           BL       abs
   \   000000BC   8442               CMP      R4,R0
   \   000000BE   40DB               BLT.N    ??Tilt_Setting_Reference_2
   \   000000C0   ........           LDR.W    R0,??DataTable8_6
   \   000000C4   B0F90200           LDRSH    R0,[R0, #+2]
   \   000000C8   ........           BL       abs
   \   000000CC   0400               MOVS     R4,R0
   \   000000CE   ........           LDR.W    R0,??DataTable8_6
   \   000000D2   B0F90400           LDRSH    R0,[R0, #+4]
   \   000000D6   ........           BL       abs
   \   000000DA   8442               CMP      R4,R0
   \   000000DC   31DB               BLT.N    ??Tilt_Setting_Reference_2
    188          		SFLASH_Memory.Tilt_Reference  = 'Y';
   \   000000DE   ........           LDR.W    R0,??DataTable8_7
   \   000000E2   5921               MOVS     R1,#+89
   \   000000E4   80F87010           STRB     R1,[R0, #+112]
    189          		SFLASH_Memory.TiltRefY = CalDeg(TiltInfo.x,TiltInfo.y);
   \   000000E8   ........           LDR.W    R0,??DataTable8_6
   \   000000EC   B0F90210           LDRSH    R1,[R0, #+2]
   \   000000F0   ........           LDR.W    R0,??DataTable8_6
   \   000000F4   B0F90000           LDRSH    R0,[R0, #+0]
   \   000000F8   ........           BL       CalDeg
   \   000000FC   ........           LDR.W    R1,??DataTable8_7
   \   00000100   C1F87500           STR      R0,[R1, #+117]
    190          		SFLASH_Memory.TiltRefX = CalDeg(TiltInfo.z,TiltInfo.y);
   \   00000104   ........           LDR.W    R0,??DataTable8_6
   \   00000108   B0F90210           LDRSH    R1,[R0, #+2]
   \   0000010C   ........           LDR.W    R0,??DataTable8_6
   \   00000110   B0F90400           LDRSH    R0,[R0, #+4]
   \   00000114   ........           BL       CalDeg
   \   00000118   ........           LDR.W    R1,??DataTable8_7
   \   0000011C   C1F87100           STR      R0,[R1, #+113]
    191          		
    192          		SFLASH_Memory.EventRefX = TiltInfo.z;
   \   00000120   ........           LDR.W    R0,??DataTable8_7
   \   00000124   ........           LDR.W    R1,??DataTable8_6
   \   00000128   B1F90410           LDRSH    R1,[R1, #+4]
   \   0000012C   C0F87910           STR      R1,[R0, #+121]
    193          		SFLASH_Memory.EventRefY = TiltInfo.x;		
   \   00000130   ........           LDR.W    R0,??DataTable8_7
   \   00000134   ........           LDR.W    R1,??DataTable8_6
   \   00000138   B1F90010           LDRSH    R1,[R1, #+0]
   \   0000013C   C0F87D10           STR      R1,[R0, #+125]
   \   00000140   4EE0               B.N      ??Tilt_Setting_Reference_1
    194          	}  
    195          	else if ((abs(TiltInfo.z) >= abs(TiltInfo.y)) && (abs(TiltInfo.z) >= abs(TiltInfo.x))) {
   \                     ??Tilt_Setting_Reference_2:
   \   00000142   ........           LDR.W    R0,??DataTable8_6
   \   00000146   B0F90400           LDRSH    R0,[R0, #+4]
   \   0000014A   ........           BL       abs
   \   0000014E   0400               MOVS     R4,R0
   \   00000150   ........           LDR.W    R0,??DataTable8_6
   \   00000154   B0F90200           LDRSH    R0,[R0, #+2]
   \   00000158   ........           BL       abs
   \   0000015C   8442               CMP      R4,R0
   \   0000015E   3FDB               BLT.N    ??Tilt_Setting_Reference_1
   \   00000160   ........           LDR.W    R0,??DataTable8_6
   \   00000164   B0F90400           LDRSH    R0,[R0, #+4]
   \   00000168   ........           BL       abs
   \   0000016C   0400               MOVS     R4,R0
   \   0000016E   ........           LDR.W    R0,??DataTable8_6
   \   00000172   B0F90000           LDRSH    R0,[R0, #+0]
   \   00000176   ........           BL       abs
   \   0000017A   8442               CMP      R4,R0
   \   0000017C   30DB               BLT.N    ??Tilt_Setting_Reference_1
    196          		SFLASH_Memory.Tilt_Reference  = 'Z';
   \   0000017E   ........           LDR.W    R0,??DataTable8_7
   \   00000182   5A21               MOVS     R1,#+90
   \   00000184   80F87010           STRB     R1,[R0, #+112]
    197          		SFLASH_Memory.TiltRefX = CalDeg(TiltInfo.x,TiltInfo.z);
   \   00000188   ........           LDR.W    R0,??DataTable8_6
   \   0000018C   B0F90410           LDRSH    R1,[R0, #+4]
   \   00000190   ........           LDR.W    R0,??DataTable8_6
   \   00000194   B0F90000           LDRSH    R0,[R0, #+0]
   \   00000198   ........           BL       CalDeg
   \   0000019C   ........           LDR.W    R1,??DataTable8_7
   \   000001A0   C1F87100           STR      R0,[R1, #+113]
    198          		SFLASH_Memory.TiltRefY = CalDeg(TiltInfo.y,TiltInfo.z);
   \   000001A4   ........           LDR.W    R0,??DataTable8_6
   \   000001A8   B0F90410           LDRSH    R1,[R0, #+4]
   \   000001AC   ........           LDR.W    R0,??DataTable8_6
   \   000001B0   B0F90200           LDRSH    R0,[R0, #+2]
   \   000001B4   ........           BL       CalDeg
   \   000001B8   ........           LDR.W    R1,??DataTable8_7
   \   000001BC   C1F87500           STR      R0,[R1, #+117]
    199          		SFLASH_Memory.EventRefX = TiltInfo.x;
   \   000001C0   ........           LDR.W    R0,??DataTable8_7
   \   000001C4   ........           LDR.W    R1,??DataTable8_6
   \   000001C8   B1F90010           LDRSH    R1,[R1, #+0]
   \   000001CC   C0F87910           STR      R1,[R0, #+121]
    200          		SFLASH_Memory.EventRefY = TiltInfo.y;
   \   000001D0   ........           LDR.W    R0,??DataTable8_7
   \   000001D4   ........           LDR.W    R1,??DataTable8_6
   \   000001D8   B1F90210           LDRSH    R1,[R1, #+2]
   \   000001DC   C0F87D10           STR      R1,[R0, #+125]
    201          	}  	
    202          	// SFLASH¿¡ ±â·ÏÇÑ´Ù.
    203          	
    204          				
    205          }
   \                     ??Tilt_Setting_Reference_1:
   \   000001E0   10BD               POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    206          void LIS331DLH_Read(u8* pBuffer, u8 ReadAddr, u16 NumByteToRead)
    207          {  
   \                     LIS331DLH_Read:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
    208               if(NumByteToRead >1)
   \   00000008   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000000A   022E               CMP      R6,#+2
   \   0000000C   02D3               BCC.N    ??LIS331DLH_Read_0
    209                    ReadAddr |= 0xC0;
   \   0000000E   55F0C005           ORRS     R5,R5,#0xC0
   \   00000012   01E0               B.N      ??LIS331DLH_Read_1
    210               else
    211                    ReadAddr |= 0x80;
   \                     ??LIS331DLH_Read_0:
   \   00000014   55F08005           ORRS     R5,R5,#0x80
    212               
    213               TILT_CS_LOW();
   \                     ??LIS331DLH_Read_1:
   \   00000018   4FF48051           MOV      R1,#+4096
   \   0000001C   ....               LDR.N    R0,??DataTable8  ;; 0x40020400
   \   0000001E   ........           BL       GPIO_ResetBits
    214               
    215               sFLASH_SendByte(ReadAddr);
   \   00000022   2800               MOVS     R0,R5
   \   00000024   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   ........           BL       sFLASH_SendByte
   \   0000002A   05E0               B.N      ??LIS331DLH_Read_2
    216               
    217               while(NumByteToRead >=1)
    218               {
    219                    *pBuffer=sFLASH_SendByte(0x00);
   \                     ??LIS331DLH_Read_3:
   \   0000002C   0020               MOVS     R0,#+0
   \   0000002E   ........           BL       sFLASH_SendByte
   \   00000032   2070               STRB     R0,[R4, #+0]
    220                    NumByteToRead--;
   \   00000034   761E               SUBS     R6,R6,#+1
    221                    pBuffer++;
   \   00000036   641C               ADDS     R4,R4,#+1
    222               }
   \                     ??LIS331DLH_Read_2:
   \   00000038   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000003A   012E               CMP      R6,#+1
   \   0000003C   F6D2               BCS.N    ??LIS331DLH_Read_3
    223               
    224               TILT_CS_HIGH();  
   \   0000003E   4FF48051           MOV      R1,#+4096
   \   00000042   ....               LDR.N    R0,??DataTable8  ;; 0x40020400
   \   00000044   ........           BL       GPIO_SetBits
    225          }
   \   00000048   70BD               POP      {R4-R6,PC}       ;; return
    226          

   \                                 In section .text, align 2, keep-with-next
    227          void Tilt_Check(void)
    228          {
   \                     Tilt_Check:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   83B0               SUB      SP,SP,#+12
    229          	static u16 Tilt_Timer = 0;
    230          	u8 i;
    231          	s16 TiltX,TiltY;
    232          	s32 AvrTiltX, AvrTiltY;
    233               s32 Tx, Ty;
                          ^
Warning[Pe550]: variable "Tx" was set but never used

       s32 Tx, Ty;
               ^
"F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\Tilt.c",233  Warning[Pe550]: 
          variable "Ty" was set but never used
    234          	u8 temp; 
    235          	u8 TilteBuffer[6];
    236          	// ±âº»ÀûÀÎ10ms ´ÜÀ§·Î ÀÐ±â
    237          	if(!CheckTimeOver(50,Tilt_Timer))		
   \   00000004   ....               LDR.N    R0,??DataTable8_8
   \   00000006   0188               LDRH     R1,[R0, #+0]
   \   00000008   3220               MOVS     R0,#+50
   \   0000000A   ........           BL       CheckTimeOver
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   00F06481           BEQ.W    ??Tilt_Check_0
    238          		return;      
    239          	Tilt_Timer = MS_TIMER;  	// Å¸ÀÌ¸Ó 5		
   \                     ??Tilt_Check_1:
   \   00000014   ....               LDR.N    R0,??DataTable8_9  ;; 0x40000c00
   \   00000016   ........           BL       TIM_GetCounter
   \   0000001A   ....               LDR.N    R1,??DataTable8_8
   \   0000001C   0880               STRH     R0,[R1, #+0]
    240               //	temp = (ReadMEMS(0x2700));		// »óÅÂ Á¤º¸¸¦ ÀÐÀºÈÄ¿¡ µ¥ÀÌÅÍ°¡ ÀÖÀ¸¸é ÀÐ±â
    241               //	if(temp != 0xff)return;
    242               
    243          	
    244          	temp = (ReadMEMS(0x2700))& 0x00ff;		// »óÅÂ Á¤º¸¸¦ ÀÐÀºÈÄ¿¡ µ¥ÀÌÅÍ°¡ ÀÖÀ¸¸é ÀÐ±â
   \   0000001E   4FF41C50           MOV      R0,#+9984
   \   00000022   ........           BL       ReadMEMS
    245          	if (!(temp & 0x08))  return;  
   \   00000026   0007               LSLS     R0,R0,#+28
   \   00000028   40F15881           BPL.W    ??Tilt_Check_0
    246          	LIS331DLH_Read(TilteBuffer,0x28,6);
   \                     ??Tilt_Check_2:
   \   0000002C   0622               MOVS     R2,#+6
   \   0000002E   2821               MOVS     R1,#+40
   \   00000030   00A8               ADD      R0,SP,#+0
   \   00000032   ........           BL       LIS331DLH_Read
    247               
    248          	TiltInfo.x = TiltInfo.y = TiltInfo.z =0;
   \   00000036   0020               MOVS     R0,#+0
   \   00000038   ....               LDR.N    R1,??DataTable8_6
   \   0000003A   8880               STRH     R0,[R1, #+4]
   \   0000003C   ....               LDR.N    R1,??DataTable8_6
   \   0000003E   4880               STRH     R0,[R1, #+2]
   \   00000040   ....               LDR.N    R1,??DataTable8_6
   \   00000042   0880               STRH     R0,[R1, #+0]
    249          	TiltInfo.x  = (ReadMEMS(0x2800))& 0x00ff;
   \   00000044   4FF42050           MOV      R0,#+10240
   \   00000048   ........           BL       ReadMEMS
   \   0000004C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   ....               LDR.N    R1,??DataTable8_6
   \   00000050   0880               STRH     R0,[R1, #+0]
    250          	TiltInfo.x |= ((ReadMEMS(0x2900))& 0x00ff) << 8;	
   \   00000052   4FF42450           MOV      R0,#+10496
   \   00000056   ........           BL       ReadMEMS
   \   0000005A   ....               LDR.N    R1,??DataTable8_6
   \   0000005C   0988               LDRH     R1,[R1, #+0]
   \   0000005E   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   00000062   ....               LDR.N    R1,??DataTable8_6
   \   00000064   0880               STRH     R0,[R1, #+0]
    251          	
    252          	TiltInfo.y  = (ReadMEMS(0x2A00))& 0x00ff;	
   \   00000066   4FF42850           MOV      R0,#+10752
   \   0000006A   ........           BL       ReadMEMS
   \   0000006E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000070   ....               LDR.N    R1,??DataTable8_6
   \   00000072   4880               STRH     R0,[R1, #+2]
    253          	TiltInfo.y |= ((ReadMEMS(0x2B00))& 0x00ff) << 8;
   \   00000074   4FF42C50           MOV      R0,#+11008
   \   00000078   ........           BL       ReadMEMS
   \   0000007C   ....               LDR.N    R1,??DataTable8_6
   \   0000007E   4988               LDRH     R1,[R1, #+2]
   \   00000080   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   00000084   ....               LDR.N    R1,??DataTable8_6
   \   00000086   4880               STRH     R0,[R1, #+2]
    254          	
    255          	TiltInfo.z  = (ReadMEMS(0x2C00))& 0x00ff;
   \   00000088   4FF43050           MOV      R0,#+11264
   \   0000008C   ........           BL       ReadMEMS
   \   00000090   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000092   ....               LDR.N    R1,??DataTable8_6
   \   00000094   8880               STRH     R0,[R1, #+4]
    256          	TiltInfo.z |= ((ReadMEMS(0x2D00))& 0x00ff) << 8; 
   \   00000096   4FF43450           MOV      R0,#+11520
   \   0000009A   ........           BL       ReadMEMS
   \   0000009E   ....               LDR.N    R1,??DataTable8_6
   \   000000A0   8988               LDRH     R1,[R1, #+4]
   \   000000A2   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   000000A6   ....               LDR.N    R1,??DataTable8_6
   \   000000A8   8880               STRH     R0,[R1, #+4]
    257               
    258               switch(SFLASH_Memory.Tilt_Reference)
   \   000000AA   ....               LDR.N    R0,??DataTable8_7
   \   000000AC   90F87000           LDRB     R0,[R0, #+112]
   \   000000B0   5828               CMP      R0,#+88
   \   000000B2   05D0               BEQ.N    ??Tilt_Check_3
   \   000000B4   C0F09A80           BCC.W    ??Tilt_Check_4
   \   000000B8   5A28               CMP      R0,#+90
   \   000000BA   63D0               BEQ.N    ??Tilt_Check_5
   \   000000BC   31D3               BCC.N    ??Tilt_Check_6
   \   000000BE   95E0               B.N      ??Tilt_Check_4
    259               {         
    260                    case 'X' : 
    261                    TiltInfo.OrginY = CalDeg(TiltInfo.y,TiltInfo.x);
   \                     ??Tilt_Check_3:
   \   000000C0   ....               LDR.N    R0,??DataTable8_6
   \   000000C2   B0F90010           LDRSH    R1,[R0, #+0]
   \   000000C6   ....               LDR.N    R0,??DataTable8_6
   \   000000C8   B0F90200           LDRSH    R0,[R0, #+2]
   \   000000CC   ........           BL       CalDeg
   \   000000D0   ....               LDR.N    R1,??DataTable8_6
   \   000000D2   C860               STR      R0,[R1, #+12]
    262                    TiltInfo.OrginX = CalDeg(TiltInfo.z,TiltInfo.x);
   \   000000D4   ....               LDR.N    R0,??DataTable8_6
   \   000000D6   B0F90010           LDRSH    R1,[R0, #+0]
   \   000000DA   ....               LDR.N    R0,??DataTable8_6
   \   000000DC   B0F90400           LDRSH    R0,[R0, #+4]
   \   000000E0   ........           BL       CalDeg
   \   000000E4   ....               LDR.N    R1,??DataTable8_6
   \   000000E6   8860               STR      R0,[R1, #+8]
    263                    
    264                    TiltX  = TiltInfo.OrginX - SFLASH_Memory.TiltRefX;
   \   000000E8   ....               LDR.N    R0,??DataTable8_6
   \   000000EA   8068               LDR      R0,[R0, #+8]
   \   000000EC   ....               LDR.N    R1,??DataTable8_7
   \   000000EE   D1F87110           LDR      R1,[R1, #+113]
   \   000000F2   441A               SUBS     R4,R0,R1
    265                    TiltY  = TiltInfo.OrginY - SFLASH_Memory.TiltRefY;
   \   000000F4   ....               LDR.N    R0,??DataTable8_6
   \   000000F6   C068               LDR      R0,[R0, #+12]
   \   000000F8   ....               LDR.N    R1,??DataTable8_7
   \   000000FA   D1F87510           LDR      R1,[R1, #+117]
   \   000000FE   451A               SUBS     R5,R0,R1
    266                    
    267                    TiltInfo.AccelX = TiltInfo.z - SFLASH_Memory.EventRefX;
   \   00000100   ....               LDR.N    R0,??DataTable8_6
   \   00000102   8088               LDRH     R0,[R0, #+4]
   \   00000104   ....               LDR.N    R1,??DataTable8_7
   \   00000106   D1F87910           LDR      R1,[R1, #+121]
   \   0000010A   401A               SUBS     R0,R0,R1
   \   0000010C   ....               LDR.N    R1,??DataTable8_6
   \   0000010E   8882               STRH     R0,[R1, #+20]
    268                    TiltInfo.AccelY = TiltInfo.y - SFLASH_Memory.EventRefY;
   \   00000110   ....               LDR.N    R0,??DataTable8_6
   \   00000112   4088               LDRH     R0,[R0, #+2]
   \   00000114   ....               LDR.N    R1,??DataTable8_7
   \   00000116   D1F87D10           LDR      R1,[R1, #+125]
   \   0000011A   401A               SUBS     R0,R0,R1
   \   0000011C   ....               LDR.N    R1,??DataTable8_6
   \   0000011E   C882               STRH     R0,[R1, #+22]
    269                    break;
   \   00000120   64E0               B.N      ??Tilt_Check_4
    270                    case 'Y' : 
    271                    TiltInfo.OrginY = CalDeg(TiltInfo.x,TiltInfo.y);
   \                     ??Tilt_Check_6:
   \   00000122   ....               LDR.N    R0,??DataTable8_6
   \   00000124   B0F90210           LDRSH    R1,[R0, #+2]
   \   00000128   ....               LDR.N    R0,??DataTable8_6
   \   0000012A   B0F90000           LDRSH    R0,[R0, #+0]
   \   0000012E   ........           BL       CalDeg
   \   00000132   ....               LDR.N    R1,??DataTable8_6
   \   00000134   C860               STR      R0,[R1, #+12]
    272                    TiltInfo.OrginX = CalDeg(TiltInfo.z,TiltInfo.y);
   \   00000136   ....               LDR.N    R0,??DataTable8_6
   \   00000138   B0F90210           LDRSH    R1,[R0, #+2]
   \   0000013C   ....               LDR.N    R0,??DataTable8_6
   \   0000013E   B0F90400           LDRSH    R0,[R0, #+4]
   \   00000142   ........           BL       CalDeg
   \   00000146   ....               LDR.N    R1,??DataTable8_6
   \   00000148   8860               STR      R0,[R1, #+8]
    273                    
    274                    TiltX = TiltInfo.OrginX - SFLASH_Memory.TiltRefX;
   \   0000014A   ....               LDR.N    R0,??DataTable8_6
   \   0000014C   8068               LDR      R0,[R0, #+8]
   \   0000014E   ....               LDR.N    R1,??DataTable8_7
   \   00000150   D1F87110           LDR      R1,[R1, #+113]
   \   00000154   441A               SUBS     R4,R0,R1
    275                    TiltY = TiltInfo.OrginY - SFLASH_Memory.TiltRefY;
   \   00000156   ....               LDR.N    R0,??DataTable8_6
   \   00000158   C068               LDR      R0,[R0, #+12]
   \   0000015A   ....               LDR.N    R1,??DataTable8_7
   \   0000015C   D1F87510           LDR      R1,[R1, #+117]
   \   00000160   451A               SUBS     R5,R0,R1
    276                    
    277                    TiltInfo.AccelX = TiltInfo.z - SFLASH_Memory.EventRefX;
   \   00000162   ....               LDR.N    R0,??DataTable8_6
   \   00000164   8088               LDRH     R0,[R0, #+4]
   \   00000166   ....               LDR.N    R1,??DataTable8_7
   \   00000168   D1F87910           LDR      R1,[R1, #+121]
   \   0000016C   401A               SUBS     R0,R0,R1
   \   0000016E   ....               LDR.N    R1,??DataTable8_6
   \   00000170   8882               STRH     R0,[R1, #+20]
    278                    TiltInfo.AccelY = TiltInfo.x - SFLASH_Memory.EventRefY;
   \   00000172   ....               LDR.N    R0,??DataTable8_6
   \   00000174   0088               LDRH     R0,[R0, #+0]
   \   00000176   ....               LDR.N    R1,??DataTable8_7
   \   00000178   D1F87D10           LDR      R1,[R1, #+125]
   \   0000017C   401A               SUBS     R0,R0,R1
   \   0000017E   ....               LDR.N    R1,??DataTable8_6
   \   00000180   C882               STRH     R0,[R1, #+22]
    279                    break;
   \   00000182   33E0               B.N      ??Tilt_Check_4
    280                    case 'Z' : 
    281                    TiltInfo.OrginX = CalDeg(TiltInfo.x,TiltInfo.z);
   \                     ??Tilt_Check_5:
   \   00000184   ....               LDR.N    R0,??DataTable8_6
   \   00000186   B0F90410           LDRSH    R1,[R0, #+4]
   \   0000018A   ....               LDR.N    R0,??DataTable8_6
   \   0000018C   B0F90000           LDRSH    R0,[R0, #+0]
   \   00000190   ........           BL       CalDeg
   \   00000194   ....               LDR.N    R1,??DataTable8_6
   \   00000196   8860               STR      R0,[R1, #+8]
    282                    TiltInfo.OrginY = CalDeg(TiltInfo.y,TiltInfo.z);
   \   00000198   ....               LDR.N    R0,??DataTable8_6
   \   0000019A   B0F90410           LDRSH    R1,[R0, #+4]
   \   0000019E   ....               LDR.N    R0,??DataTable8_6
   \   000001A0   B0F90200           LDRSH    R0,[R0, #+2]
   \   000001A4   ........           BL       CalDeg
   \   000001A8   ....               LDR.N    R1,??DataTable8_6
   \   000001AA   C860               STR      R0,[R1, #+12]
    283                    
    284                    TiltX = (TiltInfo.OrginX - SFLASH_Memory.TiltRefX) * -1;
   \   000001AC   ....               LDR.N    R0,??DataTable8_6
   \   000001AE   8068               LDR      R0,[R0, #+8]
   \   000001B0   ....               LDR.N    R1,??DataTable8_7
   \   000001B2   D1F87110           LDR      R1,[R1, #+113]
   \   000001B6   401A               SUBS     R0,R0,R1
   \   000001B8   5FF0FF31           MOVS     R1,#-1
   \   000001BC   01FB00F4           MUL      R4,R1,R0
    285                    TiltY = (TiltInfo.OrginY - SFLASH_Memory.TiltRefY);
   \   000001C0   ....               LDR.N    R0,??DataTable8_6
   \   000001C2   C068               LDR      R0,[R0, #+12]
   \   000001C4   ....               LDR.N    R1,??DataTable8_7
   \   000001C6   D1F87510           LDR      R1,[R1, #+117]
   \   000001CA   451A               SUBS     R5,R0,R1
    286                    
    287                    TiltInfo.AccelX = TiltInfo.x - SFLASH_Memory.EventRefX;
   \   000001CC   ....               LDR.N    R0,??DataTable8_6
   \   000001CE   0088               LDRH     R0,[R0, #+0]
   \   000001D0   ....               LDR.N    R1,??DataTable8_7
   \   000001D2   D1F87910           LDR      R1,[R1, #+121]
   \   000001D6   401A               SUBS     R0,R0,R1
   \   000001D8   ....               LDR.N    R1,??DataTable8_6
   \   000001DA   8882               STRH     R0,[R1, #+20]
    288                    TiltInfo.AccelY = TiltInfo.y - SFLASH_Memory.EventRefY;
   \   000001DC   ....               LDR.N    R0,??DataTable8_6
   \   000001DE   4088               LDRH     R0,[R0, #+2]
   \   000001E0   ....               LDR.N    R1,??DataTable8_7
   \   000001E2   D1F87D10           LDR      R1,[R1, #+125]
   \   000001E6   401A               SUBS     R0,R0,R1
   \   000001E8   ....               LDR.N    R1,??DataTable8_6
   \   000001EA   C882               STRH     R0,[R1, #+22]
    289                    break;
    290               }
    291               Tx = TiltInfo.AccelX;
   \                     ??Tilt_Check_4:
   \   000001EC   ....               LDR.N    R0,??DataTable8_6
   \   000001EE   B0F91470           LDRSH    R7,[R0, #+20]
    292               TiltInfo.AccelX /= 9.8;
   \   000001F2   ....               LDR.N    R0,??DataTable8_6
   \   000001F4   B0F91400           LDRSH    R0,[R0, #+20]
   \   000001F8   ........           BL       __aeabi_i2d
   \   000001FC   ....               LDR.N    R2,??DataTable8_10  ;; 0x9999999a
   \   000001FE   ....               LDR.N    R3,??DataTable8_11  ;; 0x40239999
   \   00000200   ........           BL       __aeabi_ddiv
   \   00000204   ........           BL       __aeabi_d2iz
   \   00000208   ....               LDR.N    R1,??DataTable8_6
   \   0000020A   8882               STRH     R0,[R1, #+20]
    293               Ty = TiltInfo.AccelY;
   \   0000020C   ....               LDR.N    R0,??DataTable8_6
   \   0000020E   B0F91660           LDRSH    R6,[R0, #+22]
    294               TiltInfo.AccelY /= 9.8;     
   \   00000212   ....               LDR.N    R0,??DataTable8_6
   \   00000214   B0F91600           LDRSH    R0,[R0, #+22]
   \   00000218   ........           BL       __aeabi_i2d
   \   0000021C   ....               LDR.N    R2,??DataTable8_10  ;; 0x9999999a
   \   0000021E   ....               LDR.N    R3,??DataTable8_11  ;; 0x40239999
   \   00000220   ........           BL       __aeabi_ddiv
   \   00000224   ........           BL       __aeabi_d2iz
   \   00000228   ....               LDR.N    R1,??DataTable8_6
   \   0000022A   C882               STRH     R0,[R1, #+22]
    295          
    296               if( Flag.Accident_Step == 1 )
   \   0000022C   ....               LDR.N    R0,??DataTable8_12
   \   0000022E   4079               LDRB     R0,[R0, #+5]
   \   00000230   0128               CMP      R0,#+1
   \   00000232   16D1               BNE.N    ??Tilt_Check_7
    297               {
    298                    if(abs(TiltInfo.AccelX) > 1200 || abs(TiltInfo.AccelY) > 500) // 1.2G ÀÌ»ó ³Ñ¾ú´Â°¡?
   \   00000234   ....               LDR.N    R0,??DataTable8_6
   \   00000236   B0F91400           LDRSH    R0,[R0, #+20]
   \   0000023A   ........           BL       abs
   \   0000023E   B0F5966F           CMP      R0,#+1200
   \   00000242   07DC               BGT.N    ??Tilt_Check_8
   \   00000244   ....               LDR.N    R0,??DataTable8_6
   \   00000246   B0F91600           LDRSH    R0,[R0, #+22]
   \   0000024A   ........           BL       abs
   \   0000024E   B0F5FA7F           CMP      R0,#+500
   \   00000252   06DD               BLE.N    ??Tilt_Check_7
    299                    {
    300                         //Voice_Play(VOICE_CLICK);
    301                         printf("Car Acciedent!!! \r\n");
   \                     ??Tilt_Check_8:
   \   00000254   ........           ADR.W    R0,`?<Constant "Car Acciedent!!! \\r\\n">`
   \   00000258   ........           BL       printf
    302                         Flag.Accident_Step = 2;
   \   0000025C   ....               LDR.N    R0,??DataTable8_12
   \   0000025E   0221               MOVS     R1,#+2
   \   00000260   4171               STRB     R1,[R0, #+5]
    303                    }
    304               }
    305          //     printf("%d , %d, %d , %d \r\n",Tx,Ty,TiltInfo.AccelX,TiltInfo.AccelY);        
    306                  // Æò±ÕÄ¡ °è»ê
    307               Tilt_BufferX[Tilt_BufferCount] = TiltX;
   \                     ??Tilt_Check_7:
   \   00000262   ....               LDR.N    R0,??DataTable8_13
   \   00000264   0088               LDRH     R0,[R0, #+0]
   \   00000266   ....               LDR.N    R1,??DataTable8_14
   \   00000268   21F81040           STRH     R4,[R1, R0, LSL #+1]
    308               Tilt_BufferY[Tilt_BufferCount++] = TiltY;
   \   0000026C   ....               LDR.N    R0,??DataTable8_13
   \   0000026E   0088               LDRH     R0,[R0, #+0]
   \   00000270   ....               LDR.N    R1,??DataTable8_15
   \   00000272   21F81050           STRH     R5,[R1, R0, LSL #+1]
   \   00000276   ....               LDR.N    R0,??DataTable8_13
   \   00000278   0088               LDRH     R0,[R0, #+0]
   \   0000027A   401C               ADDS     R0,R0,#+1
   \   0000027C   ....               LDR.N    R1,??DataTable8_13
   \   0000027E   0880               STRH     R0,[R1, #+0]
    309               Tilt_BufferCount = Tilt_BufferCount % MAX_TILT_BUFFER;
   \   00000280   ....               LDR.N    R0,??DataTable8_13
   \   00000282   0088               LDRH     R0,[R0, #+0]
   \   00000284   6421               MOVS     R1,#+100
   \   00000286   90FBF1F2           SDIV     R2,R0,R1
   \   0000028A   01FB1200           MLS      R0,R1,R2,R0
   \   0000028E   ....               LDR.N    R1,??DataTable8_13
   \   00000290   0880               STRH     R0,[R1, #+0]
    310               
    311               // 100ms ¸¶´Ù ±â¿ï±â¸¦ °Ë»çÇÑ´Ù.
    312               if( Tilt_BufferCount % 10 == 0 )
   \   00000292   ....               LDR.N    R0,??DataTable8_13
   \   00000294   0088               LDRH     R0,[R0, #+0]
   \   00000296   0A21               MOVS     R1,#+10
   \   00000298   90FBF1F2           SDIV     R2,R0,R1
   \   0000029C   01FB1200           MLS      R0,R1,R2,R0
   \   000002A0   0028               CMP      R0,#+0
   \   000002A2   1BD1               BNE.N    ??Tilt_Check_9
    313               {
    314                    AvrTiltX = AvrTiltY = 0;
   \   000002A4   0021               MOVS     R1,#+0
   \   000002A6   0A00               MOVS     R2,R1
    315                    for( i = 0 ; i < MAX_TILT_BUFFER ; i++ )
   \   000002A8   0020               MOVS     R0,#+0
   \   000002AA   0AE0               B.N      ??Tilt_Check_10
    316                    {
    317                         AvrTiltX += Tilt_BufferX[ i ];
   \                     ??Tilt_Check_11:
   \   000002AC   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002AE   ....               LDR.N    R3,??DataTable8_14
   \   000002B0   33F91030           LDRSH    R3,[R3, R0, LSL #+1]
   \   000002B4   5918               ADDS     R1,R3,R1
    318                         AvrTiltY += Tilt_BufferY[ i ];		   
   \   000002B6   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002B8   ....               LDR.N    R3,??DataTable8_15
   \   000002BA   33F91030           LDRSH    R3,[R3, R0, LSL #+1]
   \   000002BE   9A18               ADDS     R2,R3,R2
    319                    }
   \   000002C0   401C               ADDS     R0,R0,#+1
   \                     ??Tilt_Check_10:
   \   000002C2   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002C4   6428               CMP      R0,#+100
   \   000002C6   F1D3               BCC.N    ??Tilt_Check_11
    320                    TiltInfo.DegX = AvrTiltX / MAX_TILT_BUFFER;
   \   000002C8   6420               MOVS     R0,#+100
   \   000002CA   91FBF0F0           SDIV     R0,R1,R0
   \   000002CE   ....               LDR.N    R1,??DataTable8_6
   \   000002D0   0882               STRH     R0,[R1, #+16]
    321                    TiltInfo.DegY = AvrTiltY / MAX_TILT_BUFFER;   
   \   000002D2   6420               MOVS     R0,#+100
   \   000002D4   92FBF0F0           SDIV     R0,R2,R0
   \   000002D8   ....               LDR.N    R1,??DataTable8_6
   \   000002DA   4882               STRH     R0,[R1, #+18]
    322                    //	   printf("MEMS : %d %d %d\r\n",TiltInfo.x,TiltInfo.y,TiltInfo.z );
    323                    //	   printf("DEG : %d %d \r\n",TiltInfo.DegX,TiltInfo.DegY );	   
    324          #ifdef DEBUG_LOG            
    325                    // LOG -------------------------------------------------------------------------
    326                    if( ( LOGWRITE & LOG_TILT ) && ( Tilt_BufferCount == 0 ))
    327                    {
    328                         sprintf((char*)Buffer,"TILT X=%d Y=%d \r\n ",TiltInfo.DegX,TiltInfo.DegY); 
    329                         Write_Log(Buffer, NORMAL_LOG);
    330                    }            
    331                    // -----------------------------------------------------------------------------		   
    332          #endif
    333               }    
    334          }
   \                     ??Tilt_Check_9:
   \                     ??Tilt_Check_0:
   \   000002DC   F7BD               POP      {R0-R2,R4-R7,PC}  ;; return

   \                                 In section .bss, align 2
   \                     ??Tilt_Timer:
   \   00000000                      DS8 2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   00040240           DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0AD8FFFF           DC32     0xffffd80a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   46DF617E           DC32     0x7e61df46

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   DCA54C40           DC32     0x404ca5dc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0000B4C2           DC32     0xc2b40000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0000B442           DC32     0x42b40000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   ........           DC32     TiltInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   ........           DC32     SFLASH_Memory

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   ........           DC32     ??Tilt_Timer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   000C0040           DC32     0x40000c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   9A999999           DC32     0x9999999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   99992340           DC32     0x40239999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   ........           DC32     Flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   ........           DC32     Tilt_BufferCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   ........           DC32     Tilt_BufferX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   ........           DC32     Tilt_BufferY

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Car Acciedent!!! \\r\\n">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   436172204163       DC8 67, 97, 114, 32, 65, 99, 99, 105, 101, 100
   \              63696564    
   \   0000000A   656E74212121       DC8 101, 110, 116, 33, 33, 33, 32, 13, 10, 0
   \              200D0A00    

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     CalDeg                     16
     LIS331DLH_Read             16
     MEMS_Config                16
     MEMS_Init                   8
     MEMS_WhoAmI                 8
     ReadMEMS                    8
     Tilt_Check                 32
     Tilt_Setting_Reference      8
     WriteMEMS                   8


   Section sizes:

     Function/Label                      Bytes
     --------------                      -----
     TiltInfo                              24
     Tilt_BufferX                         200
     Tilt_BufferY                         200
     Tilt_BufferCount                       2
     MEMS_WhoAmI                           46
     CalDeg                               188
     MEMS_Config                           46
     MEMS_Init                            114
     ReadMEMS                              62
     WriteMEMS                             56
     Tilt_Setting_Reference               482
     LIS331DLH_Read                        74
     Tilt_Check                           734
     Tilt_Timer                             2
     ??DataTable8                           4
     ??DataTable8_1                         4
     ??DataTable8_2                         4
     ??DataTable8_3                         4
     ??DataTable8_4                         4
     ??DataTable8_5                         4
     ??DataTable8_6                         4
     ??DataTable8_7                         4
     ??DataTable8_8                         4
     ??DataTable8_9                         4
     ??DataTable8_10                        4
     ??DataTable8_11                        4
     ??DataTable8_12                        4
     ??DataTable8_13                        4
     ??DataTable8_14                        4
     ??DataTable8_15                        4
     ?<Constant "Car Acciedent!!! \r\n">   20

 
   428 bytes in section .bss
 1 886 bytes in section .text
 
 1 886 bytes of CODE memory
   428 bytes of DATA memory

Errors: none
Warnings: 2
