###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     19/Jan/2012  11:08:52 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Libraries\STM32_ #
#                    USB_OTG_Driver\src\usb_hcd_int.c                         #
#    Command line =  F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Libraries\STM32_ #
#                    USB_OTG_Driver\src\usb_hcd_int.c -D                      #
#                    USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM3220F_EVAL   #
#                    -D USE_USB_OTG_FS -D RTC_CLOCK_SOURCE_LSE -lC            #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\ST #
#                    M3220F_EVAL\List\ -lA F:\Work\S&G2000\Firmware\DTG_EMS_S #
#                    YSTEM\Project\EWARM\STM3220F_EVAL\List\ -o               #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\ST #
#                    M3220F_EVAL\Obj\ --no_cse --no_unroll --no_inline        #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\ #
#                    EWARM\..\ -I F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Pro #
#                    ject\EWARM\..\..\Libraries\CMSIS\CM3\CoreSupport\ -I     #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\ -I   #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Libraries\STM32F2xx_StdPeriph_Driver\inc\ -I         #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Utilities\STM32_EVAL\ -I                             #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Utilities\STM32_EVAL\Common\ -I                      #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Utilities\STM32_EVAL\STM3220F_EVAL\ -I               #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Libraries\STM32_USB_OTG_Driver\inc\ -I               #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Libraries\STM32_USB_Device_Library\Core\inc\ -I      #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Libraries\STM32_USB_Device_Library\Class\msc\inc\    #
#                    -I F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM #
#                    \..\Usb\ -I F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Proj #
#                    ect\EWARM\..\Usb\Inc\ -I F:\Work\S&G2000\Firmware\DTG_EM #
#                    S_SYSTEM\Project\EWARM\..\Usb\src\ -I                    #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Libraries\STM32_USB_HOST_Library\Core\inc\ -I        #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\ -I   #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\    #
#                    -Ol --use_c++_inline                                     #
#    List file    =  F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\ST #
#                    M3220F_EVAL\List\usb_hcd_int.lst                         #
#    Object file  =  F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\ST #
#                    M3220F_EVAL\Obj\usb_hcd_int.o                            #
#                                                                             #
#                                                                             #
###############################################################################

F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Libraries\STM32_USB_OTG_Driver\src\usb_hcd_int.c
      1          /**
      2            ******************************************************************************
      3            * @file    usb_hcd_int.c
      4            * @author  MCD Application Team
      5            * @version V2.0.0RC1
      6            * @date    18-March-2011
      7            * @brief   Host driver interrupt subroutines
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "usb_core.h"
     24          #include "usb_defines.h"
     25          #include "usb_hcd_int.h"
     26          
     27          #ifdef __CC_ARM
     28          #pragma O0
     29          #endif
     30          /** @addtogroup USB_OTG_DRIVER
     31            * @{
     32            */
     33            
     34          /** @defgroup USB_HCD_INT 
     35            * @brief This file is the interface between EFSL ans Host mass-storage class
     36            * @{
     37            */
     38          
     39          
     40          /** @defgroup USB_HCD_INT_Private_Defines
     41            * @{
     42            */ 
     43          /**
     44            * @}
     45            */ 
     46           
     47          
     48          /** @defgroup USB_HCD_INT_Private_TypesDefinitions
     49            * @{
     50            */ 
     51          /**
     52            * @}
     53            */ 
     54          
     55          
     56          
     57          /** @defgroup USB_HCD_INT_Private_Macros
     58            * @{
     59            */ 
     60          /**
     61            * @}
     62            */ 
     63          
     64          
     65          /** @defgroup USB_HCD_INT_Private_Variables
     66            * @{
     67            */ 
     68          /**
     69            * @}
     70            */ 
     71          
     72          
     73          /** @defgroup USB_HCD_INT_Private_FunctionPrototypes
     74            * @{
     75            */ 
     76          
     77          static uint32_t USB_OTG_USBH_handle_sof_ISR(USB_OTG_CORE_HANDLE *pdev);
     78          static uint32_t USB_OTG_USBH_handle_port_ISR(USB_OTG_CORE_HANDLE *pdev);
     79          static uint32_t USB_OTG_USBH_handle_hc_ISR (USB_OTG_CORE_HANDLE *pdev);
     80          static uint32_t USB_OTG_USBH_handle_hc_n_In_ISR (USB_OTG_CORE_HANDLE *pdev ,
     81                                                           uint32_t num);
     82          static uint32_t USB_OTG_USBH_handle_hc_n_Out_ISR (USB_OTG_CORE_HANDLE *pdev , 
     83                                                            uint32_t num);
     84          static uint32_t USB_OTG_USBH_handle_rx_qlvl_ISR (USB_OTG_CORE_HANDLE *pdev);
     85          static uint32_t USB_OTG_USBH_handle_nptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev);
     86          static uint32_t USB_OTG_USBH_handle_ptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev);
     87          static uint32_t USB_OTG_USBH_handle_Disconnect_ISR (USB_OTG_CORE_HANDLE *pdev);
     88          static uint32_t USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (USB_OTG_CORE_HANDLE *pdev);
     89          
     90          /**
     91            * @}
     92            */ 
     93          
     94          
     95          /** @defgroup USB_HCD_INT_Private_Functions
     96            * @{
     97            */ 
     98          
     99          /**
    100            * @brief  HOST_Handle_ISR 
    101            *         This function handles all USB Host Interrupts
    102            * @param  pdev: Selected device
    103            * @retval status 
    104            */
    105          

   \                                 In section .text, align 2, keep-with-next
    106          uint32_t USBH_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
    107          {
   \                     USBH_OTG_ISR_Handler:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
    108            USB_OTG_GINTSTS_TypeDef  gintsts;
    109            uint32_t retval = 0;
   \   00000004   0026               MOVS     R6,#+0
    110            
    111            gintsts.d32 = 0;
   \   00000006   0025               MOVS     R5,#+0
    112            
    113            /* Check if HOST Mode */
    114            if (USB_OTG_IsHostMode(pdev))
   \   00000008   2000               MOVS     R0,R4
   \   0000000A   ........           BL       USB_OTG_IsHostMode
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   47D0               BEQ.N    ??USBH_OTG_ISR_Handler_0
    115            {
    116              gintsts.d32 = USB_OTG_ReadCoreItr(pdev);
   \   00000012   2000               MOVS     R0,R4
   \   00000014   ........           BL       USB_OTG_ReadCoreItr
   \   00000018   0500               MOVS     R5,R0
    117              if (!gintsts.d32)
   \   0000001A   002D               CMP      R5,#+0
   \   0000001C   01D1               BNE.N    ??USBH_OTG_ISR_Handler_1
    118              {
    119                return 0;
   \   0000001E   0020               MOVS     R0,#+0
   \   00000020   40E0               B.N      ??USBH_OTG_ISR_Handler_2
    120              }
    121              
    122              if (gintsts.b.sofintr)
   \                     ??USBH_OTG_ISR_Handler_1:
   \   00000022   C5F3C000           UBFX     R0,R5,#+3,#+1
   \   00000026   C007               LSLS     R0,R0,#+31
   \   00000028   03D5               BPL.N    ??USBH_OTG_ISR_Handler_3
    123              {
    124                retval |= USB_OTG_USBH_handle_sof_ISR (pdev);
   \   0000002A   2000               MOVS     R0,R4
   \   0000002C   ........           BL       USB_OTG_USBH_handle_sof_ISR
   \   00000030   0643               ORRS     R6,R0,R6
    125              }
    126              
    127              if (gintsts.b.rxstsqlvl)
   \                     ??USBH_OTG_ISR_Handler_3:
   \   00000032   C5F30010           UBFX     R0,R5,#+4,#+1
   \   00000036   C007               LSLS     R0,R0,#+31
   \   00000038   03D5               BPL.N    ??USBH_OTG_ISR_Handler_4
    128              {
    129                retval |= USB_OTG_USBH_handle_rx_qlvl_ISR (pdev);
   \   0000003A   2000               MOVS     R0,R4
   \   0000003C   ........           BL       USB_OTG_USBH_handle_rx_qlvl_ISR
   \   00000040   0643               ORRS     R6,R0,R6
    130              }
    131              
    132              if (gintsts.b.nptxfempty)
   \                     ??USBH_OTG_ISR_Handler_4:
   \   00000042   C5F34010           UBFX     R0,R5,#+5,#+1
   \   00000046   C007               LSLS     R0,R0,#+31
   \   00000048   03D5               BPL.N    ??USBH_OTG_ISR_Handler_5
    133              {
    134                retval |= USB_OTG_USBH_handle_nptxfempty_ISR (pdev);
   \   0000004A   2000               MOVS     R0,R4
   \   0000004C   ........           BL       USB_OTG_USBH_handle_nptxfempty_ISR
   \   00000050   0643               ORRS     R6,R0,R6
    135              }
    136              
    137              if (gintsts.b.ptxfempty)
   \                     ??USBH_OTG_ISR_Handler_5:
   \   00000052   C5F38060           UBFX     R0,R5,#+26,#+1
   \   00000056   C007               LSLS     R0,R0,#+31
   \   00000058   03D5               BPL.N    ??USBH_OTG_ISR_Handler_6
    138              {
    139                retval |= USB_OTG_USBH_handle_ptxfempty_ISR (pdev);
   \   0000005A   2000               MOVS     R0,R4
   \   0000005C   ........           BL       USB_OTG_USBH_handle_ptxfempty_ISR
   \   00000060   0643               ORRS     R6,R0,R6
    140              }    
    141              
    142              if (gintsts.b.hcintr)
   \                     ??USBH_OTG_ISR_Handler_6:
   \   00000062   C5F34060           UBFX     R0,R5,#+25,#+1
   \   00000066   C007               LSLS     R0,R0,#+31
   \   00000068   03D5               BPL.N    ??USBH_OTG_ISR_Handler_7
    143              {
    144                retval |= USB_OTG_USBH_handle_hc_ISR (pdev);
   \   0000006A   2000               MOVS     R0,R4
   \   0000006C   ........           BL       USB_OTG_USBH_handle_hc_ISR
   \   00000070   0643               ORRS     R6,R0,R6
    145              }
    146              
    147              if (gintsts.b.portintr)
   \                     ??USBH_OTG_ISR_Handler_7:
   \   00000072   C5F30060           UBFX     R0,R5,#+24,#+1
   \   00000076   C007               LSLS     R0,R0,#+31
   \   00000078   03D5               BPL.N    ??USBH_OTG_ISR_Handler_8
    148              {
    149                retval |= USB_OTG_USBH_handle_port_ISR (pdev);
   \   0000007A   2000               MOVS     R0,R4
   \   0000007C   ........           BL       USB_OTG_USBH_handle_port_ISR
   \   00000080   0643               ORRS     R6,R0,R6
    150              }
    151              
    152              if (gintsts.b.disconnect)
   \                     ??USBH_OTG_ISR_Handler_8:
   \   00000082   C5F34070           UBFX     R0,R5,#+29,#+1
   \   00000086   C007               LSLS     R0,R0,#+31
   \   00000088   03D5               BPL.N    ??USBH_OTG_ISR_Handler_9
    153              {
    154                retval |= USB_OTG_USBH_handle_Disconnect_ISR (pdev);  
   \   0000008A   2000               MOVS     R0,R4
   \   0000008C   ........           BL       USB_OTG_USBH_handle_Disconnect_ISR
   \   00000090   0643               ORRS     R6,R0,R6
    155                
    156              }
    157              
    158               if (gintsts.b.incomplisoout)
   \                     ??USBH_OTG_ISR_Handler_9:
   \   00000092   C5F34050           UBFX     R0,R5,#+21,#+1
   \   00000096   C007               LSLS     R0,R0,#+31
   \   00000098   03D5               BPL.N    ??USBH_OTG_ISR_Handler_0
    159                {
    160                   retval |= USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (pdev);
   \   0000009A   2000               MOVS     R0,R4
   \   0000009C   ........           BL       USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
   \   000000A0   0643               ORRS     R6,R0,R6
    161                }
    162                
    163              
    164            }
    165            return retval;
   \                     ??USBH_OTG_ISR_Handler_0:
   \   000000A2   3000               MOVS     R0,R6
   \                     ??USBH_OTG_ISR_Handler_2:
   \   000000A4   70BD               POP      {R4-R6,PC}       ;; return
    166          }
    167          
    168          /**
    169            * @brief  USB_OTG_USBH_handle_hc_ISR 
    170            *         This function indicates that one or more host channels has a pending
    171            * @param  pdev: Selected device
    172            * @retval status 
    173            */

   \                                 In section .text, align 2, keep-with-next
    174          static uint32_t USB_OTG_USBH_handle_hc_ISR (USB_OTG_CORE_HANDLE *pdev)
    175          {
   \                     USB_OTG_USBH_handle_hc_ISR:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
    176            USB_OTG_HAINT_TypeDef        haint;
    177            USB_OTG_HCCHAR_TypeDef       hcchar;
    178            uint32_t i = 0;
   \   00000004   0027               MOVS     R7,#+0
    179            uint32_t retval = 0;
   \   00000006   0026               MOVS     R6,#+0
    180            
    181            /* Clear appropriate bits in HCINTn to clear the interrupt bit in
    182            * GINTSTS */
    183            
    184            haint.d32 = USB_OTG_ReadHostAllChannels_intr(pdev);
   \   00000008   2000               MOVS     R0,R4
   \   0000000A   ........           BL       USB_OTG_ReadHostAllChannels_intr
   \   0000000E   0500               MOVS     R5,R0
    185            
    186            for (i = 0; i < pdev->cfg.host_channels ; i++)
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   0700               MOVS     R7,R0
   \   00000014   05E0               B.N      ??USB_OTG_USBH_handle_hc_ISR_0
    187            {
    188              if (haint.b.chint & (1 << i))
    189              {
    190                hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[i]->HCCHAR);
    191                
    192                if (hcchar.b.epdir)
    193                {
    194                  retval |= USB_OTG_USBH_handle_hc_n_In_ISR (pdev, i);
    195                }
    196                else
    197                {
    198                  retval |=  USB_OTG_USBH_handle_hc_n_Out_ISR (pdev, i);
   \                     ??USB_OTG_USBH_handle_hc_ISR_1:
   \   00000016   3900               MOVS     R1,R7
   \   00000018   2000               MOVS     R0,R4
   \   0000001A   ........           BL       USB_OTG_USBH_handle_hc_n_Out_ISR
   \   0000001E   0643               ORRS     R6,R0,R6
    199                }
   \                     ??USB_OTG_USBH_handle_hc_ISR_2:
   \   00000020   7F1C               ADDS     R7,R7,#+1
   \                     ??USB_OTG_USBH_handle_hc_ISR_0:
   \   00000022   2078               LDRB     R0,[R4, #+0]
   \   00000024   8742               CMP      R7,R0
   \   00000026   14D2               BCS.N    ??USB_OTG_USBH_handle_hc_ISR_3
   \   00000028   A8B2               UXTH     R0,R5            ;; ZeroExt  R0,R5,#+16,#+16
   \   0000002A   0121               MOVS     R1,#+1
   \   0000002C   B940               LSLS     R1,R1,R7
   \   0000002E   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000030   0842               TST      R0,R1
   \   00000032   F5D0               BEQ.N    ??USB_OTG_USBH_handle_hc_ISR_2
   \   00000034   14EB8700           ADDS     R0,R4,R7, LSL #+2
   \   00000038   D0F89000           LDR      R0,[R0, #+144]
   \   0000003C   0068               LDR      R0,[R0, #+0]
   \   0000003E   C0F3C030           UBFX     R0,R0,#+15,#+1
   \   00000042   C007               LSLS     R0,R0,#+31
   \   00000044   E7D5               BPL.N    ??USB_OTG_USBH_handle_hc_ISR_1
   \   00000046   3900               MOVS     R1,R7
   \   00000048   2000               MOVS     R0,R4
   \   0000004A   ........           BL       USB_OTG_USBH_handle_hc_n_In_ISR
   \   0000004E   0643               ORRS     R6,R0,R6
   \   00000050   E6E7               B.N      ??USB_OTG_USBH_handle_hc_ISR_2
    200              }
    201            }
    202            
    203            return retval;
   \                     ??USB_OTG_USBH_handle_hc_ISR_3:
   \   00000052   3000               MOVS     R0,R6
   \   00000054   F2BD               POP      {R1,R4-R7,PC}    ;; return
    204          }
    205          
    206          /**
    207            * @brief  USB_OTG_otg_hcd_handle_sof_intr 
    208            *         Handles the start-of-frame interrupt in host mode.
    209            * @param  pdev: Selected device
    210            * @retval status 
    211            */

   \                                 In section .text, align 2, keep-with-next
    212          static uint32_t USB_OTG_USBH_handle_sof_ISR (USB_OTG_CORE_HANDLE *pdev)
    213          {
    214            USB_OTG_GINTSTS_TypeDef      gintsts;
    215            
    216            
    217            gintsts.d32 = 0;
   \                     USB_OTG_USBH_handle_sof_ISR:
   \   00000000   0021               MOVS     R1,#+0
    218            /* Clear interrupt */
    219            gintsts.b.sofintr = 1;
   \   00000002   51F00801           ORRS     R1,R1,#0x8
    220            USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
   \   00000006   C068               LDR      R0,[R0, #+12]
   \   00000008   4161               STR      R1,[R0, #+20]
    221            
    222            return 1;
   \   0000000A   0120               MOVS     R0,#+1
   \   0000000C   7047               BX       LR               ;; return
    223          }
    224          
    225          /**
    226            * @brief  USB_OTG_USBH_handle_Disconnect_ISR 
    227            *         Handles disconnect event.
    228            * @param  pdev: Selected device
    229            * @retval status 
    230            */

   \                                 In section .text, align 2, keep-with-next
    231          static uint32_t USB_OTG_USBH_handle_Disconnect_ISR (USB_OTG_CORE_HANDLE *pdev)
    232          {
   \                     USB_OTG_USBH_handle_Disconnect_ISR:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
    233            USB_OTG_GINTSTS_TypeDef      gintsts;
    234            
    235            pdev->host.ConnSts = 0;
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   C4F8EC06           STR      R0,[R4, #+1772]
    236            gintsts.d32 = 0;
   \   0000000A   0025               MOVS     R5,#+0
    237            
    238            pdev->host.port_cb->Disconnect(pdev);
   \   0000000C   2000               MOVS     R0,R4
   \   0000000E   D4F88819           LDR      R1,[R4, #+2440]
   \   00000012   0968               LDR      R1,[R1, #+0]
   \   00000014   8847               BLX      R1
    239            
    240            /* Clear interrupt */
    241            gintsts.b.disconnect = 1;
   \   00000016   55F00055           ORRS     R5,R5,#0x20000000
    242            USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
   \   0000001A   E068               LDR      R0,[R4, #+12]
   \   0000001C   4561               STR      R5,[R0, #+20]
    243            
    244            return 1;
   \   0000001E   0120               MOVS     R0,#+1
   \   00000020   32BD               POP      {R1,R4,R5,PC}    ;; return
    245          }
    246          
    247          /**
    248            * @brief  USB_OTG_USBH_handle_nptxfempty_ISR 
    249            *         Handles non periodic tx fifo empty.
    250            * @param  pdev: Selected device
    251            * @retval status 
    252            */

   \                                 In section .text, align 2, keep-with-next
    253          static uint32_t USB_OTG_USBH_handle_nptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
    254          {
   \                     USB_OTG_USBH_handle_nptxfempty_ISR:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
    255            USB_OTG_GINTMSK_TypeDef      intmsk;
    256            USB_OTG_HNPTXSTS_TypeDef     hnptxsts; 
    257            uint16_t                     len_words , len; 
    258            
    259            hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
   \   00000004   E068               LDR      R0,[R4, #+12]
   \   00000006   C56A               LDR      R5,[R0, #+44]
    260            
    261            len_words = (pdev->host.hc[hnptxsts.b.chnum].xfer_len + 3) / 4;
   \   00000008   C5F34170           UBFX     R0,R5,#+29,#+2
   \   0000000C   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   00000010   D0F89807           LDR      R0,[R0, #+1944]
   \   00000014   C01C               ADDS     R0,R0,#+3
   \   00000016   8708               LSRS     R7,R0,#+2
   \   00000018   5CE0               B.N      ??USB_OTG_USBH_handle_nptxfempty_ISR_0
    262            
    263            while ((hnptxsts.b.nptxfspcavail > len_words)&&
    264                (pdev->host.hc[hnptxsts.b.chnum].xfer_len != 0))
    265            {
    266              
    267              len = hnptxsts.b.nptxfspcavail * 4;
   \                     ??USB_OTG_USBH_handle_nptxfempty_ISR_1:
   \   0000001A   2800               MOVS     R0,R5
   \   0000001C   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001E   8600               LSLS     R6,R0,#+2
    268              
    269              if (len > pdev->host.hc[hnptxsts.b.chnum].xfer_len)
   \   00000020   C5F34170           UBFX     R0,R5,#+29,#+2
   \   00000024   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   00000028   D0F89807           LDR      R0,[R0, #+1944]
   \   0000002C   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000002E   B042               CMP      R0,R6
   \   00000030   0ED2               BCS.N    ??USB_OTG_USBH_handle_nptxfempty_ISR_2
    270              {
    271                /* Last packet */
    272                len = pdev->host.hc[hnptxsts.b.chnum].xfer_len;
   \   00000032   C5F34170           UBFX     R0,R5,#+29,#+2
   \   00000036   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   0000003A   D0F89867           LDR      R6,[R0, #+1944]
    273                
    274                intmsk.d32 = 0;
   \   0000003E   0020               MOVS     R0,#+0
    275                intmsk.b.nptxfempty = 1;
   \   00000040   50F02000           ORRS     R0,R0,#0x20
    276                USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);       
   \   00000044   E168               LDR      R1,[R4, #+12]
   \   00000046   8969               LDR      R1,[R1, #+24]
   \   00000048   31EA0000           BICS     R0,R1,R0
   \   0000004C   E168               LDR      R1,[R4, #+12]
   \   0000004E   8861               STR      R0,[R1, #+24]
    277              }
    278              
    279              len_words = (pdev->host.hc[hnptxsts.b.chnum].xfer_len + 3) / 4;
   \                     ??USB_OTG_USBH_handle_nptxfempty_ISR_2:
   \   00000050   C5F34170           UBFX     R0,R5,#+29,#+2
   \   00000054   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   00000058   D0F89807           LDR      R0,[R0, #+1944]
   \   0000005C   C01C               ADDS     R0,R0,#+3
   \   0000005E   8708               LSRS     R7,R0,#+2
    280              
    281              USB_OTG_WritePacket (pdev , pdev->host.hc[hnptxsts.b.chnum].xfer_buff, hnptxsts.b.chnum, len);
   \   00000060   3300               MOVS     R3,R6
   \   00000062   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000064   680F               LSRS     R0,R5,#+29
   \   00000066   10F00302           ANDS     R2,R0,#0x3
   \   0000006A   C5F34170           UBFX     R0,R5,#+29,#+2
   \   0000006E   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   00000072   D0F89417           LDR      R1,[R0, #+1940]
   \   00000076   2000               MOVS     R0,R4
   \   00000078   ........           BL       USB_OTG_WritePacket
    282              
    283              pdev->host.hc[hnptxsts.b.chnum].xfer_buff  += len;
   \   0000007C   C5F34170           UBFX     R0,R5,#+29,#+2
   \   00000080   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   00000084   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000086   C5F34171           UBFX     R1,R5,#+29,#+2
   \   0000008A   14EB4111           ADDS     R1,R4,R1, LSL #+5
   \   0000008E   D1F89417           LDR      R1,[R1, #+1940]
   \   00000092   7118               ADDS     R1,R6,R1
   \   00000094   C0F89417           STR      R1,[R0, #+1940]
    284              pdev->host.hc[hnptxsts.b.chnum].xfer_len   -= len;
   \   00000098   C5F34170           UBFX     R0,R5,#+29,#+2
   \   0000009C   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   000000A0   C5F34171           UBFX     R1,R5,#+29,#+2
   \   000000A4   14EB4111           ADDS     R1,R4,R1, LSL #+5
   \   000000A8   D1F89817           LDR      R1,[R1, #+1944]
   \   000000AC   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000AE   891B               SUBS     R1,R1,R6
   \   000000B0   C0F89817           STR      R1,[R0, #+1944]
    285              pdev->host.hc[hnptxsts.b.chnum].xfer_count  += len; 
   \   000000B4   C5F34170           UBFX     R0,R5,#+29,#+2
   \   000000B8   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   000000BC   C5F34171           UBFX     R1,R5,#+29,#+2
   \   000000C0   14EB4111           ADDS     R1,R4,R1, LSL #+5
   \   000000C4   D1F89C17           LDR      R1,[R1, #+1948]
   \   000000C8   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000CA   7118               ADDS     R1,R6,R1
   \   000000CC   C0F89C17           STR      R1,[R0, #+1948]
    286                  
    287              hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
   \   000000D0   E068               LDR      R0,[R4, #+12]
   \   000000D2   C56A               LDR      R5,[R0, #+44]
    288            }  
   \                     ??USB_OTG_USBH_handle_nptxfempty_ISR_0:
   \   000000D4   A8B2               UXTH     R0,R5            ;; ZeroExt  R0,R5,#+16,#+16
   \   000000D6   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000D8   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000DA   8742               CMP      R7,R0
   \   000000DC   07D2               BCS.N    ??USB_OTG_USBH_handle_nptxfempty_ISR_3
   \   000000DE   C5F34170           UBFX     R0,R5,#+29,#+2
   \   000000E2   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   000000E6   D0F89807           LDR      R0,[R0, #+1944]
   \   000000EA   0028               CMP      R0,#+0
   \   000000EC   95D1               BNE.N    ??USB_OTG_USBH_handle_nptxfempty_ISR_1
    289          
    290            return 1;
   \                     ??USB_OTG_USBH_handle_nptxfempty_ISR_3:
   \   000000EE   0120               MOVS     R0,#+1
   \   000000F0   F2BD               POP      {R1,R4-R7,PC}    ;; return
    291          }
    292          
    293          /**
    294            * @brief  USB_OTG_USBH_handle_ptxfempty_ISR 
    295            *         Handles periodic tx fifo empty
    296            * @param  pdev: Selected device
    297            * @retval status 
    298            */

   \                                 In section .text, align 2, keep-with-next
    299          static uint32_t USB_OTG_USBH_handle_ptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
    300          {
   \                     USB_OTG_USBH_handle_ptxfempty_ISR:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
    301            USB_OTG_GINTMSK_TypeDef      intmsk;
    302            USB_OTG_HPTXSTS_TypeDef      hptxsts; 
    303            uint16_t                     len_words , len; 
    304            
    305            hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
   \   00000004   6069               LDR      R0,[R4, #+20]
   \   00000006   0569               LDR      R5,[R0, #+16]
    306            
    307            len_words = (pdev->host.hc[hptxsts.b.chnum].xfer_len + 3) / 4;
   \   00000008   C5F34170           UBFX     R0,R5,#+29,#+2
   \   0000000C   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   00000010   D0F89807           LDR      R0,[R0, #+1944]
   \   00000014   C01C               ADDS     R0,R0,#+3
   \   00000016   8708               LSRS     R7,R0,#+2
   \   00000018   5CE0               B.N      ??USB_OTG_USBH_handle_ptxfempty_ISR_0
    308            
    309            while ((hptxsts.b.ptxfspcavail > len_words)&&
    310                (pdev->host.hc[hptxsts.b.chnum].xfer_len != 0))    
    311            {
    312              
    313              len = hptxsts.b.ptxfspcavail * 4;
   \                     ??USB_OTG_USBH_handle_ptxfempty_ISR_1:
   \   0000001A   2800               MOVS     R0,R5
   \   0000001C   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001E   8600               LSLS     R6,R0,#+2
    314              
    315              if (len > pdev->host.hc[hptxsts.b.chnum].xfer_len)
   \   00000020   C5F34170           UBFX     R0,R5,#+29,#+2
   \   00000024   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   00000028   D0F89807           LDR      R0,[R0, #+1944]
   \   0000002C   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000002E   B042               CMP      R0,R6
   \   00000030   0ED2               BCS.N    ??USB_OTG_USBH_handle_ptxfempty_ISR_2
    316              {
    317                len = pdev->host.hc[hptxsts.b.chnum].xfer_len;
   \   00000032   C5F34170           UBFX     R0,R5,#+29,#+2
   \   00000036   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   0000003A   D0F89867           LDR      R6,[R0, #+1944]
    318                /* Last packet */
    319                intmsk.d32 = 0;
   \   0000003E   0020               MOVS     R0,#+0
    320                intmsk.b.ptxfempty = 1;
   \   00000040   50F08060           ORRS     R0,R0,#0x4000000
    321                USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0); 
   \   00000044   E168               LDR      R1,[R4, #+12]
   \   00000046   8969               LDR      R1,[R1, #+24]
   \   00000048   31EA0000           BICS     R0,R1,R0
   \   0000004C   E168               LDR      R1,[R4, #+12]
   \   0000004E   8861               STR      R0,[R1, #+24]
    322              }
    323              
    324              len_words = (pdev->host.hc[hptxsts.b.chnum].xfer_len + 3) / 4;
   \                     ??USB_OTG_USBH_handle_ptxfempty_ISR_2:
   \   00000050   C5F34170           UBFX     R0,R5,#+29,#+2
   \   00000054   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   00000058   D0F89807           LDR      R0,[R0, #+1944]
   \   0000005C   C01C               ADDS     R0,R0,#+3
   \   0000005E   8708               LSRS     R7,R0,#+2
    325              
    326              USB_OTG_WritePacket (pdev , pdev->host.hc[hptxsts.b.chnum].xfer_buff, hptxsts.b.chnum, len);
   \   00000060   3300               MOVS     R3,R6
   \   00000062   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000064   680F               LSRS     R0,R5,#+29
   \   00000066   10F00302           ANDS     R2,R0,#0x3
   \   0000006A   C5F34170           UBFX     R0,R5,#+29,#+2
   \   0000006E   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   00000072   D0F89417           LDR      R1,[R0, #+1940]
   \   00000076   2000               MOVS     R0,R4
   \   00000078   ........           BL       USB_OTG_WritePacket
    327              
    328              pdev->host.hc[hptxsts.b.chnum].xfer_buff  += len;
   \   0000007C   C5F34170           UBFX     R0,R5,#+29,#+2
   \   00000080   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   00000084   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000086   C5F34171           UBFX     R1,R5,#+29,#+2
   \   0000008A   14EB4111           ADDS     R1,R4,R1, LSL #+5
   \   0000008E   D1F89417           LDR      R1,[R1, #+1940]
   \   00000092   7118               ADDS     R1,R6,R1
   \   00000094   C0F89417           STR      R1,[R0, #+1940]
    329              pdev->host.hc[hptxsts.b.chnum].xfer_len   -= len;
   \   00000098   C5F34170           UBFX     R0,R5,#+29,#+2
   \   0000009C   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   000000A0   C5F34171           UBFX     R1,R5,#+29,#+2
   \   000000A4   14EB4111           ADDS     R1,R4,R1, LSL #+5
   \   000000A8   D1F89817           LDR      R1,[R1, #+1944]
   \   000000AC   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000AE   891B               SUBS     R1,R1,R6
   \   000000B0   C0F89817           STR      R1,[R0, #+1944]
    330              pdev->host.hc[hptxsts.b.chnum].xfer_count  += len; 
   \   000000B4   C5F34170           UBFX     R0,R5,#+29,#+2
   \   000000B8   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   000000BC   C5F34171           UBFX     R1,R5,#+29,#+2
   \   000000C0   14EB4111           ADDS     R1,R4,R1, LSL #+5
   \   000000C4   D1F89C17           LDR      R1,[R1, #+1948]
   \   000000C8   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000CA   7118               ADDS     R1,R6,R1
   \   000000CC   C0F89C17           STR      R1,[R0, #+1948]
    331               
    332              hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
   \   000000D0   6069               LDR      R0,[R4, #+20]
   \   000000D2   0569               LDR      R5,[R0, #+16]
    333            }  
   \                     ??USB_OTG_USBH_handle_ptxfempty_ISR_0:
   \   000000D4   A8B2               UXTH     R0,R5            ;; ZeroExt  R0,R5,#+16,#+16
   \   000000D6   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000D8   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000DA   8742               CMP      R7,R0
   \   000000DC   07D2               BCS.N    ??USB_OTG_USBH_handle_ptxfempty_ISR_3
   \   000000DE   C5F34170           UBFX     R0,R5,#+29,#+2
   \   000000E2   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   000000E6   D0F89807           LDR      R0,[R0, #+1944]
   \   000000EA   0028               CMP      R0,#+0
   \   000000EC   95D1               BNE.N    ??USB_OTG_USBH_handle_ptxfempty_ISR_1
    334            
    335            return 1;
   \                     ??USB_OTG_USBH_handle_ptxfempty_ISR_3:
   \   000000EE   0120               MOVS     R0,#+1
   \   000000F0   F2BD               POP      {R1,R4-R7,PC}    ;; return
    336          }
    337          
    338          /**
    339            * @brief  USB_OTG_USBH_handle_port_ISR 
    340            *         This function determines which interrupt conditions have occurred
    341            * @param  pdev: Selected device
    342            * @retval status 
    343            */

   \                                 In section .text, align 2, keep-with-next
    344          static uint32_t USB_OTG_USBH_handle_port_ISR (USB_OTG_CORE_HANDLE *pdev)
    345          {
   \                     USB_OTG_USBH_handle_port_ISR:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
    346            USB_OTG_HPRT0_TypeDef  hprt0;
    347            USB_OTG_HPRT0_TypeDef  hprt0_dup;
    348            USB_OTG_HCFG_TypeDef   hcfg;    
    349            uint32_t do_reset = 0;
   \   00000004   0020               MOVS     R0,#+0
    350            uint32_t retval = 0;
   \   00000006   0025               MOVS     R5,#+0
    351            
    352            hcfg.d32 = 0;
   \   00000008   0021               MOVS     R1,#+0
    353            hprt0.d32 = 0;
   \   0000000A   0026               MOVS     R6,#+0
    354            hprt0_dup.d32 = 0;
   \   0000000C   0027               MOVS     R7,#+0
    355            
    356            hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
   \   0000000E   D4F8CC20           LDR      R2,[R4, #+204]
   \   00000012   1268               LDR      R2,[R2, #+0]
   \   00000014   1600               MOVS     R6,R2
    357            hprt0_dup.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
   \   00000016   D4F8CC20           LDR      R2,[R4, #+204]
   \   0000001A   1268               LDR      R2,[R2, #+0]
   \   0000001C   1700               MOVS     R7,R2
    358            
    359            /* Clear the interrupt bits in GINTSTS */
    360            
    361            hprt0_dup.b.prtena = 0;
   \   0000001E   37F00407           BICS     R7,R7,#0x4
    362            hprt0_dup.b.prtconndet = 0;
   \   00000022   37F00207           BICS     R7,R7,#0x2
    363            hprt0_dup.b.prtenchng = 0;
   \   00000026   37F00807           BICS     R7,R7,#0x8
    364            hprt0_dup.b.prtovrcurrchng = 0;
   \   0000002A   37F02007           BICS     R7,R7,#0x20
    365            
    366            /* Port Connect Detected */
    367            if (hprt0.b.prtconndet)
   \   0000002E   C6F34002           UBFX     R2,R6,#+1,#+1
   \   00000032   D207               LSLS     R2,R2,#+31
   \   00000034   09D5               BPL.N    ??USB_OTG_USBH_handle_port_ISR_0
    368            {
    369              pdev->host.port_cb->Connect(pdev);
   \   00000036   2000               MOVS     R0,R4
   \   00000038   D4F88819           LDR      R1,[R4, #+2440]
   \   0000003C   4968               LDR      R1,[R1, #+4]
   \   0000003E   8847               BLX      R1
    370              hprt0_dup.b.prtconndet = 1;
   \   00000040   57F00207           ORRS     R7,R7,#0x2
    371              do_reset = 1;
   \   00000044   0120               MOVS     R0,#+1
    372              retval |= 1;
   \   00000046   55F00105           ORRS     R5,R5,#0x1
    373            }
    374            
    375            /* Port Enable Changed */
    376            if (hprt0.b.prtenchng)
   \                     ??USB_OTG_USBH_handle_port_ISR_0:
   \   0000004A   C6F3C001           UBFX     R1,R6,#+3,#+1
   \   0000004E   C907               LSLS     R1,R1,#+31
   \   00000050   3BD5               BPL.N    ??USB_OTG_USBH_handle_port_ISR_1
    377            {
    378              hprt0_dup.b.prtenchng = 1;
   \   00000052   57F00807           ORRS     R7,R7,#0x8
    379              if (hprt0.b.prtena == 1)
   \   00000056   C6F38001           UBFX     R1,R6,#+2,#+1
   \   0000005A   C907               LSLS     R1,R1,#+31
   \   0000005C   35D5               BPL.N    ??USB_OTG_USBH_handle_port_ISR_1
    380              {
    381                pdev->host.ConnSts = 1;
   \   0000005E   0121               MOVS     R1,#+1
   \   00000060   C4F8EC16           STR      R1,[R4, #+1772]
    382                
    383                if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
    384                    (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
   \   00000064   C6F34141           UBFX     R1,R6,#+17,#+2
   \   00000068   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006A   0229               CMP      R1,#+2
   \   0000006C   04D0               BEQ.N    ??USB_OTG_USBH_handle_port_ISR_2
   \   0000006E   C6F34141           UBFX     R1,R6,#+17,#+2
   \   00000072   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000074   0129               CMP      R1,#+1
   \   00000076   27D1               BNE.N    ??USB_OTG_USBH_handle_port_ISR_3
    385                {
    386                  
    387                  hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
   \                     ??USB_OTG_USBH_handle_port_ISR_2:
   \   00000078   6169               LDR      R1,[R4, #+20]
   \   0000007A   0968               LDR      R1,[R1, #+0]
    388                  
    389                  if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
   \   0000007C   C6F34142           UBFX     R2,R6,#+17,#+2
   \   00000080   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000082   022A               CMP      R2,#+2
   \   00000084   11D1               BNE.N    ??USB_OTG_USBH_handle_port_ISR_4
    390                  {
    391                    USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 6000 );
   \   00000086   6269               LDR      R2,[R4, #+20]
   \   00000088   41F27073           MOVW     R3,#+6000
   \   0000008C   5360               STR      R3,[R2, #+4]
    392                    if (hcfg.b.fslspclksel != HCFG_6_MHZ)
   \   0000008E   11F00301           ANDS     R1,R1,#0x3
   \   00000092   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000094   0229               CMP      R1,#+2
   \   00000096   18D0               BEQ.N    ??USB_OTG_USBH_handle_port_ISR_1
    393                    {
    394                      if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
   \   00000098   E07A               LDRB     R0,[R4, #+11]
   \   0000009A   0128               CMP      R0,#+1
   \   0000009C   03D1               BNE.N    ??USB_OTG_USBH_handle_port_ISR_5
    395                      {          
    396                        USB_OTG_InitFSLSPClkSel(pdev ,HCFG_6_MHZ );
   \   0000009E   0221               MOVS     R1,#+2
   \   000000A0   2000               MOVS     R0,R4
   \   000000A2   ........           BL       USB_OTG_InitFSLSPClkSel
    397                      }          
    398                      do_reset = 1;
   \                     ??USB_OTG_USBH_handle_port_ISR_5:
   \   000000A6   0120               MOVS     R0,#+1
   \   000000A8   0FE0               B.N      ??USB_OTG_USBH_handle_port_ISR_1
    399                    }
    400                  }
    401                  else
    402                  {
    403                    
    404                    USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 48000 );            
   \                     ??USB_OTG_USBH_handle_port_ISR_4:
   \   000000AA   6269               LDR      R2,[R4, #+20]
   \   000000AC   4BF68033           MOVW     R3,#+48000
   \   000000B0   5360               STR      R3,[R2, #+4]
    405                    if (hcfg.b.fslspclksel != HCFG_48_MHZ)
   \   000000B2   11F00301           ANDS     R1,R1,#0x3
   \   000000B6   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000B8   0129               CMP      R1,#+1
   \   000000BA   06D0               BEQ.N    ??USB_OTG_USBH_handle_port_ISR_1
    406                    {
    407                      USB_OTG_InitFSLSPClkSel(pdev ,HCFG_48_MHZ );
   \   000000BC   0121               MOVS     R1,#+1
   \   000000BE   2000               MOVS     R0,R4
   \   000000C0   ........           BL       USB_OTG_InitFSLSPClkSel
    408                      do_reset = 1;
   \   000000C4   0120               MOVS     R0,#+1
   \   000000C6   00E0               B.N      ??USB_OTG_USBH_handle_port_ISR_1
    409                    }
    410                  }
    411                }
    412                else
    413                {
    414                  do_reset = 1;
   \                     ??USB_OTG_USBH_handle_port_ISR_3:
   \   000000C8   0120               MOVS     R0,#+1
    415                }
    416              }
    417            }
    418            /* Overcurrent Change Interrupt */
    419            if (hprt0.b.prtovrcurrchng)
   \                     ??USB_OTG_USBH_handle_port_ISR_1:
   \   000000CA   C6F34011           UBFX     R1,R6,#+5,#+1
   \   000000CE   C907               LSLS     R1,R1,#+31
   \   000000D0   03D5               BPL.N    ??USB_OTG_USBH_handle_port_ISR_6
    420            {
    421              hprt0_dup.b.prtovrcurrchng = 1;
   \   000000D2   57F02007           ORRS     R7,R7,#0x20
    422              retval |= 1;
   \   000000D6   55F00105           ORRS     R5,R5,#0x1
    423            }
    424            if (do_reset)
   \                     ??USB_OTG_USBH_handle_port_ISR_6:
   \   000000DA   0028               CMP      R0,#+0
   \   000000DC   02D0               BEQ.N    ??USB_OTG_USBH_handle_port_ISR_7
    425            {
    426              USB_OTG_ResetPort(pdev);
   \   000000DE   2000               MOVS     R0,R4
   \   000000E0   ........           BL       USB_OTG_ResetPort
    427              
    428            }
    429            
    430            /* Clear Port Interrupts */
    431            USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0_dup.d32);
   \                     ??USB_OTG_USBH_handle_port_ISR_7:
   \   000000E4   D4F8CC00           LDR      R0,[R4, #+204]
   \   000000E8   0760               STR      R7,[R0, #+0]
    432            
    433            return retval;
   \   000000EA   2800               MOVS     R0,R5
   \   000000EC   F2BD               POP      {R1,R4-R7,PC}    ;; return
    434          }
    435          
    436          /**
    437            * @brief  USB_OTG_USBH_handle_hc_n_Out_ISR 
    438            *         Handles interrupt for a specific Host Channel
    439            * @param  pdev: Selected device
    440            * @param  hc_num: Channel number
    441            * @retval status 
    442            */

   \                                 In section .text, align 2, keep-with-next
    443          uint32_t USB_OTG_USBH_handle_hc_n_Out_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
    444          {
   \                     USB_OTG_USBH_handle_hc_n_Out_ISR:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
    445            
    446            USB_OTG_HCINTn_TypeDef     hcint;
    447            USB_OTG_HCGINTMSK_TypeDef  hcintmsk;
    448            USB_OTG_HC_REGS *hcreg;
    449            USB_OTG_HCCHAR_TypeDef     hcchar; 
    450            
    451            hcreg = pdev->regs.HC_REGS[num];
   \   00000006   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   0000000A   D0F89060           LDR      R6,[R0, #+144]
    452            hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
   \   0000000E   B068               LDR      R0,[R6, #+8]
    453            hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCGINTMSK);
   \   00000010   F168               LDR      R1,[R6, #+12]
    454            hcint.d32 = hcint.d32 & hcintmsk.d32;
   \   00000012   0840               ANDS     R0,R1,R0
    455            
    456            hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
   \   00000014   14EB8501           ADDS     R1,R4,R5, LSL #+2
   \   00000018   D1F89010           LDR      R1,[R1, #+144]
   \   0000001C   0968               LDR      R1,[R1, #+0]
    457            
    458            if (hcint.b.ahberr)
   \   0000001E   C0F38002           UBFX     R2,R0,#+2,#+1
   \   00000022   D207               LSLS     R2,R2,#+31
   \   00000024   10D5               BPL.N    ??USB_OTG_USBH_handle_hc_n_Out_ISR_0
    459            {
    460              CLEAR_HC_INT(hcreg ,ahberr);
   \   00000026   0020               MOVS     R0,#+0
   \   00000028   50F00400           ORRS     R0,R0,#0x4
   \   0000002C   B060               STR      R0,[R6, #+8]
    461              UNMASK_HOST_INT_CHH (num);
   \   0000002E   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   00000032   D0F89000           LDR      R0,[R0, #+144]
   \   00000036   C068               LDR      R0,[R0, #+12]
   \   00000038   50F00200           ORRS     R0,R0,#0x2
   \   0000003C   14EB8501           ADDS     R1,R4,R5, LSL #+2
   \   00000040   D1F89010           LDR      R1,[R1, #+144]
   \   00000044   C860               STR      R0,[R1, #+12]
   \   00000046   21E1               B.N      ??USB_OTG_USBH_handle_hc_n_Out_ISR_1
    462            } 
    463            else if (hcint.b.ack)
   \                     ??USB_OTG_USBH_handle_hc_n_Out_ISR_0:
   \   00000048   C0F34012           UBFX     R2,R0,#+5,#+1
   \   0000004C   D207               LSLS     R2,R2,#+31
   \   0000004E   04D5               BPL.N    ??USB_OTG_USBH_handle_hc_n_Out_ISR_2
    464            {
    465              CLEAR_HC_INT(hcreg , ack);
   \   00000050   0020               MOVS     R0,#+0
   \   00000052   50F02000           ORRS     R0,R0,#0x20
   \   00000056   B060               STR      R0,[R6, #+8]
   \   00000058   18E1               B.N      ??USB_OTG_USBH_handle_hc_n_Out_ISR_1
    466            }
    467            
    468            else if (hcint.b.xfercompl)
   \                     ??USB_OTG_USBH_handle_hc_n_Out_ISR_2:
   \   0000005A   10F00102           ANDS     R2,R0,#0x1
   \   0000005E   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000060   002A               CMP      R2,#+0
   \   00000062   1ED0               BEQ.N    ??USB_OTG_USBH_handle_hc_n_Out_ISR_3
    469            {
    470              pdev->host.ErrCnt[num] = 0;
   \   00000064   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   00000068   0021               MOVS     R1,#+0
   \   0000006A   C0F8F016           STR      R1,[R0, #+1776]
    471              UNMASK_HOST_INT_CHH (num);
   \   0000006E   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   00000072   D0F89000           LDR      R0,[R0, #+144]
   \   00000076   C068               LDR      R0,[R0, #+12]
   \   00000078   50F00200           ORRS     R0,R0,#0x2
   \   0000007C   14EB8501           ADDS     R1,R4,R5, LSL #+2
   \   00000080   D1F89010           LDR      R1,[R1, #+144]
   \   00000084   C860               STR      R0,[R1, #+12]
    472              USB_OTG_HC_Halt(pdev, num);
   \   00000086   2900               MOVS     R1,R5
   \   00000088   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000008A   2000               MOVS     R0,R4
   \   0000008C   ........           BL       USB_OTG_HC_Halt
    473              CLEAR_HC_INT(hcreg , xfercompl);
   \   00000090   0020               MOVS     R0,#+0
   \   00000092   50F00100           ORRS     R0,R0,#0x1
   \   00000096   B060               STR      R0,[R6, #+8]
    474              pdev->host.HC_Status[num] = HC_XFRC;            
   \   00000098   2819               ADDS     R0,R5,R4
   \   0000009A   0121               MOVS     R1,#+1
   \   0000009C   80F86817           STRB     R1,[R0, #+1896]
   \   000000A0   F4E0               B.N      ??USB_OTG_USBH_handle_hc_n_Out_ISR_1
    475            }
    476            
    477            else if (hcint.b.stall)
   \                     ??USB_OTG_USBH_handle_hc_n_Out_ISR_3:
   \   000000A2   C0F3C002           UBFX     R2,R0,#+3,#+1
   \   000000A6   D207               LSLS     R2,R2,#+31
   \   000000A8   19D5               BPL.N    ??USB_OTG_USBH_handle_hc_n_Out_ISR_4
    478            {
    479              CLEAR_HC_INT(hcreg , stall);
   \   000000AA   0020               MOVS     R0,#+0
   \   000000AC   50F00800           ORRS     R0,R0,#0x8
   \   000000B0   B060               STR      R0,[R6, #+8]
    480              UNMASK_HOST_INT_CHH (num);
   \   000000B2   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   000000B6   D0F89000           LDR      R0,[R0, #+144]
   \   000000BA   C068               LDR      R0,[R0, #+12]
   \   000000BC   50F00200           ORRS     R0,R0,#0x2
   \   000000C0   14EB8501           ADDS     R1,R4,R5, LSL #+2
   \   000000C4   D1F89010           LDR      R1,[R1, #+144]
   \   000000C8   C860               STR      R0,[R1, #+12]
    481              USB_OTG_HC_Halt(pdev, num);
   \   000000CA   2900               MOVS     R1,R5
   \   000000CC   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000CE   2000               MOVS     R0,R4
   \   000000D0   ........           BL       USB_OTG_HC_Halt
    482              pdev->host.HC_Status[num] = HC_STALL;      
   \   000000D4   2819               ADDS     R0,R5,R4
   \   000000D6   0521               MOVS     R1,#+5
   \   000000D8   80F86817           STRB     R1,[R0, #+1896]
   \   000000DC   D6E0               B.N      ??USB_OTG_USBH_handle_hc_n_Out_ISR_1
    483            }
    484            
    485            else if (hcint.b.nak)
   \                     ??USB_OTG_USBH_handle_hc_n_Out_ISR_4:
   \   000000DE   C0F30012           UBFX     R2,R0,#+4,#+1
   \   000000E2   D207               LSLS     R2,R2,#+31
   \   000000E4   1ED5               BPL.N    ??USB_OTG_USBH_handle_hc_n_Out_ISR_5
    486            {
    487              pdev->host.ErrCnt[num] = 0;
   \   000000E6   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   000000EA   0021               MOVS     R1,#+0
   \   000000EC   C0F8F016           STR      R1,[R0, #+1776]
    488              UNMASK_HOST_INT_CHH (num);
   \   000000F0   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   000000F4   D0F89000           LDR      R0,[R0, #+144]
   \   000000F8   C068               LDR      R0,[R0, #+12]
   \   000000FA   50F00200           ORRS     R0,R0,#0x2
   \   000000FE   14EB8501           ADDS     R1,R4,R5, LSL #+2
   \   00000102   D1F89010           LDR      R1,[R1, #+144]
   \   00000106   C860               STR      R0,[R1, #+12]
    489              USB_OTG_HC_Halt(pdev, num);
   \   00000108   2900               MOVS     R1,R5
   \   0000010A   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000010C   2000               MOVS     R0,R4
   \   0000010E   ........           BL       USB_OTG_HC_Halt
    490              CLEAR_HC_INT(hcreg , nak);
   \   00000112   0020               MOVS     R0,#+0
   \   00000114   50F01000           ORRS     R0,R0,#0x10
   \   00000118   B060               STR      R0,[R6, #+8]
    491              pdev->host.HC_Status[num] = HC_NAK;      
   \   0000011A   2819               ADDS     R0,R5,R4
   \   0000011C   0321               MOVS     R1,#+3
   \   0000011E   80F86817           STRB     R1,[R0, #+1896]
   \   00000122   B3E0               B.N      ??USB_OTG_USBH_handle_hc_n_Out_ISR_1
    492            }
    493            
    494            else if (hcint.b.xacterr)
   \                     ??USB_OTG_USBH_handle_hc_n_Out_ISR_5:
   \   00000124   C0F3C012           UBFX     R2,R0,#+7,#+1
   \   00000128   D207               LSLS     R2,R2,#+31
   \   0000012A   22D5               BPL.N    ??USB_OTG_USBH_handle_hc_n_Out_ISR_6
    495            {
    496              UNMASK_HOST_INT_CHH (num);
   \   0000012C   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   00000130   D0F89000           LDR      R0,[R0, #+144]
   \   00000134   C068               LDR      R0,[R0, #+12]
   \   00000136   50F00200           ORRS     R0,R0,#0x2
   \   0000013A   14EB8501           ADDS     R1,R4,R5, LSL #+2
   \   0000013E   D1F89010           LDR      R1,[R1, #+144]
   \   00000142   C860               STR      R0,[R1, #+12]
    497              USB_OTG_HC_Halt(pdev, num);
   \   00000144   2900               MOVS     R1,R5
   \   00000146   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000148   2000               MOVS     R0,R4
   \   0000014A   ........           BL       USB_OTG_HC_Halt
    498              pdev->host.ErrCnt[num] ++;
   \   0000014E   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   00000152   D0F8F006           LDR      R0,[R0, #+1776]
   \   00000156   401C               ADDS     R0,R0,#+1
   \   00000158   14EB8501           ADDS     R1,R4,R5, LSL #+2
   \   0000015C   C1F8F006           STR      R0,[R1, #+1776]
    499              pdev->host.HC_Status[num] = HC_XACTERR;
   \   00000160   2819               ADDS     R0,R5,R4
   \   00000162   0621               MOVS     R1,#+6
   \   00000164   80F86817           STRB     R1,[R0, #+1896]
    500              CLEAR_HC_INT(hcreg , xacterr);
   \   00000168   0020               MOVS     R0,#+0
   \   0000016A   50F08000           ORRS     R0,R0,#0x80
   \   0000016E   B060               STR      R0,[R6, #+8]
   \   00000170   8CE0               B.N      ??USB_OTG_USBH_handle_hc_n_Out_ISR_1
    501            }
    502            else if (hcint.b.nyet)
   \                     ??USB_OTG_USBH_handle_hc_n_Out_ISR_6:
   \   00000172   C0F38012           UBFX     R2,R0,#+6,#+1
   \   00000176   D207               LSLS     R2,R2,#+31
   \   00000178   1ED5               BPL.N    ??USB_OTG_USBH_handle_hc_n_Out_ISR_7
    503            {
    504              pdev->host.ErrCnt[num] = 0;
   \   0000017A   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   0000017E   0021               MOVS     R1,#+0
   \   00000180   C0F8F016           STR      R1,[R0, #+1776]
    505              UNMASK_HOST_INT_CHH (num);
   \   00000184   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   00000188   D0F89000           LDR      R0,[R0, #+144]
   \   0000018C   C068               LDR      R0,[R0, #+12]
   \   0000018E   50F00200           ORRS     R0,R0,#0x2
   \   00000192   14EB8501           ADDS     R1,R4,R5, LSL #+2
   \   00000196   D1F89010           LDR      R1,[R1, #+144]
   \   0000019A   C860               STR      R0,[R1, #+12]
    506              USB_OTG_HC_Halt(pdev, num);
   \   0000019C   2900               MOVS     R1,R5
   \   0000019E   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001A0   2000               MOVS     R0,R4
   \   000001A2   ........           BL       USB_OTG_HC_Halt
    507              CLEAR_HC_INT(hcreg , nyet);
   \   000001A6   0020               MOVS     R0,#+0
   \   000001A8   50F04000           ORRS     R0,R0,#0x40
   \   000001AC   B060               STR      R0,[R6, #+8]
    508              pdev->host.HC_Status[num] = HC_NYET;    
   \   000001AE   2819               ADDS     R0,R5,R4
   \   000001B0   0421               MOVS     R1,#+4
   \   000001B2   80F86817           STRB     R1,[R0, #+1896]
   \   000001B6   69E0               B.N      ??USB_OTG_USBH_handle_hc_n_Out_ISR_1
    509            }
    510            
    511            else if (hcint.b.chhltd)
   \                     ??USB_OTG_USBH_handle_hc_n_Out_ISR_7:
   \   000001B8   C0F34000           UBFX     R0,R0,#+1,#+1
   \   000001BC   C007               LSLS     R0,R0,#+31
   \   000001BE   65D5               BPL.N    ??USB_OTG_USBH_handle_hc_n_Out_ISR_1
    512            {
    513              MASK_HOST_INT_CHH (num);
   \   000001C0   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   000001C4   D0F89000           LDR      R0,[R0, #+144]
   \   000001C8   C068               LDR      R0,[R0, #+12]
   \   000001CA   30F00200           BICS     R0,R0,#0x2
   \   000001CE   14EB8502           ADDS     R2,R4,R5, LSL #+2
   \   000001D2   D2F89020           LDR      R2,[R2, #+144]
   \   000001D6   D060               STR      R0,[R2, #+12]
    514              
    515              if(pdev->host.HC_Status[num] == HC_XFRC)
   \   000001D8   2819               ADDS     R0,R5,R4
   \   000001DA   90F86807           LDRB     R0,[R0, #+1896]
   \   000001DE   0128               CMP      R0,#+1
   \   000001E0   13D1               BNE.N    ??USB_OTG_USBH_handle_hc_n_Out_ISR_8
    516              {
    517                pdev->host.URB_State[num] = URB_DONE;  
   \   000001E2   2819               ADDS     R0,R5,R4
   \   000001E4   0122               MOVS     R2,#+1
   \   000001E6   80F87727           STRB     R2,[R0, #+1911]
    518                
    519                if (hcchar.b.eptype == EP_TYPE_BULK)
   \   000001EA   C1F38140           UBFX     R0,R1,#+18,#+2
   \   000001EE   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001F0   0228               CMP      R0,#+2
   \   000001F2   47D1               BNE.N    ??USB_OTG_USBH_handle_hc_n_Out_ISR_9
    520                {
    521                  pdev->host.hc[num].toggle_out ^= 1; 
   \   000001F4   14EB4510           ADDS     R0,R4,R5, LSL #+5
   \   000001F8   90F8A107           LDRB     R0,[R0, #+1953]
   \   000001FC   90F00100           EORS     R0,R0,#0x1
   \   00000200   14EB4511           ADDS     R1,R4,R5, LSL #+5
   \   00000204   81F8A107           STRB     R0,[R1, #+1953]
   \   00000208   3CE0               B.N      ??USB_OTG_USBH_handle_hc_n_Out_ISR_9
    522                }
    523              }
    524              else if(pdev->host.HC_Status[num] == HC_NAK)
   \                     ??USB_OTG_USBH_handle_hc_n_Out_ISR_8:
   \   0000020A   2819               ADDS     R0,R5,R4
   \   0000020C   90F86807           LDRB     R0,[R0, #+1896]
   \   00000210   0328               CMP      R0,#+3
   \   00000212   04D1               BNE.N    ??USB_OTG_USBH_handle_hc_n_Out_ISR_10
    525              {
    526                pdev->host.URB_State[num] = URB_NOTREADY;      
   \   00000214   2819               ADDS     R0,R5,R4
   \   00000216   0221               MOVS     R1,#+2
   \   00000218   80F87717           STRB     R1,[R0, #+1911]
   \   0000021C   32E0               B.N      ??USB_OTG_USBH_handle_hc_n_Out_ISR_9
    527              }    
    528              else if(pdev->host.HC_Status[num] == HC_NYET)
   \                     ??USB_OTG_USBH_handle_hc_n_Out_ISR_10:
   \   0000021E   2819               ADDS     R0,R5,R4
   \   00000220   90F86807           LDRB     R0,[R0, #+1896]
   \   00000224   0428               CMP      R0,#+4
   \   00000226   0FD1               BNE.N    ??USB_OTG_USBH_handle_hc_n_Out_ISR_11
    529              {
    530                if(pdev->host.hc[num].do_ping == 1)
   \   00000228   14EB4510           ADDS     R0,R4,R5, LSL #+5
   \   0000022C   90F88C07           LDRB     R0,[R0, #+1932]
   \   00000230   0128               CMP      R0,#+1
   \   00000232   04D1               BNE.N    ??USB_OTG_USBH_handle_hc_n_Out_ISR_12
    531                {
    532                  USB_OTG_HC_DoPing(pdev, num);
   \   00000234   2900               MOVS     R1,R5
   \   00000236   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000238   2000               MOVS     R0,R4
   \   0000023A   ........           BL       USB_OTG_HC_DoPing
    533                }
    534                pdev->host.URB_State[num] = URB_NOTREADY;      
   \                     ??USB_OTG_USBH_handle_hc_n_Out_ISR_12:
   \   0000023E   2819               ADDS     R0,R5,R4
   \   00000240   0221               MOVS     R1,#+2
   \   00000242   80F87717           STRB     R1,[R0, #+1911]
   \   00000246   1DE0               B.N      ??USB_OTG_USBH_handle_hc_n_Out_ISR_9
    535              }      
    536              else if(pdev->host.HC_Status[num] == HC_STALL)
   \                     ??USB_OTG_USBH_handle_hc_n_Out_ISR_11:
   \   00000248   2819               ADDS     R0,R5,R4
   \   0000024A   90F86807           LDRB     R0,[R0, #+1896]
   \   0000024E   0528               CMP      R0,#+5
   \   00000250   04D1               BNE.N    ??USB_OTG_USBH_handle_hc_n_Out_ISR_13
    537              {
    538                pdev->host.URB_State[num] = URB_STALL;      
   \   00000252   2819               ADDS     R0,R5,R4
   \   00000254   0421               MOVS     R1,#+4
   \   00000256   80F87717           STRB     R1,[R0, #+1911]
   \   0000025A   13E0               B.N      ??USB_OTG_USBH_handle_hc_n_Out_ISR_9
    539              }  
    540              else if(pdev->host.HC_Status[num] == HC_XACTERR)
   \                     ??USB_OTG_USBH_handle_hc_n_Out_ISR_13:
   \   0000025C   2819               ADDS     R0,R5,R4
   \   0000025E   90F86807           LDRB     R0,[R0, #+1896]
   \   00000262   0628               CMP      R0,#+6
   \   00000264   0ED1               BNE.N    ??USB_OTG_USBH_handle_hc_n_Out_ISR_9
    541              {
    542                if (pdev->host.ErrCnt[num] == 3)
   \   00000266   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   0000026A   D0F8F006           LDR      R0,[R0, #+1776]
   \   0000026E   0328               CMP      R0,#+3
   \   00000270   08D1               BNE.N    ??USB_OTG_USBH_handle_hc_n_Out_ISR_9
    543                {
    544                  pdev->host.URB_State[num] = URB_ERROR;  
   \   00000272   2819               ADDS     R0,R5,R4
   \   00000274   0321               MOVS     R1,#+3
   \   00000276   80F87717           STRB     R1,[R0, #+1911]
    545                  pdev->host.ErrCnt[num] = 0;
   \   0000027A   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   0000027E   0021               MOVS     R1,#+0
   \   00000280   C0F8F016           STR      R1,[R0, #+1776]
    546                }
    547              }
    548              CLEAR_HC_INT(hcreg , chhltd);    
   \                     ??USB_OTG_USBH_handle_hc_n_Out_ISR_9:
   \   00000284   0020               MOVS     R0,#+0
   \   00000286   50F00200           ORRS     R0,R0,#0x2
   \   0000028A   B060               STR      R0,[R6, #+8]
    549            }
    550            
    551          
    552            return 1;
   \                     ??USB_OTG_USBH_handle_hc_n_Out_ISR_1:
   \   0000028C   0120               MOVS     R0,#+1
   \   0000028E   70BD               POP      {R4-R6,PC}       ;; return
    553          }
    554          
    555          /**
    556            * @brief  USB_OTG_USBH_handle_hc_n_In_ISR 
    557            *         Handles interrupt for a specific Host Channel
    558            * @param  pdev: Selected device
    559            * @param  hc_num: Channel number
    560            * @retval status 
    561            */

   \                                 In section .text, align 2, keep-with-next
    562          uint32_t USB_OTG_USBH_handle_hc_n_In_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
    563          {
   \                     USB_OTG_USBH_handle_hc_n_In_ISR:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0D00               MOVS     R5,R1
    564            USB_OTG_HCINTn_TypeDef     hcint;
    565            USB_OTG_HCGINTMSK_TypeDef  hcintmsk;
    566            USB_OTG_HCCHAR_TypeDef     hcchar; 
    567            USB_OTG_HCTSIZn_TypeDef  hctsiz;
    568            USB_OTG_HC_REGS *hcreg;
    569          
    570            
    571            hcreg = pdev->regs.HC_REGS[num];
   \   00000008   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   0000000C   D0F89060           LDR      R6,[R0, #+144]
    572            hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
   \   00000010   D6F80880           LDR      R8,[R6, #+8]
    573            hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCGINTMSK);
   \   00000014   F068               LDR      R0,[R6, #+12]
    574            hcint.d32 = hcint.d32 & hcintmsk.d32;
   \   00000016   10EA0808           ANDS     R8,R0,R8
    575            hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
   \   0000001A   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   0000001E   D0F89000           LDR      R0,[R0, #+144]
   \   00000022   0768               LDR      R7,[R0, #+0]
    576            hcintmsk.d32 = 0;
   \   00000024   0020               MOVS     R0,#+0
    577            
    578            
    579            if (hcint.b.ahberr)
   \   00000026   C8F38001           UBFX     R1,R8,#+2,#+1
   \   0000002A   C907               LSLS     R1,R1,#+31
   \   0000002C   10D5               BPL.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_0
    580            {
    581              CLEAR_HC_INT(hcreg ,ahberr);
   \   0000002E   0020               MOVS     R0,#+0
   \   00000030   50F00400           ORRS     R0,R0,#0x4
   \   00000034   B060               STR      R0,[R6, #+8]
    582              UNMASK_HOST_INT_CHH (num);
   \   00000036   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   0000003A   D0F89000           LDR      R0,[R0, #+144]
   \   0000003E   C068               LDR      R0,[R0, #+12]
   \   00000040   50F00200           ORRS     R0,R0,#0x2
   \   00000044   14EB8501           ADDS     R1,R4,R5, LSL #+2
   \   00000048   D1F89010           LDR      R1,[R1, #+144]
   \   0000004C   C860               STR      R0,[R1, #+12]
   \   0000004E   4EE0               B.N      ??USB_OTG_USBH_handle_hc_n_In_ISR_1
    583            }  
    584            else if (hcint.b.ack)
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_0:
   \   00000050   C8F34010           UBFX     R0,R8,#+5,#+1
   \   00000054   C007               LSLS     R0,R0,#+31
   \   00000056   04D5               BPL.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_2
    585            {
    586              CLEAR_HC_INT(hcreg ,ack);
   \   00000058   0020               MOVS     R0,#+0
   \   0000005A   50F02000           ORRS     R0,R0,#0x20
   \   0000005E   B060               STR      R0,[R6, #+8]
   \   00000060   45E0               B.N      ??USB_OTG_USBH_handle_hc_n_In_ISR_1
    587            }
    588            
    589            else if (hcint.b.stall)  
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_2:
   \   00000062   C8F3C000           UBFX     R0,R8,#+3,#+1
   \   00000066   C007               LSLS     R0,R0,#+31
   \   00000068   1FD5               BPL.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_3
    590            {
    591              UNMASK_HOST_INT_CHH (num);
   \   0000006A   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   0000006E   D0F89000           LDR      R0,[R0, #+144]
   \   00000072   C068               LDR      R0,[R0, #+12]
   \   00000074   50F00200           ORRS     R0,R0,#0x2
   \   00000078   14EB8501           ADDS     R1,R4,R5, LSL #+2
   \   0000007C   D1F89010           LDR      R1,[R1, #+144]
   \   00000080   C860               STR      R0,[R1, #+12]
    592              pdev->host.HC_Status[num] = HC_STALL; 
   \   00000082   2819               ADDS     R0,R5,R4
   \   00000084   0521               MOVS     R1,#+5
   \   00000086   80F86817           STRB     R1,[R0, #+1896]
    593              CLEAR_HC_INT(hcreg , nak);   /* Clear the NAK Condition */
   \   0000008A   0020               MOVS     R0,#+0
   \   0000008C   50F01000           ORRS     R0,R0,#0x10
   \   00000090   B060               STR      R0,[R6, #+8]
    594              CLEAR_HC_INT(hcreg , stall); /* Clear the STALL Condition */
   \   00000092   0020               MOVS     R0,#+0
   \   00000094   50F00800           ORRS     R0,R0,#0x8
   \   00000098   B060               STR      R0,[R6, #+8]
    595              hcint.b.nak = 0;           /* NOTE: When there is a 'stall', reset also nak, 
   \   0000009A   38F01008           BICS     R8,R8,#0x10
    596                                            else, the pdev->host.HC_Status = HC_STALL
    597                                            will be overwritten by 'nak' in code below */
    598              USB_OTG_HC_Halt(pdev, num);    
   \   0000009E   2900               MOVS     R1,R5
   \   000000A0   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000A2   2000               MOVS     R0,R4
   \   000000A4   ........           BL       USB_OTG_HC_Halt
   \   000000A8   21E0               B.N      ??USB_OTG_USBH_handle_hc_n_In_ISR_1
    599            }
    600            else if (hcint.b.datatglerr)
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_3:
   \   000000AA   C8F38020           UBFX     R0,R8,#+10,#+1
   \   000000AE   C007               LSLS     R0,R0,#+31
   \   000000B0   1DD5               BPL.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_1
    601            {
    602              if(hcchar.b.eptype == EP_TYPE_INTR)
   \   000000B2   C7F38140           UBFX     R0,R7,#+18,#+2
   \   000000B6   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B8   0328               CMP      R0,#+3
   \   000000BA   14D1               BNE.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_4
    603              {
    604                UNMASK_HOST_INT_CHH (num);
   \   000000BC   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   000000C0   D0F89000           LDR      R0,[R0, #+144]
   \   000000C4   C068               LDR      R0,[R0, #+12]
   \   000000C6   50F00200           ORRS     R0,R0,#0x2
   \   000000CA   14EB8501           ADDS     R1,R4,R5, LSL #+2
   \   000000CE   D1F89010           LDR      R1,[R1, #+144]
   \   000000D2   C860               STR      R0,[R1, #+12]
    605                USB_OTG_HC_Halt(pdev, num);
   \   000000D4   2900               MOVS     R1,R5
   \   000000D6   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000D8   2000               MOVS     R0,R4
   \   000000DA   ........           BL       USB_OTG_HC_Halt
    606                CLEAR_HC_INT(hcreg , nak);   
   \   000000DE   0020               MOVS     R0,#+0
   \   000000E0   50F01000           ORRS     R0,R0,#0x10
   \   000000E4   B060               STR      R0,[R6, #+8]
    607              }
    608              CLEAR_HC_INT(hcreg , datatglerr);
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_4:
   \   000000E6   0020               MOVS     R0,#+0
   \   000000E8   50F48060           ORRS     R0,R0,#0x400
   \   000000EC   B060               STR      R0,[R6, #+8]
    609            }    
    610            
    611            if (hcint.b.frmovrun)
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_1:
   \   000000EE   C8F34020           UBFX     R0,R8,#+9,#+1
   \   000000F2   C007               LSLS     R0,R0,#+31
   \   000000F4   16D5               BPL.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_5
    612            {
    613              UNMASK_HOST_INT_CHH (num);
   \   000000F6   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   000000FA   D0F89000           LDR      R0,[R0, #+144]
   \   000000FE   C068               LDR      R0,[R0, #+12]
   \   00000100   50F00200           ORRS     R0,R0,#0x2
   \   00000104   14EB8501           ADDS     R1,R4,R5, LSL #+2
   \   00000108   D1F89010           LDR      R1,[R1, #+144]
   \   0000010C   C860               STR      R0,[R1, #+12]
    614              USB_OTG_HC_Halt(pdev, num);
   \   0000010E   2900               MOVS     R1,R5
   \   00000110   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000112   2000               MOVS     R0,R4
   \   00000114   ........           BL       USB_OTG_HC_Halt
    615              CLEAR_HC_INT(hcreg ,frmovrun);
   \   00000118   0020               MOVS     R0,#+0
   \   0000011A   4FF40071           MOV      R1,#+512
   \   0000011E   0843               ORRS     R0,R1,R0
   \   00000120   B060               STR      R0,[R6, #+8]
   \   00000122   04E1               B.N      ??USB_OTG_USBH_handle_hc_n_In_ISR_6
    616            }
    617            
    618            else if (hcint.b.xfercompl)
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_5:
   \   00000124   18F00100           ANDS     R0,R8,#0x1
   \   00000128   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000012A   0028               CMP      R0,#+0
   \   0000012C   5BD0               BEQ.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_7
    619            {
    620              
    621              if (pdev->cfg.dma_enable == 1)
   \   0000012E   E078               LDRB     R0,[R4, #+3]
   \   00000130   0128               CMP      R0,#+1
   \   00000132   0FD1               BNE.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_8
    622              {
    623                hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCTSIZ);
   \   00000134   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   00000138   D0F89000           LDR      R0,[R0, #+144]
   \   0000013C   0069               LDR      R0,[R0, #+16]
    624                pdev->host.XferCnt[num] =  pdev->host.hc[num].xfer_len - hctsiz.b.xfersize;
   \   0000013E   14EB4511           ADDS     R1,R4,R5, LSL #+5
   \   00000142   D1F89817           LDR      R1,[R1, #+1944]
   \   00000146   4003               LSLS     R0,R0,#+13
   \   00000148   400B               LSRS     R0,R0,#+13
   \   0000014A   081A               SUBS     R0,R1,R0
   \   0000014C   14EB8501           ADDS     R1,R4,R5, LSL #+2
   \   00000150   C1F82C07           STR      R0,[R1, #+1836]
    625              }
    626           
    627              pdev->host.HC_Status[num] = HC_XFRC;     
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_8:
   \   00000154   2819               ADDS     R0,R5,R4
   \   00000156   0121               MOVS     R1,#+1
   \   00000158   80F86817           STRB     R1,[R0, #+1896]
    628              pdev->host.ErrCnt [num]= 0;
   \   0000015C   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   00000160   0021               MOVS     R1,#+0
   \   00000162   C0F8F016           STR      R1,[R0, #+1776]
    629              CLEAR_HC_INT(hcreg , xfercompl);
   \   00000166   0020               MOVS     R0,#+0
   \   00000168   50F00100           ORRS     R0,R0,#0x1
   \   0000016C   B060               STR      R0,[R6, #+8]
    630              
    631              if ((hcchar.b.eptype == EP_TYPE_CTRL)||
    632                  (hcchar.b.eptype == EP_TYPE_BULK))
   \   0000016E   C7F38140           UBFX     R0,R7,#+18,#+2
   \   00000172   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000174   0028               CMP      R0,#+0
   \   00000176   04D0               BEQ.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_9
   \   00000178   C7F38140           UBFX     R0,R7,#+18,#+2
   \   0000017C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000017E   0228               CMP      R0,#+2
   \   00000180   1FD1               BNE.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_10
    633              {
    634                UNMASK_HOST_INT_CHH (num);
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_9:
   \   00000182   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   00000186   D0F89000           LDR      R0,[R0, #+144]
   \   0000018A   C068               LDR      R0,[R0, #+12]
   \   0000018C   50F00200           ORRS     R0,R0,#0x2
   \   00000190   14EB8501           ADDS     R1,R4,R5, LSL #+2
   \   00000194   D1F89010           LDR      R1,[R1, #+144]
   \   00000198   C860               STR      R0,[R1, #+12]
    635                USB_OTG_HC_Halt(pdev, num);
   \   0000019A   2900               MOVS     R1,R5
   \   0000019C   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000019E   2000               MOVS     R0,R4
   \   000001A0   ........           BL       USB_OTG_HC_Halt
    636                CLEAR_HC_INT(hcreg , nak); 
   \   000001A4   0020               MOVS     R0,#+0
   \   000001A6   50F01000           ORRS     R0,R0,#0x10
   \   000001AA   B060               STR      R0,[R6, #+8]
    637                
    638                pdev->host.hc[num].toggle_in ^= 1; 
   \   000001AC   14EB4510           ADDS     R0,R4,R5, LSL #+5
   \   000001B0   90F8A007           LDRB     R0,[R0, #+1952]
   \   000001B4   90F00100           EORS     R0,R0,#0x1
   \   000001B8   14EB4511           ADDS     R1,R4,R5, LSL #+5
   \   000001BC   81F8A007           STRB     R0,[R1, #+1952]
   \   000001C0   B5E0               B.N      ??USB_OTG_USBH_handle_hc_n_In_ISR_6
    639          
    640              }
    641              else if(hcchar.b.eptype == EP_TYPE_INTR)
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_10:
   \   000001C2   C7F38140           UBFX     R0,R7,#+18,#+2
   \   000001C6   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001C8   0328               CMP      R0,#+3
   \   000001CA   40F0B080           BNE.W    ??USB_OTG_USBH_handle_hc_n_In_ISR_6
    642              {
    643                hcchar.b.oddfrm  = 1;
   \   000001CE   57F00057           ORRS     R7,R7,#0x20000000
    644                USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
   \   000001D2   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   000001D6   D0F89000           LDR      R0,[R0, #+144]
   \   000001DA   0760               STR      R7,[R0, #+0]
    645                pdev->host.URB_State[num] = URB_DONE;  
   \   000001DC   2819               ADDS     R0,R5,R4
   \   000001DE   0121               MOVS     R1,#+1
   \   000001E0   80F87717           STRB     R1,[R0, #+1911]
   \   000001E4   A3E0               B.N      ??USB_OTG_USBH_handle_hc_n_In_ISR_6
    646              }
    647              
    648            }
    649            else if (hcint.b.chhltd)
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_7:
   \   000001E6   C8F34000           UBFX     R0,R8,#+1,#+1
   \   000001EA   C007               LSLS     R0,R0,#+31
   \   000001EC   42D5               BPL.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_11
    650            {
    651              MASK_HOST_INT_CHH (num);
   \   000001EE   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   000001F2   D0F89000           LDR      R0,[R0, #+144]
   \   000001F6   C068               LDR      R0,[R0, #+12]
   \   000001F8   30F00200           BICS     R0,R0,#0x2
   \   000001FC   14EB8501           ADDS     R1,R4,R5, LSL #+2
   \   00000200   D1F89010           LDR      R1,[R1, #+144]
   \   00000204   C860               STR      R0,[R1, #+12]
    652              
    653              if(pdev->host.HC_Status[num] == HC_XFRC)
   \   00000206   2819               ADDS     R0,R5,R4
   \   00000208   90F86807           LDRB     R0,[R0, #+1896]
   \   0000020C   0128               CMP      R0,#+1
   \   0000020E   04D1               BNE.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_12
    654              {
    655                pdev->host.URB_State[num] = URB_DONE;      
   \   00000210   2819               ADDS     R0,R5,R4
   \   00000212   0121               MOVS     R1,#+1
   \   00000214   80F87717           STRB     R1,[R0, #+1911]
   \   00000218   27E0               B.N      ??USB_OTG_USBH_handle_hc_n_In_ISR_13
    656              }
    657              
    658              else if (pdev->host.HC_Status[num] == HC_STALL) 
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_12:
   \   0000021A   2819               ADDS     R0,R5,R4
   \   0000021C   90F86807           LDRB     R0,[R0, #+1896]
   \   00000220   0528               CMP      R0,#+5
   \   00000222   04D1               BNE.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_14
    659              {
    660                 pdev->host.URB_State[num] = URB_STALL;
   \   00000224   2819               ADDS     R0,R5,R4
   \   00000226   0421               MOVS     R1,#+4
   \   00000228   80F87717           STRB     R1,[R0, #+1911]
   \   0000022C   1DE0               B.N      ??USB_OTG_USBH_handle_hc_n_In_ISR_13
    661              }   
    662              
    663              else if(pdev->host.HC_Status[num] == HC_XACTERR) 
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_14:
   \   0000022E   2819               ADDS     R0,R5,R4
   \   00000230   90F86807           LDRB     R0,[R0, #+1896]
   \   00000234   0628               CMP      R0,#+6
   \   00000236   09D1               BNE.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_15
    664              {
    665                  pdev->host.ErrCnt[num] = 0;
   \   00000238   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   0000023C   0021               MOVS     R1,#+0
   \   0000023E   C0F8F016           STR      R1,[R0, #+1776]
    666                  pdev->host.URB_State[num] = URB_ERROR;  
   \   00000242   2819               ADDS     R0,R5,R4
   \   00000244   0321               MOVS     R1,#+3
   \   00000246   80F87717           STRB     R1,[R0, #+1911]
   \   0000024A   0EE0               B.N      ??USB_OTG_USBH_handle_hc_n_In_ISR_13
    667          
    668              }
    669              else if(hcchar.b.eptype == EP_TYPE_INTR)
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_15:
   \   0000024C   C7F38140           UBFX     R0,R7,#+18,#+2
   \   00000250   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000252   0328               CMP      R0,#+3
   \   00000254   09D1               BNE.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_13
    670              {
    671                pdev->host.hc[num].toggle_in ^= 1;
   \   00000256   14EB4510           ADDS     R0,R4,R5, LSL #+5
   \   0000025A   90F8A007           LDRB     R0,[R0, #+1952]
   \   0000025E   90F00100           EORS     R0,R0,#0x1
   \   00000262   14EB4511           ADDS     R1,R4,R5, LSL #+5
   \   00000266   81F8A007           STRB     R0,[R1, #+1952]
    672              }
    673              
    674              CLEAR_HC_INT(hcreg , chhltd);    
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_13:
   \   0000026A   0020               MOVS     R0,#+0
   \   0000026C   50F00200           ORRS     R0,R0,#0x2
   \   00000270   B060               STR      R0,[R6, #+8]
   \   00000272   5CE0               B.N      ??USB_OTG_USBH_handle_hc_n_In_ISR_6
    675              
    676            }    
    677            else if (hcint.b.xacterr)
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_11:
   \   00000274   C8F3C010           UBFX     R0,R8,#+7,#+1
   \   00000278   C007               LSLS     R0,R0,#+31
   \   0000027A   22D5               BPL.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_16
    678            {
    679              UNMASK_HOST_INT_CHH (num);
   \   0000027C   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   00000280   D0F89000           LDR      R0,[R0, #+144]
   \   00000284   C068               LDR      R0,[R0, #+12]
   \   00000286   50F00200           ORRS     R0,R0,#0x2
   \   0000028A   14EB8501           ADDS     R1,R4,R5, LSL #+2
   \   0000028E   D1F89010           LDR      R1,[R1, #+144]
   \   00000292   C860               STR      R0,[R1, #+12]
    680              pdev->host.ErrCnt[num] ++;
   \   00000294   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   00000298   D0F8F006           LDR      R0,[R0, #+1776]
   \   0000029C   401C               ADDS     R0,R0,#+1
   \   0000029E   14EB8501           ADDS     R1,R4,R5, LSL #+2
   \   000002A2   C1F8F006           STR      R0,[R1, #+1776]
    681              pdev->host.HC_Status[num] = HC_XACTERR;
   \   000002A6   2819               ADDS     R0,R5,R4
   \   000002A8   0621               MOVS     R1,#+6
   \   000002AA   80F86817           STRB     R1,[R0, #+1896]
    682              USB_OTG_HC_Halt(pdev, num);
   \   000002AE   2900               MOVS     R1,R5
   \   000002B0   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002B2   2000               MOVS     R0,R4
   \   000002B4   ........           BL       USB_OTG_HC_Halt
    683              CLEAR_HC_INT(hcreg , xacterr);    
   \   000002B8   0020               MOVS     R0,#+0
   \   000002BA   50F08000           ORRS     R0,R0,#0x80
   \   000002BE   B060               STR      R0,[R6, #+8]
   \   000002C0   35E0               B.N      ??USB_OTG_USBH_handle_hc_n_In_ISR_6
    684              
    685            }
    686            else if (hcint.b.nak)  
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_16:
   \   000002C2   C8F30010           UBFX     R0,R8,#+4,#+1
   \   000002C6   C007               LSLS     R0,R0,#+31
   \   000002C8   31D5               BPL.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_6
    687            {  
    688              if(hcchar.b.eptype == EP_TYPE_INTR)
   \   000002CA   C7F38140           UBFX     R0,R7,#+18,#+2
   \   000002CE   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002D0   0328               CMP      R0,#+3
   \   000002D2   15D1               BNE.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_17
    689              {
    690                UNMASK_HOST_INT_CHH (num);
   \   000002D4   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   000002D8   D0F89000           LDR      R0,[R0, #+144]
   \   000002DC   C068               LDR      R0,[R0, #+12]
   \   000002DE   50F00200           ORRS     R0,R0,#0x2
   \   000002E2   14EB8501           ADDS     R1,R4,R5, LSL #+2
   \   000002E6   D1F89010           LDR      R1,[R1, #+144]
   \   000002EA   C860               STR      R0,[R1, #+12]
    691                USB_OTG_HC_Halt(pdev, num);
   \   000002EC   2900               MOVS     R1,R5
   \   000002EE   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002F0   2000               MOVS     R0,R4
   \   000002F2   ........           BL       USB_OTG_HC_Halt
    692                CLEAR_HC_INT(hcreg , nak);   
   \   000002F6   0020               MOVS     R0,#+0
   \   000002F8   50F01000           ORRS     R0,R0,#0x10
   \   000002FC   B060               STR      R0,[R6, #+8]
   \   000002FE   12E0               B.N      ??USB_OTG_USBH_handle_hc_n_In_ISR_18
    693              }
    694               else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
    695                       (hcchar.b.eptype == EP_TYPE_BULK))
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_17:
   \   00000300   C7F38140           UBFX     R0,R7,#+18,#+2
   \   00000304   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000306   0028               CMP      R0,#+0
   \   00000308   04D0               BEQ.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_19
   \   0000030A   C7F38140           UBFX     R0,R7,#+18,#+2
   \   0000030E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000310   0228               CMP      R0,#+2
   \   00000312   08D1               BNE.N    ??USB_OTG_USBH_handle_hc_n_In_ISR_18
    696              {
    697                /* re-activate the channel  */
    698                hcchar.b.chen = 1;
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_19:
   \   00000314   57F00047           ORRS     R7,R7,#0x80000000
    699                hcchar.b.chdis = 0;
   \   00000318   37F08047           BICS     R7,R7,#0x40000000
    700                USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
   \   0000031C   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   00000320   D0F89000           LDR      R0,[R0, #+144]
   \   00000324   0760               STR      R7,[R0, #+0]
    701              }
    702              pdev->host.HC_Status[num] = HC_NAK;
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_18:
   \   00000326   2819               ADDS     R0,R5,R4
   \   00000328   0321               MOVS     R1,#+3
   \   0000032A   80F86817           STRB     R1,[R0, #+1896]
    703            }
    704          
    705            
    706            return 1;
   \                     ??USB_OTG_USBH_handle_hc_n_In_ISR_6:
   \   0000032E   0120               MOVS     R0,#+1
   \   00000330   BDE8F081           POP      {R4-R8,PC}       ;; return
    707            
    708          }
    709          
    710          /**
    711            * @brief  USB_OTG_USBH_handle_rx_qlvl_ISR 
    712            *         Handles the Rx Status Queue Level Interrupt
    713            * @param  pdev: Selected device
    714            * @retval status 
    715            */
    716          

   \                                 In section .text, align 2, keep-with-next
    717          static uint32_t USB_OTG_USBH_handle_rx_qlvl_ISR (USB_OTG_CORE_HANDLE *pdev)
    718          {
   \                     USB_OTG_USBH_handle_rx_qlvl_ISR:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
    719            USB_OTG_GRXFSTS_TypeDef       grxsts;
    720            USB_OTG_GINTMSK_TypeDef       intmsk;
    721            USB_OTG_HCTSIZn_TypeDef       hctsiz; 
    722            USB_OTG_HCCHAR_TypeDef        hcchar;
    723            __IO uint8_t                  channelnum =0;  
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   8DF80010           STRB     R1,[SP, #+0]
    724            uint32_t                      count;    
    725            
    726            /* Disable the Rx Status Queue Level interrupt */
    727            intmsk.d32 = 0;
   \   0000000A   0025               MOVS     R5,#+0
    728            intmsk.b.rxstsqlvl = 1;
   \   0000000C   55F01005           ORRS     R5,R5,#0x10
    729            USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);
   \   00000010   E168               LDR      R1,[R4, #+12]
   \   00000012   8969               LDR      R1,[R1, #+24]
   \   00000014   A943               BICS     R1,R1,R5
   \   00000016   E268               LDR      R2,[R4, #+12]
   \   00000018   9161               STR      R1,[R2, #+24]
    730            
    731            grxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRXSTSP);
   \   0000001A   E168               LDR      R1,[R4, #+12]
   \   0000001C   0E6A               LDR      R6,[R1, #+32]
    732            channelnum = grxsts.b.chnum;  
   \   0000001E   16F00F01           ANDS     R1,R6,#0xF
   \   00000022   8DF80010           STRB     R1,[SP, #+0]
    733            hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR);
   \   00000026   9DF80010           LDRB     R1,[SP, #+0]
   \   0000002A   14EB8101           ADDS     R1,R4,R1, LSL #+2
   \   0000002E   D1F89010           LDR      R1,[R1, #+144]
   \   00000032   0F68               LDR      R7,[R1, #+0]
    734            
    735            switch (grxsts.b.pktsts)
   \   00000034   710C               LSRS     R1,R6,#+17
   \   00000036   11F00F01           ANDS     R1,R1,#0xF
   \   0000003A   0229               CMP      R1,#+2
   \   0000003C   02D0               BEQ.N    ??USB_OTG_USBH_handle_rx_qlvl_ISR_0
   \   0000003E   0329               CMP      R1,#+3
   \   00000040   5BD0               BEQ.N    ??USB_OTG_USBH_handle_rx_qlvl_ISR_1
   \   00000042   85E0               B.N      ??USB_OTG_USBH_handle_rx_qlvl_ISR_2
    736            {
    737            case GRXSTS_PKTSTS_IN:
    738              /* Read the data into the host buffer. */
    739              if ((grxsts.b.bcnt > 0) && (pdev->host.hc[channelnum].xfer_buff != (void  *)0))
   \                     ??USB_OTG_USBH_handle_rx_qlvl_ISR_0:
   \   00000044   C6F30A10           UBFX     R0,R6,#+4,#+11
   \   00000048   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004A   0128               CMP      R0,#+1
   \   0000004C   54D3               BCC.N    ??USB_OTG_USBH_handle_rx_qlvl_ISR_3
   \   0000004E   9DF80000           LDRB     R0,[SP, #+0]
   \   00000052   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   00000056   D0F89407           LDR      R0,[R0, #+1940]
   \   0000005A   0028               CMP      R0,#+0
   \   0000005C   4CD0               BEQ.N    ??USB_OTG_USBH_handle_rx_qlvl_ISR_3
    740              {  
    741                
    742                USB_OTG_ReadPacket(pdev, pdev->host.hc[channelnum].xfer_buff, grxsts.b.bcnt);
   \   0000005E   C6F30A12           UBFX     R2,R6,#+4,#+11
   \   00000062   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000064   9DF80000           LDRB     R0,[SP, #+0]
   \   00000068   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   0000006C   D0F89417           LDR      R1,[R0, #+1940]
   \   00000070   2000               MOVS     R0,R4
   \   00000072   ........           BL       USB_OTG_ReadPacket
    743                /*manage multiple Xfer */
    744                pdev->host.hc[grxsts.b.chnum].xfer_buff += grxsts.b.bcnt;           
   \   00000076   16F00F00           ANDS     R0,R6,#0xF
   \   0000007A   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   0000007E   C6F30A11           UBFX     R1,R6,#+4,#+11
   \   00000082   16F00F02           ANDS     R2,R6,#0xF
   \   00000086   14EB4212           ADDS     R2,R4,R2, LSL #+5
   \   0000008A   D2F89427           LDR      R2,[R2, #+1940]
   \   0000008E   8918               ADDS     R1,R1,R2
   \   00000090   C0F89417           STR      R1,[R0, #+1940]
    745                pdev->host.hc[grxsts.b.chnum].xfer_count  += grxsts.b.bcnt;
   \   00000094   16F00F00           ANDS     R0,R6,#0xF
   \   00000098   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   0000009C   16F00F01           ANDS     R1,R6,#0xF
   \   000000A0   14EB4111           ADDS     R1,R4,R1, LSL #+5
   \   000000A4   D1F89C17           LDR      R1,[R1, #+1948]
   \   000000A8   C6F30A12           UBFX     R2,R6,#+4,#+11
   \   000000AC   5118               ADDS     R1,R2,R1
   \   000000AE   C0F89C17           STR      R1,[R0, #+1948]
    746                
    747               
    748                count = pdev->host.hc[channelnum].xfer_count;
   \   000000B2   9DF80000           LDRB     R0,[SP, #+0]
   \   000000B6   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   000000BA   D0F89C07           LDR      R0,[R0, #+1948]
    749                pdev->host.XferCnt[channelnum]  = count;
   \   000000BE   9DF80010           LDRB     R1,[SP, #+0]
   \   000000C2   14EB8101           ADDS     R1,R4,R1, LSL #+2
   \   000000C6   C1F82C07           STR      R0,[R1, #+1836]
    750                
    751                hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCTSIZ);
   \   000000CA   9DF80000           LDRB     R0,[SP, #+0]
   \   000000CE   14EB8000           ADDS     R0,R4,R0, LSL #+2
   \   000000D2   D0F89000           LDR      R0,[R0, #+144]
   \   000000D6   0069               LDR      R0,[R0, #+16]
    752                if(hctsiz.b.pktcnt > 0)
   \   000000D8   C0F3C940           UBFX     R0,R0,#+19,#+10
   \   000000DC   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000DE   0128               CMP      R0,#+1
   \   000000E0   0AD3               BCC.N    ??USB_OTG_USBH_handle_rx_qlvl_ISR_3
    753                {
    754                  /* re-activate the channel when more packets are expected */
    755                  hcchar.b.chen = 1;
   \   000000E2   57F00047           ORRS     R7,R7,#0x80000000
    756                  hcchar.b.chdis = 0;
   \   000000E6   37F08047           BICS     R7,R7,#0x40000000
    757                  USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR, hcchar.d32);
   \   000000EA   9DF80000           LDRB     R0,[SP, #+0]
   \   000000EE   14EB8000           ADDS     R0,R4,R0, LSL #+2
   \   000000F2   D0F89000           LDR      R0,[R0, #+144]
   \   000000F6   0760               STR      R7,[R0, #+0]
    758                }
    759              }
    760              break;
   \                     ??USB_OTG_USBH_handle_rx_qlvl_ISR_3:
   \   000000F8   2AE0               B.N      ??USB_OTG_USBH_handle_rx_qlvl_ISR_4
    761              
    762            case GRXSTS_PKTSTS_IN_XFER_COMP:
    763              
    764              if(hctsiz.b.pktcnt > 0)
   \                     ??USB_OTG_USBH_handle_rx_qlvl_ISR_1:
   \   000000FA   C0F3C940           UBFX     R0,R0,#+19,#+10
   \   000000FE   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000100   0128               CMP      R0,#+1
   \   00000102   24D3               BCC.N    ??USB_OTG_USBH_handle_rx_qlvl_ISR_5
    765              {
    766                if (hcchar.b.eptype == EP_TYPE_INTR) 
   \   00000104   C7F38140           UBFX     R0,R7,#+18,#+2
   \   00000108   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000010A   0328               CMP      R0,#+3
   \   0000010C   14D1               BNE.N    ??USB_OTG_USBH_handle_rx_qlvl_ISR_6
    767                {
    768                  
    769                  if( grxsts.b.pktsts == HC_PID_DATA0) 
   \   0000010E   C6F34340           UBFX     R0,R6,#+17,#+4
   \   00000112   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000114   0028               CMP      R0,#+0
   \   00000116   07D1               BNE.N    ??USB_OTG_USBH_handle_rx_qlvl_ISR_7
    770                    pdev->host.hc[channelnum].toggle_in = 0;
   \   00000118   9DF80000           LDRB     R0,[SP, #+0]
   \   0000011C   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   00000120   0021               MOVS     R1,#+0
   \   00000122   80F8A017           STRB     R1,[R0, #+1952]
   \   00000126   12E0               B.N      ??USB_OTG_USBH_handle_rx_qlvl_ISR_5
    771                  else
    772                    pdev->host.hc[channelnum].toggle_in = 1;
   \                     ??USB_OTG_USBH_handle_rx_qlvl_ISR_7:
   \   00000128   9DF80000           LDRB     R0,[SP, #+0]
   \   0000012C   14EB4010           ADDS     R0,R4,R0, LSL #+5
   \   00000130   0121               MOVS     R1,#+1
   \   00000132   80F8A017           STRB     R1,[R0, #+1952]
   \   00000136   0AE0               B.N      ??USB_OTG_USBH_handle_rx_qlvl_ISR_5
    773                }
    774                else
    775                {
    776                  pdev->host.hc[channelnum].toggle_in = grxsts.b.pktsts / 2;
   \                     ??USB_OTG_USBH_handle_rx_qlvl_ISR_6:
   \   00000138   C6F34340           UBFX     R0,R6,#+17,#+4
   \   0000013C   0221               MOVS     R1,#+2
   \   0000013E   90FBF1F0           SDIV     R0,R0,R1
   \   00000142   9DF80010           LDRB     R1,[SP, #+0]
   \   00000146   14EB4111           ADDS     R1,R4,R1, LSL #+5
   \   0000014A   81F8A007           STRB     R0,[R1, #+1952]
    777                }
    778              }
    779              break;    
   \                     ??USB_OTG_USBH_handle_rx_qlvl_ISR_5:
   \   0000014E   FFE7               B.N      ??USB_OTG_USBH_handle_rx_qlvl_ISR_4
    780              
    781            case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
    782            case GRXSTS_PKTSTS_CH_HALTED:
    783            default:
    784              break;
    785            }
    786            
    787            /* Enable the Rx Status Queue Level interrupt */
    788            intmsk.b.rxstsqlvl = 1;
   \                     ??USB_OTG_USBH_handle_rx_qlvl_ISR_2:
   \                     ??USB_OTG_USBH_handle_rx_qlvl_ISR_4:
   \   00000150   55F01005           ORRS     R5,R5,#0x10
    789            USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);
   \   00000154   E068               LDR      R0,[R4, #+12]
   \   00000156   8069               LDR      R0,[R0, #+24]
   \   00000158   2843               ORRS     R0,R5,R0
   \   0000015A   E168               LDR      R1,[R4, #+12]
   \   0000015C   8861               STR      R0,[R1, #+24]
    790            return 1;
   \   0000015E   0120               MOVS     R0,#+1
   \   00000160   F2BD               POP      {R1,R4-R7,PC}    ;; return
    791          }
    792          
    793          /**
    794            * @brief  USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR 
    795            *         Handles the incomplete Periodic transfer Interrupt
    796            * @param  pdev: Selected device
    797            * @retval status 
    798            */

   \                                 In section .text, align 2, keep-with-next
    799          static uint32_t USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (USB_OTG_CORE_HANDLE *pdev)
    800          {
    801            
    802              USB_OTG_GINTSTS_TypeDef       gintsts;
    803              USB_OTG_HCCHAR_TypeDef        hcchar; 
    804             
    805              
    806          
    807              
    808              hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[0]->HCCHAR);
   \                     USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR:
   \   00000000   D0F89010           LDR      R1,[R0, #+144]
   \   00000004   0968               LDR      R1,[R1, #+0]
    809              hcchar.b.chen = 1;
   \   00000006   51F00041           ORRS     R1,R1,#0x80000000
    810              hcchar.b.chdis = 1;
   \   0000000A   51F08041           ORRS     R1,R1,#0x40000000
    811              USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[0]->HCCHAR, hcchar.d32);  
   \   0000000E   D0F89020           LDR      R2,[R0, #+144]
   \   00000012   1160               STR      R1,[R2, #+0]
    812              
    813              gintsts.d32 = 0;
   \   00000014   0021               MOVS     R1,#+0
    814              /* Clear interrupt */
    815              gintsts.b.incomplisoout = 1;
   \   00000016   51F40011           ORRS     R1,R1,#0x200000
    816              USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
   \   0000001A   C068               LDR      R0,[R0, #+12]
   \   0000001C   4161               STR      R1,[R0, #+20]
    817          
    818              return 1;
   \   0000001E   0120               MOVS     R0,#+1
   \   00000020   7047               BX       LR               ;; return
    819          }
    820          
    821          /**
    822          * @}
    823          */ 
    824          
    825          /**
    826          * @}
    827          */ 
    828          
    829          /**
    830          * @}
    831          */
    832          
    833          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
    834          

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     USBH_OTG_ISR_Handler               16
     USB_OTG_USBH_handle_Disconnect_ISR
                                        16
     USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
                                         0
     USB_OTG_USBH_handle_hc_ISR         24
     USB_OTG_USBH_handle_hc_n_In_ISR
                                        24
     USB_OTG_USBH_handle_hc_n_Out_ISR
                                        16
     USB_OTG_USBH_handle_nptxfempty_ISR
                                        24
     USB_OTG_USBH_handle_port_ISR       24
     USB_OTG_USBH_handle_ptxfempty_ISR
                                        24
     USB_OTG_USBH_handle_rx_qlvl_ISR
                                        24
     USB_OTG_USBH_handle_sof_ISR         0


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     USBH_OTG_ISR_Handler            166
     USB_OTG_USBH_handle_hc_ISR       86
     USB_OTG_USBH_handle_sof_ISR      14
     USB_OTG_USBH_handle_Disconnect_ISR
                                      34
     USB_OTG_USBH_handle_nptxfempty_ISR
                                     242
     USB_OTG_USBH_handle_ptxfempty_ISR
                                     242
     USB_OTG_USBH_handle_port_ISR    238
     USB_OTG_USBH_handle_hc_n_Out_ISR
                                     656
     USB_OTG_USBH_handle_hc_n_In_ISR
                                     820
     USB_OTG_USBH_handle_rx_qlvl_ISR
                                     354
     USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
                                      34

 
 2 886 bytes in section .text
 
 2 886 bytes of CODE memory

Errors: none
Warnings: none
