###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     19/Jan/2012  11:09:00 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Libraries\STM32_ #
#                    USB_OTG_Driver\src\usb_hcd.c                             #
#    Command line =  F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Libraries\STM32_ #
#                    USB_OTG_Driver\src\usb_hcd.c -D USE_STDPERIPH_DRIVER -D  #
#                    STM32F2XX -D USE_STM3220F_EVAL -D USE_USB_OTG_FS -D      #
#                    RTC_CLOCK_SOURCE_LSE -lC F:\Work\S&G2000\Firmware\DTG_EM #
#                    S_SYSTEM\Project\EWARM\STM3220F_EVAL\List\ -lA           #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\ST #
#                    M3220F_EVAL\List\ -o F:\Work\S&G2000\Firmware\DTG_EMS_SY #
#                    STEM\Project\EWARM\STM3220F_EVAL\Obj\ --no_cse           #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Full.h" -I                     #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \ -I F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWA #
#                    RM\..\..\Libraries\CMSIS\CM3\CoreSupport\ -I             #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\ -I   #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Libraries\STM32F2xx_StdPeriph_Driver\inc\ -I         #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Utilities\STM32_EVAL\ -I                             #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Utilities\STM32_EVAL\Common\ -I                      #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Utilities\STM32_EVAL\STM3220F_EVAL\ -I               #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Libraries\STM32_USB_OTG_Driver\inc\ -I               #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Libraries\STM32_USB_Device_Library\Core\inc\ -I      #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Libraries\STM32_USB_Device_Library\Class\msc\inc\    #
#                    -I F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM #
#                    \..\Usb\ -I F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Proj #
#                    ect\EWARM\..\Usb\Inc\ -I F:\Work\S&G2000\Firmware\DTG_EM #
#                    S_SYSTEM\Project\EWARM\..\Usb\src\ -I                    #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Libraries\STM32_USB_HOST_Library\Core\inc\ -I        #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\ -I   #
#                    F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\.. #
#                    \..\Libraries\STM32_USB_Device_Library\Class\cdc\inc\    #
#                    -Ol --use_c++_inline                                     #
#    List file    =  F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\ST #
#                    M3220F_EVAL\List\usb_hcd.lst                             #
#    Object file  =  F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Project\EWARM\ST #
#                    M3220F_EVAL\Obj\usb_hcd.o                                #
#                                                                             #
#                                                                             #
###############################################################################

F:\Work\S&G2000\Firmware\DTG_EMS_SYSTEM\Libraries\STM32_USB_OTG_Driver\src\usb_hcd.c
      1          /**
      2            ******************************************************************************
      3            * @file    usb_hcd.c
      4            * @author  MCD Application Team
      5            * @version V2.0.0RC1
      6            * @date    18-March-2011
      7            * @brief   Host Interface Layer
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "usb_core.h"
     24          #include "usb_hcd.h"
     25          #include "usb_conf.h"
     26          #include "usb_bsp.h"
     27          
     28          
     29          /** @addtogroup USB_OTG_DRIVER
     30            * @{
     31            */
     32            
     33          /** @defgroup USB_HCD 
     34            * @brief This file is the interface between EFSL ans Host mass-storage class
     35            * @{
     36            */
     37          
     38          
     39          /** @defgroup USB_HCD_Private_Defines
     40            * @{
     41            */ 
     42          /**
     43            * @}
     44            */ 
     45           
     46          
     47          /** @defgroup USB_HCD_Private_TypesDefinitions
     48            * @{
     49            */ 
     50          /**
     51            * @}
     52            */ 
     53          
     54          
     55          
     56          /** @defgroup USB_HCD_Private_Macros
     57            * @{
     58            */ 
     59          /**
     60            * @}
     61            */ 
     62          
     63          
     64          /** @defgroup USB_HCD_Private_Variables
     65            * @{
     66            */ 
     67          /**
     68            * @}
     69            */ 
     70          
     71          
     72          /** @defgroup USB_HCD_Private_FunctionPrototypes
     73            * @{
     74            */ 
     75          /**
     76            * @}
     77            */ 
     78          
     79          
     80          /** @defgroup USB_HCD_Private_Functions
     81            * @{
     82            */ 
     83          
     84          /**
     85            * @brief  HCD_Init 
     86            *         Initialize the HOST portion of the driver.
     87            * @param  pdev: Selected device
     88            * @param  base_address: OTG base address
     89            * @retval Status
     90            */

   \                                 In section .text, align 2, keep-with-next
     91          uint32_t HCD_Init(USB_OTG_CORE_HANDLE *pdev , 
     92                            USB_OTG_CORE_ID_TypeDef coreID)
     93          {
   \                     HCD_Init:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
     94            uint8_t i = 0;
   \   00000004   0020               MOVS     R0,#+0
     95            pdev->host.ConnSts = 0;
   \   00000006   0022               MOVS     R2,#+0
   \   00000008   C4F8EC26           STR      R2,[R4, #+1772]
     96            
     97            for (i= 0; i< USB_OTG_MAX_TX_FIFOS; i++)
   \   0000000C   0022               MOVS     R2,#+0
   \   0000000E   1000               MOVS     R0,R2
   \   00000010   11E0               B.N      ??HCD_Init_0
     98            {
     99            pdev->host.ErrCnt[i]  = 0;
   \                     ??HCD_Init_1:
   \   00000012   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   14EB8002           ADDS     R2,R4,R0, LSL #+2
   \   00000018   0023               MOVS     R3,#+0
   \   0000001A   C2F8F036           STR      R3,[R2, #+1776]
    100            pdev->host.XferCnt[i]   = 0;
   \   0000001E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   14EB8002           ADDS     R2,R4,R0, LSL #+2
   \   00000024   0023               MOVS     R3,#+0
   \   00000026   C2F82C37           STR      R3,[R2, #+1836]
    101            pdev->host.HC_Status[i]   = HC_IDLE;
   \   0000002A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0219               ADDS     R2,R0,R4
   \   0000002E   0023               MOVS     R3,#+0
   \   00000030   82F86837           STRB     R3,[R2, #+1896]
    102            }
   \   00000034   401C               ADDS     R0,R0,#+1
   \                     ??HCD_Init_0:
   \   00000036   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0F28               CMP      R0,#+15
   \   0000003A   EAD3               BCC.N    ??HCD_Init_1
    103            pdev->host.hc[0].max_packet  = 8; 
   \   0000003C   0820               MOVS     R0,#+8
   \   0000003E   A4F88E07           STRH     R0,[R4, #+1934]
    104          
    105            USB_OTG_SelectCore(pdev, coreID);
   \   00000042   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000044   2000               MOVS     R0,R4
   \   00000046   ........           BL       USB_OTG_SelectCore
    106          #ifndef DUAL_ROLE_MODE_ENABLED
    107            USB_OTG_DisableGlobalInt(pdev);
   \   0000004A   2000               MOVS     R0,R4
   \   0000004C   ........           BL       USB_OTG_DisableGlobalInt
    108            USB_OTG_CoreInit(pdev);
   \   00000050   2000               MOVS     R0,R4
   \   00000052   ........           BL       USB_OTG_CoreInit
    109          
    110            /* Force Host Mode*/
    111            USB_OTG_SetCurrentMode(pdev , HOST_MODE);
   \   00000056   0121               MOVS     R1,#+1
   \   00000058   2000               MOVS     R0,R4
   \   0000005A   ........           BL       USB_OTG_SetCurrentMode
    112            USB_OTG_CoreInitHost(pdev);
   \   0000005E   2000               MOVS     R0,R4
   \   00000060   ........           BL       USB_OTG_CoreInitHost
    113            USB_OTG_EnableGlobalInt(pdev);
   \   00000064   2000               MOVS     R0,R4
   \   00000066   ........           BL       USB_OTG_EnableGlobalInt
    114          #endif
    115             
    116            return 0;
   \   0000006A   0020               MOVS     R0,#+0
   \   0000006C   10BD               POP      {R4,PC}          ;; return
    117          }
    118          
    119          
    120          /**
    121            * @brief  HCD_GetCurrentSpeed
    122            *         Get Current device Speed.
    123            * @param  pdev : Selected device
    124            * @retval Status
    125            */
    126          

   \                                 In section .text, align 2, keep-with-next
    127          uint32_t HCD_GetCurrentSpeed (USB_OTG_CORE_HANDLE *pdev)
    128          {    
    129              USB_OTG_HPRT0_TypeDef  HPRT0;
    130              HPRT0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
   \                     HCD_GetCurrentSpeed:
   \   00000000   D0F8CC00           LDR      R0,[R0, #+204]
   \   00000004   0068               LDR      R0,[R0, #+0]
    131              
    132              return HPRT0.b.prtspd;
   \   00000006   C0F34140           UBFX     R0,R0,#+17,#+2
   \   0000000A   7047               BX       LR               ;; return
    133          }
    134          
    135          /**
    136            * @brief  HCD_ResetPort
    137            *         Issues the reset command to device
    138            * @param  pdev : Selected device
    139            * @retval Status
    140            */

   \                                 In section .text, align 2, keep-with-next
    141          uint32_t HCD_ResetPort(USB_OTG_CORE_HANDLE *pdev)
    142          {
   \                     HCD_ResetPort:
   \   00000000   80B5               PUSH     {R7,LR}
    143            /*
    144            Before starting to drive a USB reset, the application waits for the OTG 
    145            interrupt triggered by the debounce done bit (DBCDNE bit in OTG_FS_GOTGINT), 
    146            which indicates that the bus is stable again after the electrical debounce 
    147            caused by the attachment of a pull-up resistor on DP (FS) or DM (LS).
    148            */
    149            
    150            USB_OTG_ResetPort(pdev); 
   \   00000002   ........           BL       USB_OTG_ResetPort
    151            return 0;
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   02BD               POP      {R1,PC}          ;; return
    152          }
    153          
    154          /**
    155            * @brief  HCD_IsDeviceConnected
    156            *         Check if the device is connected.
    157            * @param  pdev : Selected device
    158            * @retval Device connection status. 1 -> connected and 0 -> disconnected
    159            * 
    160            */

   \                                 In section .text, align 2, keep-with-next
    161          uint32_t HCD_IsDeviceConnected(USB_OTG_CORE_HANDLE *pdev)
    162          {
    163            return (pdev->host.ConnSts);
   \                     HCD_IsDeviceConnected:
   \   00000000   D0F8EC06           LDR      R0,[R0, #+1772]
   \   00000004   7047               BX       LR               ;; return
    164          }
    165          
    166          /**
    167            * @brief  HCD_GetCurrentFrame 
    168            *         This function returns the frame number for sof packet
    169            * @param  pdev : Selected device
    170            * @retval Frame number
    171            * 
    172            */

   \                                 In section .text, align 2, keep-with-next
    173          uint32_t HCD_GetCurrentFrame (USB_OTG_CORE_HANDLE *pdev) 
    174          {
    175           return (USB_OTG_READ_REG32(&pdev->regs.HREGS->HFNUM) & 0xFFFF) ;
   \                     HCD_GetCurrentFrame:
   \   00000000   4069               LDR      R0,[R0, #+20]
   \   00000002   8068               LDR      R0,[R0, #+8]
   \   00000004   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000006   7047               BX       LR               ;; return
    176          }
    177          
    178          /**
    179            * @brief  HCD_GetURB_State 
    180            *         This function returns the last URBstate
    181            * @param  pdev: Selected device
    182            * @retval URB_STATE
    183            * 
    184            */

   \                                 In section .text, align 2, keep-with-next
    185          URB_STATE HCD_GetURB_State (USB_OTG_CORE_HANDLE *pdev , uint8_t ch_num) 
    186          {
    187            return pdev->host.URB_State[ch_num] ;
   \                     HCD_GetURB_State:
   \   00000000   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0818               ADDS     R0,R1,R0
   \   00000004   90F87707           LDRB     R0,[R0, #+1911]
   \   00000008   7047               BX       LR               ;; return
    188          }
    189          
    190          /**
    191            * @brief  HCD_GetXferCnt 
    192            *         This function returns the last URBstate
    193            * @param  pdev: Selected device
    194            * @retval No. of data bytes transferred
    195            * 
    196            */

   \                                 In section .text, align 2, keep-with-next
    197          uint32_t HCD_GetXferCnt (USB_OTG_CORE_HANDLE *pdev, uint8_t ch_num) 
    198          {
    199            return pdev->host.XferCnt[ch_num] ;
   \                     HCD_GetXferCnt:
   \   00000000   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   10EB8100           ADDS     R0,R0,R1, LSL #+2
   \   00000006   D0F82C07           LDR      R0,[R0, #+1836]
   \   0000000A   7047               BX       LR               ;; return
    200          }
    201          
    202          
    203          
    204          /**
    205            * @brief  HCD_GetHCState 
    206            *         This function returns the HC Status 
    207            * @param  pdev: Selected device
    208            * @retval HC_STATUS
    209            * 
    210            */

   \                                 In section .text, align 2, keep-with-next
    211          HC_STATUS HCD_GetHCState (USB_OTG_CORE_HANDLE *pdev ,  uint8_t ch_num) 
    212          {
    213            return pdev->host.HC_Status[ch_num] ;
   \                     HCD_GetHCState:
   \   00000000   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0818               ADDS     R0,R1,R0
   \   00000004   90F86807           LDRB     R0,[R0, #+1896]
   \   00000008   7047               BX       LR               ;; return
    214          }
    215          
    216          /**
    217            * @brief  HCD_HC_Init 
    218            *         This function prepare a HC and start a transfer
    219            * @param  pdev: Selected device
    220            * @param  hc_num: Channel number 
    221            * @retval status 
    222            */

   \                                 In section .text, align 2, keep-with-next
    223          uint32_t HCD_HC_Init (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
    224          {
   \                     HCD_HC_Init:
   \   00000000   80B5               PUSH     {R7,LR}
    225            return USB_OTG_HC_Init(pdev, hc_num);  
   \   00000002   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   ........           BL       USB_OTG_HC_Init
   \   00000008   02BD               POP      {R1,PC}          ;; return
    226          }
    227          
    228          /**
    229            * @brief  HCD_SubmitRequest 
    230            *         This function prepare a HC and start a transfer
    231            * @param  pdev: Selected device
    232            * @param  hc_num: Channel number 
    233            * @retval status
    234            */

   \                                 In section .text, align 2, keep-with-next
    235          uint32_t HCD_SubmitRequest (USB_OTG_CORE_HANDLE *pdev , uint8_t hc_num) 
    236          {
   \                     HCD_SubmitRequest:
   \   00000000   80B5               PUSH     {R7,LR}
    237            
    238            pdev->host.URB_State[hc_num] =   URB_IDLE;  
   \   00000002   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0A18               ADDS     R2,R1,R0
   \   00000006   0023               MOVS     R3,#+0
   \   00000008   82F87737           STRB     R3,[R2, #+1911]
    239            pdev->host.hc[hc_num].xfer_count = 0 ;
   \   0000000C   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   10EB4112           ADDS     R2,R0,R1, LSL #+5
   \   00000012   0023               MOVS     R3,#+0
   \   00000014   C2F89C37           STR      R3,[R2, #+1948]
    240            return USB_OTG_HC_StartXfer(pdev, hc_num);
   \   00000018   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001A   ........           BL       USB_OTG_HC_StartXfer
   \   0000001E   02BD               POP      {R1,PC}          ;; return
    241          }
    242          
    243          
    244          /**
    245          * @}
    246          */ 
    247          
    248          /**
    249          * @}
    250          */ 
    251          
    252          /**
    253          * @}
    254          */
    255          
    256          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     HCD_GetCurrentFrame        0
     HCD_GetCurrentSpeed        0
     HCD_GetHCState             0
     HCD_GetURB_State           0
     HCD_GetXferCnt             0
     HCD_HC_Init                8
     HCD_Init                   8
     HCD_IsDeviceConnected      0
     HCD_ResetPort              8
     HCD_SubmitRequest          8


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     HCD_Init               110
     HCD_GetCurrentSpeed     12
     HCD_ResetPort           10
     HCD_IsDeviceConnected    6
     HCD_GetCurrentFrame      8
     HCD_GetURB_State        10
     HCD_GetXferCnt          12
     HCD_GetHCState          10
     HCD_HC_Init             10
     HCD_SubmitRequest       32

 
 220 bytes in section .text
 
 220 bytes of CODE memory

Errors: none
Warnings: none
