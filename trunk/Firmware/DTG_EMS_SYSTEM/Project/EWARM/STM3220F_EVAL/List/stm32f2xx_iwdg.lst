###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     08/Jan/2012  13:10:16 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Libraries\STM32F2xx_ #
#                    StdPeriph_Driver\src\stm32f2xx_iwdg.c                    #
#    Command line =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Libraries\STM32F2xx_ #
#                    StdPeriph_Driver\src\stm32f2xx_iwdg.c -D                 #
#                    USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM3220F_EVAL   #
#                    -D USE_USB_OTG_FS -D RTC_CLOCK_SOURCE_LSE -lC            #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\STM322 #
#                    0F_EVAL\List\ -lA E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Pr #
#                    oject\EWARM\STM3220F_EVAL\List\ -o                       #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\STM322 #
#                    0F_EVAL\Obj\ --no_cse --no_unroll --no_inline            #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWAR #
#                    M\..\ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWA #
#                    RM\..\..\Libraries\CMSIS\CM3\CoreSupport\ -I             #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\ -I       #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32F2xx_StdPeriph_Driver\inc\ -I             #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Utilities\STM32_EVAL\ -I E:\Work\Firmware\DTG\DTG_EMS_SY #
#                    STEM\Project\EWARM\..\..\Utilities\STM32_EVAL\Common\    #
#                    -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\ #
#                    ..\Utilities\STM32_EVAL\STM3220F_EVAL\ -I                #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32_USB_OTG_Driver\inc\ -I                   #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32_USB_Device_Library\Core\inc\ -I          #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32_USB_Device_Library\Class\msc\inc\ -I     #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\Usb #
#                    \ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\. #
#                    .\Usb\Inc\ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Projec #
#                    t\EWARM\..\Usb\src\ -I E:\Work\Firmware\DTG\DTG_EMS_SYST #
#                    EM\Project\EWARM\..\..\Libraries\STM32_USB_HOST_Library\ #
#                    Core\inc\ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project #
#                    \EWARM\..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\ #
#                    inc\ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWAR #
#                    M\..\..\Libraries\STM32_USB_Device_Library\Class\cdc\inc #
#                    \ -Ol --use_c++_inline                                   #
#    List file    =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\STM322 #
#                    0F_EVAL\List\stm32f2xx_iwdg.lst                          #
#    Object file  =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\STM322 #
#                    0F_EVAL\Obj\stm32f2xx_iwdg.o                             #
#                                                                             #
#                                                                             #
###############################################################################

E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Libraries\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_iwdg.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f2xx_iwdg.c
      4            * @author  MCD Application Team
      5            * @version V0.0.4
      6            * @date    13-January-2011
      7            * @brief   This file provides all the IWDG firmware functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm32f2xx_iwdg.h"
     24          
     25          /** @addtogroup STM32F2xx_StdPeriph_Driver
     26            * @{
     27            */
     28          
     29          /** @defgroup IWDG 
     30            * @brief IWDG driver modules
     31            * @{
     32            */ 
     33          
     34          /** @defgroup IWDG_Private_TypesDefinitions
     35            * @{
     36            */
     37          
     38          /**
     39            * @}
     40            */
     41          
     42          /** @defgroup IWDG_Private_Defines
     43            * @{
     44            */ 
     45          
     46          /* ---------------------- IWDG registers bit mask ----------------------------*/
     47          
     48          /* KR register bit mask */
     49          #define KR_KEY_Reload    ((uint16_t)0xAAAA)
     50          #define KR_KEY_Enable    ((uint16_t)0xCCCC)
     51          
     52          /**
     53            * @}
     54            */ 
     55          
     56          /** @defgroup IWDG_Private_Macros
     57            * @{
     58            */
     59          
     60          /**
     61            * @}
     62            */
     63          
     64          /** @defgroup IWDG_Private_Variables
     65            * @{
     66            */
     67          
     68          /**
     69            * @}
     70            */
     71          
     72          /** @defgroup IWDG_Private_FunctionPrototypes
     73            * @{
     74            */
     75          
     76          /**
     77            * @}
     78            */
     79          
     80          /** @defgroup IWDG_Private_Functions
     81            * @{
     82            */
     83          
     84          /**
     85            * @brief  Enables or disables write access to IWDG_PR and IWDG_RLR registers.
     86            * @param  IWDG_WriteAccess: new state of write access to IWDG_PR and IWDG_RLR registers.
     87            *   This parameter can be one of the following values:
     88            *     @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
     89            *     @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
     90            * @retval None
     91            */

   \                                 In section .text, align 2, keep-with-next
     92          void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
     93          {
     94            /* Check the parameters */
     95            assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
     96            IWDG->KR = IWDG_WriteAccess;
   \                     IWDG_WriteAccessCmd:
   \   00000000   ....               LDR.N    R1,??DataTable5  ;; 0x40003000
   \   00000002   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000004   0860               STR      R0,[R1, #+0]
     97          }
   \   00000006   7047               BX       LR               ;; return
     98          
     99          /**
    100            * @brief  Sets IWDG Prescaler value.
    101            * @param  IWDG_Prescaler: specifies the IWDG Prescaler value.
    102            *   This parameter can be one of the following values:
    103            *     @arg IWDG_Prescaler_4: IWDG prescaler set to 4
    104            *     @arg IWDG_Prescaler_8: IWDG prescaler set to 8
    105            *     @arg IWDG_Prescaler_16: IWDG prescaler set to 16
    106            *     @arg IWDG_Prescaler_32: IWDG prescaler set to 32
    107            *     @arg IWDG_Prescaler_64: IWDG prescaler set to 64
    108            *     @arg IWDG_Prescaler_128: IWDG prescaler set to 128
    109            *     @arg IWDG_Prescaler_256: IWDG prescaler set to 256
    110            * @retval None
    111            */

   \                                 In section .text, align 2, keep-with-next
    112          void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
    113          {
    114            /* Check the parameters */
    115            assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
    116            IWDG->PR = IWDG_Prescaler;
   \                     IWDG_SetPrescaler:
   \   00000000   ....               LDR.N    R1,??DataTable5_1  ;; 0x40003004
   \   00000002   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0860               STR      R0,[R1, #+0]
    117          }
   \   00000006   7047               BX       LR               ;; return
    118          
    119          /**
    120            * @brief  Sets IWDG Reload value.
    121            * @param  Reload: specifies the IWDG Reload value.
    122            *   This parameter must be a number between 0 and 0x0FFF.
    123            * @retval None
    124            */

   \                                 In section .text, align 2, keep-with-next
    125          void IWDG_SetReload(uint16_t Reload)
    126          {
    127            /* Check the parameters */
    128            assert_param(IS_IWDG_RELOAD(Reload));
    129            IWDG->RLR = Reload;
   \                     IWDG_SetReload:
   \   00000000   ....               LDR.N    R1,??DataTable5_2  ;; 0x40003008
   \   00000002   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000004   0860               STR      R0,[R1, #+0]
    130          }
   \   00000006   7047               BX       LR               ;; return
    131          
    132          /**
    133            * @brief  Reloads IWDG counter with value defined in the reload register
    134            *   (write access to IWDG_PR and IWDG_RLR registers disabled).
    135            * @param  None
    136            * @retval None
    137            */

   \                                 In section .text, align 2, keep-with-next
    138          void IWDG_ReloadCounter(void)
    139          {
    140            IWDG->KR = KR_KEY_Reload;
   \                     IWDG_ReloadCounter:
   \   00000000   ....               LDR.N    R0,??DataTable5  ;; 0x40003000
   \   00000002   4AF6AA21           MOVW     R1,#+43690
   \   00000006   0160               STR      R1,[R0, #+0]
    141          }
   \   00000008   7047               BX       LR               ;; return
    142          
    143          /**
    144            * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
    145            * @param  None
    146            * @retval None
    147            */

   \                                 In section .text, align 2, keep-with-next
    148          void IWDG_Enable(void)
    149          {
    150            IWDG->KR = KR_KEY_Enable;
   \                     IWDG_Enable:
   \   00000000   ....               LDR.N    R0,??DataTable5  ;; 0x40003000
   \   00000002   4CF6CC41           MOVW     R1,#+52428
   \   00000006   0160               STR      R1,[R0, #+0]
    151          }
   \   00000008   7047               BX       LR               ;; return
    152          
    153          /**
    154            * @brief  Checks whether the specified IWDG flag is set or not.
    155            * @param  IWDG_FLAG: specifies the flag to check.
    156            *   This parameter can be one of the following values:
    157            *     @arg IWDG_FLAG_PVU: Prescaler Value Update on going
    158            *     @arg IWDG_FLAG_RVU: Reload Value Update on going
    159            * @retval The new state of IWDG_FLAG (SET or RESET).
    160            */

   \                                 In section .text, align 2, keep-with-next
    161          FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
    162          {
    163            FlagStatus bitstatus = RESET;
   \                     IWDG_GetFlagStatus:
   \   00000000   0021               MOVS     R1,#+0
    164            /* Check the parameters */
    165            assert_param(IS_IWDG_FLAG(IWDG_FLAG));
    166            if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
   \   00000002   ....               LDR.N    R2,??DataTable5_3  ;; 0x4000300c
   \   00000004   1268               LDR      R2,[R2, #+0]
   \   00000006   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000008   0242               TST      R2,R0
   \   0000000A   01D0               BEQ.N    ??IWDG_GetFlagStatus_0
    167            {
    168              bitstatus = SET;
   \   0000000C   0121               MOVS     R1,#+1
   \   0000000E   00E0               B.N      ??IWDG_GetFlagStatus_1
    169            }
    170            else
    171            {
    172              bitstatus = RESET;
   \                     ??IWDG_GetFlagStatus_0:
   \   00000010   0021               MOVS     R1,#+0
    173            }
    174            /* Return the flag status */
    175            return bitstatus;
   \                     ??IWDG_GetFlagStatus_1:
   \   00000012   0800               MOVS     R0,R1
   \   00000014   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   7047               BX       LR               ;; return
    176          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   00300040           DC32     0x40003000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   04300040           DC32     0x40003004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   08300040           DC32     0x40003008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0C300040           DC32     0x4000300c
    177          
    178          /**
    179            * @}
    180            */
    181          
    182          /**
    183            * @}
    184            */
    185          
    186          /**
    187            * @}
    188            */
    189          
    190          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     IWDG_Enable              0
     IWDG_GetFlagStatus       0
     IWDG_ReloadCounter       0
     IWDG_SetPrescaler        0
     IWDG_SetReload           0
     IWDG_WriteAccessCmd      0


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     IWDG_WriteAccessCmd    8
     IWDG_SetPrescaler      8
     IWDG_SetReload         8
     IWDG_ReloadCounter    10
     IWDG_Enable           10
     IWDG_GetFlagStatus    24
     ??DataTable5           4
     ??DataTable5_1         4
     ??DataTable5_2         4
     ??DataTable5_3         4

 
 84 bytes in section .text
 
 84 bytes of CODE memory

Errors: none
Warnings: none
