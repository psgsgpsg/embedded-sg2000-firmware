###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     19/Dec/2011  16:18:44 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\Adc_Process. #
#                    c                                                        #
#    Command line =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\Adc_Process. #
#                    c -D USE_STDPERIPH_DRIVER -D STM32F2XX -D                #
#                    USE_STM3220F_EVAL -D USE_USB_OTG_FS -D                   #
#                    RTC_CLOCK_SOURCE_LSE -lC E:\Work\Firmware\DTG\DTG_EMS_SY #
#                    STEM\Project\EWARM\STM3220F_EVAL\List\ -lA               #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\STM322 #
#                    0F_EVAL\List\ -o E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Pro #
#                    ject\EWARM\STM3220F_EVAL\Obj\ --no_cse --no_unroll       #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWAR #
#                    M\..\ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWA #
#                    RM\..\..\Libraries\CMSIS\CM3\CoreSupport\ -I             #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\ -I       #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32F2xx_StdPeriph_Driver\inc\ -I             #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Utilities\STM32_EVAL\ -I E:\Work\Firmware\DTG\DTG_EMS_SY #
#                    STEM\Project\EWARM\..\..\Utilities\STM32_EVAL\Common\    #
#                    -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\ #
#                    ..\Utilities\STM32_EVAL\STM3220F_EVAL\ -I                #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32_USB_OTG_Driver\inc\ -I                   #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32_USB_Device_Library\Core\inc\ -I          #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32_USB_Device_Library\Class\msc\inc\ -I     #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\Usb #
#                    \ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\. #
#                    .\Usb\Inc\ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Projec #
#                    t\EWARM\..\Usb\src\ -I E:\Work\Firmware\DTG\DTG_EMS_SYST #
#                    EM\Project\EWARM\..\..\Libraries\STM32_USB_HOST_Library\ #
#                    Core\inc\ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project #
#                    \EWARM\..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\ #
#                    inc\ -Ol --use_c++_inline                                #
#    List file    =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\STM322 #
#                    0F_EVAL\List\Adc_Process.lst                             #
#    Object file  =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\STM322 #
#                    0F_EVAL\Obj\Adc_Process.o                                #
#                                                                             #
#                                                                             #
###############################################################################

E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\Adc_Process.c
      1          #include "main.h"
      2          #include "Adc_Process.h"
      3          
      4          #ifdef DEBUG_LOG
      5          #include "Log.h"
      6          #endif
      7          

   \                                 In section .bss, align 4
      8          __IO uint16_t ADCConvertedValue[5] ;
   \                     ADCConvertedValue:
   \   00000000                      DS8 12
      9          

   \                                 In section .bss, align 4
     10          u16 ADC_Buffer[MAX_ADC_BUFFER][5];
   \                     ADC_Buffer:
   \   00000000                      DS8 1000
     11          

   \                                 In section .text, align 2, keep-with-next
     12          void ADC_Config(void)
     13          {
   \                     ADC_Config:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   9DB0               SUB      SP,SP,#+116
     14          /* Private macro -------------------------------------------------------------*/
     15          /* Private variables ---------------------------------------------------------*/
     16          __IO uint16_t CurrDataCounterBegin = 0;
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   ADF80800           STRH     R0,[SP, #+8]
     17          
     18            ADC_InitTypeDef       ADC_InitStructure;
     19            ADC_CommonInitTypeDef ADC_CommonInitStructure;
     20            DMA_InitTypeDef       DMA_InitStructure;
     21            GPIO_InitTypeDef      GPIO_InitStructure;
     22            /* Enable peripheral clocks *************************************************/
     23            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 | RCC_AHB1Periph_GPIOC, ENABLE);
   \   0000000A   0121               MOVS     R1,#+1
   \   0000000C   ....               LDR.N    R0,??DataTable2  ;; 0x400004
   \   0000000E   ........           BL       RCC_AHB1PeriphClockCmd
     24            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB, ENABLE);  
   \   00000012   0121               MOVS     R1,#+1
   \   00000014   0320               MOVS     R0,#+3
   \   00000016   ........           BL       RCC_AHB1PeriphClockCmd
     25           // RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  
     26            RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
   \   0000001A   0121               MOVS     R1,#+1
   \   0000001C   4FF48070           MOV      R0,#+256
   \   00000020   ........           BL       RCC_APB2PeriphClockCmd
     27          
     28            /* DMA2_Stream0 channel0 configuration *************************************/
     29            DMA_DeInit(DMA2_Stream0);
   \   00000024   ....               LDR.N    R0,??DataTable2_1  ;; 0x40026410
   \   00000026   ........           BL       DMA_DeInit
     30            DMA_InitStructure.DMA_Channel = DMA_Channel_0;  
   \   0000002A   0020               MOVS     R0,#+0
   \   0000002C   0790               STR      R0,[SP, #+28]
     31            DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)ADC1_DR_ADDRESS;
   \   0000002E   ....               LDR.N    R0,??DataTable2_2  ;; 0x4001204c
   \   00000030   0890               STR      R0,[SP, #+32]
     32            DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADCConvertedValue;   
   \   00000032   ....               LDR.N    R0,??DataTable2_3
   \   00000034   0990               STR      R0,[SP, #+36]
     33            DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;       // 메모리 복사
   \   00000036   0020               MOVS     R0,#+0
   \   00000038   0A90               STR      R0,[SP, #+40]
     34            DMA_InitStructure.DMA_BufferSize = 5;
   \   0000003A   0520               MOVS     R0,#+5
   \   0000003C   0B90               STR      R0,[SP, #+44]
     35            DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
   \   0000003E   0020               MOVS     R0,#+0
   \   00000040   0C90               STR      R0,[SP, #+48]
     36            DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;    // 다중 ADC측정시 데이터증가
   \   00000042   4FF48060           MOV      R0,#+1024
   \   00000046   0D90               STR      R0,[SP, #+52]
     37            DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
   \   00000048   4FF40060           MOV      R0,#+2048
   \   0000004C   0E90               STR      R0,[SP, #+56]
     38            DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
   \   0000004E   4FF40050           MOV      R0,#+8192
   \   00000052   0F90               STR      R0,[SP, #+60]
     39            DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
   \   00000054   4FF48070           MOV      R0,#+256
   \   00000058   1090               STR      R0,[SP, #+64]
     40            DMA_InitStructure.DMA_Priority = DMA_Priority_High;
   \   0000005A   5FF40030           MOVS     R0,#+131072
   \   0000005E   1190               STR      R0,[SP, #+68]
     41            DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
   \   00000060   0020               MOVS     R0,#+0
   \   00000062   1290               STR      R0,[SP, #+72]
     42            DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
   \   00000064   0120               MOVS     R0,#+1
   \   00000066   1390               STR      R0,[SP, #+76]
     43            DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
   \   00000068   0020               MOVS     R0,#+0
   \   0000006A   1490               STR      R0,[SP, #+80]
     44            DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
   \   0000006C   0020               MOVS     R0,#+0
   \   0000006E   1590               STR      R0,[SP, #+84]
     45            DMA_Init(DMA2_Stream0, &DMA_InitStructure);
   \   00000070   07A9               ADD      R1,SP,#+28
   \   00000072   ....               LDR.N    R0,??DataTable2_1  ;; 0x40026410
   \   00000074   ........           BL       DMA_Init
     46            // DMA2_Stream0 enable 
     47          //  DMA_IT_Config(DMA2_Stream0,DMA_IT_TC,ENABLE);
     48            
     49           // DMA_ITConfig(DMA2_Stream0, DMA_IT_TC, ENABLE);  
     50              CurrDataCounterBegin = DMA_GetCurrDataCounter(DMA2_Stream0);
   \   00000078   ....               LDR.N    R0,??DataTable2_1  ;; 0x40026410
   \   0000007A   ........           BL       DMA_GetCurrDataCounter
   \   0000007E   ADF80800           STRH     R0,[SP, #+8]
     51            DMA_Cmd(DMA2_Stream0, ENABLE);
   \   00000082   0121               MOVS     R1,#+1
   \   00000084   ....               LDR.N    R0,??DataTable2_1  ;; 0x40026410
   \   00000086   ........           BL       DMA_Cmd
     52          
     53            /* ADC1 configuration ------------------------------------------------------*/
     54            /* Configure ADC Channel12 pin as analog input */
     55            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7;
   \   0000008A   C020               MOVS     R0,#+192
   \   0000008C   0090               STR      R0,[SP, #+0]
     56            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;  
   \   0000008E   0020               MOVS     R0,#+0
   \   00000090   8DF80600           STRB     R0,[SP, #+6]
     57            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
   \   00000094   0320               MOVS     R0,#+3
   \   00000096   8DF80400           STRB     R0,[SP, #+4]
     58            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
   \   0000009A   0020               MOVS     R0,#+0
   \   0000009C   8DF80700           STRB     R0,[SP, #+7]
     59            GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   000000A0   00A9               ADD      R1,SP,#+0
   \   000000A2   ....               LDR.N    R0,??DataTable2_4  ;; 0x40020000
   \   000000A4   ........           BL       GPIO_Init
     60          
     61            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;				// LPG 
   \   000000A8   1020               MOVS     R0,#+16
   \   000000AA   0090               STR      R0,[SP, #+0]
     62            GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   000000AC   00A9               ADD      R1,SP,#+0
   \   000000AE   ....               LDR.N    R0,??DataTable2_5  ;; 0x40020800
   \   000000B0   ........           BL       GPIO_Init
     63          
     64            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1;		// Batt / Water
   \   000000B4   0320               MOVS     R0,#+3
   \   000000B6   0090               STR      R0,[SP, #+0]
     65            GPIO_Init(GPIOB, &GPIO_InitStructure);
   \   000000B8   00A9               ADD      R1,SP,#+0
   \   000000BA   ....               LDR.N    R0,??DataTable2_6  ;; 0x40020400
   \   000000BC   ........           BL       GPIO_Init
     66            
     67            /* ADCs DeInit (for debug purpose) */  
     68            ADC_DeInit();
   \   000000C0   ........           BL       ADC_DeInit
     69            /* ADC Common Init */
     70            ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
   \   000000C4   0020               MOVS     R0,#+0
   \   000000C6   0390               STR      R0,[SP, #+12]
     71            ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
   \   000000C8   0020               MOVS     R0,#+0
   \   000000CA   0490               STR      R0,[SP, #+16]
     72            ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
   \   000000CC   0020               MOVS     R0,#+0
   \   000000CE   0590               STR      R0,[SP, #+20]
     73            ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles; 
   \   000000D0   0020               MOVS     R0,#+0
   \   000000D2   0690               STR      R0,[SP, #+24]
     74            ADC_CommonInit(&ADC_CommonInitStructure);
   \   000000D4   03A8               ADD      R0,SP,#+12
   \   000000D6   ........           BL       ADC_CommonInit
     75            
     76            /* ADC1 Init */
     77            ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
   \   000000DA   0020               MOVS     R0,#+0
   \   000000DC   1690               STR      R0,[SP, #+88]
     78            ADC_InitStructure.ADC_ScanConvMode = ENABLE;
   \   000000DE   0120               MOVS     R0,#+1
   \   000000E0   8DF85C00           STRB     R0,[SP, #+92]
     79            ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
   \   000000E4   0120               MOVS     R0,#+1
   \   000000E6   8DF85D00           STRB     R0,[SP, #+93]
     80            ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;   
   \   000000EA   0020               MOVS     R0,#+0
   \   000000EC   1890               STR      R0,[SP, #+96]
     81            ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
   \   000000EE   0020               MOVS     R0,#+0
   \   000000F0   1A90               STR      R0,[SP, #+104]
     82            ADC_InitStructure.ADC_NbrOfConversion = 5;
   \   000000F2   0520               MOVS     R0,#+5
   \   000000F4   8DF86C00           STRB     R0,[SP, #+108]
     83            ADC_Init(ADC1, &ADC_InitStructure);
   \   000000F8   16A9               ADD      R1,SP,#+88
   \   000000FA   ....               LDR.N    R0,??DataTable2_7  ;; 0x40012000
   \   000000FC   ........           BL       ADC_Init
     84          
     85            /* ADC1 regular channel12 configuration */ 
     86            ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 1, ADC_SampleTime_480Cycles);		// 에어압력
   \   00000100   0723               MOVS     R3,#+7
   \   00000102   0122               MOVS     R2,#+1
   \   00000104   0721               MOVS     R1,#+7
   \   00000106   ....               LDR.N    R0,??DataTable2_7  ;; 0x40012000
   \   00000108   ........           BL       ADC_RegularChannelConfig
     87            ADC_RegularChannelConfig(ADC1, ADC_Channel_14, 2, ADC_SampleTime_480Cycles);		// LPG 전압
   \   0000010C   0723               MOVS     R3,#+7
   \   0000010E   0222               MOVS     R2,#+2
   \   00000110   0E21               MOVS     R1,#+14
   \   00000112   ....               LDR.N    R0,??DataTable2_7  ;; 0x40012000
   \   00000114   ........           BL       ADC_RegularChannelConfig
     88            ADC_RegularChannelConfig(ADC1, ADC_Channel_6, 3, ADC_SampleTime_480Cycles);  			// 엑셀
   \   00000118   0723               MOVS     R3,#+7
   \   0000011A   0322               MOVS     R2,#+3
   \   0000011C   0621               MOVS     R1,#+6
   \   0000011E   ....               LDR.N    R0,??DataTable2_7  ;; 0x40012000
   \   00000120   ........           BL       ADC_RegularChannelConfig
     89            ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 4, ADC_SampleTime_480Cycles);			// 배터리 온도
   \   00000124   0723               MOVS     R3,#+7
   \   00000126   0422               MOVS     R2,#+4
   \   00000128   0821               MOVS     R1,#+8
   \   0000012A   ....               LDR.N    R0,??DataTable2_7  ;; 0x40012000
   \   0000012C   ........           BL       ADC_RegularChannelConfig
     90            ADC_RegularChannelConfig(ADC1, ADC_Channel_9, 5, ADC_SampleTime_480Cycles);			// 냉각수 온다
   \   00000130   0723               MOVS     R3,#+7
   \   00000132   0522               MOVS     R2,#+5
   \   00000134   0921               MOVS     R1,#+9
   \   00000136   ....               LDR.N    R0,??DataTable2_7  ;; 0x40012000
   \   00000138   ........           BL       ADC_RegularChannelConfig
     91          
     92            /* Enable DMA request after last transfer (Single-ADC mode) */
     93            ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
   \   0000013C   0121               MOVS     R1,#+1
   \   0000013E   ....               LDR.N    R0,??DataTable2_7  ;; 0x40012000
   \   00000140   ........           BL       ADC_DMARequestAfterLastTransferCmd
     94          
     95            /* Enable ADC1 DMA */
     96            ADC_DMACmd(ADC1, ENABLE); 
   \   00000144   0121               MOVS     R1,#+1
   \   00000146   ....               LDR.N    R0,??DataTable2_7  ;; 0x40012000
   \   00000148   ........           BL       ADC_DMACmd
     97          
     98            /* Enable ADC1 */
     99            ADC_Cmd(ADC1, ENABLE);
   \   0000014C   0121               MOVS     R1,#+1
   \   0000014E   ....               LDR.N    R0,??DataTable2_7  ;; 0x40012000
   \   00000150   ........           BL       ADC_Cmd
    100              
    101            /* Start ADC1 Software Conversion */ 
    102            ADC_SoftwareStartConv(ADC1);
   \   00000154   ....               LDR.N    R0,??DataTable2_7  ;; 0x40012000
   \   00000156   ........           BL       ADC_SoftwareStartConv
    103            /*
    104             
    105            NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream0_IRQn;
    106            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    107            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    108            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    109            NVIC_Init(&NVIC_InitStructure);
    110          	*/
    111            
    112          }
   \   0000015A   1DB0               ADD      SP,SP,#+116
   \   0000015C   00BD               POP      {PC}             ;; return
    113          

   \                                 In section .text, align 2, keep-with-next
    114          void DMA2_Stream0_IRQHandler()
    115          {
   \                     DMA2_Stream0_IRQHandler:
   \   00000000   10B5               PUSH     {R4,LR}
    116          	u8 i;
    117          	u8 ADC_Count;
    118          	for( i = 0 ; i < 5 ; i++ )
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0CE0               B.N      ??DMA2_Stream0_IRQHandler_0
    119          	{
    120          		ADC_Buffer[ADC_Count][i] = ADCConvertedValue[i];
   \                     ??DMA2_Stream0_IRQHandler_1:
   \   00000006   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0A21               MOVS     R1,#+10
   \   0000000C   ....               LDR.N    R2,??DataTable2_8
   \   0000000E   01FB0421           MLA      R1,R1,R4,R2
   \   00000012   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   ....               LDR.N    R2,??DataTable2_3
   \   00000016   32F81020           LDRH     R2,[R2, R0, LSL #+1]
   \   0000001A   21F81020           STRH     R2,[R1, R0, LSL #+1]
    121          	}
   \   0000001E   401C               ADDS     R0,R0,#+1
   \                     ??DMA2_Stream0_IRQHandler_0:
   \   00000020   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0528               CMP      R0,#+5
   \   00000024   EFD3               BCC.N    ??DMA2_Stream0_IRQHandler_1
    122          	ADC_Count++ ;
   \   00000026   641C               ADDS     R4,R4,#+1
    123          	ADC_Count =ADC_Count % MAX_ADC_BUFFER ;
   \   00000028   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002A   6420               MOVS     R0,#+100
   \   0000002C   94FBF0F1           SDIV     R1,R4,R0
   \   00000030   00FB1144           MLS      R4,R0,R1,R4
    124          	DMA_ClearITPendingBit(DMA2_Stream0, DMA_IT_TCIF0);  
   \   00000034   ....               LDR.N    R1,??DataTable2_9  ;; 0x10008020
   \   00000036   ....               LDR.N    R0,??DataTable2_1  ;; 0x40026410
   \   00000038   ........           BL       DMA_ClearITPendingBit
    125          }
   \   0000003C   10BD               POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    126          void ADC_INIT(void)
    127          {
    128          	// ADC 초기화 하기
    129          	// 
    130          }
   \                     ADC_INIT:
   \   00000000   7047               BX       LR               ;; return
    131          

   \                                 In section .text, align 2, keep-with-next
    132          void Get_ADC_Data(void)
    133          {
   \                     Get_ADC_Data:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   86B0               SUB      SP,SP,#+24
    134          	static u16 ADC_Timer = 0;
    135          	static u8 ADC_Count =0;
    136          	float Adjust;
    137          	u8 i, i2;
    138          
    139          	u32 ADC_Value[5] ;
    140          
    141          	//100 ms 마다 ADC 데이터 검출하기
    142          	if(!CheckTimeOver(10,ADC_Timer))
   \   00000004   ....               LDR.N    R0,??DataTable2_10
   \   00000006   0188               LDRH     R1,[R0, #+0]
   \   00000008   0A20               MOVS     R0,#+10
   \   0000000A   ........           BL       CheckTimeOver
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   00F0A480           BEQ.W    ??Get_ADC_Data_0
    143          		return;
    144          	ADC_Timer = MS_TIMER;
   \                     ??Get_ADC_Data_1:
   \   00000014   ....               LDR.N    R0,??DataTable2_11  ;; 0x40000c00
   \   00000016   ........           BL       TIM_GetCounter
   \   0000001A   ....               LDR.N    R1,??DataTable2_10
   \   0000001C   0880               STRH     R0,[R1, #+0]
    145          	for( i = 0 ; i < 5 ; i++ )
   \   0000001E   0020               MOVS     R0,#+0
   \   00000020   0DE0               B.N      ??Get_ADC_Data_2
    146          	{
    147          		ADC_Buffer[ADC_Count][i] = ADCConvertedValue[i];
   \                     ??Get_ADC_Data_3:
   \   00000022   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   ....               LDR.N    R1,??DataTable2_12
   \   00000026   0978               LDRB     R1,[R1, #+0]
   \   00000028   0A22               MOVS     R2,#+10
   \   0000002A   ....               LDR.N    R3,??DataTable2_8
   \   0000002C   02FB0131           MLA      R1,R2,R1,R3
   \   00000030   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   ....               LDR.N    R2,??DataTable2_3
   \   00000034   32F81020           LDRH     R2,[R2, R0, LSL #+1]
   \   00000038   21F81020           STRH     R2,[R1, R0, LSL #+1]
    148          	}
   \   0000003C   401C               ADDS     R0,R0,#+1
   \                     ??Get_ADC_Data_2:
   \   0000003E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0528               CMP      R0,#+5
   \   00000042   EED3               BCC.N    ??Get_ADC_Data_3
    149          	
    150          	// --기준 이하로 배터리가 떨어졌을 결우 장치를 Active를 정지 시킨다. -----
    151          	if( ADCConvertedValue[3] < 1600 )
   \   00000044   ....               LDR.N    R0,??DataTable2_3
   \   00000046   C088               LDRH     R0,[R0, #+6]
   \   00000048   B0F5C86F           CMP      R0,#+1600
   \   0000004C   03D2               BCS.N    ??Get_ADC_Data_4
    152          	{
    153          
    154          		Flag.Active = 0;
   \   0000004E   ....               LDR.N    R0,??DataTable2_13
   \   00000050   0021               MOVS     R1,#+0
   \   00000052   C171               STRB     R1,[R0, #+7]
   \   00000054   06E0               B.N      ??Get_ADC_Data_5
    155          
    156          #ifdef DEBUG_LOG
    157          		if(LOGWRITE & LOG_BASIC)                             
    158          		{
    159          			sprintf((char *)Buffer," Battery Low" ); 
    160          			Write_Log(Buffer, NORMAL_LOG);    
    161          		}
    162          
    163          #endif
    164          	}
    165          	else
    166          	{
    167          		// 장치가 로우로 떨어졌다가 다시 올라갔다면 인식한다.			
    168          		// 거나 처음 장치를 온했을경우
    169          		if( !Flag.Active )				
   \                     ??Get_ADC_Data_4:
   \   00000056   ....               LDR.N    R0,??DataTable2_13
   \   00000058   C079               LDRB     R0,[R0, #+7]
   \   0000005A   0028               CMP      R0,#+0
   \   0000005C   02D1               BNE.N    ??Get_ADC_Data_5
    170          		{		
    171          			// 배터리가 정상범위로 들어온다면 Active 시킨다.
    172          #ifdef DEBUG_LOG               
    173          			if(LOGWRITE & LOG_BASIC)                             
    174          			{
    175          				sprintf((char *)Buffer," Battery Normal AcitveFlag = 1" ); 
    176          				Write_Log(Buffer, NORMAL_LOG);    
    177          			}
    178          #endif				
    179          			Flag.Active = 1;
   \   0000005E   ....               LDR.N    R0,??DataTable2_13
   \   00000060   0121               MOVS     R1,#+1
   \   00000062   C171               STRB     R1,[R0, #+7]
    180          		}
    181          	}
    182          	///////////////////////////////////////////////////////////////////////////
    183          	ADC_Count++ ;
   \                     ??Get_ADC_Data_5:
   \   00000064   ....               LDR.N    R0,??DataTable2_12
   \   00000066   0078               LDRB     R0,[R0, #+0]
   \   00000068   401C               ADDS     R0,R0,#+1
   \   0000006A   ....               LDR.N    R1,??DataTable2_12
   \   0000006C   0870               STRB     R0,[R1, #+0]
    184          	ADC_Count = ADC_Count % MAX_ADC_BUFFER ;	
   \   0000006E   ....               LDR.N    R0,??DataTable2_12
   \   00000070   0078               LDRB     R0,[R0, #+0]
   \   00000072   6421               MOVS     R1,#+100
   \   00000074   90FBF1F2           SDIV     R2,R0,R1
   \   00000078   01FB1200           MLS      R0,R1,R2,R0
   \   0000007C   ....               LDR.N    R1,??DataTable2_12
   \   0000007E   0870               STRB     R0,[R1, #+0]
    185          	
    186          	if( ADC_Count ) return;
   \   00000080   ....               LDR.N    R0,??DataTable2_12
   \   00000082   0078               LDRB     R0,[R0, #+0]
   \   00000084   0028               CMP      R0,#+0
   \   00000086   69D1               BNE.N    ??Get_ADC_Data_0
    187          	
    188          	for ( i = 0 ; i < 5 ; i++ )
   \                     ??Get_ADC_Data_6:
   \   00000088   0020               MOVS     R0,#+0
   \   0000008A   20E0               B.N      ??Get_ADC_Data_7
    189          	{
    190          		// 초기화 
    191          		ADC_Value[i] = 0;	
    192          		// 메인 검출
    193          		for( i2 = 0; i2 < MAX_ADC_BUFFER ; i2++)
    194          		{
    195          			ADC_Value[i] += ADC_Buffer[i2][i] ;
   \                     ??Get_ADC_Data_8:
   \   0000008C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008E   00AA               ADD      R2,SP,#+0
   \   00000090   52F82020           LDR      R2,[R2, R0, LSL #+2]
   \   00000094   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000098   0A23               MOVS     R3,#+10
   \   0000009A   ....               LDR.N    R4,??DataTable2_8
   \   0000009C   03FB0143           MLA      R3,R3,R1,R4
   \   000000A0   33F81030           LDRH     R3,[R3, R0, LSL #+1]
   \   000000A4   9A18               ADDS     R2,R3,R2
   \   000000A6   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A8   00AB               ADD      R3,SP,#+0
   \   000000AA   43F82020           STR      R2,[R3, R0, LSL #+2]
    196          		}
   \   000000AE   491C               ADDS     R1,R1,#+1
   \                     ??Get_ADC_Data_9:
   \   000000B0   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000B2   6429               CMP      R1,#+100
   \   000000B4   EAD3               BCC.N    ??Get_ADC_Data_8
    197          		ADC_Value[i] /= MAX_ADC_BUFFER;		
   \   000000B6   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B8   00A9               ADD      R1,SP,#+0
   \   000000BA   51F82010           LDR      R1,[R1, R0, LSL #+2]
   \   000000BE   6422               MOVS     R2,#+100
   \   000000C0   B1FBF2F1           UDIV     R1,R1,R2
   \   000000C4   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C6   00AA               ADD      R2,SP,#+0
   \   000000C8   42F82010           STR      R1,[R2, R0, LSL #+2]
   \   000000CC   401C               ADDS     R0,R0,#+1
   \                     ??Get_ADC_Data_7:
   \   000000CE   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D0   0528               CMP      R0,#+5
   \   000000D2   06D2               BCS.N    ??Get_ADC_Data_10
   \   000000D4   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D6   00A9               ADD      R1,SP,#+0
   \   000000D8   0022               MOVS     R2,#+0
   \   000000DA   41F82020           STR      R2,[R1, R0, LSL #+2]
   \   000000DE   0021               MOVS     R1,#+0
   \   000000E0   E6E7               B.N      ??Get_ADC_Data_9
    198          	}
    199          	Adjust = ADC_ADJUST;
   \                     ??Get_ADC_Data_10:
   \   000000E2   ....               LDR.N    R4,??DataTable2_14  ;; 0x414d20d2
    200          	// 종료 값 들 변수에 집어넣기	
    201          	Info.EMS_Data.AirPressure_Volt 	= (u16)((float)ADC_Value[0] * (float)Adjust) ;	// 에어압력
   \   000000E4   0098               LDR      R0,[SP, #+0]
   \   000000E6   ........           BL       __aeabi_ui2f
   \   000000EA   0100               MOVS     R1,R0
   \   000000EC   2000               MOVS     R0,R4
   \   000000EE   ........           BL       __aeabi_fmul
   \   000000F2   ........           BL       __aeabi_f2iz
   \   000000F6   ....               LDR.N    R1,??DataTable2_15
   \   000000F8   A1F84B00           STRH     R0,[R1, #+75]
    202          	Info.EMS_Data.Fuel_Volt 		= (u16)((float)ADC_Value[1] * (float)Adjust); 	// LPG 전압
   \   000000FC   0198               LDR      R0,[SP, #+4]
   \   000000FE   ........           BL       __aeabi_ui2f
   \   00000102   0100               MOVS     R1,R0
   \   00000104   2000               MOVS     R0,R4
   \   00000106   ........           BL       __aeabi_fmul
   \   0000010A   ........           BL       __aeabi_f2iz
   \   0000010E   ....               LDR.N    R1,??DataTable2_15
   \   00000110   A1F84700           STRH     R0,[R1, #+71]
    203          	Info.EMS_Data.Acceller_Volt 	     = (u16)((float)ADC_Value[2] * (float)Adjust) ;          // 엑셀
   \   00000114   0298               LDR      R0,[SP, #+8]
   \   00000116   ........           BL       __aeabi_ui2f
   \   0000011A   0100               MOVS     R1,R0
   \   0000011C   2000               MOVS     R0,R4
   \   0000011E   ........           BL       __aeabi_fmul
   \   00000122   ........           BL       __aeabi_f2iz
   \   00000126   ....               LDR.N    R1,??DataTable2_15
   \   00000128   A1F84F00           STRH     R0,[R1, #+79]
    204           	Info.EMS_Data.Battery_Volt 	     = (u16)((float)ADC_Value[3] * (float)Adjust) ;          // 배터리 
   \   0000012C   0398               LDR      R0,[SP, #+12]
   \   0000012E   ........           BL       __aeabi_ui2f
   \   00000132   0100               MOVS     R1,R0
   \   00000134   2000               MOVS     R0,R4
   \   00000136   ........           BL       __aeabi_fmul
   \   0000013A   ........           BL       __aeabi_f2iz
   \   0000013E   ....               LDR.N    R1,??DataTable2_15
   \   00000140   A1F84900           STRH     R0,[R1, #+73]
    205          	Info.EMS_Data.CoolWaterTemp_Volt	= (u16)((float)ADC_Value[4] * (float)Adjust) ;	// 냉각수 온다
   \   00000144   0498               LDR      R0,[SP, #+16]
   \   00000146   ........           BL       __aeabi_ui2f
   \   0000014A   0100               MOVS     R1,R0
   \   0000014C   2000               MOVS     R0,R4
   \   0000014E   ........           BL       __aeabi_fmul
   \   00000152   ........           BL       __aeabi_f2iz
   \   00000156   ....               LDR.N    R1,??DataTable2_15
   \   00000158   A1F84D00           STRH     R0,[R1, #+77]
    206          	
    207          	// LOG -------------------------------------------------------------------------
    208                
    209          	// 로그 기록단위 100ms 
    210          	// 1. 에어압력
    211          	// 2. LPG
    212          	// 3. 엑셀
    213          	// 4. 배터리
    214          	// 5. 냉각수 온도
    215          
    216          #ifdef DEBUG_LOG
    217          	if(LOGWRITE & LOG_ADC)                             
    218          	{
    219          		sprintf((char *)Buffer,"ADC Data %d,%d,%d,%d,%d\r\n ",
    220          			  Info.EMS_Data.AirPressure_Volt,
    221          			  Info.EMS_Data.Fuel_Volt,
    222          			  Info.EMS_Data.Acceller_Volt,
    223          			  Info.EMS_Data.Battery_Volt,
    224          			  Info.EMS_Data.CoolWaterTemp_Volt
    225          			  ); 
    226          		Write_Log(Buffer, NORMAL_LOG);    
    227          	}
    228          #endif     
    229          	// -----------------------------------------------------------------------------	
    230          
    231          }
   \                     ??Get_ADC_Data_0:
   \   0000015C   06B0               ADD      SP,SP,#+24
   \   0000015E   10BD               POP      {R4,PC}          ;; return

   \                                 In section .bss, align 2
   \                     ??ADC_Timer:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     ??ADC_Count:
   \   00000000                      DS8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   04004000           DC32     0x400004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   10640240           DC32     0x40026410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   4C200140           DC32     0x4001204c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   ........           DC32     ADCConvertedValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   00000240           DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   00080240           DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   00040240           DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   00200140           DC32     0x40012000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   ........           DC32     ADC_Buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   20800010           DC32     0x10008020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   ........           DC32     ??ADC_Timer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   000C0040           DC32     0x40000c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   ........           DC32     ??ADC_Count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   ........           DC32     Flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   D2204D41           DC32     0x414d20d2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   ........           DC32     Info

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     ADC_Config                 120
     ADC_INIT                     0
     DMA2_Stream0_IRQHandler      8
     Get_ADC_Data                32


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     ADCConvertedValue         12
     ADC_Buffer              1000
     ADC_Config               350
     DMA2_Stream0_IRQHandler   62
     ADC_INIT                   2
     Get_ADC_Data             352
     ADC_Timer                  2
     ADC_Count                  1
     ??DataTable2               4
     ??DataTable2_1             4
     ??DataTable2_2             4
     ??DataTable2_3             4
     ??DataTable2_4             4
     ??DataTable2_5             4
     ??DataTable2_6             4
     ??DataTable2_7             4
     ??DataTable2_8             4
     ??DataTable2_9             4
     ??DataTable2_10            4
     ??DataTable2_11            4
     ??DataTable2_12            4
     ??DataTable2_13            4
     ??DataTable2_14            4
     ??DataTable2_15            4

 
 1 015 bytes in section .bss
   830 bytes in section .text
 
   830 bytes of CODE memory
 1 015 bytes of DATA memory

Errors: none
Warnings: none
