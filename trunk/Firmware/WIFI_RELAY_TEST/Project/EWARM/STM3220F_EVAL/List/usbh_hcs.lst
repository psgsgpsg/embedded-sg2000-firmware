###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     12/Nov/2011  19:31:42 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Libraries\STM32 #
#                    _USB_HOST_Library\Core\src\usbh_hcs.c                    #
#    Command line =  "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Libraries\STM3 #
#                    2_USB_HOST_Library\Core\src\usbh_hcs.c" -D               #
#                    USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM3220F_EVAL   #
#                    -D USE_USB_OTG_FS -D RTC_CLOCK_SOURCE_LSE -lC            #
#                    "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\ #
#                    STM3220F_EVAL\List\" -lA "F:\¹¬ÀÛ¾÷\[ NewDTG             #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\STM3220F_EVAL\List\" #
#                     -o "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EW #
#                    ARM\STM3220F_EVAL\Obj\" --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I "F:\¹¬ÀÛ¾÷\[ NewDTG                              #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\" -I              #
#                    "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\ #
#                    ..\..\Libraries\CMSIS\CM3\CoreSupport\" -I "F:\¹¬ÀÛ¾÷\[  #
#                    NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Librari #
#                    es\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\" -I             #
#                    "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\ #
#                    ..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\" -I      #
#                    "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\ #
#                    ..\..\Utilities\STM32_EVAL\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG      #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Utilities\STM3 #
#                    2_EVAL\Common\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG                   #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Utilities\STM3 #
#                    2_EVAL\STM3220F_EVAL\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG            #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Libraries\STM3 #
#                    2_USB_OTG_Driver\inc\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG            #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Libraries\STM3 #
#                    2_USB_Device_Library\Core\inc\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG   #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Libraries\STM3 #
#                    2_USB_Device_Library\Class\msc\inc\" -I "F:\¹¬ÀÛ¾÷\[     #
#                    NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\Usb\" -I   #
#                    "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\ #
#                    ..\Usb\Inc\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG                      #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\Usb\src\" -I      #
#                    "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\ #
#                    ..\..\Libraries\STM32_USB_HOST_Library\Core\inc\" -I     #
#                    "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\ #
#                    ..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\"   #
#                    -Ol --use_c++_inline                                     #
#    List file    =  F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\S #
#                    TM3220F_EVAL\List\usbh_hcs.lst                           #
#    Object file  =  F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\S #
#                    TM3220F_EVAL\Obj\usbh_hcs.o                              #
#                                                                             #
#                                                                             #
###############################################################################

F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Libraries\STM32_USB_HOST_Library\Core\src\usbh_hcs.c
      1          /**
      2            ******************************************************************************
      3            * @file    usbh_hcs.c
      4            * @author  MCD Application Team
      5            * @version V2.0.0RC1
      6            * @date    18-March-2011
      7            * @brief   This file implements functions for opening and closing host channels
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */ 
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "usbh_hcs.h"
     24          
     25          /** @addtogroup USBH_LIB
     26            * @{
     27            */
     28          
     29          /** @addtogroup USBH_LIB_CORE
     30          * @{
     31          */
     32            
     33          /** @defgroup USBH_HCS
     34            * @brief This file includes opening and closing host channels
     35            * @{
     36            */ 
     37          
     38          /** @defgroup USBH_HCS_Private_Defines
     39            * @{
     40            */ 
     41          /**
     42            * @}
     43            */ 
     44          
     45          /** @defgroup USBH_HCS_Private_TypesDefinitions
     46            * @{
     47            */ 
     48          /**
     49            * @}
     50            */ 
     51          
     52          
     53          /** @defgroup USBH_HCS_Private_Macros
     54            * @{
     55            */ 
     56          /**
     57            * @}
     58            */ 
     59          
     60          
     61          /** @defgroup USBH_HCS_Private_Variables
     62            * @{
     63            */ 
     64          
     65          /**
     66            * @}
     67            */ 
     68          
     69          
     70          /** @defgroup USBH_HCS_Private_FunctionPrototypes
     71            * @{
     72            */ 
     73          static uint16_t USBH_GetFreeChannel (USB_OTG_CORE_HANDLE *pdev);
     74          /**
     75            * @}
     76            */ 
     77          
     78          
     79          /** @defgroup USBH_HCS_Private_Functions
     80            * @{
     81            */ 
     82          
     83          
     84          
     85          /**
     86            * @brief  USBH_Open_Channel
     87            *         Open a  pipe
     88            * @param  pdev : Selected device
     89            * @param  hc_num: Host channel Number
     90            * @param  dev_address: USB Device address allocated to attached device
     91            * @param  speed : USB device speed (Full/Low)
     92            * @param  ep_type: end point type (Bulk/int/ctl)
     93            * @param  mps: max pkt size
     94            * @retval Status
     95            */

   \                                 In section .text, align 2, keep-with-next
     96          uint8_t USBH_Open_Channel  (USB_OTG_CORE_HANDLE *pdev,
     97                                      uint8_t hc_num,
     98                                      uint8_t dev_address,
     99                                      uint8_t speed,
    100                                      uint8_t ep_type,
    101                                      uint16_t mps)
    102          {
   \                     USBH_Open_Channel:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   069C               LDR      R4,[SP, #+24]
   \   00000004   079D               LDR      R5,[SP, #+28]
    103          
    104            pdev->host.hc[hc_num].ep_num = pdev->host.channel[hc_num]& 0x7F;
   \   00000006   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   10EB4106           ADDS     R6,R0,R1, LSL #+1
   \   0000000C   96F88C64           LDRB     R6,[R6, #+1164]
   \   00000010   16F07F06           ANDS     R6,R6,#0x7F
   \   00000014   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   10EB4117           ADDS     R7,R0,R1, LSL #+5
   \   0000001A   87F8AD62           STRB     R6,[R7, #+685]
    105            pdev->host.hc[hc_num].ep_is_in = (pdev->host.channel[hc_num] & 0x80 ) == 0x80;  
   \   0000001E   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000020   10EB4106           ADDS     R6,R0,R1, LSL #+1
   \   00000024   B6F88C64           LDRH     R6,[R6, #+1164]
   \   00000028   C6F3C016           UBFX     R6,R6,#+7,#+1
   \   0000002C   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000002E   16F00106           ANDS     R6,R6,#0x1
   \   00000032   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000034   10EB4117           ADDS     R7,R0,R1, LSL #+5
   \   00000038   87F8AE62           STRB     R6,[R7, #+686]
    106            pdev->host.hc[hc_num].dev_addr = dev_address;  
   \   0000003C   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003E   10EB4116           ADDS     R6,R0,R1, LSL #+5
   \   00000042   86F8AC22           STRB     R2,[R6, #+684]
    107            pdev->host.hc[hc_num].ep_type = ep_type;  
   \   00000046   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000048   10EB4112           ADDS     R2,R0,R1, LSL #+5
   \   0000004C   82F8B142           STRB     R4,[R2, #+689]
    108            pdev->host.hc[hc_num].max_packet = mps; 
   \   00000050   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000052   10EB4112           ADDS     R2,R0,R1, LSL #+5
   \   00000056   A2F8B252           STRH     R5,[R2, #+690]
    109            pdev->host.hc[hc_num].speed = speed; 
   \   0000005A   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000005C   10EB4112           ADDS     R2,R0,R1, LSL #+5
   \   00000060   82F8AF32           STRB     R3,[R2, #+687]
    110            pdev->host.hc[hc_num].toggle_in = 0; 
   \   00000064   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000066   10EB4112           ADDS     R2,R0,R1, LSL #+5
   \   0000006A   0024               MOVS     R4,#+0
   \   0000006C   82F8C442           STRB     R4,[R2, #+708]
    111            pdev->host.hc[hc_num].toggle_out = 0;   
   \   00000070   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000072   10EB4112           ADDS     R2,R0,R1, LSL #+5
   \   00000076   0024               MOVS     R4,#+0
   \   00000078   82F8C542           STRB     R4,[R2, #+709]
    112            if(speed == HPRT0_PRTSPD_HIGH_SPEED)
   \   0000007C   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000007E   002B               CMP      R3,#+0
   \   00000080   05D1               BNE.N    ??USBH_Open_Channel_0
    113            {
    114              pdev->host.hc[hc_num].do_ping = 1;
   \   00000082   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000084   10EB4112           ADDS     R2,R0,R1, LSL #+5
   \   00000088   0123               MOVS     R3,#+1
   \   0000008A   82F8B032           STRB     R3,[R2, #+688]
    115            }
    116            
    117            USB_OTG_HC_Init(pdev, hc_num) ;
   \                     ??USBH_Open_Channel_0:
   \   0000008E   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000090   ........           BL       USB_OTG_HC_Init
    118            
    119            return HC_OK; 
   \   00000094   0020               MOVS     R0,#+0
   \   00000096   F2BD               POP      {R1,R4-R7,PC}    ;; return
    120          
    121          }
    122          
    123          /**
    124            * @brief  USBH_Modify_Channel
    125            *         Modify a  pipe
    126            * @param  pdev : Selected device
    127            * @param  hc_num: Host channel Number
    128            * @param  dev_address: USB Device address allocated to attached device
    129            * @param  speed : USB device speed (Full/Low)
    130            * @param  ep_type: end point type (Bulk/int/ctl)
    131            * @param  mps: max pkt size
    132            * @retval Status
    133            */

   \                                 In section .text, align 2, keep-with-next
    134          uint8_t USBH_Modify_Channel (USB_OTG_CORE_HANDLE *pdev,
    135                                      uint8_t hc_num,
    136                                      uint8_t dev_address,
    137                                      uint8_t speed,
    138                                      uint8_t ep_type,
    139                                      uint16_t mps)
    140          {
   \                     USBH_Modify_Channel:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   059C               LDR      R4,[SP, #+20]
    141            
    142            if(dev_address != 0)
   \   00000004   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   002A               CMP      R2,#+0
   \   00000008   04D0               BEQ.N    ??USBH_Modify_Channel_0
    143            {
    144              pdev->host.hc[hc_num].dev_addr = dev_address;  
   \   0000000A   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   10EB4115           ADDS     R5,R0,R1, LSL #+5
   \   00000010   85F8AC22           STRB     R2,[R5, #+684]
    145            }
    146            
    147            if((pdev->host.hc[hc_num].max_packet != mps) && (mps != 0))
   \                     ??USBH_Modify_Channel_0:
   \   00000014   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   10EB4112           ADDS     R2,R0,R1, LSL #+5
   \   0000001A   B2F8B222           LDRH     R2,[R2, #+690]
   \   0000001E   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000020   A242               CMP      R2,R4
   \   00000022   07D0               BEQ.N    ??USBH_Modify_Channel_1
   \   00000024   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000026   002C               CMP      R4,#+0
   \   00000028   04D0               BEQ.N    ??USBH_Modify_Channel_1
    148            {
    149              pdev->host.hc[hc_num].max_packet = mps; 
   \   0000002A   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002C   10EB4112           ADDS     R2,R0,R1, LSL #+5
   \   00000030   A2F8B242           STRH     R4,[R2, #+690]
    150            }
    151            
    152            if((pdev->host.hc[hc_num].speed != speed ) && (speed != 0 )) 
   \                     ??USBH_Modify_Channel_1:
   \   00000034   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000036   10EB4112           ADDS     R2,R0,R1, LSL #+5
   \   0000003A   92F8AF22           LDRB     R2,[R2, #+687]
   \   0000003E   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000040   9A42               CMP      R2,R3
   \   00000042   07D0               BEQ.N    ??USBH_Modify_Channel_2
   \   00000044   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000046   002B               CMP      R3,#+0
   \   00000048   04D0               BEQ.N    ??USBH_Modify_Channel_2
    153            {
    154              pdev->host.hc[hc_num].speed = speed; 
   \   0000004A   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000004C   10EB4112           ADDS     R2,R0,R1, LSL #+5
   \   00000050   82F8AF32           STRB     R3,[R2, #+687]
    155            }
    156            
    157            USB_OTG_HC_Init(pdev, hc_num);
   \                     ??USBH_Modify_Channel_2:
   \   00000054   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000056   ........           BL       USB_OTG_HC_Init
    158            return HC_OK; 
   \   0000005A   0020               MOVS     R0,#+0
   \   0000005C   32BD               POP      {R1,R4,R5,PC}    ;; return
    159          
    160          }
    161          
    162          /**
    163            * @brief  USBH_Alloc_Channel
    164            *         Allocate a new channel for the pipe
    165            * @param  ep_addr: End point for which the channel to be allocated
    166            * @retval hc_num: Host channel number
    167            */

   \                                 In section .text, align 2, keep-with-next
    168          uint8_t USBH_Alloc_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t ep_addr)
    169          {
   \                     USBH_Alloc_Channel:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
    170            uint16_t hc_num;
    171            
    172            hc_num =  USBH_GetFreeChannel(pdev);
   \   00000006   2000               MOVS     R0,R4
   \   00000008   ........           BL       USBH_GetFreeChannel
    173          
    174            if (hc_num != HC_ERROR)
   \   0000000C   4FF6FF71           MOVW     R1,#+65535
   \   00000010   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   8842               CMP      R0,R1
   \   00000014   07D0               BEQ.N    ??USBH_Alloc_Channel_0
    175            {
    176          	pdev->host.channel[hc_num] = HC_USED | ep_addr;
   \   00000016   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000018   14EB4001           ADDS     R1,R4,R0, LSL #+1
   \   0000001C   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001E   55F40042           ORRS     R2,R5,#0x8000
   \   00000022   A1F88C24           STRH     R2,[R1, #+1164]
    177            }
    178            return hc_num;
   \                     ??USBH_Alloc_Channel_0:
   \   00000026   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   32BD               POP      {R1,R4,R5,PC}    ;; return
    179          }
    180          
    181          /**
    182            * @brief  USBH_Free_Pipe
    183            *         Free the USB host channel
    184            * @param  idx: Channel number to be freed 
    185            * @retval Status
    186            */

   \                                 In section .text, align 2, keep-with-next
    187          uint8_t USBH_Free_Channel  (USB_OTG_CORE_HANDLE *pdev, uint8_t idx)
    188          {
    189             if(idx < HC_MAX)
   \                     USBH_Free_Channel:
   \   00000000   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0829               CMP      R1,#+8
   \   00000004   0BD2               BCS.N    ??USBH_Free_Channel_0
    190             {
    191          	 pdev->host.channel[idx] &= HC_USED_MASK;
   \   00000006   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000008   10EB4102           ADDS     R2,R0,R1, LSL #+1
   \   0000000C   B2F88C24           LDRH     R2,[R2, #+1164]
   \   00000010   5204               LSLS     R2,R2,#+17
   \   00000012   520C               LSRS     R2,R2,#+17
   \   00000014   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   10EB4100           ADDS     R0,R0,R1, LSL #+1
   \   0000001A   A0F88C24           STRH     R2,[R0, #+1164]
    192             }
    193             return USBH_OK;
   \                     ??USBH_Free_Channel_0:
   \   0000001E   0020               MOVS     R0,#+0
   \   00000020   7047               BX       LR               ;; return
    194          }
    195          
    196          
    197          /**
    198            * @brief  USBH_DeAllocate_AllChannel
    199            *         Free all USB host channel
    200          * @param  pdev : core instance
    201            * @retval Status
    202            */

   \                                 In section .text, align 2, keep-with-next
    203          uint8_t USBH_DeAllocate_AllChannel  (USB_OTG_CORE_HANDLE *pdev)
    204          {
    205             uint8_t idx;
    206             
    207             for (idx = 2; idx < HC_MAX ; idx ++)
   \                     USBH_DeAllocate_AllChannel:
   \   00000000   0221               MOVS     R1,#+2
   \   00000002   06E0               B.N      ??USBH_DeAllocate_AllChannel_0
    208             {
    209          	 pdev->host.channel[idx] = 0;
   \                     ??USBH_DeAllocate_AllChannel_1:
   \   00000004   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   10EB4102           ADDS     R2,R0,R1, LSL #+1
   \   0000000A   0023               MOVS     R3,#+0
   \   0000000C   A2F88C34           STRH     R3,[R2, #+1164]
    210             }
   \   00000010   491C               ADDS     R1,R1,#+1
   \                     ??USBH_DeAllocate_AllChannel_0:
   \   00000012   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0829               CMP      R1,#+8
   \   00000016   F5D3               BCC.N    ??USBH_DeAllocate_AllChannel_1
    211             return USBH_OK;
   \   00000018   0020               MOVS     R0,#+0
   \   0000001A   7047               BX       LR               ;; return
    212          }
    213          
    214          /**
    215            * @brief  USBH_GetFreeChannel
    216            *         Get a free channel number for allocation to a device endpoint
    217            * @param  None
    218            * @retval idx: Free Channel number
    219            */

   \                                 In section .text, align 2, keep-with-next
    220          static uint16_t USBH_GetFreeChannel (USB_OTG_CORE_HANDLE *pdev)
    221          {
    222            uint8_t idx = 0;
   \                     USBH_GetFreeChannel:
   \   00000000   0021               MOVS     R1,#+0
    223            
    224            for (idx = 0 ; idx < HC_MAX ; idx++)
   \   00000002   0022               MOVS     R2,#+0
   \   00000004   1100               MOVS     R1,R2
   \   00000006   00E0               B.N      ??USBH_GetFreeChannel_0
   \                     ??USBH_GetFreeChannel_1:
   \   00000008   491C               ADDS     R1,R1,#+1
   \                     ??USBH_GetFreeChannel_0:
   \   0000000A   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0829               CMP      R1,#+8
   \   0000000E   0AD2               BCS.N    ??USBH_GetFreeChannel_2
    225            {
    226          	if ((pdev->host.channel[idx] & HC_USED) == 0)
   \   00000010   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   10EB4102           ADDS     R2,R0,R1, LSL #+1
   \   00000016   B2F88C24           LDRH     R2,[R2, #+1164]
   \   0000001A   1204               LSLS     R2,R2,#+16
   \   0000001C   F4D4               BMI.N    ??USBH_GetFreeChannel_1
    227          	{
    228          	   return idx;
   \   0000001E   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000020   0800               MOVS     R0,R1
   \   00000022   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000024   01E0               B.N      ??USBH_GetFreeChannel_3
    229          	} 
    230            }
    231            return HC_ERROR;
   \                     ??USBH_GetFreeChannel_2:
   \   00000026   4FF6FF70           MOVW     R0,#+65535
   \                     ??USBH_GetFreeChannel_3:
   \   0000002A   7047               BX       LR               ;; return
    232          }
    233          
    234          
    235          /**
    236          * @}
    237          */ 
    238          
    239          /**
    240          * @}
    241          */ 
    242          
    243          /**
    244          * @}
    245          */
    246          
    247          /**
    248          * @}
    249          */ 
    250          
    251          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
    252          
    253          

   Maximum stack usage in bytes:

     Function                   .cstack
     --------                   -------
     USBH_Alloc_Channel             16
     USBH_DeAllocate_AllChannel      0
     USBH_Free_Channel               0
     USBH_GetFreeChannel             0
     USBH_Modify_Channel            16
     USBH_Open_Channel              24


   Section sizes:

     Function/Label             Bytes
     --------------             -----
     USBH_Open_Channel           152
     USBH_Modify_Channel          94
     USBH_Alloc_Channel           42
     USBH_Free_Channel            34
     USBH_DeAllocate_AllChannel   28
     USBH_GetFreeChannel          44

 
 394 bytes in section .text
 
 394 bytes of CODE memory

Errors: none
Warnings: none
