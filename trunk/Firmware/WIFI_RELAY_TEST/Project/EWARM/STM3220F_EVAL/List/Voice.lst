###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     19/Dec/2011  16:18:51 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\Voice.c      #
#    Command line =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\Voice.c -D   #
#                    USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM3220F_EVAL   #
#                    -D USE_USB_OTG_FS -D RTC_CLOCK_SOURCE_LSE -lC            #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\STM322 #
#                    0F_EVAL\List\ -lA E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Pr #
#                    oject\EWARM\STM3220F_EVAL\List\ -o                       #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\STM322 #
#                    0F_EVAL\Obj\ --no_cse --no_unroll --no_inline            #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWAR #
#                    M\..\ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWA #
#                    RM\..\..\Libraries\CMSIS\CM3\CoreSupport\ -I             #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\ -I       #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32F2xx_StdPeriph_Driver\inc\ -I             #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Utilities\STM32_EVAL\ -I E:\Work\Firmware\DTG\DTG_EMS_SY #
#                    STEM\Project\EWARM\..\..\Utilities\STM32_EVAL\Common\    #
#                    -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\ #
#                    ..\Utilities\STM32_EVAL\STM3220F_EVAL\ -I                #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32_USB_OTG_Driver\inc\ -I                   #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32_USB_Device_Library\Core\inc\ -I          #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32_USB_Device_Library\Class\msc\inc\ -I     #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\Usb #
#                    \ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\. #
#                    .\Usb\Inc\ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Projec #
#                    t\EWARM\..\Usb\src\ -I E:\Work\Firmware\DTG\DTG_EMS_SYST #
#                    EM\Project\EWARM\..\..\Libraries\STM32_USB_HOST_Library\ #
#                    Core\inc\ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project #
#                    \EWARM\..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\ #
#                    inc\ -Ol --use_c++_inline                                #
#    List file    =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\STM322 #
#                    0F_EVAL\List\Voice.lst                                   #
#    Object file  =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\STM322 #
#                    0F_EVAL\Obj\Voice.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\Voice.c
      1          #include "Voice.h"
      2          #include "main.h"
      3          #include "spi_flash.h"
      4          //#include "usbh_usr.h"
      5          
      6          

   \                                 In section .bss, align 4
      7          u8 Voice_Stack[VOICE_MAX_COUNT + 1];
   \                     Voice_Stack:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
      8          u8 Voice_Stack_Count;
   \                     Voice_Stack_Count:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
      9          u8 SerilaFlash_Info[3];
   \                     SerilaFlash_Info:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     10          u32 Flash_Size;
   \                     Flash_Size:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     11          u32 MaxAddress;
   \                     MaxAddress:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     12          u32 IDAddrPos;
   \                     IDAddrPos:
   \   00000000                      DS8 4
     13          

   \                                 In section .text, align 2, keep-with-next
     14          void Voice_Config(void)
     15          {
   \                     Voice_Config:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   83B0               SUB      SP,SP,#+12
     16              GPIO_InitTypeDef GPIO_InitStructure;
     17            // 음성칩 포트 초기화 
     18              RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
   \   00000004   0121               MOVS     R1,#+1
   \   00000006   2020               MOVS     R0,#+32
   \   00000008   ........           BL       RCC_AHB1PeriphClockCmd
     19              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_8 | GPIO_Pin_9 ;
   \   0000000C   4FF45070           MOV      R0,#+832
   \   00000010   0090               STR      R0,[SP, #+0]
     20              GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;  
   \   00000012   0020               MOVS     R0,#+0
   \   00000014   8DF80600           STRB     R0,[SP, #+6]
     21              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   00000018   0120               MOVS     R0,#+1
   \   0000001A   8DF80400           STRB     R0,[SP, #+4]
     22              GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
   \   0000001E   0120               MOVS     R0,#+1
   \   00000020   8DF80700           STRB     R0,[SP, #+7]
     23              GPIO_Init(GPIOF, &GPIO_InitStructure);
   \   00000024   00A9               ADD      R1,SP,#+0
   \   00000026   ........           LDR.W    R0,??DataTable17  ;; 0x40021400
   \   0000002A   ........           BL       GPIO_Init
     24          
     25              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 ;      // Busy
   \   0000002E   8020               MOVS     R0,#+128
   \   00000030   0090               STR      R0,[SP, #+0]
     26              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
   \   00000032   0020               MOVS     R0,#+0
   \   00000034   8DF80400           STRB     R0,[SP, #+4]
     27              GPIO_Init(GPIOF, &GPIO_InitStructure);  
   \   00000038   00A9               ADD      R1,SP,#+0
   \   0000003A   ........           LDR.W    R0,??DataTable17  ;; 0x40021400
   \   0000003E   ........           BL       GPIO_Init
     28            
     29              VOICE_CSB_SEL_LOW();         // 0 : Command 모드 1: SerialFlahs Access 모드   
   \   00000042   4021               MOVS     R1,#+64
   \   00000044   ........           LDR.W    R0,??DataTable17  ;; 0x40021400
   \   00000048   ........           BL       GPIO_ResetBits
     30              VOICE_SELECT_HIGH();    // 0 : Standalone 모드 1 : MCU 모드 
   \   0000004C   4FF40071           MOV      R1,#+512
   \   00000050   ........           LDR.W    R0,??DataTable17  ;; 0x40021400
   \   00000054   ........           BL       GPIO_SetBits
     31           
     32          }
   \   00000058   07BD               POP      {R0-R2,PC}       ;; return
     33          

   \                                 In section .text, align 2, keep-with-next
     34          void SerialFlash_Start(void)
     35          {
   \                     SerialFlash_Start:
   \   00000000   80B5               PUSH     {R7,LR}
     36               VOICE_CSB_SEL_HIGH();     
   \   00000002   4021               MOVS     R1,#+64
   \   00000004   ........           LDR.W    R0,??DataTable17  ;; 0x40021400
   \   00000008   ........           BL       GPIO_SetBits
     37          }
   \   0000000C   01BD               POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     38          void SerialFlash_End(void)
     39          {
   \                     SerialFlash_End:
   \   00000000   80B5               PUSH     {R7,LR}
     40               VOICE_CSB_SEL_LOW();
   \   00000002   4021               MOVS     R1,#+64
   \   00000004   ........           LDR.W    R0,??DataTable17  ;; 0x40021400
   \   00000008   ........           BL       GPIO_ResetBits
     41          }
   \   0000000C   01BD               POP      {R0,PC}          ;; return
     42          
     43          

   \                                 In section .text, align 2, keep-with-next
     44          u32 SFmax_addr(u8 MemoryCapacity)
     45          {
     46          	u32 max_addr;
     47          	switch(MemoryCapacity-0x10) {
   \                     SFmax_addr:
   \   00000000   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   1038               SUBS     R0,R0,#+16
   \   00000004   0028               CMP      R0,#+0
   \   00000006   0CD0               BEQ.N    ??SFmax_addr_0
   \   00000008   0228               CMP      R0,#+2
   \   0000000A   10D0               BEQ.N    ??SFmax_addr_1
   \   0000000C   0CD3               BCC.N    ??SFmax_addr_2
   \   0000000E   0428               CMP      R0,#+4
   \   00000010   13D0               BEQ.N    ??SFmax_addr_3
   \   00000012   0FD3               BCC.N    ??SFmax_addr_4
   \   00000014   0628               CMP      R0,#+6
   \   00000016   16D0               BEQ.N    ??SFmax_addr_5
   \   00000018   12D3               BCC.N    ??SFmax_addr_6
   \   0000001A   0828               CMP      R0,#+8
   \   0000001C   19D0               BEQ.N    ??SFmax_addr_7
   \   0000001E   15D3               BCC.N    ??SFmax_addr_8
   \   00000020   1AE0               B.N      ??SFmax_addr_9
     48          		case 0: max_addr = 0x00010000;	//512k
   \                     ??SFmax_addr_0:
   \   00000022   5FF48030           MOVS     R0,#+65536
     49          				break;
   \   00000026   18E0               B.N      ??SFmax_addr_10
     50          		case 1: max_addr = 0x00020000;	//1M
   \                     ??SFmax_addr_2:
   \   00000028   5FF40030           MOVS     R0,#+131072
     51          				break;
   \   0000002C   15E0               B.N      ??SFmax_addr_10
     52          		case 2: max_addr = 0x00040000;	//2M
   \                     ??SFmax_addr_1:
   \   0000002E   5FF48020           MOVS     R0,#+262144
     53          				break;
   \   00000032   12E0               B.N      ??SFmax_addr_10
     54          		case 3: max_addr = 0x00080000;	//4M
   \                     ??SFmax_addr_4:
   \   00000034   5FF40020           MOVS     R0,#+524288
     55          				break;
   \   00000038   0FE0               B.N      ??SFmax_addr_10
     56          		case 4: max_addr = 0x00100000;	//8M
   \                     ??SFmax_addr_3:
   \   0000003A   5FF48010           MOVS     R0,#+1048576
     57          				break;
   \   0000003E   0CE0               B.N      ??SFmax_addr_10
     58          		case 5: max_addr = 0x00200000;	//16M
   \                     ??SFmax_addr_6:
   \   00000040   5FF40010           MOVS     R0,#+2097152
     59          				break;
   \   00000044   09E0               B.N      ??SFmax_addr_10
     60          		case 6: max_addr = 0x00400000;	//32M
   \                     ??SFmax_addr_5:
   \   00000046   5FF48000           MOVS     R0,#+4194304
     61          				break;
   \   0000004A   06E0               B.N      ??SFmax_addr_10
     62          		case 7: max_addr = 0x00800000;	//64M
   \                     ??SFmax_addr_8:
   \   0000004C   5FF40000           MOVS     R0,#+8388608
     63          				break;
   \   00000050   03E0               B.N      ??SFmax_addr_10
     64          		case 8: max_addr = 0x01000000;	//128M
   \                     ??SFmax_addr_7:
   \   00000052   5FF08070           MOVS     R0,#+16777216
     65          				break;
   \   00000056   00E0               B.N      ??SFmax_addr_10
     66          		default : max_addr = 0;
   \                     ??SFmax_addr_9:
   \   00000058   0020               MOVS     R0,#+0
     67          	}
     68          	return max_addr;
   \                     ??SFmax_addr_10:
   \   0000005A   7047               BX       LR               ;; return
     69          }
     70          

   \                                 In section .text, align 2, keep-with-next
     71          u8 SFcapacity(u8 MemoryCapacity)
     72          {
     73          	u8 capacity;
     74          	switch(MemoryCapacity-0x10) {
   \                     SFcapacity:
   \   00000000   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   1038               SUBS     R0,R0,#+16
   \   00000004   0028               CMP      R0,#+0
   \   00000006   0CD0               BEQ.N    ??SFcapacity_0
   \   00000008   0228               CMP      R0,#+2
   \   0000000A   0ED0               BEQ.N    ??SFcapacity_1
   \   0000000C   0BD3               BCC.N    ??SFcapacity_2
   \   0000000E   0428               CMP      R0,#+4
   \   00000010   0FD0               BEQ.N    ??SFcapacity_3
   \   00000012   0CD3               BCC.N    ??SFcapacity_4
   \   00000014   0628               CMP      R0,#+6
   \   00000016   10D0               BEQ.N    ??SFcapacity_5
   \   00000018   0DD3               BCC.N    ??SFcapacity_6
   \   0000001A   0828               CMP      R0,#+8
   \   0000001C   11D0               BEQ.N    ??SFcapacity_7
   \   0000001E   0ED3               BCC.N    ??SFcapacity_8
   \   00000020   11E0               B.N      ??SFcapacity_9
     75          		case 0: capacity = 1;	//512k
   \                     ??SFcapacity_0:
   \   00000022   0120               MOVS     R0,#+1
     76          				break;
   \   00000024   10E0               B.N      ??SFcapacity_10
     77          		case 1: capacity = 2;	//1M
   \                     ??SFcapacity_2:
   \   00000026   0220               MOVS     R0,#+2
     78          				break;
   \   00000028   0EE0               B.N      ??SFcapacity_10
     79          		case 2: capacity = 3;	//2M
   \                     ??SFcapacity_1:
   \   0000002A   0320               MOVS     R0,#+3
     80          				break;
   \   0000002C   0CE0               B.N      ??SFcapacity_10
     81          		case 3: capacity = 4;	//4M
   \                     ??SFcapacity_4:
   \   0000002E   0420               MOVS     R0,#+4
     82          				break;
   \   00000030   0AE0               B.N      ??SFcapacity_10
     83          		case 4: capacity = 5;	//8M
   \                     ??SFcapacity_3:
   \   00000032   0520               MOVS     R0,#+5
     84          				break;
   \   00000034   08E0               B.N      ??SFcapacity_10
     85          		case 5: capacity = 6;	//16M
   \                     ??SFcapacity_6:
   \   00000036   0620               MOVS     R0,#+6
     86          				break;
   \   00000038   06E0               B.N      ??SFcapacity_10
     87          		case 6: capacity = 7;	//32M
   \                     ??SFcapacity_5:
   \   0000003A   0720               MOVS     R0,#+7
     88          				break;
   \   0000003C   04E0               B.N      ??SFcapacity_10
     89          		case 7: capacity = 8;	//64M
   \                     ??SFcapacity_8:
   \   0000003E   0820               MOVS     R0,#+8
     90          				break;
   \   00000040   02E0               B.N      ??SFcapacity_10
     91          		case 8: capacity = 9;	//128M
   \                     ??SFcapacity_7:
   \   00000042   0920               MOVS     R0,#+9
     92          				break;
   \   00000044   00E0               B.N      ??SFcapacity_10
     93          		default : capacity = 0;
   \                     ??SFcapacity_9:
   \   00000046   0020               MOVS     R0,#+0
     94          	}
     95          	return capacity;
   \                     ??SFcapacity_10:
   \   00000048   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   7047               BX       LR               ;; return
     96          }
     97          

   \                                 In section .text, align 2, keep-with-next
     98          u8 SerialFlash_status_register(void)
     99          {
   \                     SerialFlash_status_register:
   \   00000000   10B5               PUSH     {R4,LR}
    100          	u8 Data;				
    101               
    102               VOICE_CSB_LOW();
   \   00000002   4FF48071           MOV      R1,#+256
   \   00000006   ........           LDR.W    R0,??DataTable17  ;; 0x40021400
   \   0000000A   ........           BL       GPIO_ResetBits
    103               
    104          	sFLASH_SendByte(F_RDSR);
   \   0000000E   0520               MOVS     R0,#+5
   \   00000010   ........           BL       sFLASH_SendByte
    105          	Data = sFLASH_SendByte(0);
   \   00000014   0020               MOVS     R0,#+0
   \   00000016   ........           BL       sFLASH_SendByte
   \   0000001A   0400               MOVS     R4,R0
    106               
    107               VOICE_CSB_HIGH();
   \   0000001C   4FF48071           MOV      R1,#+256
   \   00000020   ........           LDR.W    R0,??DataTable17  ;; 0x40021400
   \   00000024   ........           BL       GPIO_SetBits
    108          	return Data;
   \   00000028   2000               MOVS     R0,R4
   \   0000002A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   10BD               POP      {R4,PC}          ;; return
    109          }

   \                                 In section .text, align 2, keep-with-next
    110          void SerialFlash_busy_check()
    111          {
   \                     SerialFlash_busy_check:
   \   00000000   80B5               PUSH     {R7,LR}
    112          	u8 Rdata;
    113          	do { 
    114                    IWDG_ReloadCounter(); 
   \                     ??SerialFlash_busy_check_0:
   \   00000002   ........           BL       IWDG_ReloadCounter
    115          		Rdata = SerialFlash_status_register();
   \   00000006   ........           BL       SerialFlash_status_register
    116          	} while ((Rdata&F_WIP));
   \   0000000A   C007               LSLS     R0,R0,#+31
   \   0000000C   F9D4               BMI.N    ??SerialFlash_busy_check_0
    117          }
   \   0000000E   01BD               POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    118          void SerialFlash_write_enable(void)
    119          {
   \                     SerialFlash_write_enable:
   \   00000000   80B5               PUSH     {R7,LR}
    120               VOICE_CSB_LOW();
   \   00000002   4FF48071           MOV      R1,#+256
   \   00000006   ........           LDR.W    R0,??DataTable17  ;; 0x40021400
   \   0000000A   ........           BL       GPIO_ResetBits
    121          	sFLASH_SendByte(F_WREN);
   \   0000000E   0620               MOVS     R0,#+6
   \   00000010   ........           BL       sFLASH_SendByte
    122               VOICE_CSB_HIGH();
   \   00000014   4FF48071           MOV      R1,#+256
   \   00000018   ........           LDR.W    R0,??DataTable17  ;; 0x40021400
   \   0000001C   ........           BL       GPIO_SetBits
    123          }
   \   00000020   01BD               POP      {R0,PC}          ;; return
    124          
    125          

   \                                 In section .text, align 2, keep-with-next
    126          void SerialFlash_Write_status_register(u8 Data)
    127          {
   \                     SerialFlash_Write_status_register:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    128               VOICE_CSB_LOW();
   \   00000004   4FF48071           MOV      R1,#+256
   \   00000008   ........           LDR.W    R0,??DataTable17  ;; 0x40021400
   \   0000000C   ........           BL       GPIO_ResetBits
    129          //	SerialFlash_Start();
    130          	sFLASH_SendByte(F_WRSR);
   \   00000010   0120               MOVS     R0,#+1
   \   00000012   ........           BL       sFLASH_SendByte
    131          	Data = sFLASH_SendByte(Data);
   \   00000016   2000               MOVS     R0,R4
   \   00000018   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   ........           BL       sFLASH_SendByte
   \   0000001E   0400               MOVS     R4,R0
    132               VOICE_CSB_HIGH();
   \   00000020   4FF48071           MOV      R1,#+256
   \   00000024   ........           LDR.W    R0,??DataTable17  ;; 0x40021400
   \   00000028   ........           BL       GPIO_SetBits
    133          }
   \   0000002C   10BD               POP      {R4,PC}          ;; return
    134          

   \                                 In section .text, align 2, keep-with-next
    135          void SerialFlash_Read_Program(u32 Addr)
    136          {
   \                     SerialFlash_Read_Program:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    137               SerialFlash_busy_check();
   \   00000004   ........           BL       SerialFlash_busy_check
    138          //	SerialFlash_Start();     
    139               VOICE_CSB_LOW();     
   \   00000008   4FF48071           MOV      R1,#+256
   \   0000000C   ........           LDR.W    R0,??DataTable17  ;; 0x40021400
   \   00000010   ........           BL       GPIO_ResetBits
    140               sFLASH_SendByte(F_READ);      
   \   00000014   0320               MOVS     R0,#+3
   \   00000016   ........           BL       sFLASH_SendByte
    141          	sFLASH_SendByte((Addr>>16)&0xff);	// A23~A16
   \   0000001A   200C               LSRS     R0,R4,#+16
   \   0000001C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   ........           BL       sFLASH_SendByte
    142          	sFLASH_SendByte((Addr>>8)&0xff);	// A15~A8
   \   00000022   200A               LSRS     R0,R4,#+8
   \   00000024   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   ........           BL       sFLASH_SendByte
    143          	sFLASH_SendByte((Addr)&0xff);		// A7~A0     
   \   0000002A   2000               MOVS     R0,R4
   \   0000002C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   ........           BL       sFLASH_SendByte
    144          }
   \   00000032   10BD               POP      {R4,PC}          ;; return
    145          

   \                                 In section .text, align 2, keep-with-next
    146          void SFchip_erase(void)
    147          {    
   \                     SFchip_erase:
   \   00000000   80B5               PUSH     {R7,LR}
    148               SerialFlash_write_enable();     
   \   00000002   ........           BL       SerialFlash_write_enable
    149               VOICE_CSB_LOW();
   \   00000006   4FF48071           MOV      R1,#+256
   \   0000000A   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   0000000C   ........           BL       GPIO_ResetBits
    150          	sFLASH_SendByte(F_CE);
   \   00000010   C720               MOVS     R0,#+199
   \   00000012   ........           BL       sFLASH_SendByte
    151               VOICE_CSB_HIGH();
   \   00000016   4FF48071           MOV      R1,#+256
   \   0000001A   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   0000001C   ........           BL       GPIO_SetBits
    152          }
   \   00000020   01BD               POP      {R0,PC}          ;; return
    153          

   \                                 In section .text, align 2, keep-with-next
    154          void SerialFlash_Program( u32 Addr )
    155          {
   \                     SerialFlash_Program:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    156               SerialFlash_write_enable();
   \   00000004   ........           BL       SerialFlash_write_enable
    157               VOICE_CSB_LOW();
   \   00000008   4FF48071           MOV      R1,#+256
   \   0000000C   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   0000000E   ........           BL       GPIO_ResetBits
    158               sFLASH_SendByte(F_PP);           
   \   00000012   0220               MOVS     R0,#+2
   \   00000014   ........           BL       sFLASH_SendByte
    159          	sFLASH_SendByte((Addr>>16)&0xff);	// A23~A16
   \   00000018   200C               LSRS     R0,R4,#+16
   \   0000001A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   ........           BL       sFLASH_SendByte
    160          	sFLASH_SendByte((Addr>>8)&0xff);	// A15~A8
   \   00000020   200A               LSRS     R0,R4,#+8
   \   00000022   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   ........           BL       sFLASH_SendByte
    161          	sFLASH_SendByte((Addr)&0xff);		// A7~A0  
   \   00000028   2000               MOVS     R0,R4
   \   0000002A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   ........           BL       sFLASH_SendByte
    162          
    163          }
   \   00000030   10BD               POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    164          void SerialFlash_ProgramWirte_Start(void)
    165          {
   \                     SerialFlash_ProgramWirte_Start:
   \   00000000   80B5               PUSH     {R7,LR}
    166               /* 읽기 위해서 해야할는것은 CSB_SEl을 셋하고
    167                 CSB 를 명령어마다 로우 하이로 바꿔가면서 라이팅해야한다
    168                라이팅 전에는 반드시 Write_Enable을 하고 Buzy체크를 해줘야한다*/
    169               
    170          	SerialFlash_Start();      
   \   00000002   ........           BL       SerialFlash_Start
    171               SerialFlash_write_enable();
   \   00000006   ........           BL       SerialFlash_write_enable
    172               SerialFlash_busy_check();
   \   0000000A   ........           BL       SerialFlash_busy_check
    173               SerialFlash_Write_status_register(0);
   \   0000000E   0020               MOVS     R0,#+0
   \   00000010   ........           BL       SerialFlash_Write_status_register
    174               SerialFlash_busy_check();    // 비지 체크
   \   00000014   ........           BL       SerialFlash_busy_check
    175               SFchip_erase();      // 플래시지우기     
   \   00000018   ........           BL       SFchip_erase
    176            
    177          }
   \   0000001C   01BD               POP      {R0,PC}          ;; return
    178           

   \                                 In section .text, align 2, keep-with-next
    179          void SerialFlash_ProgramWirte_End(void)
    180          {
   \                     SerialFlash_ProgramWirte_End:
   \   00000000   80B5               PUSH     {R7,LR}
    181               SerialFlash_Write_status_register(0x3C);          // Write Protect
   \   00000002   3C20               MOVS     R0,#+60
   \   00000004   ........           BL       SerialFlash_Write_status_register
    182               SerialFlash_busy_check();    // 비지 체크
   \   00000008   ........           BL       SerialFlash_busy_check
    183               SerialFlash_End();
   \   0000000C   ........           BL       SerialFlash_End
    184          }
   \   00000010   01BD               POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    185          void SerialFlash_ReadID(void)
    186          {
   \                     SerialFlash_ReadID:
   \   00000000   10B5               PUSH     {R4,LR}
    187               u8 Result = 0;     
   \   00000002   0024               MOVS     R4,#+0
    188          //   u32 Address;
    189          //   u8 i;
    190          //   u8 TempBuffer[256];
    191               SerialFlash_Start();
   \   00000004   ........           BL       SerialFlash_Start
    192               VOICE_CSB_LOW();
   \   00000008   4FF48071           MOV      R1,#+256
   \   0000000C   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   0000000E   ........           BL       GPIO_ResetBits
    193               sFLASH_SendByte(F_RDID);
   \   00000012   9F20               MOVS     R0,#+159
   \   00000014   ........           BL       sFLASH_SendByte
    194               
    195               SerilaFlash_Info[0] = sFLASH_SendByte(0);
   \   00000018   0020               MOVS     R0,#+0
   \   0000001A   ........           BL       sFLASH_SendByte
   \   0000001E   ....               LDR.N    R1,??DataTable17_1
   \   00000020   0870               STRB     R0,[R1, #+0]
    196               SerilaFlash_Info[1] = sFLASH_SendByte(0);
   \   00000022   0020               MOVS     R0,#+0
   \   00000024   ........           BL       sFLASH_SendByte
   \   00000028   ....               LDR.N    R1,??DataTable17_1
   \   0000002A   4870               STRB     R0,[R1, #+1]
    197               SerilaFlash_Info[2] = sFLASH_SendByte(0);       
   \   0000002C   0020               MOVS     R0,#+0
   \   0000002E   ........           BL       sFLASH_SendByte
   \   00000032   ....               LDR.N    R1,??DataTable17_1
   \   00000034   8870               STRB     R0,[R1, #+2]
    198               VOICE_CSB_HIGH();
   \   00000036   4FF48071           MOV      R1,#+256
   \   0000003A   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   0000003C   ........           BL       GPIO_SetBits
    199               
    200          //     
    201          //     VOICE_CSB_LOW();
    202          //     Address = 0;
    203          //     SerialFlash_Read_Program(Address);
    204          //     for(i = 0 ; i < 255; i+= 1)
    205          //     {
    206          //          TempBuffer[i] = SerialFlash_Read_8bit();
    207          //     }   
    208          //     VOICE_CSB_HIGH();
    209                
    210               SerialFlash_End();
   \   00000040   ........           BL       SerialFlash_End
    211               Flash_Size = SFcapacity(SerilaFlash_Info[2]);
   \   00000044   ....               LDR.N    R0,??DataTable17_1
   \   00000046   8078               LDRB     R0,[R0, #+2]
   \   00000048   ........           BL       SFcapacity
   \   0000004C   ....               LDR.N    R1,??DataTable17_2
   \   0000004E   0860               STR      R0,[R1, #+0]
    212               MaxAddress = SFmax_addr(SerilaFlash_Info[2]);     
   \   00000050   ....               LDR.N    R0,??DataTable17_1
   \   00000052   8078               LDRB     R0,[R0, #+2]
   \   00000054   ........           BL       SFmax_addr
   \   00000058   ....               LDR.N    R1,??DataTable17_3
   \   0000005A   0860               STR      R0,[R1, #+0]
    213          
    214               VOICE_CSB_LOW();
   \   0000005C   4FF48071           MOV      R1,#+256
   \   00000060   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   00000062   ........           BL       GPIO_ResetBits
    215               
    216               Result = sFLASH_SendByte(0x70);        
   \   00000066   7020               MOVS     R0,#+112
   \   00000068   ........           BL       sFLASH_SendByte
   \   0000006C   0400               MOVS     R4,R0
    217               Result = sFLASH_SendByte(0x00);        
   \   0000006E   0020               MOVS     R0,#+0
   \   00000070   ........           BL       sFLASH_SendByte
   \   00000074   0400               MOVS     R4,R0
    218               
    219               VOICE_CSB_HIGH();     
   \   00000076   4FF48071           MOV      R1,#+256
   \   0000007A   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   0000007C   ........           BL       GPIO_SetBits
    220               if(Result == 0xaa)
   \   00000080   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000082   AA2C               CMP      R4,#+170
   \   00000084   06D1               BNE.N    ??SerialFlash_ReadID_0
    221               {
    222                    IDAddrPos = (SFmax_addr(SerilaFlash_Info[2]) - 1) - 0xff + 0x04;	// FC1001이 저장된 위치 (일종의 flag임)         
   \   00000086   ....               LDR.N    R0,??DataTable17_1
   \   00000088   8078               LDRB     R0,[R0, #+2]
   \   0000008A   ........           BL       SFmax_addr
   \   0000008E   FC38               SUBS     R0,R0,#+252
   \   00000090   ....               LDR.N    R1,??DataTable17_4
   \   00000092   0860               STR      R0,[R1, #+0]
    223               }
    224              
    225          }
   \                     ??SerialFlash_ReadID_0:
   \   00000094   10BD               POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    226          void Register_Write(u8 Command,u8 data)
    227          {
   \                     Register_Write:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
    228              VOICE_CSB_LOW();
   \   00000006   4FF48071           MOV      R1,#+256
   \   0000000A   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   0000000C   ........           BL       GPIO_ResetBits
    229            
    230              sFLASH_SendByte(Command);        // Read / 볼륨 읽기
   \   00000010   2000               MOVS     R0,R4
   \   00000012   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   ........           BL       sFLASH_SendByte
    231              sFLASH_SendByte(data);        // Read / 더미  
   \   00000018   2800               MOVS     R0,R5
   \   0000001A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   ........           BL       sFLASH_SendByte
    232              
    233              VOICE_CSB_HIGH();
   \   00000020   4FF48071           MOV      R1,#+256
   \   00000024   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   00000026   ........           BL       GPIO_SetBits
    234          }
   \   0000002A   31BD               POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
    235          void SerialFlash_Write_8bit(u8 Data)
    236          {
   \                     SerialFlash_Write_8bit:
   \   00000000   80B5               PUSH     {R7,LR}
    237               sFLASH_SendByte (Data);     
   \   00000002   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   ........           BL       sFLASH_SendByte
    238          }
   \   00000008   01BD               POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    239          u8 SerialFlash_Read_8bit(void)
    240          {
   \                     SerialFlash_Read_8bit:
   \   00000000   80B5               PUSH     {R7,LR}
    241               return sFLASH_SendByte (0);     
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   ........           BL       sFLASH_SendByte
   \   00000008   02BD               POP      {R1,PC}          ;; return
    242          }
    243          
    244          

   \                                 In section .text, align 2, keep-with-next
    245          u8 Register_Read(u8 Command)
    246          {
   \                     Register_Read:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    247               u8 Result;
    248               VOICE_CSB_LOW();
   \   00000004   4FF48071           MOV      R1,#+256
   \   00000008   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   0000000A   ........           BL       GPIO_ResetBits
    249               
    250               sFLASH_SendByte(Command | 0x40);        // Read / 볼륨 읽기
   \   0000000E   54F04000           ORRS     R0,R4,#0x40
   \   00000012   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   ........           BL       sFLASH_SendByte
    251               Result = sFLASH_SendByte(0);        // Read / 더미  
   \   00000018   0020               MOVS     R0,#+0
   \   0000001A   ........           BL       sFLASH_SendByte
   \   0000001E   0400               MOVS     R4,R0
    252               
    253               VOICE_CSB_HIGH();
   \   00000020   4FF48071           MOV      R1,#+256
   \   00000024   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   00000026   ........           BL       GPIO_SetBits
    254               return Result;
   \   0000002A   2000               MOVS     R0,R4
   \   0000002C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   10BD               POP      {R4,PC}          ;; return
    255          }
    256          

   \                                 In section .text, align 2, keep-with-next
    257          u8 Void_Get_Voulme(void)
    258          {
   \                     Void_Get_Voulme:
   \   00000000   10B5               PUSH     {R4,LR}
    259              u8 Result = 0;
   \   00000002   0024               MOVS     R4,#+0
    260              VOICE_CSB_LOW();
   \   00000004   4FF48071           MOV      R1,#+256
   \   00000008   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   0000000A   ........           BL       GPIO_ResetBits
    261            
    262              Result = sFLASH_SendByte(0x44);        // Read / 볼륨 읽기
   \   0000000E   4420               MOVS     R0,#+68
   \   00000010   ........           BL       sFLASH_SendByte
   \   00000014   0400               MOVS     R4,R0
    263              Result = sFLASH_SendByte(0x00);        // Read / 더미  
   \   00000016   0020               MOVS     R0,#+0
   \   00000018   ........           BL       sFLASH_SendByte
   \   0000001C   0400               MOVS     R4,R0
    264              
    265              VOICE_CSB_HIGH();
   \   0000001E   4FF48071           MOV      R1,#+256
   \   00000022   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   00000024   ........           BL       GPIO_SetBits
    266            
    267              return Result;
   \   00000028   2000               MOVS     R0,R4
   \   0000002A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   10BD               POP      {R4,PC}          ;; return
    268          }
    269          
    270          

   \                                 In section .text, align 2, keep-with-next
    271          void Voice_Play(unsigned char Byte)
    272          {
   \                     Voice_Play:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    273          
    274              VOICE_CSB_LOW();
   \   00000004   4FF48071           MOV      R1,#+256
   \   00000008   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   0000000A   ........           BL       GPIO_ResetBits
    275          
    276              sFLASH_SendByte(0x03);        // Write / Decoding 된 데이타
   \   0000000E   0320               MOVS     R0,#+3
   \   00000010   ........           BL       sFLASH_SendByte
    277              sFLASH_SendByte(Byte);        // 출력될 위치
   \   00000014   2000               MOVS     R0,R4
   \   00000016   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   ........           BL       sFLASH_SendByte
    278              
    279              VOICE_CSB_HIGH();    
   \   0000001C   4FF48071           MOV      R1,#+256
   \   00000020   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   00000022   ........           BL       GPIO_SetBits
    280          
    281          }
   \   00000026   10BD               POP      {R4,PC}          ;; return
    282          

   \                                 In section .text, align 2, keep-with-next
    283          void Voice_Init(void)
    284          {
   \                     Voice_Init:
   \   00000000   80B5               PUSH     {R7,LR}
    285              VOICE_CSB_LOW();
   \   00000002   4FF48071           MOV      R1,#+256
   \   00000006   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   00000008   ........           BL       GPIO_ResetBits
    286            
    287              sFLASH_SendByte(0x01);        // Write / Sysconfig 초기화
   \   0000000C   0120               MOVS     R0,#+1
   \   0000000E   ........           BL       sFLASH_SendByte
    288              
    289              // 0x08 = ReadID 읽기 - 초기에 한번 설정해 줘야 한다.
    290              // 0x02 = Index 메모리 읽기 설정
    291              // 0x01 = External 메모리 읽기 설정
    292              
    293              sFLASH_SendByte(0x08);        // Write / ReadID를 걸어주기 
   \   00000012   0820               MOVS     R0,#+8
   \   00000014   ........           BL       sFLASH_SendByte
    294              VOICE_CSB_HIGH();    
   \   00000018   4FF48071           MOV      R1,#+256
   \   0000001C   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   0000001E   ........           BL       GPIO_SetBits
    295              
    296              VOICE_CSB_LOW();    
   \   00000022   4FF48071           MOV      R1,#+256
   \   00000026   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   00000028   ........           BL       GPIO_ResetBits
    297              sFLASH_SendByte(0x07);        // Write / LED 초기화
   \   0000002C   0720               MOVS     R0,#+7
   \   0000002E   ........           BL       sFLASH_SendByte
    298              sFLASH_SendByte(0x00);        // Write /   
   \   00000032   0020               MOVS     R0,#+0
   \   00000034   ........           BL       sFLASH_SendByte
    299             
    300              VOICE_CSB_HIGH();
   \   00000038   4FF48071           MOV      R1,#+256
   \   0000003C   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   0000003E   ........           BL       GPIO_SetBits
    301              
    302              SerialFlash_ReadID();     
   \   00000042   ........           BL       SerialFlash_ReadID
    303          }
   \   00000046   01BD               POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    304          void Voice_LowSet_Volume(unsigned char Byte)
    305          {
   \                     Voice_LowSet_Volume:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    306                VOICE_CSB_LOW();
   \   00000004   4FF48071           MOV      R1,#+256
   \   00000008   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   0000000A   ........           BL       GPIO_ResetBits
    307          
    308                sFLASH_SendByte(0x04);        // Write / 볼륨설정
   \   0000000E   0420               MOVS     R0,#+4
   \   00000010   ........           BL       sFLASH_SendByte
    309                sFLASH_SendByte(Byte);        // 크기 [0x12-6db] ~ [0x56-96db]
   \   00000014   2000               MOVS     R0,R4
   \   00000016   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   ........           BL       sFLASH_SendByte
    310              
    311                VOICE_CSB_HIGH(); 
   \   0000001C   4FF48071           MOV      R1,#+256
   \   00000020   ....               LDR.N    R0,??DataTable17  ;; 0x40021400
   \   00000022   ........           BL       GPIO_SetBits
    312          }
   \   00000026   10BD               POP      {R4,PC}          ;; return
    313          

   \                                 In section .text, align 2, keep-with-next
    314          void Voice_Set_Volume(unsigned char Byte)
    315          {
   \                     Voice_Set_Volume:
   \   00000000   80B5               PUSH     {R7,LR}
    316          	switch(Byte)
   \   00000002   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0028               CMP      R0,#+0
   \   00000006   3BD0               BEQ.N    ??Voice_Set_Volume_0
   \   00000008   0A28               CMP      R0,#+10
   \   0000000A   35D0               BEQ.N    ??Voice_Set_Volume_1
   \   0000000C   1428               CMP      R0,#+20
   \   0000000E   2FD0               BEQ.N    ??Voice_Set_Volume_2
   \   00000010   1E28               CMP      R0,#+30
   \   00000012   29D0               BEQ.N    ??Voice_Set_Volume_3
   \   00000014   2828               CMP      R0,#+40
   \   00000016   23D0               BEQ.N    ??Voice_Set_Volume_4
   \   00000018   3228               CMP      R0,#+50
   \   0000001A   1DD0               BEQ.N    ??Voice_Set_Volume_5
   \   0000001C   3C28               CMP      R0,#+60
   \   0000001E   17D0               BEQ.N    ??Voice_Set_Volume_6
   \   00000020   4628               CMP      R0,#+70
   \   00000022   11D0               BEQ.N    ??Voice_Set_Volume_7
   \   00000024   5028               CMP      R0,#+80
   \   00000026   0BD0               BEQ.N    ??Voice_Set_Volume_8
   \   00000028   5A28               CMP      R0,#+90
   \   0000002A   05D0               BEQ.N    ??Voice_Set_Volume_9
   \   0000002C   6428               CMP      R0,#+100
   \   0000002E   2BD1               BNE.N    ??Voice_Set_Volume_10
    317          	{
    318          		case 100:
    319          		{
    320          			Voice_LowSet_Volume(0x12);
   \                     ??Voice_Set_Volume_11:
   \   00000030   1220               MOVS     R0,#+18
   \   00000032   ........           BL       Voice_LowSet_Volume
    321          			break;
   \   00000036   2AE0               B.N      ??Voice_Set_Volume_12
    322          		}
    323          		case 90:
    324          		{
    325          			Voice_LowSet_Volume(0x14);
   \                     ??Voice_Set_Volume_9:
   \   00000038   1420               MOVS     R0,#+20
   \   0000003A   ........           BL       Voice_LowSet_Volume
    326          			break;
   \   0000003E   26E0               B.N      ??Voice_Set_Volume_12
    327          		}
    328          		case 80:
    329          		{
    330          			Voice_LowSet_Volume(0x16);
   \                     ??Voice_Set_Volume_8:
   \   00000040   1620               MOVS     R0,#+22
   \   00000042   ........           BL       Voice_LowSet_Volume
    331          			break;
   \   00000046   22E0               B.N      ??Voice_Set_Volume_12
    332          		}
    333          		case 70:
    334          		{
    335          			Voice_LowSet_Volume(0x18);
   \                     ??Voice_Set_Volume_7:
   \   00000048   1820               MOVS     R0,#+24
   \   0000004A   ........           BL       Voice_LowSet_Volume
    336          			break;
   \   0000004E   1EE0               B.N      ??Voice_Set_Volume_12
    337          		}
    338          		case 60:
    339          		{
    340          			Voice_LowSet_Volume(0x1A);
   \                     ??Voice_Set_Volume_6:
   \   00000050   1A20               MOVS     R0,#+26
   \   00000052   ........           BL       Voice_LowSet_Volume
    341          			break;
   \   00000056   1AE0               B.N      ??Voice_Set_Volume_12
    342          		}
    343          		case 50:
    344          		{
    345          			Voice_LowSet_Volume(0x1C);
   \                     ??Voice_Set_Volume_5:
   \   00000058   1C20               MOVS     R0,#+28
   \   0000005A   ........           BL       Voice_LowSet_Volume
    346          			break;
   \   0000005E   16E0               B.N      ??Voice_Set_Volume_12
    347          		}
    348          		case 40:
    349          		{
    350          			Voice_LowSet_Volume(0x1E);
   \                     ??Voice_Set_Volume_4:
   \   00000060   1E20               MOVS     R0,#+30
   \   00000062   ........           BL       Voice_LowSet_Volume
    351          			break;
   \   00000066   12E0               B.N      ??Voice_Set_Volume_12
    352          		}
    353          		case 30:
    354          		{
    355          			Voice_LowSet_Volume(0x20);
   \                     ??Voice_Set_Volume_3:
   \   00000068   2020               MOVS     R0,#+32
   \   0000006A   ........           BL       Voice_LowSet_Volume
    356          			break;
   \   0000006E   0EE0               B.N      ??Voice_Set_Volume_12
    357          		}
    358          		case 20:
    359          		{
    360          			Voice_LowSet_Volume(0x22);
   \                     ??Voice_Set_Volume_2:
   \   00000070   2220               MOVS     R0,#+34
   \   00000072   ........           BL       Voice_LowSet_Volume
    361          			break;
   \   00000076   0AE0               B.N      ??Voice_Set_Volume_12
    362          		}		
    363          		case 10:
    364          		{
    365          			Voice_LowSet_Volume(0x24);
   \                     ??Voice_Set_Volume_1:
   \   00000078   2420               MOVS     R0,#+36
   \   0000007A   ........           BL       Voice_LowSet_Volume
    366          			break;
   \   0000007E   06E0               B.N      ??Voice_Set_Volume_12
    367          		}
    368          		case 0:
    369          		{
    370          			Voice_LowSet_Volume(0x57);
   \                     ??Voice_Set_Volume_0:
   \   00000080   5720               MOVS     R0,#+87
   \   00000082   ........           BL       Voice_LowSet_Volume
    371          			break;
   \   00000086   02E0               B.N      ??Voice_Set_Volume_12
    372          		}	
    373          		default:
    374          		{
    375          			Voice_LowSet_Volume(0x12);
   \                     ??Voice_Set_Volume_10:
   \   00000088   1220               MOVS     R0,#+18
   \   0000008A   ........           BL       Voice_LowSet_Volume
    376          			break;
    377          		}
    378          	}
    379          }
   \                     ??Voice_Set_Volume_12:
   \   0000008E   01BD               POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    380          void Voice_OutAdd(unsigned char Byte)
    381          {
    382          	if(Voice_Stack_Count < VOICE_MAX_COUNT)
   \                     Voice_OutAdd:
   \   00000000   ....               LDR.N    R1,??DataTable17_5
   \   00000002   0978               LDRB     R1,[R1, #+0]
   \   00000004   0229               CMP      R1,#+2
   \   00000006   08D2               BCS.N    ??Voice_OutAdd_0
    383          		Voice_Stack[ Voice_Stack_Count++ ] = Byte;	
   \   00000008   ....               LDR.N    R1,??DataTable17_5
   \   0000000A   0978               LDRB     R1,[R1, #+0]
   \   0000000C   ....               LDR.N    R2,??DataTable17_6
   \   0000000E   8854               STRB     R0,[R1, R2]
   \   00000010   ....               LDR.N    R0,??DataTable17_5
   \   00000012   0078               LDRB     R0,[R0, #+0]
   \   00000014   401C               ADDS     R0,R0,#+1
   \   00000016   ....               LDR.N    R1,??DataTable17_5
   \   00000018   0870               STRB     R0,[R1, #+0]
    384          }
   \                     ??Voice_OutAdd_0:
   \   0000001A   7047               BX       LR               ;; return
    385          

   \                                 In section .text, align 2, keep-with-next
    386          void Voice_Process(void)
    387          {
   \                     Voice_Process:
   \   00000000   80B5               PUSH     {R7,LR}
    388          	static u16 Voice_Timer = 0;
    389               
    390          //     static u8 VoiceUpdateCheck =0;
    391               u8 i;
    392               
    393          //     if( HCD_IsDeviceConnected(&USB_OTG_Core) )
    394          //     {
    395          //          if( USBH_USR_ApplicationState == USH_USR_FS_IDLE)      // USB가 준비가 되었다면 출력
    396          //          {
    397          //               if(VoiceUpdateCheck == 0)
    398          //               {
    399          //                 //   USBH_USR_ActionFlag = USH_USR_FS_SOUND;
    400          //                    VoiceUpdateCheck = 1;
    401          //               }
    402          //          }
    403          //     }
    404               
    405          	if(Voice_Stack_Count > 0)
   \   00000002   ....               LDR.N    R0,??DataTable17_5
   \   00000004   0078               LDRB     R0,[R0, #+0]
   \   00000006   0128               CMP      R0,#+1
   \   00000008   22D3               BCC.N    ??Voice_Process_0
    406          	{
    407          		if(!CheckTimeOver(2000,Voice_Timer))
   \   0000000A   ....               LDR.N    R0,??DataTable17_7
   \   0000000C   0188               LDRH     R1,[R0, #+0]
   \   0000000E   4FF4FA60           MOV      R0,#+2000
   \   00000012   ........           BL       CheckTimeOver
   \   00000016   0028               CMP      R0,#+0
   \   00000018   1AD0               BEQ.N    ??Voice_Process_1
    408          			return;      
    409          		Voice_Timer = MS_TIMER;  	// 타이머 5			
   \                     ??Voice_Process_2:
   \   0000001A   ....               LDR.N    R0,??DataTable17_8  ;; 0x40000c00
   \   0000001C   ........           BL       TIM_GetCounter
   \   00000020   ....               LDR.N    R1,??DataTable17_7
   \   00000022   0880               STRH     R0,[R1, #+0]
    410          		Voice_Play( Voice_Stack[0] );
   \   00000024   ....               LDR.N    R0,??DataTable17_6
   \   00000026   0078               LDRB     R0,[R0, #+0]
   \   00000028   ........           BL       Voice_Play
    411                    for( i = 0 ; i < VOICE_MAX_COUNT; i++)
   \   0000002C   0020               MOVS     R0,#+0
   \   0000002E   07E0               B.N      ??Voice_Process_3
    412                    {               
    413                         Voice_Stack[i] = Voice_Stack[i+1];
   \                     ??Voice_Process_4:
   \   00000030   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   ....               LDR.N    R1,??DataTable17_6
   \   00000034   4118               ADDS     R1,R0,R1
   \   00000036   4978               LDRB     R1,[R1, #+1]
   \   00000038   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   ....               LDR.N    R2,??DataTable17_6
   \   0000003C   8154               STRB     R1,[R0, R2]
    414                    }                         
   \   0000003E   401C               ADDS     R0,R0,#+1
   \                     ??Voice_Process_3:
   \   00000040   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000042   0228               CMP      R0,#+2
   \   00000044   F4D3               BCC.N    ??Voice_Process_4
    415                    Voice_Stack_Count --;
   \   00000046   ....               LDR.N    R0,??DataTable17_5
   \   00000048   0078               LDRB     R0,[R0, #+0]
   \   0000004A   401E               SUBS     R0,R0,#+1
   \   0000004C   ....               LDR.N    R1,??DataTable17_5
   \   0000004E   0870               STRB     R0,[R1, #+0]
    416          	}
    417          }
   \                     ??Voice_Process_0:
   \                     ??Voice_Process_1:
   \   00000050   01BD               POP      {R0,PC}          ;; return

   \                                 In section .bss, align 2
   \                     ??Voice_Timer:
   \   00000000                      DS8 2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   00140240           DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   ........           DC32     SerilaFlash_Info

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   ........           DC32     Flash_Size

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   ........           DC32     MaxAddress

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   ........           DC32     IDAddrPos

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \   00000000   ........           DC32     Voice_Stack_Count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_6:
   \   00000000   ........           DC32     Voice_Stack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_7:
   \   00000000   ........           DC32     ??Voice_Timer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_8:
   \   00000000   000C0040           DC32     0x40000c00

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     Register_Read                       8
     Register_Write                     16
     SFcapacity                          0
     SFchip_erase                        8
     SFmax_addr                          0
     SerialFlash_End                     8
     SerialFlash_Program                 8
     SerialFlash_ProgramWirte_End        8
     SerialFlash_ProgramWirte_Start      8
     SerialFlash_ReadID                  8
     SerialFlash_Read_8bit               8
     SerialFlash_Read_Program            8
     SerialFlash_Start                   8
     SerialFlash_Write_8bit              8
     SerialFlash_Write_status_register
                                         8
     SerialFlash_busy_check              8
     SerialFlash_status_register         8
     SerialFlash_write_enable            8
     Voice_Config                       16
     Voice_Init                          8
     Voice_LowSet_Volume                 8
     Voice_OutAdd                        0
     Voice_Play                          8
     Voice_Process                       8
     Voice_Set_Volume                    8
     Void_Get_Voulme                     8


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     Voice_Stack                       4
     Voice_Stack_Count                 1
     SerilaFlash_Info                  4
     Flash_Size                        4
     MaxAddress                        4
     IDAddrPos                         4
     Voice_Config                     90
     SerialFlash_Start                14
     SerialFlash_End                  14
     SFmax_addr                       92
     SFcapacity                       76
     SerialFlash_status_register      46
     SerialFlash_busy_check           16
     SerialFlash_write_enable         34
     SerialFlash_Write_status_register
                                      46
     SerialFlash_Read_Program         52
     SFchip_erase                     34
     SerialFlash_Program              50
     SerialFlash_ProgramWirte_Start   30
     SerialFlash_ProgramWirte_End     18
     SerialFlash_ReadID              150
     Register_Write                   44
     SerialFlash_Write_8bit           10
     SerialFlash_Read_8bit            10
     Register_Read                    48
     Void_Get_Voulme                  46
     Voice_Play                       40
     Voice_Init                       72
     Voice_LowSet_Volume              40
     Voice_Set_Volume                144
     Voice_OutAdd                     28
     Voice_Process                    82
     Voice_Timer                       2
     ??DataTable17                     4
     ??DataTable17_1                   4
     ??DataTable17_2                   4
     ??DataTable17_3                   4
     ??DataTable17_4                   4
     ??DataTable17_5                   4
     ??DataTable17_6                   4
     ??DataTable17_7                   4
     ??DataTable17_8                   4

 
    23 bytes in section .bss
 1 362 bytes in section .text
 
 1 362 bytes of CODE memory
    23 bytes of DATA memory

Errors: none
Warnings: none
