###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     12/Nov/2011  19:31:35 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\USB\src #
#                    \ff.c                                                    #
#    Command line =  "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\USB\sr #
#                    c\ff.c" -D USE_STDPERIPH_DRIVER -D STM32F2XX -D          #
#                    USE_STM3220F_EVAL -D USE_USB_OTG_FS -D                   #
#                    RTC_CLOCK_SOURCE_LSE -lC "F:\¹¬ÀÛ¾÷\[ NewDTG             #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\STM3220F_EVAL\List\" #
#                     -lA "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\E #
#                    WARM\STM3220F_EVAL\List\" -o "F:\¹¬ÀÛ¾÷\[ NewDTG         #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\STM3220F_EVAL\Obj\"  #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0\arm\INC\c\DLib_Config_Full.h" -I           #
#                    "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\ #
#                    ..\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG                              #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Libraries\CMSI #
#                    S\CM3\CoreSupport\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG               #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Libraries\CMSI #
#                    S\CM3\DeviceSupport\ST\STM32F2xx\" -I "F:\¹¬ÀÛ¾÷\[       #
#                    NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Librari #
#                    es\STM32F2xx_StdPeriph_Driver\inc\" -I "F:\¹¬ÀÛ¾÷\[      #
#                    NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Utiliti #
#                    es\STM32_EVAL\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG                   #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Utilities\STM3 #
#                    2_EVAL\Common\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG                   #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Utilities\STM3 #
#                    2_EVAL\STM3220F_EVAL\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG            #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Libraries\STM3 #
#                    2_USB_OTG_Driver\inc\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG            #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Libraries\STM3 #
#                    2_USB_Device_Library\Core\inc\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG   #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Libraries\STM3 #
#                    2_USB_Device_Library\Class\msc\inc\" -I "F:\¹¬ÀÛ¾÷\[     #
#                    NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\Usb\" -I   #
#                    "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\ #
#                    ..\Usb\Inc\" -I "F:\¹¬ÀÛ¾÷\[ NewDTG                      #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\Usb\src\" -I      #
#                    "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\ #
#                    ..\..\Libraries\STM32_USB_HOST_Library\Core\inc\" -I     #
#                    "F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\ #
#                    ..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\"   #
#                    -Ol --use_c++_inline                                     #
#    List file    =  F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\S #
#                    TM3220F_EVAL\List\ff.lst                                 #
#    Object file  =  F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\S #
#                    TM3220F_EVAL\Obj\ff.o                                    #
#                                                                             #
#                                                                             #
###############################################################################

F:\¹¬ÀÛ¾÷\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\USB\src\ff.c
      1          /*----------------------------------------------------------------------------/
      2          /  FatFs - FAT file system module  R0.07e                    (C)ChaN, 2009
      3          /-----------------------------------------------------------------------------/
      4          / FatFs module is a generic FAT file system module for small embedded systems.
      5          / This is a free software that opened for education, research and commercial
      6          / developments under license policy of following terms.
      7          /
      8          /  Copyright (C) 2009, ChaN, all right reserved.
      9          /
     10          / * The FatFs module is a free software and there is NO WARRANTY.
     11          / * No restriction on use. You can use, modify and redistribute it for
     12          /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
     13          / * Redistributions of source code must retain the above copyright notice.
     14          /
     15          /-----------------------------------------------------------------------------/
     16          / Feb 26,'06 R0.00  Prototype.
     17          /
     18          / Apr 29,'06 R0.01  First stable version.
     19          /
     20          / Jun 01,'06 R0.02  Added FAT12 support.
     21          /                   Removed unbuffered mode.
     22          /                   Fixed a problem on small (<32M) partition.
     23          / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
     24          /
     25          / Sep 22,'06 R0.03  Added f_rename().
     26          /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
     27          / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
     28          /                   Fixed f_mkdir() creates incorrect directory on FAT32.
     29          /
     30          / Feb 04,'07 R0.04  Supported multiple drive system.
     31          /                   Changed some interfaces for multiple drive system.
     32          /                   Changed f_mountdrv() to f_mount().
     33          /                   Added f_mkfs().
     34          / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
     35          /                   Added a capability of extending file size to f_lseek().
     36          /                   Added minimization level 3.
     37          /                   Fixed an endian sensitive code in f_mkfs().
     38          / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
     39          /                   Added FSInfo support.
     40          /                   Fixed DBCS name can result FR_INVALID_NAME.
     41          /                   Fixed short seek (<= csize) collapses the file object.
     42          /
     43          / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
     44          /                   Fixed f_mkfs() on FAT32 creates incorrect FSInfo.
     45          /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
     46          / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
     47          /                   Fixed off by one error at FAT sub-type determination.
     48          /                   Fixed btr in f_read() can be mistruncated.
     49          /                   Fixed cached sector is not flushed when create and close
     50          /                   without write.
     51          /
     52          / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
     53          /                   Improved performance of f_lseek() on moving to the same
     54          /                   or following cluster.
     55          /
     56          / Apr 01,'09 R0.07  Merged Tiny-FatFs as a buffer configuration option.
     57          /                   Added long file name support.
     58          /                   Added multiple code page support.
     59          /                   Added re-entrancy for multitask operation.
     60          /                   Added auto cluster size selection to f_mkfs().
     61          /                   Added rewind option to f_readdir().
     62          /                   Changed result code of critical errors.
     63          /                   Renamed string functions to avoid name collision.
     64          / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
     65          /                   Added multiple sector size support.
     66          / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
     67          /                   Fixed wrong cache control in f_lseek().
     68          /                   Added relative path feature.
     69          /                   Added f_chdir() and f_chdrive().
     70          /                   Added proper case conversion to extended char.
     71          / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
     72          /                   Fixed f_unlink() fails to remove a sub-dir on _FS_RPATH.
     73          /                   Fixed name matching error on the 13 char boundary.
     74          /                   Added a configuration option, _LFN_UNICODE.
     75          /                   Changed f_readdir() to return the SFN with always upper
     76          /                   case on non-LFN cfg.
     77          /---------------------------------------------------------------------------*/
     78          
     79          #include "ff.h"			/* FatFs configurations and declarations */
     80          #include "diskio.h"		/* Declarations of low level disk I/O functions */
     81          
     82          
     83          /*--------------------------------------------------------------------------
     84          
     85             Module Private Definitions
     86          
     87          ---------------------------------------------------------------------------*/
     88          
     89          #if _FATFS != 0x007E
     90          #error Wrong include file (ff.h).
     91          #endif
     92          
     93          #if _FS_REENTRANT
     94          #if _USE_LFN == 1
     95          #error Static LFN work area must not be used in re-entrant configuration.
     96          #endif
     97          #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
     98          #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
     99          
    100          #else
    101          #define	ENTER_FF(fs)
    102          #define LEAVE_FF(fs, res)	return res
    103          
    104          #endif
    105          
    106          #define	ABORT(fs, res)		{ fp->flag |= FA__ERROR; LEAVE_FF(fs, res); }
    107          
    108          #ifndef NULL
    109          #define	NULL	0
    110          #endif
    111          
    112          /* Name status flags */
    113          #define NS			11		/* Offset of name status byte */
    114          #define NS_LOSS		0x01	/* Out of 8.3 format */
    115          #define NS_LFN		0x02	/* Force to create LFN entry */
    116          #define NS_LAST		0x04	/* Last segment */
    117          #define NS_BODY		0x08	/* Lower case flag (body) */
    118          #define NS_EXT		0x10	/* Lower case flag (ext) */
    119          #define NS_DOT		0x20	/* Dot entry */
    120          
    121          
    122          
    123          
    124          /*--------------------------------------------------------------------------
    125          
    126             Private Work Area
    127          
    128          ---------------------------------------------------------------------------*/
    129          
    130          #if _DRIVES < 1 || _DRIVES > 9
    131          #error Number of drives must be 1-9.
    132          #endif
    133          static

   \                                 In section .bss, align 4
    134          FATFS *FatFs[_DRIVES];	/* Pointer to the file system objects (logical drives) */
   \                     FatFs:
   \   00000000                      DS8 4
    135          
    136          static

   \                                 In section .bss, align 2
    137          WORD Fsid;				/* File system mount ID */
   \                     Fsid:
   \   00000000                      DS8 2
    138          
    139          #if _FS_RPATH
    140          static
    141          BYTE Drive;				/* Current drive */
    142          #endif
    143          
    144          
    145          #if _USE_LFN == 1	/* LFN with static LFN working buffer */
    146          static

   \                                 In section .bss, align 4
    147          WCHAR LfnBuf[_MAX_LFN + 1];
   \                     LfnBuf:
   \   00000000                      DS8 512
    148          #define	NAMEBUF(sp,lp)	BYTE sp[12]; WCHAR *lp = LfnBuf
    149          #define INITBUF(dj,sp,lp)	dj.fn = sp; dj.lfn = lp
    150          
    151          #elif _USE_LFN > 1	/* LFN with dynamic LFN working buffer */
    152          #define	NAMEBUF(sp,lp)	BYTE sp[12]; WCHAR lbuf[_MAX_LFN + 1], *lp = lbuf
    153          #define INITBUF(dj,sp,lp)	dj.fn = sp; dj.lfn = lp
    154          
    155          #else				/* No LFN */
    156          #define	NAMEBUF(sp,lp)	BYTE sp[12]
    157          #define INITBUF(dj,sp,lp)	dj.fn = sp
    158          
    159          #endif
    160          
    161          
    162          
    163          
    164          /*--------------------------------------------------------------------------
    165          
    166             Module Private Functions
    167          
    168          ---------------------------------------------------------------------------*/
    169          
    170          
    171          /*-----------------------------------------------------------------------*/
    172          /* String functions                                                      */
    173          /*-----------------------------------------------------------------------*/
    174          
    175          /* Copy memory to memory */

   \                                 In section .text, align 2, keep-with-next
    176          static
    177          void mem_cpy (void* dst, const void* src, int cnt) {
    178          	char *d = (char*)dst;
    179          	const char *s = (const char *)src;
   \                     mem_cpy:
   \   00000000   03E0               B.N      ??mem_cpy_0
    180          	while (cnt--) *d++ = *s++;
   \                     ??mem_cpy_1:
   \   00000002   0B78               LDRB     R3,[R1, #+0]
   \   00000004   0370               STRB     R3,[R0, #+0]
   \   00000006   491C               ADDS     R1,R1,#+1
   \   00000008   401C               ADDS     R0,R0,#+1
   \                     ??mem_cpy_0:
   \   0000000A   1300               MOVS     R3,R2
   \   0000000C   5A1E               SUBS     R2,R3,#+1
   \   0000000E   002B               CMP      R3,#+0
   \   00000010   F7D1               BNE.N    ??mem_cpy_1
    181          }
   \   00000012   7047               BX       LR               ;; return
    182          
    183          /* Fill memory */

   \                                 In section .text, align 2, keep-with-next
    184          static
    185          void mem_set (void* dst, int val, int cnt) {
    186          	char *d = (char*)dst;
   \                     mem_set:
   \   00000000   01E0               B.N      ??mem_set_0
    187          	while (cnt--) *d++ = (char)val;
   \                     ??mem_set_1:
   \   00000002   0170               STRB     R1,[R0, #+0]
   \   00000004   401C               ADDS     R0,R0,#+1
   \                     ??mem_set_0:
   \   00000006   1300               MOVS     R3,R2
   \   00000008   5A1E               SUBS     R2,R3,#+1
   \   0000000A   002B               CMP      R3,#+0
   \   0000000C   F9D1               BNE.N    ??mem_set_1
    188          }
   \   0000000E   7047               BX       LR               ;; return
    189          
    190          /* Compare memory to memory */

   \                                 In section .text, align 2, keep-with-next
    191          static
    192          int mem_cmp (const void* dst, const void* src, int cnt) {
   \                     mem_cmp:
   \   00000000   10B4               PUSH     {R4}
    193          	const char *d = (const char *)dst, *s = (const char *)src;
    194          	int r = 0;
   \   00000002   0023               MOVS     R3,#+0
    195          	while (cnt-- && (r = *d++ - *s++) == 0) ;
   \                     ??mem_cmp_0:
   \   00000004   1400               MOVS     R4,R2
   \   00000006   621E               SUBS     R2,R4,#+1
   \   00000008   002C               CMP      R4,#+0
   \   0000000A   06D0               BEQ.N    ??mem_cmp_1
   \   0000000C   0378               LDRB     R3,[R0, #+0]
   \   0000000E   0C78               LDRB     R4,[R1, #+0]
   \   00000010   1B1B               SUBS     R3,R3,R4
   \   00000012   491C               ADDS     R1,R1,#+1
   \   00000014   401C               ADDS     R0,R0,#+1
   \   00000016   002B               CMP      R3,#+0
   \   00000018   F4D0               BEQ.N    ??mem_cmp_0
    196          	return r;
   \                     ??mem_cmp_1:
   \   0000001A   1800               MOVS     R0,R3
   \   0000001C   10BC               POP      {R4}
   \   0000001E   7047               BX       LR               ;; return
    197          }
    198          
    199          /* Check if chr is contained in the string */

   \                                 In section .text, align 2, keep-with-next
    200          static
    201          int chk_chr (const char* str, int chr) {
   \                     chk_chr:
   \   00000000   00E0               B.N      ??chk_chr_0
    202          	while (*str && *str != chr) str++;
   \                     ??chk_chr_1:
   \   00000002   401C               ADDS     R0,R0,#+1
   \                     ??chk_chr_0:
   \   00000004   0278               LDRB     R2,[R0, #+0]
   \   00000006   002A               CMP      R2,#+0
   \   00000008   02D0               BEQ.N    ??chk_chr_2
   \   0000000A   0278               LDRB     R2,[R0, #+0]
   \   0000000C   8A42               CMP      R2,R1
   \   0000000E   F8D1               BNE.N    ??chk_chr_1
    203          	return *str;
   \                     ??chk_chr_2:
   \   00000010   0078               LDRB     R0,[R0, #+0]
   \   00000012   7047               BX       LR               ;; return
    204          }
    205          
    206          
    207          
    208          /*-----------------------------------------------------------------------*/
    209          /* Request/Release grant to access the volume                            */
    210          /*-----------------------------------------------------------------------*/
    211          #if _FS_REENTRANT
    212          
    213          static
    214          BOOL lock_fs (
    215          	FATFS *fs		/* File system object */
    216          )
    217          {
    218          	return ff_req_grant(fs->sobj);
    219          }
    220          
    221          
    222          static
    223          void unlock_fs (
    224          	FATFS *fs,		/* File system object */
    225          	FRESULT res		/* Result code to be returned */
    226          )
    227          {
    228          	if (res != FR_NOT_ENABLED &&
    229          		res != FR_INVALID_DRIVE &&
    230          		res != FR_INVALID_OBJECT &&
    231          		res != FR_TIMEOUT) {
    232          		ff_rel_grant(fs->sobj);
    233          	}
    234          }
    235          #endif
    236          
    237          
    238          
    239          /*-----------------------------------------------------------------------*/
    240          /* Change window offset                                                  */
    241          /*-----------------------------------------------------------------------*/
    242          

   \                                 In section .text, align 2, keep-with-next
    243          static
    244          FRESULT move_window (
    245          	FATFS *fs,		/* File system object */
    246          	DWORD sector	/* Sector number to make appearance in the fs->win[] */
    247          )					/* Move to zero only writes back dirty window */
    248          {
   \                     move_window:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
    249          	DWORD wsect;
    250          
    251          
    252          	wsect = fs->winsect;
   \   00000006   E66A               LDR      R6,[R4, #+44]
    253          	if (wsect != sector) {	/* Changed current window */
   \   00000008   AE42               CMP      R6,R5
   \   0000000A   31D0               BEQ.N    ??move_window_0
    254          #if !_FS_READONLY
    255          		if (fs->wflag) {	/* Write back dirty window if needed */
   \   0000000C   2079               LDRB     R0,[R4, #+4]
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   20D0               BEQ.N    ??move_window_1
    256          			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
   \   00000012   0123               MOVS     R3,#+1
   \   00000014   3200               MOVS     R2,R6
   \   00000016   14F13001           ADDS     R1,R4,#+48
   \   0000001A   6078               LDRB     R0,[R4, #+1]
   \   0000001C   ........           BL       disk_write
   \   00000020   0028               CMP      R0,#+0
   \   00000022   01D0               BEQ.N    ??move_window_2
    257          				return FR_DISK_ERR;
   \   00000024   0120               MOVS     R0,#+1
   \   00000026   24E0               B.N      ??move_window_3
    258          			fs->wflag = 0;
   \                     ??move_window_2:
   \   00000028   0020               MOVS     R0,#+0
   \   0000002A   2071               STRB     R0,[R4, #+4]
    259          			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
   \   0000002C   206A               LDR      R0,[R4, #+32]
   \   0000002E   A169               LDR      R1,[R4, #+24]
   \   00000030   0818               ADDS     R0,R1,R0
   \   00000032   8642               CMP      R6,R0
   \   00000034   0ED2               BCS.N    ??move_window_1
    260          				BYTE nf;
    261          				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   \   00000036   E778               LDRB     R7,[R4, #+3]
   \   00000038   09E0               B.N      ??move_window_4
    262          					wsect += fs->sects_fat;
   \                     ??move_window_5:
   \   0000003A   A069               LDR      R0,[R4, #+24]
   \   0000003C   8619               ADDS     R6,R0,R6
    263          					disk_write(fs->drive, fs->win, wsect, 1);
   \   0000003E   0123               MOVS     R3,#+1
   \   00000040   3200               MOVS     R2,R6
   \   00000042   14F13001           ADDS     R1,R4,#+48
   \   00000046   6078               LDRB     R0,[R4, #+1]
   \   00000048   ........           BL       disk_write
    264          				}
   \   0000004C   7F1E               SUBS     R7,R7,#+1
   \                     ??move_window_4:
   \   0000004E   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000050   022F               CMP      R7,#+2
   \   00000052   F2D2               BCS.N    ??move_window_5
    265          			}
    266          		}
    267          #endif
    268          		if (sector) {
   \                     ??move_window_1:
   \   00000054   002D               CMP      R5,#+0
   \   00000056   0BD0               BEQ.N    ??move_window_0
    269          			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
   \   00000058   0123               MOVS     R3,#+1
   \   0000005A   2A00               MOVS     R2,R5
   \   0000005C   14F13001           ADDS     R1,R4,#+48
   \   00000060   6078               LDRB     R0,[R4, #+1]
   \   00000062   ........           BL       disk_read
   \   00000066   0028               CMP      R0,#+0
   \   00000068   01D0               BEQ.N    ??move_window_6
    270          				return FR_DISK_ERR;
   \   0000006A   0120               MOVS     R0,#+1
   \   0000006C   01E0               B.N      ??move_window_3
    271          			fs->winsect = sector;
   \                     ??move_window_6:
   \   0000006E   E562               STR      R5,[R4, #+44]
    272          		}
    273          	}
    274          
    275          	return FR_OK;
   \                     ??move_window_0:
   \   00000070   0020               MOVS     R0,#+0
   \                     ??move_window_3:
   \   00000072   F2BD               POP      {R1,R4-R7,PC}    ;; return
    276          }
    277          
    278          
    279          
    280          
    281          /*-----------------------------------------------------------------------*/
    282          /* Clean-up cached data                                                  */
    283          /*-----------------------------------------------------------------------*/
    284          #if !_FS_READONLY

   \                                 In section .text, align 2, keep-with-next
    285          static
    286          FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
    287          	FATFS *fs	/* File system object */
    288          )
    289          {
   \                     sync:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
    290          	FRESULT res;
    291          
    292          
    293          	res = move_window(fs, 0);
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   2000               MOVS     R0,R4
   \   00000008   ........           BL       move_window
   \   0000000C   0500               MOVS     R5,R0
    294          	if (res == FR_OK) {
   \   0000000E   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000010   002D               CMP      R5,#+0
   \   00000012   5DD1               BNE.N    ??sync_0
    295          		/* Update FSInfo sector if needed */
    296          		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   \   00000014   2078               LDRB     R0,[R4, #+0]
   \   00000016   0328               CMP      R0,#+3
   \   00000018   52D1               BNE.N    ??sync_1
   \   0000001A   6079               LDRB     R0,[R4, #+5]
   \   0000001C   0028               CMP      R0,#+0
   \   0000001E   4FD0               BEQ.N    ??sync_1
    297          			fs->winsect = 0;
   \   00000020   0020               MOVS     R0,#+0
   \   00000022   E062               STR      R0,[R4, #+44]
    298          			mem_set(fs->win, 0, 512);
   \   00000024   4FF40072           MOV      R2,#+512
   \   00000028   0021               MOVS     R1,#+0
   \   0000002A   14F13000           ADDS     R0,R4,#+48
   \   0000002E   ........           BL       mem_set
    299          			ST_WORD(fs->win+BS_55AA, 0xAA55);
   \   00000032   5520               MOVS     R0,#+85
   \   00000034   84F82E02           STRB     R0,[R4, #+558]
   \   00000038   AA20               MOVS     R0,#+170
   \   0000003A   84F82F02           STRB     R0,[R4, #+559]
    300          			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   \   0000003E   5220               MOVS     R0,#+82
   \   00000040   84F83000           STRB     R0,[R4, #+48]
   \   00000044   5220               MOVS     R0,#+82
   \   00000046   84F83100           STRB     R0,[R4, #+49]
   \   0000004A   6120               MOVS     R0,#+97
   \   0000004C   84F83200           STRB     R0,[R4, #+50]
   \   00000050   4120               MOVS     R0,#+65
   \   00000052   84F83300           STRB     R0,[R4, #+51]
    301          			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   \   00000056   7220               MOVS     R0,#+114
   \   00000058   84F81402           STRB     R0,[R4, #+532]
   \   0000005C   7220               MOVS     R0,#+114
   \   0000005E   84F81502           STRB     R0,[R4, #+533]
   \   00000062   4120               MOVS     R0,#+65
   \   00000064   84F81602           STRB     R0,[R4, #+534]
   \   00000068   6120               MOVS     R0,#+97
   \   0000006A   84F81702           STRB     R0,[R4, #+535]
    302          			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   \   0000006E   2069               LDR      R0,[R4, #+16]
   \   00000070   84F81802           STRB     R0,[R4, #+536]
   \   00000074   2069               LDR      R0,[R4, #+16]
   \   00000076   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000078   000A               LSRS     R0,R0,#+8
   \   0000007A   84F81902           STRB     R0,[R4, #+537]
   \   0000007E   2069               LDR      R0,[R4, #+16]
   \   00000080   000C               LSRS     R0,R0,#+16
   \   00000082   84F81A02           STRB     R0,[R4, #+538]
   \   00000086   2069               LDR      R0,[R4, #+16]
   \   00000088   000E               LSRS     R0,R0,#+24
   \   0000008A   84F81B02           STRB     R0,[R4, #+539]
    303          			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   \   0000008E   E068               LDR      R0,[R4, #+12]
   \   00000090   84F81C02           STRB     R0,[R4, #+540]
   \   00000094   E068               LDR      R0,[R4, #+12]
   \   00000096   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000098   000A               LSRS     R0,R0,#+8
   \   0000009A   84F81D02           STRB     R0,[R4, #+541]
   \   0000009E   E068               LDR      R0,[R4, #+12]
   \   000000A0   000C               LSRS     R0,R0,#+16
   \   000000A2   84F81E02           STRB     R0,[R4, #+542]
   \   000000A6   E068               LDR      R0,[R4, #+12]
   \   000000A8   000E               LSRS     R0,R0,#+24
   \   000000AA   84F81F02           STRB     R0,[R4, #+543]
    304          			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
   \   000000AE   0123               MOVS     R3,#+1
   \   000000B0   6269               LDR      R2,[R4, #+20]
   \   000000B2   14F13001           ADDS     R1,R4,#+48
   \   000000B6   6078               LDRB     R0,[R4, #+1]
   \   000000B8   ........           BL       disk_write
    305          			fs->fsi_flag = 0;
   \   000000BC   0020               MOVS     R0,#+0
   \   000000BE   6071               STRB     R0,[R4, #+5]
    306          		}
    307          		/* Make sure that no pending write process in the physical drive */
    308          		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
   \                     ??sync_1:
   \   000000C0   0022               MOVS     R2,#+0
   \   000000C2   0021               MOVS     R1,#+0
   \   000000C4   6078               LDRB     R0,[R4, #+1]
   \   000000C6   ........           BL       disk_ioctl
   \   000000CA   0028               CMP      R0,#+0
   \   000000CC   00D0               BEQ.N    ??sync_0
    309          			res = FR_DISK_ERR;
   \   000000CE   0125               MOVS     R5,#+1
    310          	}
    311          
    312          	return res;
   \                     ??sync_0:
   \   000000D0   2800               MOVS     R0,R5
   \   000000D2   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D4   32BD               POP      {R1,R4,R5,PC}    ;; return
    313          }
    314          #endif
    315          
    316          
    317          
    318          
    319          /*-----------------------------------------------------------------------*/
    320          /* FAT access - Read value of a FAT entry                                */
    321          /*-----------------------------------------------------------------------*/
    322          
    323          

   \                                 In section .text, align 2, keep-with-next
    324          DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
    325          	FATFS *fs,	/* File system object */
    326          	DWORD clst	/* Cluster# to get the link information */
    327          )
    328          {
   \                     get_fat:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0D00               MOVS     R5,R1
    329          	UINT wc, bc;
    330          	DWORD fsect;
    331          
    332          
    333          	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
   \   00000008   022D               CMP      R5,#+2
   \   0000000A   02D3               BCC.N    ??get_fat_0
   \   0000000C   E069               LDR      R0,[R4, #+28]
   \   0000000E   8542               CMP      R5,R0
   \   00000010   01D3               BCC.N    ??get_fat_1
    334          		return 1;
   \                     ??get_fat_0:
   \   00000012   0120               MOVS     R0,#+1
   \   00000014   15E0               B.N      ??get_fat_2
    335          
    336          	fsect = fs->fatbase;
   \                     ??get_fat_1:
   \   00000016   D4F82080           LDR      R8,[R4, #+32]
    337          	switch (fs->fs_type) {
   \   0000001A   2078               LDRB     R0,[R4, #+0]
   \   0000001C   0128               CMP      R0,#+1
   \   0000001E   04D0               BEQ.N    ??get_fat_3
   \   00000020   0DD3               BCC.N    ??get_fat_4
   \   00000022   0328               CMP      R0,#+3
   \   00000024   41D0               BEQ.N    ??get_fat_5
   \   00000026   29D3               BCC.N    ??get_fat_6
   \   00000028   09E0               B.N      ??get_fat_4
    338          	case FS_FAT12 :
    339          		bc = clst; bc += bc / 2;
   \                     ??get_fat_3:
   \   0000002A   2F00               MOVS     R7,R5
   \   0000002C   17EB5707           ADDS     R7,R7,R7, LSR #+1
    340          		if (move_window(fs, fsect + (bc / SS(fs)))) break;
   \   00000030   18EB5721           ADDS     R1,R8,R7, LSR #+9
   \   00000034   2000               MOVS     R0,R4
   \   00000036   ........           BL       move_window
   \   0000003A   0028               CMP      R0,#+0
   \   0000003C   03D0               BEQ.N    ??get_fat_7
    341          		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
    342          		if (move_window(fs, fsect + (bc / SS(fs)))) break;
    343          		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
    344          		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    345          
    346          	case FS_FAT16 :
    347          		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
    348          		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
    349          
    350          	case FS_FAT32 :
    351          		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
    352          		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
    353          	}
    354          
    355          	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   \                     ??get_fat_4:
   \   0000003E   5FF0FF30           MOVS     R0,#-1
   \                     ??get_fat_2:
   \   00000042   BDE8F081           POP      {R4-R8,PC}       ;; return
   \                     ??get_fat_7:
   \   00000046   F805               LSLS     R0,R7,#+23
   \   00000048   C00D               LSRS     R0,R0,#+23
   \   0000004A   0019               ADDS     R0,R0,R4
   \   0000004C   90F83060           LDRB     R6,[R0, #+48]
   \   00000050   7F1C               ADDS     R7,R7,#+1
   \   00000052   18EB5721           ADDS     R1,R8,R7, LSR #+9
   \   00000056   2000               MOVS     R0,R4
   \   00000058   ........           BL       move_window
   \   0000005C   0028               CMP      R0,#+0
   \   0000005E   EED1               BNE.N    ??get_fat_4
   \                     ??get_fat_8:
   \   00000060   F805               LSLS     R0,R7,#+23
   \   00000062   C00D               LSRS     R0,R0,#+23
   \   00000064   0019               ADDS     R0,R0,R4
   \   00000066   90F83000           LDRB     R0,[R0, #+48]
   \   0000006A   56EA0026           ORRS     R6,R6,R0, LSL #+8
   \   0000006E   E807               LSLS     R0,R5,#+31
   \   00000070   01D5               BPL.N    ??get_fat_9
   \   00000072   3009               LSRS     R0,R6,#+4
   \   00000074   01E0               B.N      ??get_fat_10
   \                     ??get_fat_9:
   \   00000076   3005               LSLS     R0,R6,#+20
   \   00000078   000D               LSRS     R0,R0,#+20
   \                     ??get_fat_10:
   \   0000007A   E2E7               B.N      ??get_fat_2
   \                     ??get_fat_6:
   \   0000007C   18EB1521           ADDS     R1,R8,R5, LSR #+8
   \   00000080   2000               MOVS     R0,R4
   \   00000082   ........           BL       move_window
   \   00000086   0028               CMP      R0,#+0
   \   00000088   D9D1               BNE.N    ??get_fat_4
   \                     ??get_fat_11:
   \   0000008A   6800               LSLS     R0,R5,#+1
   \   0000008C   C005               LSLS     R0,R0,#+23
   \   0000008E   C00D               LSRS     R0,R0,#+23
   \   00000090   0019               ADDS     R0,R0,R4
   \   00000092   90F83100           LDRB     R0,[R0, #+49]
   \   00000096   6900               LSLS     R1,R5,#+1
   \   00000098   C905               LSLS     R1,R1,#+23
   \   0000009A   C90D               LSRS     R1,R1,#+23
   \   0000009C   0919               ADDS     R1,R1,R4
   \   0000009E   91F83010           LDRB     R1,[R1, #+48]
   \   000000A2   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   000000A6   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A8   CBE7               B.N      ??get_fat_2
   \                     ??get_fat_5:
   \   000000AA   18EBD511           ADDS     R1,R8,R5, LSR #+7
   \   000000AE   2000               MOVS     R0,R4
   \   000000B0   ........           BL       move_window
   \   000000B4   0028               CMP      R0,#+0
   \   000000B6   C2D1               BNE.N    ??get_fat_4
   \                     ??get_fat_12:
   \   000000B8   A800               LSLS     R0,R5,#+2
   \   000000BA   C005               LSLS     R0,R0,#+23
   \   000000BC   C00D               LSRS     R0,R0,#+23
   \   000000BE   0019               ADDS     R0,R0,R4
   \   000000C0   90F83300           LDRB     R0,[R0, #+51]
   \   000000C4   A900               LSLS     R1,R5,#+2
   \   000000C6   C905               LSLS     R1,R1,#+23
   \   000000C8   C90D               LSRS     R1,R1,#+23
   \   000000CA   0919               ADDS     R1,R1,R4
   \   000000CC   91F83210           LDRB     R1,[R1, #+50]
   \   000000D0   0904               LSLS     R1,R1,#+16
   \   000000D2   51EA0060           ORRS     R0,R1,R0, LSL #+24
   \   000000D6   A900               LSLS     R1,R5,#+2
   \   000000D8   C905               LSLS     R1,R1,#+23
   \   000000DA   C90D               LSRS     R1,R1,#+23
   \   000000DC   0919               ADDS     R1,R1,R4
   \   000000DE   91F83110           LDRB     R1,[R1, #+49]
   \   000000E2   50EA0120           ORRS     R0,R0,R1, LSL #+8
   \   000000E6   A900               LSLS     R1,R5,#+2
   \   000000E8   C905               LSLS     R1,R1,#+23
   \   000000EA   C90D               LSRS     R1,R1,#+23
   \   000000EC   0919               ADDS     R1,R1,R4
   \   000000EE   91F83010           LDRB     R1,[R1, #+48]
   \   000000F2   0843               ORRS     R0,R1,R0
   \   000000F4   0001               LSLS     R0,R0,#+4
   \   000000F6   0009               LSRS     R0,R0,#+4
   \   000000F8   A3E7               B.N      ??get_fat_2
    356          }
    357          
    358          
    359          
    360          
    361          /*-----------------------------------------------------------------------*/
    362          /* FAT access - Change value of a FAT entry                              */
    363          /*-----------------------------------------------------------------------*/
    364          #if !_FS_READONLY
    365          

   \                                 In section .text, align 2, keep-with-next
    366          FRESULT put_fat (
    367          	FATFS *fs,	/* File system object */
    368          	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
    369          	DWORD val	/* New value to mark the cluster */
    370          )
    371          {
   \                     put_fat:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0D00               MOVS     R5,R1
   \   00000008   1600               MOVS     R6,R2
    372          	UINT bc;
    373          	BYTE *p;
    374          	DWORD fsect;
    375          	FRESULT res;
    376          
    377          
    378          	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
   \   0000000A   022D               CMP      R5,#+2
   \   0000000C   02D3               BCC.N    ??put_fat_0
   \   0000000E   E069               LDR      R0,[R4, #+28]
   \   00000010   8542               CMP      R5,R0
   \   00000012   01D3               BCC.N    ??put_fat_1
    379          		res = FR_INT_ERR;
   \                     ??put_fat_0:
   \   00000014   0220               MOVS     R0,#+2
   \   00000016   83E0               B.N      ??put_fat_2
    380          
    381          	} else {
    382          		fsect = fs->fatbase;
   \                     ??put_fat_1:
   \   00000018   276A               LDR      R7,[R4, #+32]
    383          		switch (fs->fs_type) {
   \   0000001A   2078               LDRB     R0,[R4, #+0]
   \   0000001C   0128               CMP      R0,#+1
   \   0000001E   04D0               BEQ.N    ??put_fat_3
   \   00000020   7BD3               BCC.N    ??put_fat_4
   \   00000022   0328               CMP      R0,#+3
   \   00000024   53D0               BEQ.N    ??put_fat_5
   \   00000026   3BD3               BCC.N    ??put_fat_6
   \   00000028   77E0               B.N      ??put_fat_4
    384          		case FS_FAT12 :
    385          			bc = clst; bc += bc / 2;
   \                     ??put_fat_3:
   \   0000002A   A846               MOV      R8,R5
   \   0000002C   18EB5808           ADDS     R8,R8,R8, LSR #+1
    386          			res = move_window(fs, fsect + (bc / SS(fs)));
   \   00000030   17EB5821           ADDS     R1,R7,R8, LSR #+9
   \   00000034   2000               MOVS     R0,R4
   \   00000036   ........           BL       move_window
    387          			if (res != FR_OK) break;
   \   0000003A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0028               CMP      R0,#+0
   \   0000003E   6DD1               BNE.N    ??put_fat_7
    388          			p = &fs->win[bc & (SS(fs) - 1)];
   \                     ??put_fat_8:
   \   00000040   5FEAC850           LSLS     R0,R8,#+23       ;; ZeroExtS R0,R8,#+23,#+23
   \   00000044   C00D               LSRS     R0,R0,#+23
   \   00000046   0019               ADDS     R0,R0,R4
   \   00000048   00F23001           ADDW     R1,R0,#+48
    389          			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   \   0000004C   2800               MOVS     R0,R5
   \   0000004E   C007               LSLS     R0,R0,#+31
   \   00000050   05D5               BPL.N    ??put_fat_9
   \   00000052   0878               LDRB     R0,[R1, #+0]
   \   00000054   10F00F00           ANDS     R0,R0,#0xF
   \   00000058   50EA0610           ORRS     R0,R0,R6, LSL #+4
   \   0000005C   00E0               B.N      ??put_fat_10
   \                     ??put_fat_9:
   \   0000005E   3000               MOVS     R0,R6
   \                     ??put_fat_10:
   \   00000060   0870               STRB     R0,[R1, #+0]
    390          			bc++;
   \   00000062   18F10108           ADDS     R8,R8,#+1
    391          			fs->wflag = 1;
   \   00000066   0120               MOVS     R0,#+1
   \   00000068   2071               STRB     R0,[R4, #+4]
    392          			res = move_window(fs, fsect + (bc / SS(fs)));
   \   0000006A   17EB5821           ADDS     R1,R7,R8, LSR #+9
   \   0000006E   2000               MOVS     R0,R4
   \   00000070   ........           BL       move_window
    393          			if (res != FR_OK) break;
   \   00000074   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000076   0028               CMP      R0,#+0
   \   00000078   50D1               BNE.N    ??put_fat_7
    394          			p = &fs->win[bc & (SS(fs) - 1)];
   \                     ??put_fat_11:
   \   0000007A   5FEAC851           LSLS     R1,R8,#+23       ;; ZeroExtS R1,R8,#+23,#+23
   \   0000007E   C90D               LSRS     R1,R1,#+23
   \   00000080   0919               ADDS     R1,R1,R4
   \   00000082   01F23001           ADDW     R1,R1,#+48
    395          			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   \   00000086   EA07               LSLS     R2,R5,#+31
   \   00000088   01D5               BPL.N    ??put_fat_12
   \   0000008A   3209               LSRS     R2,R6,#+4
   \   0000008C   06E0               B.N      ??put_fat_13
   \                     ??put_fat_12:
   \   0000008E   0A78               LDRB     R2,[R1, #+0]
   \   00000090   12F0F002           ANDS     R2,R2,#0xF0
   \   00000094   330A               LSRS     R3,R6,#+8
   \   00000096   13F00F03           ANDS     R3,R3,#0xF
   \   0000009A   1A43               ORRS     R2,R3,R2
   \                     ??put_fat_13:
   \   0000009C   0A70               STRB     R2,[R1, #+0]
    396          			break;
   \   0000009E   3DE0               B.N      ??put_fat_7
    397          
    398          		case FS_FAT16 :
    399          			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
   \                     ??put_fat_6:
   \   000000A0   17EB1521           ADDS     R1,R7,R5, LSR #+8
   \   000000A4   2000               MOVS     R0,R4
   \   000000A6   ........           BL       move_window
    400          			if (res != FR_OK) break;
   \   000000AA   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AC   0028               CMP      R0,#+0
   \   000000AE   35D1               BNE.N    ??put_fat_7
    401          			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
   \                     ??put_fat_14:
   \   000000B0   6900               LSLS     R1,R5,#+1
   \   000000B2   C905               LSLS     R1,R1,#+23
   \   000000B4   C90D               LSRS     R1,R1,#+23
   \   000000B6   0919               ADDS     R1,R1,R4
   \   000000B8   81F83060           STRB     R6,[R1, #+48]
   \   000000BC   6900               LSLS     R1,R5,#+1
   \   000000BE   C905               LSLS     R1,R1,#+23
   \   000000C0   C90D               LSRS     R1,R1,#+23
   \   000000C2   0919               ADDS     R1,R1,R4
   \   000000C4   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000C6   320A               LSRS     R2,R6,#+8
   \   000000C8   81F83120           STRB     R2,[R1, #+49]
    402          			break;
   \   000000CC   26E0               B.N      ??put_fat_7
    403          
    404          		case FS_FAT32 :
    405          			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
   \                     ??put_fat_5:
   \   000000CE   17EBD511           ADDS     R1,R7,R5, LSR #+7
   \   000000D2   2000               MOVS     R0,R4
   \   000000D4   ........           BL       move_window
    406          			if (res != FR_OK) break;
   \   000000D8   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000DA   0028               CMP      R0,#+0
   \   000000DC   1ED1               BNE.N    ??put_fat_7
    407          			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
   \                     ??put_fat_15:
   \   000000DE   A900               LSLS     R1,R5,#+2
   \   000000E0   C905               LSLS     R1,R1,#+23
   \   000000E2   C90D               LSRS     R1,R1,#+23
   \   000000E4   0919               ADDS     R1,R1,R4
   \   000000E6   81F83060           STRB     R6,[R1, #+48]
   \   000000EA   A900               LSLS     R1,R5,#+2
   \   000000EC   C905               LSLS     R1,R1,#+23
   \   000000EE   C90D               LSRS     R1,R1,#+23
   \   000000F0   0919               ADDS     R1,R1,R4
   \   000000F2   3200               MOVS     R2,R6
   \   000000F4   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000F6   120A               LSRS     R2,R2,#+8
   \   000000F8   81F83120           STRB     R2,[R1, #+49]
   \   000000FC   A900               LSLS     R1,R5,#+2
   \   000000FE   C905               LSLS     R1,R1,#+23
   \   00000100   C90D               LSRS     R1,R1,#+23
   \   00000102   0919               ADDS     R1,R1,R4
   \   00000104   320C               LSRS     R2,R6,#+16
   \   00000106   81F83220           STRB     R2,[R1, #+50]
   \   0000010A   A900               LSLS     R1,R5,#+2
   \   0000010C   C905               LSLS     R1,R1,#+23
   \   0000010E   C90D               LSRS     R1,R1,#+23
   \   00000110   0919               ADDS     R1,R1,R4
   \   00000112   320E               LSRS     R2,R6,#+24
   \   00000114   81F83320           STRB     R2,[R1, #+51]
    408          			break;
   \   00000118   00E0               B.N      ??put_fat_7
    409          
    410          		default :
    411          			res = FR_INT_ERR;
   \                     ??put_fat_4:
   \   0000011A   0220               MOVS     R0,#+2
    412          		}
    413          		fs->wflag = 1;
   \                     ??put_fat_7:
   \   0000011C   0121               MOVS     R1,#+1
   \   0000011E   2171               STRB     R1,[R4, #+4]
    414          	}
    415          
    416          	return res;
   \                     ??put_fat_2:
   \   00000120   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000122   BDE8F081           POP      {R4-R8,PC}       ;; return
    417          }
    418          #endif /* !_FS_READONLY */
    419          
    420          
    421          
    422          
    423          /*-----------------------------------------------------------------------*/
    424          /* FAT handling - Remove a cluster chain                                 */
    425          /*-----------------------------------------------------------------------*/
    426          #if !_FS_READONLY

   \                                 In section .text, align 2, keep-with-next
    427          static
    428          FRESULT remove_chain (
    429          	FATFS *fs,			/* File system object */
    430          	DWORD clst			/* Cluster# to remove a chain from */
    431          )
    432          {
   \                     remove_chain:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0E00               MOVS     R6,R1
    433          	FRESULT res;
    434          	DWORD nxt;
    435          
    436          
    437          	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
   \   00000006   022E               CMP      R6,#+2
   \   00000008   02D3               BCC.N    ??remove_chain_0
   \   0000000A   E069               LDR      R0,[R4, #+28]
   \   0000000C   8642               CMP      R6,R0
   \   0000000E   01D3               BCC.N    ??remove_chain_1
    438          		res = FR_INT_ERR;
   \                     ??remove_chain_0:
   \   00000010   0225               MOVS     R5,#+2
   \   00000012   27E0               B.N      ??remove_chain_2
    439          
    440          	} else {
    441          		res = FR_OK;
   \                     ??remove_chain_1:
   \   00000014   0025               MOVS     R5,#+0
   \   00000016   09E0               B.N      ??remove_chain_3
    442          		while (clst < fs->max_clust) {			/* Not a last link? */
    443          			nxt = get_fat(fs, clst);			/* Get cluster status */
    444          			if (nxt == 0) break;				/* Empty cluster? */
    445          			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    446          			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    447          			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    448          			if (res != FR_OK) break;
    449          			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   \                     ??remove_chain_4:
   \   00000018   2069               LDR      R0,[R4, #+16]
   \   0000001A   10F1010F           CMN      R0,#+1
   \   0000001E   04D0               BEQ.N    ??remove_chain_5
    450          				fs->free_clust++;
   \   00000020   2069               LDR      R0,[R4, #+16]
   \   00000022   401C               ADDS     R0,R0,#+1
   \   00000024   2061               STR      R0,[R4, #+16]
    451          				fs->fsi_flag = 1;
   \   00000026   0120               MOVS     R0,#+1
   \   00000028   6071               STRB     R0,[R4, #+5]
    452          			}
    453          			clst = nxt;	/* Next cluster */
   \                     ??remove_chain_5:
   \   0000002A   3E00               MOVS     R6,R7
   \                     ??remove_chain_3:
   \   0000002C   E069               LDR      R0,[R4, #+28]
   \   0000002E   8642               CMP      R6,R0
   \   00000030   18D2               BCS.N    ??remove_chain_2
   \   00000032   3100               MOVS     R1,R6
   \   00000034   2000               MOVS     R0,R4
   \   00000036   ........           BL       get_fat
   \   0000003A   0700               MOVS     R7,R0
   \   0000003C   002F               CMP      R7,#+0
   \   0000003E   11D0               BEQ.N    ??remove_chain_2
   \                     ??remove_chain_6:
   \   00000040   012F               CMP      R7,#+1
   \   00000042   01D1               BNE.N    ??remove_chain_7
   \   00000044   0225               MOVS     R5,#+2
   \   00000046   0DE0               B.N      ??remove_chain_2
   \                     ??remove_chain_7:
   \   00000048   17F1010F           CMN      R7,#+1
   \   0000004C   01D1               BNE.N    ??remove_chain_8
   \   0000004E   0125               MOVS     R5,#+1
   \   00000050   08E0               B.N      ??remove_chain_2
   \                     ??remove_chain_8:
   \   00000052   0022               MOVS     R2,#+0
   \   00000054   3100               MOVS     R1,R6
   \   00000056   2000               MOVS     R0,R4
   \   00000058   ........           BL       put_fat
   \   0000005C   0500               MOVS     R5,R0
   \   0000005E   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000060   002D               CMP      R5,#+0
   \   00000062   D9D0               BEQ.N    ??remove_chain_4
    454          		}
    455          	}
    456          
    457          	return res;
   \                     ??remove_chain_2:
   \   00000064   2800               MOVS     R0,R5
   \   00000066   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000068   F2BD               POP      {R1,R4-R7,PC}    ;; return
    458          }
    459          #endif
    460          
    461          
    462          
    463          
    464          /*-----------------------------------------------------------------------*/
    465          /* FAT handling - Stretch or Create a cluster chain                      */
    466          /*-----------------------------------------------------------------------*/
    467          #if !_FS_READONLY

   \                                 In section .text, align 2, keep-with-next
    468          static
    469          DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
    470          	FATFS *fs,			/* File system object */
    471          	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
    472          )
    473          {
   \                     create_chain:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   0500               MOVS     R5,R0
   \   00000006   0E00               MOVS     R6,R1
    474          	DWORD cs, ncl, scl, mcl;
    475          
    476          
    477          	mcl = fs->max_clust;
   \   00000008   D5F81C80           LDR      R8,[R5, #+28]
    478          	if (clst == 0) {		/* Create new chain */
   \   0000000C   002E               CMP      R6,#+0
   \   0000000E   06D1               BNE.N    ??create_chain_0
    479          		scl = fs->last_clust;			/* Get suggested start point */
   \   00000010   EF68               LDR      R7,[R5, #+12]
    480          		if (scl == 0 || scl >= mcl) scl = 1;
   \   00000012   002F               CMP      R7,#+0
   \   00000014   01D0               BEQ.N    ??create_chain_1
   \   00000016   4745               CMP      R7,R8
   \   00000018   0CD3               BCC.N    ??create_chain_2
   \                     ??create_chain_1:
   \   0000001A   0127               MOVS     R7,#+1
   \   0000001C   0AE0               B.N      ??create_chain_2
    481          	}
    482          	else {					/* Stretch existing chain */
    483          		cs = get_fat(fs, clst);			/* Check the cluster status */
   \                     ??create_chain_0:
   \   0000001E   3100               MOVS     R1,R6
   \   00000020   2800               MOVS     R0,R5
   \   00000022   ........           BL       get_fat
    484          		if (cs < 2) return 1;			/* It is an invalid cluster */
   \   00000026   0228               CMP      R0,#+2
   \   00000028   01D2               BCS.N    ??create_chain_3
   \   0000002A   0120               MOVS     R0,#+1
   \   0000002C   3DE0               B.N      ??create_chain_4
    485          		if (cs < mcl) return cs;		/* It is already followed by next cluster */
   \                     ??create_chain_3:
   \   0000002E   4045               CMP      R0,R8
   \   00000030   3BD3               BCC.N    ??create_chain_4
    486          		scl = clst;
   \                     ??create_chain_5:
   \   00000032   3700               MOVS     R7,R6
    487          	}
    488          
    489          	ncl = scl;				/* Start cluster */
   \                     ??create_chain_2:
   \   00000034   3C00               MOVS     R4,R7
    490          	for (;;) {
    491          		ncl++;							/* Next cluster */
   \                     ??create_chain_6:
   \   00000036   641C               ADDS     R4,R4,#+1
    492          		if (ncl >= mcl) {				/* Wrap around */
   \   00000038   4445               CMP      R4,R8
   \   0000003A   04D3               BCC.N    ??create_chain_7
    493          			ncl = 2;
   \   0000003C   0224               MOVS     R4,#+2
    494          			if (ncl > scl) return 0;	/* No free cluster */
   \   0000003E   A742               CMP      R7,R4
   \   00000040   01D2               BCS.N    ??create_chain_7
   \   00000042   0020               MOVS     R0,#+0
   \   00000044   31E0               B.N      ??create_chain_4
    495          		}
    496          		cs = get_fat(fs, ncl);			/* Get the cluster status */
   \                     ??create_chain_7:
   \   00000046   2100               MOVS     R1,R4
   \   00000048   2800               MOVS     R0,R5
   \   0000004A   ........           BL       get_fat
    497          		if (cs == 0) break;				/* Found a free cluster */
   \   0000004E   0028               CMP      R0,#+0
   \   00000050   13D1               BNE.N    ??create_chain_8
    498          		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    499          			return cs;
    500          		if (ncl == scl) return 0;		/* No free cluster */
    501          	}
    502          
    503          	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
   \   00000052   7FF07042           MVNS     R2,#-268435456
   \   00000056   2100               MOVS     R1,R4
   \   00000058   2800               MOVS     R0,R5
   \   0000005A   ........           BL       put_fat
   \   0000005E   0028               CMP      R0,#+0
   \   00000060   15D1               BNE.N    ??create_chain_9
    504          		return 0xFFFFFFFF;
    505          	if (clst != 0) {					/* Link it to the previous one if needed */
   \   00000062   002E               CMP      R6,#+0
   \   00000064   16D0               BEQ.N    ??create_chain_10
    506          		if (put_fat(fs, clst, ncl))
   \   00000066   2200               MOVS     R2,R4
   \   00000068   3100               MOVS     R1,R6
   \   0000006A   2800               MOVS     R0,R5
   \   0000006C   ........           BL       put_fat
   \   00000070   0028               CMP      R0,#+0
   \   00000072   0FD0               BEQ.N    ??create_chain_10
    507          			return 0xFFFFFFFF;
   \   00000074   5FF0FF30           MOVS     R0,#-1
   \   00000078   17E0               B.N      ??create_chain_4
    508          	}
   \                     ??create_chain_8:
   \   0000007A   10F1010F           CMN      R0,#+1
   \   0000007E   01D0               BEQ.N    ??create_chain_11
   \   00000080   0128               CMP      R0,#+1
   \   00000082   00D1               BNE.N    ??create_chain_12
   \                     ??create_chain_11:
   \   00000084   11E0               B.N      ??create_chain_4
   \                     ??create_chain_12:
   \   00000086   BC42               CMP      R4,R7
   \   00000088   D5D1               BNE.N    ??create_chain_6
   \   0000008A   0020               MOVS     R0,#+0
   \   0000008C   0DE0               B.N      ??create_chain_4
   \                     ??create_chain_9:
   \   0000008E   5FF0FF30           MOVS     R0,#-1
   \   00000092   0AE0               B.N      ??create_chain_4
    509          
    510          	fs->last_clust = ncl;				/* Update FSINFO */
   \                     ??create_chain_10:
   \   00000094   EC60               STR      R4,[R5, #+12]
    511          	if (fs->free_clust != 0xFFFFFFFF) {
   \   00000096   2869               LDR      R0,[R5, #+16]
   \   00000098   10F1010F           CMN      R0,#+1
   \   0000009C   04D0               BEQ.N    ??create_chain_13
    512          		fs->free_clust--;
   \   0000009E   2869               LDR      R0,[R5, #+16]
   \   000000A0   401E               SUBS     R0,R0,#+1
   \   000000A2   2861               STR      R0,[R5, #+16]
    513          		fs->fsi_flag = 1;
   \   000000A4   0120               MOVS     R0,#+1
   \   000000A6   6871               STRB     R0,[R5, #+5]
    514          	}
    515          
    516          	return ncl;		/* Return new cluster number */
   \                     ??create_chain_13:
   \   000000A8   2000               MOVS     R0,R4
   \                     ??create_chain_4:
   \   000000AA   BDE8F081           POP      {R4-R8,PC}       ;; return
    517          }
    518          #endif /* !_FS_READONLY */
    519          
    520          
    521          
    522          
    523          /*-----------------------------------------------------------------------*/
    524          /* Get sector# from cluster#                                             */
    525          /*-----------------------------------------------------------------------*/
    526          
    527          

   \                                 In section .text, align 2, keep-with-next
    528          DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
    529          	FATFS *fs,		/* File system object */
    530          	DWORD clst		/* Cluster# to be converted */
    531          )
    532          {
    533          	clst -= 2;
   \                     clust2sect:
   \   00000000   891E               SUBS     R1,R1,#+2
    534          	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
   \   00000002   C269               LDR      R2,[R0, #+28]
   \   00000004   921E               SUBS     R2,R2,#+2
   \   00000006   9142               CMP      R1,R2
   \   00000008   01D3               BCC.N    ??clust2sect_0
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   03E0               B.N      ??clust2sect_1
    535          	return clst * fs->csize + fs->database;
   \                     ??clust2sect_0:
   \   0000000E   8278               LDRB     R2,[R0, #+2]
   \   00000010   806A               LDR      R0,[R0, #+40]
   \   00000012   02FB0100           MLA      R0,R2,R1,R0
   \                     ??clust2sect_1:
   \   00000016   7047               BX       LR               ;; return
    536          }
    537          
    538          
    539          
    540          
    541          /*-----------------------------------------------------------------------*/
    542          /* Directory handling - Seek directory index                             */
    543          /*-----------------------------------------------------------------------*/
    544          

   \                                 In section .text, align 2, keep-with-next
    545          static
    546          FRESULT dir_seek (
    547          	DIR *dj,		/* Pointer to directory object */
    548          	WORD idx		/* Directory index number */
    549          )
    550          {
   \                     dir_seek:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
    551          	DWORD clst;
    552          	WORD ic;
    553          
    554          
    555          	dj->index = idx;
   \   00000006   E580               STRH     R5,[R4, #+6]
    556          	clst = dj->sclust;
   \   00000008   A068               LDR      R0,[R4, #+8]
    557          	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
   \   0000000A   0128               CMP      R0,#+1
   \   0000000C   03D0               BEQ.N    ??dir_seek_0
   \   0000000E   2168               LDR      R1,[R4, #+0]
   \   00000010   C969               LDR      R1,[R1, #+28]
   \   00000012   8842               CMP      R0,R1
   \   00000014   01D3               BCC.N    ??dir_seek_1
    558          		return FR_INT_ERR;
   \                     ??dir_seek_0:
   \   00000016   0220               MOVS     R0,#+2
   \   00000018   49E0               B.N      ??dir_seek_2
    559          	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   \                     ??dir_seek_1:
   \   0000001A   0028               CMP      R0,#+0
   \   0000001C   05D1               BNE.N    ??dir_seek_3
   \   0000001E   2168               LDR      R1,[R4, #+0]
   \   00000020   0978               LDRB     R1,[R1, #+0]
   \   00000022   0329               CMP      R1,#+3
   \   00000024   01D1               BNE.N    ??dir_seek_3
    560          		clst = dj->fs->dirbase;
   \   00000026   2068               LDR      R0,[R4, #+0]
   \   00000028   406A               LDR      R0,[R0, #+36]
    561          
    562          	if (clst == 0) {	/* Static table */
   \                     ??dir_seek_3:
   \   0000002A   0028               CMP      R0,#+0
   \   0000002C   0ED1               BNE.N    ??dir_seek_4
    563          		dj->clust = clst;
   \   0000002E   E060               STR      R0,[R4, #+12]
    564          		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   \   00000030   2068               LDR      R0,[R4, #+0]
   \   00000032   0089               LDRH     R0,[R0, #+8]
   \   00000034   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000036   8542               CMP      R5,R0
   \   00000038   01D3               BCC.N    ??dir_seek_5
    565          			return FR_INT_ERR;
   \   0000003A   0220               MOVS     R0,#+2
   \   0000003C   37E0               B.N      ??dir_seek_2
    566          		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
   \                     ??dir_seek_5:
   \   0000003E   2068               LDR      R0,[R4, #+0]
   \   00000040   406A               LDR      R0,[R0, #+36]
   \   00000042   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000044   10EB1510           ADDS     R0,R0,R5, LSR #+4
   \   00000048   2061               STR      R0,[R4, #+16]
   \   0000004A   23E0               B.N      ??dir_seek_6
    567          	}
    568          	else {				/* Dynamic table */
    569          		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
   \                     ??dir_seek_4:
   \   0000004C   2168               LDR      R1,[R4, #+0]
   \   0000004E   8978               LDRB     R1,[R1, #+2]
   \   00000050   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000052   0E01               LSLS     R6,R1,#+4
   \   00000054   00E0               B.N      ??dir_seek_7
    570          		while (idx >= ic) {	/* Follow cluster chain */
    571          			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    572          			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    573          			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
    574          				return FR_INT_ERR;
    575          			idx -= ic;
   \                     ??dir_seek_8:
   \   00000056   AD1B               SUBS     R5,R5,R6
   \                     ??dir_seek_7:
   \   00000058   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000005A   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000005C   B542               CMP      R5,R6
   \   0000005E   10D3               BCC.N    ??dir_seek_9
   \   00000060   0100               MOVS     R1,R0
   \   00000062   2068               LDR      R0,[R4, #+0]
   \   00000064   ........           BL       get_fat
   \   00000068   10F1010F           CMN      R0,#+1
   \   0000006C   01D1               BNE.N    ??dir_seek_10
   \   0000006E   0120               MOVS     R0,#+1
   \   00000070   1DE0               B.N      ??dir_seek_2
   \                     ??dir_seek_10:
   \   00000072   0228               CMP      R0,#+2
   \   00000074   03D3               BCC.N    ??dir_seek_11
   \   00000076   2168               LDR      R1,[R4, #+0]
   \   00000078   C969               LDR      R1,[R1, #+28]
   \   0000007A   8842               CMP      R0,R1
   \   0000007C   EBD3               BCC.N    ??dir_seek_8
   \                     ??dir_seek_11:
   \   0000007E   0220               MOVS     R0,#+2
   \   00000080   15E0               B.N      ??dir_seek_2
    576          		}
    577          		dj->clust = clst;
   \                     ??dir_seek_9:
   \   00000082   E060               STR      R0,[R4, #+12]
    578          		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
   \   00000084   0100               MOVS     R1,R0
   \   00000086   2068               LDR      R0,[R4, #+0]
   \   00000088   ........           BL       clust2sect
   \   0000008C   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000008E   10EB1510           ADDS     R0,R0,R5, LSR #+4
   \   00000092   2061               STR      R0,[R4, #+16]
    579          	}
    580          
    581          	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
   \                     ??dir_seek_6:
   \   00000094   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000096   1020               MOVS     R0,#+16
   \   00000098   B5FBF0F1           UDIV     R1,R5,R0
   \   0000009C   01FB1051           MLS      R1,R1,R0,R5
   \   000000A0   2068               LDR      R0,[R4, #+0]
   \   000000A2   10EB4110           ADDS     R0,R0,R1, LSL #+5
   \   000000A6   00F23000           ADDW     R0,R0,#+48
   \   000000AA   6061               STR      R0,[R4, #+20]
    582          
    583          	return FR_OK;	/* Seek succeeded */
   \   000000AC   0020               MOVS     R0,#+0
   \                     ??dir_seek_2:
   \   000000AE   70BD               POP      {R4-R6,PC}       ;; return
    584          }
    585          
    586          
    587          
    588          
    589          /*-----------------------------------------------------------------------*/
    590          /* Directory handling - Move directory index next                        */
    591          /*-----------------------------------------------------------------------*/
    592          

   \                                 In section .text, align 2, keep-with-next
    593          static
    594          FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
    595          	DIR *dj,		/* Pointer to directory object */
    596          	BOOL streach	/* FALSE: Do not stretch table, TRUE: Stretch table if needed */
    597          )
    598          {
   \                     dir_next:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
    599          	DWORD clst;
    600          	WORD i;
    601          
    602          
    603          	i = dj->index + 1;
   \   00000006   E088               LDRH     R0,[R4, #+6]
   \   00000008   461C               ADDS     R6,R0,#+1
    604          	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   \   0000000A   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000000C   002E               CMP      R6,#+0
   \   0000000E   02D0               BEQ.N    ??dir_next_0
   \   00000010   2069               LDR      R0,[R4, #+16]
   \   00000012   0028               CMP      R0,#+0
   \   00000014   01D1               BNE.N    ??dir_next_1
    605          		return FR_NO_FILE;
   \                     ??dir_next_0:
   \   00000016   0420               MOVS     R0,#+4
   \   00000018   8BE0               B.N      ??dir_next_2
    606          
    607          	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
   \                     ??dir_next_1:
   \   0000001A   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000001C   1020               MOVS     R0,#+16
   \   0000001E   B6FBF0F1           UDIV     R1,R6,R0
   \   00000022   01FB1061           MLS      R1,R1,R0,R6
   \   00000026   0029               CMP      R1,#+0
   \   00000028   75D1               BNE.N    ??dir_next_3
    608          		dj->sect++;					/* Next sector */
   \   0000002A   2069               LDR      R0,[R4, #+16]
   \   0000002C   401C               ADDS     R0,R0,#+1
   \   0000002E   2061               STR      R0,[R4, #+16]
    609          
    610          		if (dj->clust == 0) {	/* Static table */
   \   00000030   E068               LDR      R0,[R4, #+12]
   \   00000032   0028               CMP      R0,#+0
   \   00000034   06D1               BNE.N    ??dir_next_4
    611          			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   \   00000036   2068               LDR      R0,[R4, #+0]
   \   00000038   0089               LDRH     R0,[R0, #+8]
   \   0000003A   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000003C   8642               CMP      R6,R0
   \   0000003E   6AD3               BCC.N    ??dir_next_3
    612          				return FR_NO_FILE;
   \   00000040   0420               MOVS     R0,#+4
   \   00000042   76E0               B.N      ??dir_next_2
    613          		}
    614          		else {					/* Dynamic table */
    615          			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   \                     ??dir_next_4:
   \   00000044   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000046   3009               LSRS     R0,R6,#+4
   \   00000048   2168               LDR      R1,[R4, #+0]
   \   0000004A   8978               LDRB     R1,[R1, #+2]
   \   0000004C   491E               SUBS     R1,R1,#+1
   \   0000004E   0842               TST      R0,R1
   \   00000050   61D1               BNE.N    ??dir_next_3
    616          				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   \   00000052   E168               LDR      R1,[R4, #+12]
   \   00000054   2068               LDR      R0,[R4, #+0]
   \   00000056   ........           BL       get_fat
   \   0000005A   0700               MOVS     R7,R0
    617          				if (clst <= 1) return FR_INT_ERR;
   \   0000005C   022F               CMP      R7,#+2
   \   0000005E   01D2               BCS.N    ??dir_next_5
   \   00000060   0220               MOVS     R0,#+2
   \   00000062   66E0               B.N      ??dir_next_2
    618          				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   \                     ??dir_next_5:
   \   00000064   17F1010F           CMN      R7,#+1
   \   00000068   01D1               BNE.N    ??dir_next_6
   \   0000006A   0120               MOVS     R0,#+1
   \   0000006C   61E0               B.N      ??dir_next_2
    619          				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
   \                     ??dir_next_6:
   \   0000006E   2068               LDR      R0,[R4, #+0]
   \   00000070   C069               LDR      R0,[R0, #+28]
   \   00000072   8742               CMP      R7,R0
   \   00000074   49D3               BCC.N    ??dir_next_7
    620          #if !_FS_READONLY
    621          					BYTE c;
    622          					if (!streach) return FR_NO_FILE;			/* When do not stretch, report EOT */
   \   00000076   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000078   002D               CMP      R5,#+0
   \   0000007A   01D1               BNE.N    ??dir_next_8
   \   0000007C   0420               MOVS     R0,#+4
   \   0000007E   58E0               B.N      ??dir_next_2
    623          					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   \                     ??dir_next_8:
   \   00000080   E168               LDR      R1,[R4, #+12]
   \   00000082   2068               LDR      R0,[R4, #+0]
   \   00000084   ........           BL       create_chain
   \   00000088   0700               MOVS     R7,R0
    624          					if (clst == 0) return FR_DENIED;			/* No free cluster */
   \   0000008A   002F               CMP      R7,#+0
   \   0000008C   01D1               BNE.N    ??dir_next_9
   \   0000008E   0720               MOVS     R0,#+7
   \   00000090   4FE0               B.N      ??dir_next_2
    625          					if (clst == 1) return FR_INT_ERR;
   \                     ??dir_next_9:
   \   00000092   012F               CMP      R7,#+1
   \   00000094   01D1               BNE.N    ??dir_next_10
   \   00000096   0220               MOVS     R0,#+2
   \   00000098   4BE0               B.N      ??dir_next_2
    626          					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   \                     ??dir_next_10:
   \   0000009A   17F1010F           CMN      R7,#+1
   \   0000009E   01D1               BNE.N    ??dir_next_11
   \   000000A0   0120               MOVS     R0,#+1
   \   000000A2   46E0               B.N      ??dir_next_2
    627          					/* Clean-up streached table */
    628          					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   \                     ??dir_next_11:
   \   000000A4   0021               MOVS     R1,#+0
   \   000000A6   2068               LDR      R0,[R4, #+0]
   \   000000A8   ........           BL       move_window
   \   000000AC   0028               CMP      R0,#+0
   \   000000AE   01D0               BEQ.N    ??dir_next_12
   \   000000B0   0120               MOVS     R0,#+1
   \   000000B2   3EE0               B.N      ??dir_next_2
    629          					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   \                     ??dir_next_12:
   \   000000B4   4FF40072           MOV      R2,#+512
   \   000000B8   0021               MOVS     R1,#+0
   \   000000BA   2068               LDR      R0,[R4, #+0]
   \   000000BC   3030               ADDS     R0,R0,#+48
   \   000000BE   ........           BL       mem_set
    630          					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   \   000000C2   3900               MOVS     R1,R7
   \   000000C4   2068               LDR      R0,[R4, #+0]
   \   000000C6   ........           BL       clust2sect
   \   000000CA   2168               LDR      R1,[R4, #+0]
   \   000000CC   C862               STR      R0,[R1, #+44]
    631          					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   \   000000CE   0025               MOVS     R5,#+0
   \   000000D0   05E0               B.N      ??dir_next_13
    632          						dj->fs->wflag = 1;
    633          						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    634          						dj->fs->winsect++;
   \                     ??dir_next_14:
   \   000000D2   2068               LDR      R0,[R4, #+0]
   \   000000D4   C06A               LDR      R0,[R0, #+44]
   \   000000D6   401C               ADDS     R0,R0,#+1
   \   000000D8   2168               LDR      R1,[R4, #+0]
   \   000000DA   C862               STR      R0,[R1, #+44]
   \   000000DC   6D1C               ADDS     R5,R5,#+1
   \                     ??dir_next_13:
   \   000000DE   2068               LDR      R0,[R4, #+0]
   \   000000E0   8078               LDRB     R0,[R0, #+2]
   \   000000E2   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000E4   8542               CMP      R5,R0
   \   000000E6   0AD2               BCS.N    ??dir_next_15
   \   000000E8   2068               LDR      R0,[R4, #+0]
   \   000000EA   0121               MOVS     R1,#+1
   \   000000EC   0171               STRB     R1,[R0, #+4]
   \   000000EE   0021               MOVS     R1,#+0
   \   000000F0   2068               LDR      R0,[R4, #+0]
   \   000000F2   ........           BL       move_window
   \   000000F6   0028               CMP      R0,#+0
   \   000000F8   EBD0               BEQ.N    ??dir_next_14
   \   000000FA   0120               MOVS     R0,#+1
   \   000000FC   19E0               B.N      ??dir_next_2
    635          					}
    636          					dj->fs->winsect -= c;						/* Rewind window address */
   \                     ??dir_next_15:
   \   000000FE   2068               LDR      R0,[R4, #+0]
   \   00000100   C06A               LDR      R0,[R0, #+44]
   \   00000102   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000104   401B               SUBS     R0,R0,R5
   \   00000106   2168               LDR      R1,[R4, #+0]
   \   00000108   C862               STR      R0,[R1, #+44]
    637          #else
    638          					return FR_NO_FILE;			/* Report EOT */
    639          #endif
    640          				}
    641          				dj->clust = clst;				/* Initialize data for new cluster */
   \                     ??dir_next_7:
   \   0000010A   E760               STR      R7,[R4, #+12]
    642          				dj->sect = clust2sect(dj->fs, clst);
   \   0000010C   3900               MOVS     R1,R7
   \   0000010E   2068               LDR      R0,[R4, #+0]
   \   00000110   ........           BL       clust2sect
   \   00000114   2061               STR      R0,[R4, #+16]
    643          			}
    644          		}
    645          	}
    646          
    647          	dj->index = i;
   \                     ??dir_next_3:
   \   00000116   E680               STRH     R6,[R4, #+6]
    648          	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
   \   00000118   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000011A   1020               MOVS     R0,#+16
   \   0000011C   B6FBF0F1           UDIV     R1,R6,R0
   \   00000120   01FB1061           MLS      R1,R1,R0,R6
   \   00000124   2068               LDR      R0,[R4, #+0]
   \   00000126   10EB4110           ADDS     R0,R0,R1, LSL #+5
   \   0000012A   00F23000           ADDW     R0,R0,#+48
   \   0000012E   6061               STR      R0,[R4, #+20]
    649          
    650          	return FR_OK;
   \   00000130   0020               MOVS     R0,#+0
   \                     ??dir_next_2:
   \   00000132   F2BD               POP      {R1,R4-R7,PC}    ;; return
    651          }
    652          
    653          
    654          
    655          
    656          /*-----------------------------------------------------------------------*/
    657          /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
    658          /*-----------------------------------------------------------------------*/
    659          #if _USE_LFN
    660          static

   \                                 In section .text, align 4, keep-with-next
    661          const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN chars in the directory entry */
   \                     LfnOfs:
   \   00000000                      ; Initializer data, 16 bytes
   \   00000000   01030507090E       DC8 1, 3, 5, 7, 9, 14, 16, 18, 20, 22
   \              10121416    
   \   0000000A   181C1E000000       DC8 24, 28, 30, 0, 0, 0
    662          
    663          

   \                                 In section .text, align 2, keep-with-next
    664          static
    665          BOOL cmp_lfn (			/* TRUE:Matched, FALSE:Not matched */
    666          	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
    667          	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
    668          )
    669          {
   \                     cmp_lfn:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0D00               MOVS     R5,R1
    670          	int i, s;
    671          	WCHAR wc, uc;
    672          
    673          
    674          	i = ((dir[LDIR_Ord] & 0xBF) - 1) * 13;	/* Get offset in the LFN buffer */
   \   00000008   2878               LDRB     R0,[R5, #+0]
   \   0000000A   10F0BF00           ANDS     R0,R0,#0xBF
   \   0000000E   401E               SUBS     R0,R0,#+1
   \   00000010   0D21               MOVS     R1,#+13
   \   00000012   01FB00F6           MUL      R6,R1,R0
    675          	s = 0; wc = 1;
   \   00000016   0027               MOVS     R7,#+0
   \   00000018   5FF00108           MOVS     R8,#+1
    676          	do {
    677          		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   \                     ??cmp_lfn_0:
   \   0000001C   ........           ADR.W    R0,LfnOfs
   \   00000020   385C               LDRB     R0,[R7, R0]
   \   00000022   4019               ADDS     R0,R0,R5
   \   00000024   4078               LDRB     R0,[R0, #+1]
   \   00000026   ........           ADR.W    R1,LfnOfs
   \   0000002A   795C               LDRB     R1,[R7, R1]
   \   0000002C   495D               LDRB     R1,[R1, R5]
   \   0000002E   51EA0020           ORRS     R0,R1,R0, LSL #+8
    678          		if (wc) {	/* Last char has not been processed */
   \   00000032   1FFA88F8           UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000036   B8F1000F           CMP      R8,#+0
   \   0000003A   11D0               BEQ.N    ??cmp_lfn_1
    679          			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   \   0000003C   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003E   ........           BL       ff_wtoupper
   \   00000042   8046               MOV      R8,R0
    680          			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   \   00000044   FF2E               CMP      R6,#+255
   \   00000046   09DA               BGE.N    ??cmp_lfn_2
   \   00000048   34F81600           LDRH     R0,[R4, R6, LSL #+1]
   \   0000004C   ........           BL       ff_wtoupper
   \   00000050   761C               ADDS     R6,R6,#+1
   \   00000052   1FFA88F8           UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000056   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000058   8045               CMP      R8,R0
   \   0000005A   08D0               BEQ.N    ??cmp_lfn_3
    681          				return FALSE;			/* Not matched */
   \                     ??cmp_lfn_2:
   \   0000005C   0020               MOVS     R0,#+0
   \   0000005E   18E0               B.N      ??cmp_lfn_4
    682          		} else {
    683          			if (uc != 0xFFFF) return FALSE;	/* Check filler */
   \                     ??cmp_lfn_1:
   \   00000060   4FF6FF71           MOVW     R1,#+65535
   \   00000064   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000066   8842               CMP      R0,R1
   \   00000068   01D0               BEQ.N    ??cmp_lfn_3
   \   0000006A   0020               MOVS     R0,#+0
   \   0000006C   11E0               B.N      ??cmp_lfn_4
    684          		}
    685          	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   \                     ??cmp_lfn_3:
   \   0000006E   7F1C               ADDS     R7,R7,#+1
   \   00000070   0D2F               CMP      R7,#+13
   \   00000072   D3DB               BLT.N    ??cmp_lfn_0
    686          
    687          	if ((dir[LDIR_Ord] & 0x40) && wc && lfnbuf[i])	/* Last segment matched but different length */
   \   00000074   2878               LDRB     R0,[R5, #+0]
   \   00000076   4006               LSLS     R0,R0,#+25
   \   00000078   0AD5               BPL.N    ??cmp_lfn_5
   \   0000007A   1FFA88F8           UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000007E   B8F1000F           CMP      R8,#+0
   \   00000082   05D0               BEQ.N    ??cmp_lfn_5
   \   00000084   34F81600           LDRH     R0,[R4, R6, LSL #+1]
   \   00000088   0028               CMP      R0,#+0
   \   0000008A   01D0               BEQ.N    ??cmp_lfn_5
    688          		return FALSE;
   \   0000008C   0020               MOVS     R0,#+0
   \   0000008E   00E0               B.N      ??cmp_lfn_4
    689          
    690          	return TRUE;					/* The part of LFN matched */
   \                     ??cmp_lfn_5:
   \   00000090   0120               MOVS     R0,#+1
   \                     ??cmp_lfn_4:
   \   00000092   BDE8F081           POP      {R4-R8,PC}       ;; return
    691          }
    692          
    693          
    694          

   \                                 In section .text, align 2, keep-with-next
    695          static
    696          BOOL pick_lfn (			/* TRUE:Succeeded, FALSE:Buffer overflow */
    697          	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
    698          	BYTE *dir			/* Pointer to the directory entry */
    699          )
    700          {
   \                     pick_lfn:
   \   00000000   70B4               PUSH     {R4-R6}
    701          	int i, s;
    702          	WCHAR wc, uc;
    703          
    704          
    705          	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   \   00000002   0A78               LDRB     R2,[R1, #+0]
   \   00000004   12F03F02           ANDS     R2,R2,#0x3F
   \   00000008   521E               SUBS     R2,R2,#+1
   \   0000000A   0D23               MOVS     R3,#+13
   \   0000000C   5A43               MULS     R2,R3,R2
    706          
    707          	s = 0; wc = 1;
   \   0000000E   0023               MOVS     R3,#+0
   \   00000010   0124               MOVS     R4,#+1
    708          	do {
    709          		uc = LD_WORD(dir+LfnOfs[s]);			/* Pick an LFN character from the entry */
   \                     ??pick_lfn_0:
   \   00000012   ........           ADR.W    R5,LfnOfs
   \   00000016   5D5D               LDRB     R5,[R3, R5]
   \   00000018   6D18               ADDS     R5,R5,R1
   \   0000001A   6D78               LDRB     R5,[R5, #+1]
   \   0000001C   ........           ADR.W    R6,LfnOfs
   \   00000020   9E5D               LDRB     R6,[R3, R6]
   \   00000022   765C               LDRB     R6,[R6, R1]
   \   00000024   56EA0525           ORRS     R5,R6,R5, LSL #+8
    710          		if (wc) {	/* Last char has not been processed */
   \   00000028   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000002A   002C               CMP      R4,#+0
   \   0000002C   11D0               BEQ.N    ??pick_lfn_1
    711          			if (i >= _MAX_LFN) return FALSE;	/* Buffer overflow? */
   \   0000002E   FF2A               CMP      R2,#+255
   \   00000030   01DB               BLT.N    ??pick_lfn_2
   \   00000032   0020               MOVS     R0,#+0
   \   00000034   18E0               B.N      ??pick_lfn_3
    712          			lfnbuf[i++] = wc = uc;				/* Store it */
   \                     ??pick_lfn_2:
   \   00000036   2C00               MOVS     R4,R5
   \   00000038   20F81240           STRH     R4,[R0, R2, LSL #+1]
   \   0000003C   521C               ADDS     R2,R2,#+1
    713          		} else {
    714          			if (uc != 0xFFFF) return FALSE;		/* Check filler */
    715          		}
    716          	} while (++s < 13);						/* Read all character in the entry */
   \                     ??pick_lfn_4:
   \   0000003E   5B1C               ADDS     R3,R3,#+1
   \   00000040   0D2B               CMP      R3,#+13
   \   00000042   E6DB               BLT.N    ??pick_lfn_0
    717          
    718          	if (dir[LDIR_Ord] & 0x40) {				/* Put terminator if it is the last LFN part */
   \   00000044   0978               LDRB     R1,[R1, #+0]
   \   00000046   4906               LSLS     R1,R1,#+25
   \   00000048   0DD5               BPL.N    ??pick_lfn_5
    719          		if (i >= _MAX_LFN) return FALSE;	/* Buffer overflow? */
   \   0000004A   FF2A               CMP      R2,#+255
   \   0000004C   08DB               BLT.N    ??pick_lfn_6
   \   0000004E   0020               MOVS     R0,#+0
   \   00000050   0AE0               B.N      ??pick_lfn_3
   \                     ??pick_lfn_1:
   \   00000052   4FF6FF76           MOVW     R6,#+65535
   \   00000056   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000058   B542               CMP      R5,R6
   \   0000005A   F0D0               BEQ.N    ??pick_lfn_4
   \   0000005C   0020               MOVS     R0,#+0
   \   0000005E   03E0               B.N      ??pick_lfn_3
    720          		lfnbuf[i] = 0;
   \                     ??pick_lfn_6:
   \   00000060   0021               MOVS     R1,#+0
   \   00000062   20F81210           STRH     R1,[R0, R2, LSL #+1]
    721          	}
    722          
    723          	return TRUE;
   \                     ??pick_lfn_5:
   \   00000066   0120               MOVS     R0,#+1
   \                     ??pick_lfn_3:
   \   00000068   70BC               POP      {R4-R6}
   \   0000006A   7047               BX       LR               ;; return
    724          }
    725          
    726          
    727          #if !_FS_READONLY

   \                                 In section .text, align 2, keep-with-next
    728          static
    729          void fit_lfn (
    730          	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
    731          	BYTE *dir,				/* Pointer to the directory entry */
    732          	BYTE ord,				/* LFN order (1-20) */
    733          	BYTE sum				/* SFN sum */
    734          )
    735          {
   \                     fit_lfn:
   \   00000000   F0B4               PUSH     {R4-R7}
    736          	int i, s;
    737          	WCHAR wc;
    738          
    739          
    740          	dir[LDIR_Chksum] = sum;			/* Set check sum */
   \   00000002   4B73               STRB     R3,[R1, #+13]
    741          	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   \   00000004   0F23               MOVS     R3,#+15
   \   00000006   CB72               STRB     R3,[R1, #+11]
    742          	dir[LDIR_Type] = 0;
   \   00000008   0023               MOVS     R3,#+0
   \   0000000A   0B73               STRB     R3,[R1, #+12]
    743          	ST_WORD(dir+LDIR_FstClusLO, 0);
   \   0000000C   0023               MOVS     R3,#+0
   \   0000000E   8B76               STRB     R3,[R1, #+26]
   \   00000010   0023               MOVS     R3,#+0
   \   00000012   CB76               STRB     R3,[R1, #+27]
    744          
    745          	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   \   00000014   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000016   531E               SUBS     R3,R2,#+1
   \   00000018   0D24               MOVS     R4,#+13
   \   0000001A   6343               MULS     R3,R4,R3
    746          	s = wc = 0;
   \   0000001C   0024               MOVS     R4,#+0
   \   0000001E   2500               MOVS     R5,R4
   \   00000020   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
    747          	do {
    748          		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   \                     ??fit_lfn_0:
   \   00000022   4FF6FF76           MOVW     R6,#+65535
   \   00000026   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000028   B542               CMP      R5,R6
   \   0000002A   02D0               BEQ.N    ??fit_lfn_1
   \   0000002C   30F81350           LDRH     R5,[R0, R3, LSL #+1]
   \   00000030   5B1C               ADDS     R3,R3,#+1
    749          		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   \                     ??fit_lfn_1:
   \   00000032   ........           ADR.W    R6,LfnOfs
   \   00000036   A65D               LDRB     R6,[R4, R6]
   \   00000038   7554               STRB     R5,[R6, R1]
   \   0000003A   ........           ADR.W    R6,LfnOfs
   \   0000003E   A65D               LDRB     R6,[R4, R6]
   \   00000040   7618               ADDS     R6,R6,R1
   \   00000042   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000044   2F0A               LSRS     R7,R5,#+8
   \   00000046   7770               STRB     R7,[R6, #+1]
    750          		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   \   00000048   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004A   002D               CMP      R5,#+0
   \   0000004C   01D1               BNE.N    ??fit_lfn_2
   \   0000004E   4FF6FF75           MOVW     R5,#+65535
    751          	} while (++s < 13);
   \                     ??fit_lfn_2:
   \   00000052   641C               ADDS     R4,R4,#+1
   \   00000054   0D2C               CMP      R4,#+13
   \   00000056   E4DB               BLT.N    ??fit_lfn_0
    752          	if (wc == 0xFFFF || !lfnbuf[i]) ord |= 0x40;	/* Bottom LFN part is the start of LFN sequence */
   \   00000058   4FF6FF74           MOVW     R4,#+65535
   \   0000005C   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000005E   A542               CMP      R5,R4
   \   00000060   03D0               BEQ.N    ??fit_lfn_3
   \   00000062   30F81300           LDRH     R0,[R0, R3, LSL #+1]
   \   00000066   0028               CMP      R0,#+0
   \   00000068   01D1               BNE.N    ??fit_lfn_4
   \                     ??fit_lfn_3:
   \   0000006A   52F04002           ORRS     R2,R2,#0x40
    753          	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   \                     ??fit_lfn_4:
   \   0000006E   0A70               STRB     R2,[R1, #+0]
    754          }
   \   00000070   F0BC               POP      {R4-R7}
   \   00000072   7047               BX       LR               ;; return
    755          
    756          #endif
    757          #endif
    758          
    759          
    760          
    761          /*-----------------------------------------------------------------------*/
    762          /* Create numbered name                                                  */
    763          /*-----------------------------------------------------------------------*/
    764          #if _USE_LFN

   \                                 In section .text, align 2, keep-with-next
    765          void gen_numname (
    766          	BYTE *dst,			/* Pointer to generated SFN */
    767          	const BYTE *src,	/* Pointer to source SFN to be modified */
    768          	const WCHAR *lfn,	/* Pointer to LFN */
    769          	WORD num			/* Sequence number */
    770          )
    771          {
   \                     gen_numname:
   \   00000000   7CB5               PUSH     {R2-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   1600               MOVS     R6,R2
   \   00000006   1D00               MOVS     R5,R3
    772          	char ns[8];
    773          	int i, j;
    774          
    775          
    776          	mem_cpy(dst, src, 11);
   \   00000008   0B22               MOVS     R2,#+11
   \   0000000A   2000               MOVS     R0,R4
   \   0000000C   ........           BL       mem_cpy
    777          
    778          	if (num > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   \   00000010   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000012   062D               CMP      R5,#+6
   \   00000014   09D3               BCC.N    ??gen_numname_0
    779          		do num = (num >> 1) + (num << 15) + (WORD)*lfn++; while (*lfn);
   \                     ??gen_numname_1:
   \   00000016   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000018   E803               LSLS     R0,R5,#+15
   \   0000001A   10EB5500           ADDS     R0,R0,R5, LSR #+1
   \   0000001E   3188               LDRH     R1,[R6, #+0]
   \   00000020   0D18               ADDS     R5,R1,R0
   \   00000022   B61C               ADDS     R6,R6,#+2
   \   00000024   3088               LDRH     R0,[R6, #+0]
   \   00000026   0028               CMP      R0,#+0
   \   00000028   F5D1               BNE.N    ??gen_numname_1
    780          	}
    781          
    782          	/* itoa */
    783          	i = 7;
   \                     ??gen_numname_0:
   \   0000002A   0720               MOVS     R0,#+7
    784          	do {
    785          		ns[i--] = (num % 10) + '0';
   \                     ??gen_numname_2:
   \   0000002C   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002E   0A21               MOVS     R1,#+10
   \   00000030   95FBF1F2           SDIV     R2,R5,R1
   \   00000034   01FB1251           MLS      R1,R1,R2,R5
   \   00000038   3031               ADDS     R1,R1,#+48
   \   0000003A   00AA               ADD      R2,SP,#+0
   \   0000003C   8154               STRB     R1,[R0, R2]
   \   0000003E   401E               SUBS     R0,R0,#+1
    786          		num /= 10;
   \   00000040   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000042   0A21               MOVS     R1,#+10
   \   00000044   95FBF1F5           SDIV     R5,R5,R1
    787          	} while (num);
   \   00000048   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004A   002D               CMP      R5,#+0
   \   0000004C   EED1               BNE.N    ??gen_numname_2
    788          	ns[i] = '~';
   \   0000004E   00A9               ADD      R1,SP,#+0
   \   00000050   7E22               MOVS     R2,#+126
   \   00000052   4254               STRB     R2,[R0, R1]
    789          
    790          	/* Append the number */
    791          	for (j = 0; j < i && dst[j] != ' '; j++) {
   \   00000054   0021               MOVS     R1,#+0
   \   00000056   00E0               B.N      ??gen_numname_3
    792          		if (IsDBCS1(dst[j])) {
   \                     ??gen_numname_4:
   \   00000058   491C               ADDS     R1,R1,#+1
   \                     ??gen_numname_3:
   \   0000005A   8142               CMP      R1,R0
   \   0000005C   02DA               BGE.N    ??gen_numname_5
   \   0000005E   0A5D               LDRB     R2,[R1, R4]
   \   00000060   202A               CMP      R2,#+32
   \   00000062   F9D1               BNE.N    ??gen_numname_4
    793          			if (j == i - 1) break;
    794          			j++;
    795          		}
    796          	}
    797          	do {
    798          		dst[j++] = (i < 8) ? ns[i++] : ' ';
   \                     ??gen_numname_5:
   \   00000064   0A00               MOVS     R2,R1
   \   00000066   511C               ADDS     R1,R2,#+1
   \   00000068   0828               CMP      R0,#+8
   \   0000006A   03DA               BGE.N    ??gen_numname_6
   \   0000006C   00AB               ADD      R3,SP,#+0
   \   0000006E   C35C               LDRB     R3,[R0, R3]
   \   00000070   401C               ADDS     R0,R0,#+1
   \   00000072   00E0               B.N      ??gen_numname_7
   \                     ??gen_numname_6:
   \   00000074   2023               MOVS     R3,#+32
   \                     ??gen_numname_7:
   \   00000076   1355               STRB     R3,[R2, R4]
    799          	} while (j < 8);
   \   00000078   0829               CMP      R1,#+8
   \   0000007A   F3DB               BLT.N    ??gen_numname_5
    800          }
   \   0000007C   73BD               POP      {R0,R1,R4-R6,PC}  ;; return
    801          #endif
    802          
    803          
    804          
    805          
    806          /*-----------------------------------------------------------------------*/
    807          /* Calculate sum of an SFN                                               */
    808          /*-----------------------------------------------------------------------*/
    809          #if _USE_LFN

   \                                 In section .text, align 2, keep-with-next
    810          static
    811          BYTE sum_sfn (
    812          	const BYTE *dir		/* Ptr to directory entry */
    813          )
    814          {
    815          	BYTE sum = 0;
   \                     sum_sfn:
   \   00000000   0021               MOVS     R1,#+0
    816          	int n = 11;
   \   00000002   0B22               MOVS     R2,#+11
    817          
    818          	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   \                     ??sum_sfn_0:
   \   00000004   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   CB01               LSLS     R3,R1,#+7
   \   00000008   13EB5101           ADDS     R1,R3,R1, LSR #+1
   \   0000000C   0378               LDRB     R3,[R0, #+0]
   \   0000000E   5918               ADDS     R1,R3,R1
   \   00000010   401C               ADDS     R0,R0,#+1
   \   00000012   521E               SUBS     R2,R2,#+1
   \   00000014   002A               CMP      R2,#+0
   \   00000016   F5D1               BNE.N    ??sum_sfn_0
    819          	return sum;
   \   00000018   0800               MOVS     R0,R1
   \   0000001A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   7047               BX       LR               ;; return
    820          }
    821          #endif
    822          
    823          
    824          
    825          
    826          /*-----------------------------------------------------------------------*/
    827          /* Directory handling - Find an object in the directory                  */
    828          /*-----------------------------------------------------------------------*/
    829          

   \                                 In section .text, align 2, keep-with-next
    830          static
    831          FRESULT dir_find (
    832          	DIR *dj			/* Pointer to the directory object linked to the file name */
    833          )
    834          {
   \                     dir_find:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   0500               MOVS     R5,R0
    835          	FRESULT res;
    836          	BYTE c, *dir;
    837          #if _USE_LFN
    838          	BYTE a, ord, sum;
    839          #endif
    840          
    841          	res = dir_seek(dj, 0);			/* Rewind directory object */
   \   00000006   0021               MOVS     R1,#+0
   \   00000008   2800               MOVS     R0,R5
   \   0000000A   ........           BL       dir_seek
   \   0000000E   0400               MOVS     R4,R0
    842          	if (res != FR_OK) return res;
   \   00000010   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   002C               CMP      R4,#+0
   \   00000014   02D0               BEQ.N    ??dir_find_0
   \   00000016   2000               MOVS     R0,R4
   \   00000018   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   26E0               B.N      ??dir_find_1
    843          
    844          #if _USE_LFN
    845          	ord = sum = 0xFF;
   \                     ??dir_find_0:
   \   0000001C   FF27               MOVS     R7,#+255
   \   0000001E   B846               MOV      R8,R7
    846          #endif
    847          	do {
    848          		res = move_window(dj->fs, dj->sect);
   \                     ??dir_find_2:
   \   00000020   2969               LDR      R1,[R5, #+16]
   \   00000022   2868               LDR      R0,[R5, #+0]
   \   00000024   ........           BL       move_window
   \   00000028   0400               MOVS     R4,R0
    849          		if (res != FR_OK) break;
   \   0000002A   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002C   002C               CMP      R4,#+0
   \   0000002E   1AD1               BNE.N    ??dir_find_3
    850          		dir = dj->dir;					/* Ptr to the directory entry of current index */
   \                     ??dir_find_4:
   \   00000030   6E69               LDR      R6,[R5, #+20]
    851          		c = dir[DIR_Name];
   \   00000032   3078               LDRB     R0,[R6, #+0]
    852          		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   \   00000034   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0028               CMP      R0,#+0
   \   00000038   01D1               BNE.N    ??dir_find_5
   \   0000003A   0424               MOVS     R4,#+4
   \   0000003C   13E0               B.N      ??dir_find_3
    853          #if _USE_LFN	/* LFN configuration */
    854          		a = dir[DIR_Attr] & AM_MASK;
   \                     ??dir_find_5:
   \   0000003E   F17A               LDRB     R1,[R6, #+11]
   \   00000040   11F03F01           ANDS     R1,R1,#0x3F
    855          		if (c == 0xE5 || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   \   00000044   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   E528               CMP      R0,#+229
   \   00000048   04D0               BEQ.N    ??dir_find_6
   \   0000004A   0A07               LSLS     R2,R1,#+28
   \   0000004C   0FD5               BPL.N    ??dir_find_7
   \   0000004E   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000050   0F29               CMP      R1,#+15
   \   00000052   0CD0               BEQ.N    ??dir_find_7
    856          			ord = 0xFF;
   \                     ??dir_find_6:
   \   00000054   FF27               MOVS     R7,#+255
    857          		} else {
    858          			if (a == AM_LFN) {			/* An LFN entry is found */
    859          				if (dj->lfn) {
    860          					if (c & 0x40) {		/* Is it start of LFN sequence? */
    861          						sum = dir[LDIR_Chksum];
    862          						c &= 0xBF; ord = c;	/* LFN start order */
    863          						dj->lfn_idx = dj->index;
    864          					}
    865          					/* Check validity of the LFN entry and compare it with given name */
    866          					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    867          				}
    868          			} else {					/* An SFN entry is found */
    869          				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    870          				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    871          				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    872          			}
    873          		}
    874          #else		/* Non LFN configuration */
    875          		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    876          			break;
    877          #endif
    878          		res = dir_next(dj, FALSE);		/* Next entry */
   \                     ??dir_find_8:
   \   00000056   0021               MOVS     R1,#+0
   \   00000058   2800               MOVS     R0,R5
   \   0000005A   ........           BL       dir_next
   \   0000005E   0400               MOVS     R4,R0
    879          	} while (res == FR_OK);
   \   00000060   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000062   002C               CMP      R4,#+0
   \   00000064   DCD0               BEQ.N    ??dir_find_2
    880          
    881          	return res;
   \                     ??dir_find_3:
   \   00000066   2000               MOVS     R0,R4
   \   00000068   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??dir_find_1:
   \   0000006A   BDE8F081           POP      {R4-R8,PC}       ;; return
   \                     ??dir_find_7:
   \   0000006E   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000070   0F29               CMP      R1,#+15
   \   00000072   1ED1               BNE.N    ??dir_find_9
   \   00000074   E969               LDR      R1,[R5, #+28]
   \   00000076   0029               CMP      R1,#+0
   \   00000078   EDD0               BEQ.N    ??dir_find_8
   \   0000007A   4106               LSLS     R1,R0,#+25
   \   0000007C   06D5               BPL.N    ??dir_find_10
   \   0000007E   96F80D80           LDRB     R8,[R6, #+13]
   \   00000082   10F0BF00           ANDS     R0,R0,#0xBF
   \   00000086   0700               MOVS     R7,R0
   \   00000088   E988               LDRH     R1,[R5, #+6]
   \   0000008A   2984               STRH     R1,[R5, #+32]
   \                     ??dir_find_10:
   \   0000008C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008E   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000090   B842               CMP      R0,R7
   \   00000092   0CD1               BNE.N    ??dir_find_11
   \   00000094   707B               LDRB     R0,[R6, #+13]
   \   00000096   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000009A   8045               CMP      R8,R0
   \   0000009C   07D1               BNE.N    ??dir_find_11
   \   0000009E   3100               MOVS     R1,R6
   \   000000A0   E869               LDR      R0,[R5, #+28]
   \   000000A2   ........           BL       cmp_lfn
   \   000000A6   0028               CMP      R0,#+0
   \   000000A8   01D0               BEQ.N    ??dir_find_11
   \   000000AA   7F1E               SUBS     R7,R7,#+1
   \   000000AC   00E0               B.N      ??dir_find_12
   \                     ??dir_find_11:
   \   000000AE   FF27               MOVS     R7,#+255
   \                     ??dir_find_12:
   \   000000B0   D1E7               B.N      ??dir_find_8
   \                     ??dir_find_9:
   \   000000B2   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000B4   002F               CMP      R7,#+0
   \   000000B6   06D1               BNE.N    ??dir_find_13
   \   000000B8   3000               MOVS     R0,R6
   \   000000BA   ........           BL       sum_sfn
   \   000000BE   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000C2   8045               CMP      R8,R0
   \   000000C4   CFD0               BEQ.N    ??dir_find_3
   \                     ??dir_find_13:
   \   000000C6   FF27               MOVS     R7,#+255
   \   000000C8   4FF6FF70           MOVW     R0,#+65535
   \   000000CC   2884               STRH     R0,[R5, #+32]
   \   000000CE   A869               LDR      R0,[R5, #+24]
   \   000000D0   C07A               LDRB     R0,[R0, #+11]
   \   000000D2   C007               LSLS     R0,R0,#+31
   \   000000D4   BFD4               BMI.N    ??dir_find_8
   \   000000D6   0B22               MOVS     R2,#+11
   \   000000D8   A969               LDR      R1,[R5, #+24]
   \   000000DA   3000               MOVS     R0,R6
   \   000000DC   ........           BL       mem_cmp
   \   000000E0   0028               CMP      R0,#+0
   \   000000E2   B8D1               BNE.N    ??dir_find_8
   \   000000E4   BFE7               B.N      ??dir_find_3
    882          }
    883          
    884          
    885          
    886          
    887          /*-----------------------------------------------------------------------*/
    888          /* Read an object from the directory                                     */
    889          /*-----------------------------------------------------------------------*/
    890          #if _FS_MINIMIZE <= 1

   \                                 In section .text, align 2, keep-with-next
    891          static
    892          FRESULT dir_read (
    893          	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
    894          )
    895          {
   \                     dir_read:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
    896          	FRESULT res;
    897          	BYTE c, *dir;
    898          #if _USE_LFN
    899          	BYTE a, ord = 0xFF, sum = 0xFF;
   \   00000004   FF26               MOVS     R6,#+255
   \   00000006   FF27               MOVS     R7,#+255
    900          #endif
    901          
    902          	res = FR_NO_FILE;
   \   00000008   0425               MOVS     R5,#+4
    903          	while (dj->sect) {
   \                     ??dir_read_0:
   \   0000000A   2069               LDR      R0,[R4, #+16]
   \   0000000C   0028               CMP      R0,#+0
   \   0000000E   25D0               BEQ.N    ??dir_read_1
    904          		res = move_window(dj->fs, dj->sect);
   \   00000010   2169               LDR      R1,[R4, #+16]
   \   00000012   2068               LDR      R0,[R4, #+0]
   \   00000014   ........           BL       move_window
   \   00000018   0500               MOVS     R5,R0
    905          		if (res != FR_OK) break;
   \   0000001A   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   002D               CMP      R5,#+0
   \   0000001E   1DD1               BNE.N    ??dir_read_1
    906          		dir = dj->dir;					/* Ptr to the directory entry of current index */
   \                     ??dir_read_2:
   \   00000020   6069               LDR      R0,[R4, #+20]
    907          		c = dir[DIR_Name];
   \   00000022   0178               LDRB     R1,[R0, #+0]
    908          		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   \   00000024   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000026   0029               CMP      R1,#+0
   \   00000028   01D1               BNE.N    ??dir_read_3
   \   0000002A   0425               MOVS     R5,#+4
   \   0000002C   16E0               B.N      ??dir_read_1
    909          #if _USE_LFN	/* LFN configuration */
    910          		a = dir[DIR_Attr] & AM_MASK;
   \                     ??dir_read_3:
   \   0000002E   C27A               LDRB     R2,[R0, #+11]
   \   00000030   12F03F02           ANDS     R2,R2,#0x3F
    911          		if (c == 0xE5 || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   \   00000034   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000036   E529               CMP      R1,#+229
   \   00000038   07D0               BEQ.N    ??dir_read_4
   \   0000003A   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003C   2E29               CMP      R1,#+46
   \   0000003E   04D0               BEQ.N    ??dir_read_4
   \   00000040   1307               LSLS     R3,R2,#+28
   \   00000042   13D5               BPL.N    ??dir_read_5
   \   00000044   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000046   0F2A               CMP      R2,#+15
   \   00000048   10D0               BEQ.N    ??dir_read_5
    912          			ord = 0xFF;
   \                     ??dir_read_4:
   \   0000004A   FF26               MOVS     R6,#+255
    913          		} else {
    914          			if (a == AM_LFN) {			/* An LFN entry is found */
    915          				if (c & 0x40) {			/* Is it start of LFN sequence? */
    916          					sum = dir[LDIR_Chksum];
    917          					c &= 0xBF; ord = c;
    918          					dj->lfn_idx = dj->index;
    919          				}
    920          				/* Check LFN validity and capture it */
    921          				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    922          			} else {					/* An SFN entry is found */
    923          				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
    924          					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
    925          				break;
    926          			}
    927          		}
    928          #else		/* Non LFN configuration */
    929          		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    930          			break;
    931          #endif
    932          		res = dir_next(dj, FALSE);				/* Next entry */
   \                     ??dir_read_6:
   \   0000004C   0021               MOVS     R1,#+0
   \   0000004E   2000               MOVS     R0,R4
   \   00000050   ........           BL       dir_next
   \   00000054   0500               MOVS     R5,R0
    933          		if (res != FR_OK) break;
   \   00000056   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000058   002D               CMP      R5,#+0
   \   0000005A   D6D0               BEQ.N    ??dir_read_0
    934          	}
    935          
    936          	if (res != FR_OK) dj->sect = 0;
   \                     ??dir_read_1:
   \   0000005C   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000005E   002D               CMP      R5,#+0
   \   00000060   01D0               BEQ.N    ??dir_read_7
   \   00000062   0020               MOVS     R0,#+0
   \   00000064   2061               STR      R0,[R4, #+16]
    937          
    938          	return res;
   \                     ??dir_read_7:
   \   00000066   2800               MOVS     R0,R5
   \   00000068   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   F2BD               POP      {R1,R4-R7,PC}    ;; return
   \                     ??dir_read_5:
   \   0000006C   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000006E   0F2A               CMP      R2,#+15
   \   00000070   19D1               BNE.N    ??dir_read_8
   \   00000072   4A06               LSLS     R2,R1,#+25
   \   00000074   05D5               BPL.N    ??dir_read_9
   \   00000076   477B               LDRB     R7,[R0, #+13]
   \   00000078   11F0BF01           ANDS     R1,R1,#0xBF
   \   0000007C   0E00               MOVS     R6,R1
   \   0000007E   E288               LDRH     R2,[R4, #+6]
   \   00000080   2284               STRH     R2,[R4, #+32]
   \                     ??dir_read_9:
   \   00000082   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000084   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000086   B142               CMP      R1,R6
   \   00000088   0BD1               BNE.N    ??dir_read_10
   \   0000008A   417B               LDRB     R1,[R0, #+13]
   \   0000008C   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000008E   8F42               CMP      R7,R1
   \   00000090   07D1               BNE.N    ??dir_read_10
   \   00000092   0100               MOVS     R1,R0
   \   00000094   E069               LDR      R0,[R4, #+28]
   \   00000096   ........           BL       pick_lfn
   \   0000009A   0028               CMP      R0,#+0
   \   0000009C   01D0               BEQ.N    ??dir_read_10
   \   0000009E   761E               SUBS     R6,R6,#+1
   \   000000A0   00E0               B.N      ??dir_read_11
   \                     ??dir_read_10:
   \   000000A2   FF26               MOVS     R6,#+255
   \                     ??dir_read_11:
   \   000000A4   D2E7               B.N      ??dir_read_6
   \                     ??dir_read_8:
   \   000000A6   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000A8   002E               CMP      R6,#+0
   \   000000AA   04D1               BNE.N    ??dir_read_12
   \   000000AC   ........           BL       sum_sfn
   \   000000B0   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000B2   8742               CMP      R7,R0
   \   000000B4   02D0               BEQ.N    ??dir_read_13
   \                     ??dir_read_12:
   \   000000B6   4FF6FF70           MOVW     R0,#+65535
   \   000000BA   2084               STRH     R0,[R4, #+32]
   \                     ??dir_read_13:
   \   000000BC   CEE7               B.N      ??dir_read_1
    939          }
    940          #endif
    941          
    942          
    943          
    944          /*-----------------------------------------------------------------------*/
    945          /* Register an object to the directory                                   */
    946          /*-----------------------------------------------------------------------*/
    947          #if !_FS_READONLY

   \                                 In section .text, align 2, keep-with-next
    948          static
    949          FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
    950          	DIR *dj				/* Target directory with object name to be created */
    951          )
    952          {
   \                     dir_register:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   84B0               SUB      SP,SP,#+16
   \   00000006   0400               MOVS     R4,R0
    953          	FRESULT res;
    954          	BYTE c, *dir;
    955          #if _USE_LFN	/* LFN configuration */
    956          	WORD n, ne, is;
    957          	BYTE sn[12], *fn, sum;
    958          	WCHAR *lfn;
    959          
    960          
    961          	fn = dj->fn; lfn = dj->lfn;
   \   00000008   A769               LDR      R7,[R4, #+24]
   \   0000000A   E669               LDR      R6,[R4, #+28]
    962          	mem_cpy(sn, fn, 12);
   \   0000000C   0C22               MOVS     R2,#+12
   \   0000000E   3900               MOVS     R1,R7
   \   00000010   00A8               ADD      R0,SP,#+0
   \   00000012   ........           BL       mem_cpy
    963          
    964          	if (_FS_RPATH && (sn[NS] & NS_DOT)) return FR_INVALID_NAME;	/* Cannot create dot entry */
    965          
    966          	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   \   00000016   9DF80B00           LDRB     R0,[SP, #+11]
   \   0000001A   C007               LSLS     R0,R0,#+31
   \   0000001C   2CD5               BPL.N    ??dir_register_0
    967          		fn[NS] = 0; dj->lfn = NULL;			/* Find only SFN */
   \   0000001E   0020               MOVS     R0,#+0
   \   00000020   F872               STRB     R0,[R7, #+11]
   \   00000022   0020               MOVS     R0,#+0
   \   00000024   E061               STR      R0,[R4, #+28]
    968          		for (n = 1; n < 100; n++) {
   \   00000026   5FF00108           MOVS     R8,#+1
   \   0000002A   01E0               B.N      ??dir_register_1
   \                     ??dir_register_2:
   \   0000002C   18F10108           ADDS     R8,R8,#+1
   \                     ??dir_register_1:
   \   00000030   1FFA88F8           UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000034   B8F1640F           CMP      R8,#+100
   \   00000038   0DD2               BCS.N    ??dir_register_3
    969          			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   \   0000003A   4346               MOV      R3,R8
   \   0000003C   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000003E   3200               MOVS     R2,R6
   \   00000040   00A9               ADD      R1,SP,#+0
   \   00000042   3800               MOVS     R0,R7
   \   00000044   ........           BL       gen_numname
    970          			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   \   00000048   2000               MOVS     R0,R4
   \   0000004A   ........           BL       dir_find
   \   0000004E   0500               MOVS     R5,R0
    971          			if (res != FR_OK) break;
   \   00000050   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000052   002D               CMP      R5,#+0
   \   00000054   EAD0               BEQ.N    ??dir_register_2
    972          		}
    973          		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   \                     ??dir_register_3:
   \   00000056   1FFA88F8           UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000005A   B8F1640F           CMP      R8,#+100
   \   0000005E   01D1               BNE.N    ??dir_register_4
   \   00000060   0720               MOVS     R0,#+7
   \   00000062   A7E0               B.N      ??dir_register_5
    974          		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   \                     ??dir_register_4:
   \   00000064   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000066   042D               CMP      R5,#+4
   \   00000068   02D0               BEQ.N    ??dir_register_6
   \   0000006A   2800               MOVS     R0,R5
   \   0000006C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   A1E0               B.N      ??dir_register_5
    975          		fn[NS] = sn[NS]; dj->lfn = lfn;
   \                     ??dir_register_6:
   \   00000070   9DF80B00           LDRB     R0,[SP, #+11]
   \   00000074   F872               STRB     R0,[R7, #+11]
   \   00000076   E661               STR      R6,[R4, #+28]
    976          	}
    977          
    978          	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve reserve an SFN + LFN entries. */
   \                     ??dir_register_0:
   \   00000078   9DF80B00           LDRB     R0,[SP, #+11]
   \   0000007C   8007               LSLS     R0,R0,#+30
   \   0000007E   0ED5               BPL.N    ??dir_register_7
    979          		for (ne = 0; lfn[ne]; ne++) ;
   \   00000080   0027               MOVS     R7,#+0
   \   00000082   00E0               B.N      ??dir_register_8
   \                     ??dir_register_9:
   \   00000084   7F1C               ADDS     R7,R7,#+1
   \                     ??dir_register_8:
   \   00000086   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000088   36F81700           LDRH     R0,[R6, R7, LSL #+1]
   \   0000008C   0028               CMP      R0,#+0
   \   0000008E   F9D1               BNE.N    ??dir_register_9
    980          		ne = (ne + 25) / 13;
   \   00000090   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000092   17F11900           ADDS     R0,R7,#+25
   \   00000096   0D21               MOVS     R1,#+13
   \   00000098   90FBF1F7           SDIV     R7,R0,R1
   \   0000009C   00E0               B.N      ??dir_register_10
    981          	} else {						/* Otherwise reserve only an SFN entry. */
    982          		ne = 1;
   \                     ??dir_register_7:
   \   0000009E   0127               MOVS     R7,#+1
    983          	}
    984          
    985          	/* Reserve contiguous entries */
    986          	res = dir_seek(dj, 0);
   \                     ??dir_register_10:
   \   000000A0   0021               MOVS     R1,#+0
   \   000000A2   2000               MOVS     R0,R4
   \   000000A4   ........           BL       dir_seek
   \   000000A8   0500               MOVS     R5,R0
    987          	if (res != FR_OK) return res;
   \   000000AA   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000AC   002D               CMP      R5,#+0
   \   000000AE   02D0               BEQ.N    ??dir_register_11
   \   000000B0   2800               MOVS     R0,R5
   \   000000B2   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B4   7EE0               B.N      ??dir_register_5
    988          	n = is = 0;
   \                     ??dir_register_11:
   \   000000B6   5FF00008           MOVS     R8,#+0
   \   000000BA   4646               MOV      R6,R8
    989          	do {
    990          		res = move_window(dj->fs, dj->sect);
   \                     ??dir_register_12:
   \   000000BC   2169               LDR      R1,[R4, #+16]
   \   000000BE   2068               LDR      R0,[R4, #+0]
   \   000000C0   ........           BL       move_window
   \   000000C4   0500               MOVS     R5,R0
    991          		if (res != FR_OK) break;
   \   000000C6   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000C8   002D               CMP      R5,#+0
   \   000000CA   1FD1               BNE.N    ??dir_register_13
    992          		c = *dj->dir;				/* Check the entry status */
   \                     ??dir_register_14:
   \   000000CC   6069               LDR      R0,[R4, #+20]
   \   000000CE   0078               LDRB     R0,[R0, #+0]
    993          		if (c == 0xE5 || c == 0) {	/* Is it a blank entry? */
   \   000000D0   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D2   E528               CMP      R0,#+229
   \   000000D4   02D0               BEQ.N    ??dir_register_15
   \   000000D6   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D8   0028               CMP      R0,#+0
   \   000000DA   0DD1               BNE.N    ??dir_register_16
    994          			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   \                     ??dir_register_15:
   \   000000DC   1FFA88F8           UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000E0   B8F1000F           CMP      R8,#+0
   \   000000E4   00D1               BNE.N    ??dir_register_17
   \   000000E6   E688               LDRH     R6,[R4, #+6]
    995          			if (++n == ne) break;	/* A contiguous entry that required count is found */
   \                     ??dir_register_17:
   \   000000E8   18F10108           ADDS     R8,R8,#+1
   \   000000EC   4046               MOV      R0,R8
   \   000000EE   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000F0   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000F2   B842               CMP      R0,R7
   \   000000F4   02D1               BNE.N    ??dir_register_18
   \   000000F6   09E0               B.N      ??dir_register_13
    996          		} else {
    997          			n = 0;					/* Not a blank entry. Restart to search */
   \                     ??dir_register_16:
   \   000000F8   5FF00008           MOVS     R8,#+0
    998          		}
    999          		res = dir_next(dj, TRUE);	/* Next entry with table stretch */
   \                     ??dir_register_18:
   \   000000FC   0121               MOVS     R1,#+1
   \   000000FE   2000               MOVS     R0,R4
   \   00000100   ........           BL       dir_next
   \   00000104   0500               MOVS     R5,R0
   1000          	} while (res == FR_OK);
   \   00000106   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000108   002D               CMP      R5,#+0
   \   0000010A   D7D0               BEQ.N    ??dir_register_12
   1001          
   1002          	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   \                     ??dir_register_13:
   \   0000010C   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000010E   002D               CMP      R5,#+0
   \   00000110   30D1               BNE.N    ??dir_register_19
   \   00000112   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000114   022F               CMP      R7,#+2
   \   00000116   2DD3               BCC.N    ??dir_register_19
   1003          		res = dir_seek(dj, is);
   \   00000118   3100               MOVS     R1,R6
   \   0000011A   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000011C   2000               MOVS     R0,R4
   \   0000011E   ........           BL       dir_seek
   \   00000122   0500               MOVS     R5,R0
   1004          		if (res == FR_OK) {
   \   00000124   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000126   002D               CMP      R5,#+0
   \   00000128   24D1               BNE.N    ??dir_register_19
   1005          			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   \   0000012A   A069               LDR      R0,[R4, #+24]
   \   0000012C   ........           BL       sum_sfn
   \   00000130   0600               MOVS     R6,R0
   1006          			ne--;
   \   00000132   7F1E               SUBS     R7,R7,#+1
   1007          			do {					/* Store LFN entries in bottom first */
   1008          				res = move_window(dj->fs, dj->sect);
   \                     ??dir_register_20:
   \   00000134   2169               LDR      R1,[R4, #+16]
   \   00000136   2068               LDR      R0,[R4, #+0]
   \   00000138   ........           BL       move_window
   \   0000013C   0500               MOVS     R5,R0
   1009          				if (res != FR_OK) break;
   \   0000013E   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000140   002D               CMP      R5,#+0
   \   00000142   17D1               BNE.N    ??dir_register_19
   1010          				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   \                     ??dir_register_21:
   \   00000144   3300               MOVS     R3,R6
   \   00000146   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000148   3A00               MOVS     R2,R7
   \   0000014A   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000014C   6169               LDR      R1,[R4, #+20]
   \   0000014E   E069               LDR      R0,[R4, #+28]
   \   00000150   ........           BL       fit_lfn
   1011          				dj->fs->wflag = 1;
   \   00000154   2068               LDR      R0,[R4, #+0]
   \   00000156   0121               MOVS     R1,#+1
   \   00000158   0171               STRB     R1,[R0, #+4]
   1012          				res = dir_next(dj, FALSE);	/* Next entry */
   \   0000015A   0021               MOVS     R1,#+0
   \   0000015C   2000               MOVS     R0,R4
   \   0000015E   ........           BL       dir_next
   \   00000162   0500               MOVS     R5,R0
   1013          			} while (res == FR_OK && --ne);
   \   00000164   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000166   002D               CMP      R5,#+0
   \   00000168   04D1               BNE.N    ??dir_register_19
   \   0000016A   7F1E               SUBS     R7,R7,#+1
   \   0000016C   3800               MOVS     R0,R7
   \   0000016E   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000170   0028               CMP      R0,#+0
   \   00000172   DFD1               BNE.N    ??dir_register_20
   1014          		}
   1015          	}
   1016          
   1017          #else	/* Non LFN configuration */
   1018          	res = dir_seek(dj, 0);
   1019          	if (res == FR_OK) {
   1020          		do {	/* Find a blank entry for the SFN */
   1021          			res = move_window(dj->fs, dj->sect);
   1022          			if (res != FR_OK) break;
   1023          			c = *dj->dir;
   1024          			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
   1025          			res = dir_next(dj, TRUE);		/* Next entry with table streach */
   1026          		} while (res == FR_OK);
   1027          	}
   1028          #endif
   1029          
   1030          	if (res == FR_OK) {		/* Initialize the SFN entry */
   \                     ??dir_register_19:
   \   00000174   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000176   002D               CMP      R5,#+0
   \   00000178   1AD1               BNE.N    ??dir_register_22
   1031          		res = move_window(dj->fs, dj->sect);
   \   0000017A   2169               LDR      R1,[R4, #+16]
   \   0000017C   2068               LDR      R0,[R4, #+0]
   \   0000017E   ........           BL       move_window
   \   00000182   0500               MOVS     R5,R0
   1032          		if (res == FR_OK) {
   \   00000184   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000186   002D               CMP      R5,#+0
   \   00000188   12D1               BNE.N    ??dir_register_22
   1033          			dir = dj->dir;
   \   0000018A   6669               LDR      R6,[R4, #+20]
   1034          			mem_set(dir, 0, 32);		/* Clean the entry */
   \   0000018C   2022               MOVS     R2,#+32
   \   0000018E   0021               MOVS     R1,#+0
   \   00000190   3000               MOVS     R0,R6
   \   00000192   ........           BL       mem_set
   1035          			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   \   00000196   0B22               MOVS     R2,#+11
   \   00000198   A169               LDR      R1,[R4, #+24]
   \   0000019A   3000               MOVS     R0,R6
   \   0000019C   ........           BL       mem_cpy
   1036          			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   \   000001A0   A069               LDR      R0,[R4, #+24]
   \   000001A2   C07A               LDRB     R0,[R0, #+11]
   \   000001A4   10F01800           ANDS     R0,R0,#0x18
   \   000001A8   3073               STRB     R0,[R6, #+12]
   1037          			dj->fs->wflag = 1;
   \   000001AA   2068               LDR      R0,[R4, #+0]
   \   000001AC   0121               MOVS     R1,#+1
   \   000001AE   0171               STRB     R1,[R0, #+4]
   1038          		}
   1039          	}
   1040          
   1041          	return res;
   \                     ??dir_register_22:
   \   000001B0   2800               MOVS     R0,R5
   \   000001B2   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??dir_register_5:
   \   000001B4   04B0               ADD      SP,SP,#+16
   \   000001B6   BDE8F081           POP      {R4-R8,PC}       ;; return
   1042          }
   1043          #endif /* !_FS_READONLY */
   1044          
   1045          
   1046          
   1047          
   1048          /*-----------------------------------------------------------------------*/
   1049          /* Remove an object from the directory                                   */
   1050          /*-----------------------------------------------------------------------*/
   1051          #if !_FS_READONLY && !_FS_MINIMIZE

   \                                 In section .text, align 2, keep-with-next
   1052          static
   1053          FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
   1054          	DIR *dj				/* Directory object pointing the entry to be removed */
   1055          )
   1056          {
   \                     dir_remove:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
   1057          	FRESULT res;
   1058          #if _USE_LFN	/* LFN configuration */
   1059          	WORD i;
   1060          
   1061          	i = dj->index;	/* SFN index */
   \   00000004   E588               LDRH     R5,[R4, #+6]
   1062          	res = dir_seek(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
   \   00000006   208C               LDRH     R0,[R4, #+32]
   \   00000008   4FF6FF71           MOVW     R1,#+65535
   \   0000000C   8842               CMP      R0,R1
   \   0000000E   01D1               BNE.N    ??dir_remove_0
   \   00000010   2900               MOVS     R1,R5
   \   00000012   00E0               B.N      ??dir_remove_1
   \                     ??dir_remove_0:
   \   00000014   218C               LDRH     R1,[R4, #+32]
   \                     ??dir_remove_1:
   \   00000016   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000018   2000               MOVS     R0,R4
   \   0000001A   ........           BL       dir_seek
   1063          	if (res == FR_OK) {
   \   0000001E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0028               CMP      R0,#+0
   \   00000022   1BD1               BNE.N    ??dir_remove_2
   1064          		do {
   1065          			res = move_window(dj->fs, dj->sect);
   \                     ??dir_remove_3:
   \   00000024   2169               LDR      R1,[R4, #+16]
   \   00000026   2068               LDR      R0,[R4, #+0]
   \   00000028   ........           BL       move_window
   1066          			if (res != FR_OK) break;
   \   0000002C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0028               CMP      R0,#+0
   \   00000030   10D1               BNE.N    ??dir_remove_4
   1067          			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
   \                     ??dir_remove_5:
   \   00000032   6169               LDR      R1,[R4, #+20]
   \   00000034   E522               MOVS     R2,#+229
   \   00000036   0A70               STRB     R2,[R1, #+0]
   1068          			dj->fs->wflag = 1;
   \   00000038   2168               LDR      R1,[R4, #+0]
   \   0000003A   0122               MOVS     R2,#+1
   \   0000003C   0A71               STRB     R2,[R1, #+4]
   1069          			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
   \   0000003E   E188               LDRH     R1,[R4, #+6]
   \   00000040   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000042   A942               CMP      R1,R5
   \   00000044   06D2               BCS.N    ??dir_remove_4
   1070          			res = dir_next(dj, FALSE);	/* Next entry */
   \                     ??dir_remove_6:
   \   00000046   0021               MOVS     R1,#+0
   \   00000048   2000               MOVS     R0,R4
   \   0000004A   ........           BL       dir_next
   1071          		} while (res == FR_OK);
   \   0000004E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0028               CMP      R0,#+0
   \   00000052   E7D0               BEQ.N    ??dir_remove_3
   1072          		if (res == FR_NO_FILE) res = FR_INT_ERR;
   \                     ??dir_remove_4:
   \   00000054   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0428               CMP      R0,#+4
   \   00000058   00D1               BNE.N    ??dir_remove_2
   \   0000005A   0220               MOVS     R0,#+2
   1073          	}
   1074          
   1075          #else			/* Non LFN configuration */
   1076          	res = dir_seek(dj, dj->index);
   1077          	if (res == FR_OK) {
   1078          		res = move_window(dj->fs, dj->sect);
   1079          		if (res == FR_OK) {
   1080          			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
   1081          			dj->fs->wflag = 1;
   1082          		}
   1083          	}
   1084          #endif
   1085          
   1086          	return res;
   \                     ??dir_remove_2:
   \   0000005C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   32BD               POP      {R1,R4,R5,PC}    ;; return
   1087          }
   1088          #endif /* !_FS_READONLY */
   1089          
   1090          
   1091          
   1092          
   1093          /*-----------------------------------------------------------------------*/
   1094          /* Pick a segment and create the object name in directory form           */
   1095          /*-----------------------------------------------------------------------*/
   1096          

   \                                 In section .text, align 2, keep-with-next
   1097          static
   1098          FRESULT create_name (
   1099          	DIR *dj,			/* Pointer to the directory object */
   1100          	const XCHAR **path	/* Pointer to pointer to the segment in the path string */
   1101          )
   1102          {
   \                     create_name:
   \   00000000   2DE9F14F           PUSH     {R0,R4-R11,LR}
   \   00000004   8846               MOV      R8,R1
   1103          #ifdef _EXCVT
   1104          	static const BYTE cvt[] = _EXCVT;
   1105          #endif
   1106          
   1107          #if _USE_LFN	/* LFN configuration */
   1108          	BYTE b, cf;
   1109          	WCHAR w, *lfn;
   1110          	int i, ni, si, di;
   1111          	const XCHAR *p;
   1112          	
   1113          	/* Create LFN in Unicode */
   1114          	si = di = 0;
   \   00000006   0024               MOVS     R4,#+0
   \   00000008   2500               MOVS     R5,R4
   1115          	p = *path;
   \   0000000A   D8F80090           LDR      R9,[R8, #+0]
   1116          	lfn = dj->lfn;
   \   0000000E   0098               LDR      R0,[SP, #+0]
   \   00000010   C669               LDR      R6,[R0, #+28]
   \   00000012   02E0               B.N      ??create_name_0
   1117          	for (;;) {
   1118          		w = p[si++];					/* Get a character */
   1119          		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   1120          		if (di >= _MAX_LFN)				/* Reject too long name */
   1121          			return FR_INVALID_NAME;
   1122          #if !_LFN_UNICODE
   1123          		w &= 0xFF;
   1124          		if (IsDBCS1(w)) {				/* If it is a DBC 1st byte */
   1125          			b = p[si++];				/* Get 2nd byte */
   1126          			if (!IsDBCS2(b))			/* Reject invalid code for DBC */
   1127          				return FR_INVALID_NAME;
   1128          			//w = (w << 8) + b;
   1129          			else w = (w << 8) + b;
   1130          		}
   1131          		w = ff_convert(w, 1);			/* Convert OEM to Unicode */
   1132          		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   1133          #endif
   1134          		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   1135          			return FR_INVALID_NAME;
   1136          		lfn[di++] = w;					/* Store the Unicode char */
   \                     ??create_name_1:
   \   00000014   26F81570           STRH     R7,[R6, R5, LSL #+1]
   \   00000018   6D1C               ADDS     R5,R5,#+1
   \                     ??create_name_0:
   \   0000001A   14F80970           LDRB     R7,[R4, R9]
   \   0000001E   641C               ADDS     R4,R4,#+1
   \   00000020   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000022   202F               CMP      R7,#+32
   \   00000024   05D3               BCC.N    ??create_name_2
   \   00000026   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000028   2F2F               CMP      R7,#+47
   \   0000002A   02D0               BEQ.N    ??create_name_2
   \   0000002C   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000002E   5C2F               CMP      R7,#+92
   \   00000030   09D1               BNE.N    ??create_name_3
   1137          	}
   1138          	*path = &p[si];						/* Return pointer to the next segment */
   \                     ??create_name_2:
   \   00000032   14EB0900           ADDS     R0,R4,R9
   \   00000036   C8F80000           STR      R0,[R8, #+0]
   1139          	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   \   0000003A   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000003C   202F               CMP      R7,#+32
   \   0000003E   1FD2               BCS.N    ??create_name_4
   \   00000040   5FF00408           MOVS     R8,#+4
   \   00000044   1EE0               B.N      ??create_name_5
   \                     ??create_name_3:
   \   00000046   FF2D               CMP      R5,#+255
   \   00000048   01DB               BLT.N    ??create_name_6
   \   0000004A   0620               MOVS     R0,#+6
   \   0000004C   90E0               B.N      ??create_name_7
   \                     ??create_name_6:
   \   0000004E   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000050   0121               MOVS     R1,#+1
   \   00000052   3800               MOVS     R0,R7
   \   00000054   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000056   ........           BL       ff_convert
   \   0000005A   0700               MOVS     R7,R0
   \   0000005C   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000005E   002F               CMP      R7,#+0
   \   00000060   01D1               BNE.N    ??create_name_8
   \   00000062   0620               MOVS     R0,#+6
   \   00000064   84E0               B.N      ??create_name_7
   \                     ??create_name_8:
   \   00000066   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000068   802F               CMP      R7,#+128
   \   0000006A   D3D2               BCS.N    ??create_name_1
   \   0000006C   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000006E   3900               MOVS     R1,R7
   \   00000070   ........           LDR.W    R0,??DataTable12
   \   00000074   ........           BL       chk_chr
   \   00000078   0028               CMP      R0,#+0
   \   0000007A   CBD0               BEQ.N    ??create_name_1
   \   0000007C   0620               MOVS     R0,#+6
   \   0000007E   77E0               B.N      ??create_name_7
   \                     ??create_name_4:
   \   00000080   5FF00008           MOVS     R8,#+0
   \                     ??create_name_5:
   \   00000084   00E0               B.N      ??create_name_9
   1140          #if _FS_RPATH
   1141          	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
   1142          		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
   1143          		lfn[di] = 0;
   1144          		for (i = 0; i < 11; i++)
   1145          			dj->fn[i] = (i < di) ? '.' : ' ';
   1146          		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
   1147          		return FR_OK;
   1148          	}
   1149          #endif
   1150          	while (di) {						/* Strip trailing spaces and dots */
   1151          		w = lfn[di - 1];
   1152          		if (w != ' ' && w != '.') break;
   1153          		di--;
   \                     ??create_name_10:
   \   00000086   6D1E               SUBS     R5,R5,#+1
   \                     ??create_name_9:
   \   00000088   002D               CMP      R5,#+0
   \   0000008A   09D0               BEQ.N    ??create_name_11
   \   0000008C   16EB4500           ADDS     R0,R6,R5, LSL #+1
   \   00000090   30F8027C           LDRH     R7,[R0, #-2]
   \   00000094   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000096   202F               CMP      R7,#+32
   \   00000098   F5D0               BEQ.N    ??create_name_10
   \   0000009A   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000009C   2E2F               CMP      R7,#+46
   \   0000009E   F2D0               BEQ.N    ??create_name_10
   1154          	}
   1155          	if (!di) return FR_INVALID_NAME;	/* Reject null string */
   \                     ??create_name_11:
   \   000000A0   002D               CMP      R5,#+0
   \   000000A2   01D1               BNE.N    ??create_name_12
   \   000000A4   0620               MOVS     R0,#+6
   \   000000A6   63E0               B.N      ??create_name_7
   1156          
   1157          	lfn[di] = 0;						/* LFN is created */
   \                     ??create_name_12:
   \   000000A8   0020               MOVS     R0,#+0
   \   000000AA   26F81500           STRH     R0,[R6, R5, LSL #+1]
   1158          
   1159          	/* Create SFN in directory form */
   1160          	mem_set(dj->fn, ' ', 11);
   \   000000AE   0B22               MOVS     R2,#+11
   \   000000B0   2021               MOVS     R1,#+32
   \   000000B2   0098               LDR      R0,[SP, #+0]
   \   000000B4   8069               LDR      R0,[R0, #+24]
   \   000000B6   ........           BL       mem_set
   1161          	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   \   000000BA   0024               MOVS     R4,#+0
   \   000000BC   00E0               B.N      ??create_name_13
   \                     ??create_name_14:
   \   000000BE   641C               ADDS     R4,R4,#+1
   \                     ??create_name_13:
   \   000000C0   36F81400           LDRH     R0,[R6, R4, LSL #+1]
   \   000000C4   2028               CMP      R0,#+32
   \   000000C6   FAD0               BEQ.N    ??create_name_14
   \   000000C8   36F81400           LDRH     R0,[R6, R4, LSL #+1]
   \   000000CC   2E28               CMP      R0,#+46
   \   000000CE   F6D0               BEQ.N    ??create_name_14
   1162          	if (si) cf |= NS_LOSS | NS_LFN;
   \   000000D0   002C               CMP      R4,#+0
   \   000000D2   03D0               BEQ.N    ??create_name_15
   \   000000D4   58F00308           ORRS     R8,R8,#0x3
   \   000000D8   00E0               B.N      ??create_name_15
   1163          	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   \                     ??create_name_16:
   \   000000DA   6D1E               SUBS     R5,R5,#+1
   \                     ??create_name_15:
   \   000000DC   002D               CMP      R5,#+0
   \   000000DE   05D0               BEQ.N    ??create_name_17
   \   000000E0   16EB4500           ADDS     R0,R6,R5, LSL #+1
   \   000000E4   30F8020C           LDRH     R0,[R0, #-2]
   \   000000E8   2E28               CMP      R0,#+46
   \   000000EA   F6D1               BNE.N    ??create_name_16
   1164          	
   1165          	b = i = 0; ni = 8;
   \                     ??create_name_17:
   \   000000EC   5FF00009           MOVS     R9,#+0
   \   000000F0   CB46               MOV      R11,R9
   \   000000F2   5FF0080A           MOVS     R10,#+8
   \   000000F6   01E0               B.N      ??create_name_18
   1166          	for (;;) {
   1167          		w = lfn[si++];					/* Get an LFN char */
   1168          		if (!w) break;					/* Break on end of the LFN */
   1169          		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   1170          			cf |= NS_LOSS | NS_LFN; continue;
   \                     ??create_name_19:
   \   000000F8   58F00308           ORRS     R8,R8,#0x3
   1171          		}
   \                     ??create_name_18:
   \   000000FC   36F81470           LDRH     R7,[R6, R4, LSL #+1]
   \   00000100   641C               ADDS     R4,R4,#+1
   \   00000102   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000104   002F               CMP      R7,#+0
   \   00000106   35D1               BNE.N    ??create_name_20
   1172          		
   1173          		if (i >= ni || si == di) {		/* Extension or end of SFN */
   1174          			if (ni == 11) {				/* Long extension */
   1175          				cf |= NS_LOSS | NS_LFN; break;
   1176          			}
   1177          			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   1178          			if (si > di) break;			/* No extension */
   1179          			si = di; i = 8; ni = 11;	/* Enter extension section */
   1180          			b <<= 2; continue;
   1181          		}
   1182          
   1183          		if (w >= 0x80) {				/* Non ASCII char */
   1184          #ifdef _EXCVT
   1185          			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   1186          			if (w) w = cvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   1187          #else
   1188          			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
   1189          #endif
   1190          			cf |= NS_LFN;				/* Force create LFN entry */
   1191          		}
   1192          		
   1193          		if (_DF1S && w >= 0x100) {		/* Double byte char */
   1194          			if (i >= ni - 1) {
   1195          				cf |= NS_LOSS | NS_LFN; i = ni; continue;
   1196          			}
   1197          			dj->fn[i++] = (BYTE)(w >> 8);
   1198          		} else {						/* Single byte char */
   1199          			if (!w || chk_chr("+,;[=]", w)) {		/* Replace illegal chars for SFN */
   1200          				w = '_'; cf |= NS_LOSS | NS_LFN;	/* Lossy conversion */
   1201          			} else {
   1202          				if (IsUpper(w)) {		/* ASCII large capital */
   1203          					b |= 2;
   1204          				} else {
   1205          					if (IsLower(w)) {	/* ASCII small capital */
   1206          						b |= 1; w -= 0x20;
   1207          					}
   1208          				}
   1209          			}
   1210          		}
   1211          		dj->fn[i++] = (BYTE)w;
   1212          	}
   1213          
   1214          	if (dj->fn[0] == 0xE5) dj->fn[0] = 0x05;	/* If the first char collides with deleted mark, replace it with 0x05 */
   \                     ??create_name_21:
   \   00000108   0098               LDR      R0,[SP, #+0]
   \   0000010A   8069               LDR      R0,[R0, #+24]
   \   0000010C   0078               LDRB     R0,[R0, #+0]
   \   0000010E   E528               CMP      R0,#+229
   \   00000110   03D1               BNE.N    ??create_name_22
   \   00000112   0098               LDR      R0,[SP, #+0]
   \   00000114   8069               LDR      R0,[R0, #+24]
   \   00000116   0521               MOVS     R1,#+5
   \   00000118   0170               STRB     R1,[R0, #+0]
   1215          
   1216          	if (ni == 8) b <<= 2;
   \                     ??create_name_22:
   \   0000011A   BAF1080F           CMP      R10,#+8
   \   0000011E   01D1               BNE.N    ??create_name_23
   \   00000120   5FEA8909           LSLS     R9,R9,#+2
   1217          	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   \                     ??create_name_23:
   \   00000124   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000128   19F00C00           ANDS     R0,R9,#0xC
   \   0000012C   0C28               CMP      R0,#+12
   \   0000012E   05D0               BEQ.N    ??create_name_24
   \   00000130   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000134   19F00300           ANDS     R0,R9,#0x3
   \   00000138   0328               CMP      R0,#+3
   \   0000013A   01D1               BNE.N    ??create_name_25
   1218          		cf |= NS_LFN;
   \                     ??create_name_24:
   \   0000013C   58F00208           ORRS     R8,R8,#0x2
   1219          	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   \                     ??create_name_25:
   \   00000140   5FEA8870           LSLS     R0,R8,#+30
   \   00000144   0FD4               BMI.N    ??create_name_26
   1220          		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   \   00000146   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000014A   19F00300           ANDS     R0,R9,#0x3
   \   0000014E   0128               CMP      R0,#+1
   \   00000150   01D1               BNE.N    ??create_name_27
   \   00000152   58F01008           ORRS     R8,R8,#0x10
   1221          		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   \                     ??create_name_27:
   \   00000156   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000015A   19F00C00           ANDS     R0,R9,#0xC
   \   0000015E   0428               CMP      R0,#+4
   \   00000160   01D1               BNE.N    ??create_name_26
   \   00000162   58F00808           ORRS     R8,R8,#0x8
   1222          	}
   1223          
   1224          	dj->fn[NS] = cf;	/* SFN is created */
   \                     ??create_name_26:
   \   00000166   0098               LDR      R0,[SP, #+0]
   \   00000168   8069               LDR      R0,[R0, #+24]
   \   0000016A   80F80B80           STRB     R8,[R0, #+11]
   1225          	return FR_OK;
   \   0000016E   0020               MOVS     R0,#+0
   \                     ??create_name_7:
   \   00000170   BDE8F28F           POP      {R1,R4-R11,PC}   ;; return
   \                     ??create_name_20:
   \   00000174   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000176   202F               CMP      R7,#+32
   \   00000178   BED0               BEQ.N    ??create_name_19
   \   0000017A   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000017C   2E2F               CMP      R7,#+46
   \   0000017E   01D1               BNE.N    ??create_name_28
   \   00000180   AC42               CMP      R4,R5
   \   00000182   B9D1               BNE.N    ??create_name_19
   \                     ??create_name_28:
   \   00000184   D345               CMP      R11,R10
   \   00000186   01DA               BGE.N    ??create_name_29
   \   00000188   AC42               CMP      R4,R5
   \   0000018A   13D1               BNE.N    ??create_name_30
   \                     ??create_name_29:
   \   0000018C   BAF10B0F           CMP      R10,#+11
   \   00000190   02D1               BNE.N    ??create_name_31
   \   00000192   58F00308           ORRS     R8,R8,#0x3
   \   00000196   B7E7               B.N      ??create_name_21
   \                     ??create_name_31:
   \   00000198   AC42               CMP      R4,R5
   \   0000019A   01D0               BEQ.N    ??create_name_32
   \   0000019C   58F00308           ORRS     R8,R8,#0x3
   \                     ??create_name_32:
   \   000001A0   A542               CMP      R5,R4
   \   000001A2   B1DB               BLT.N    ??create_name_21
   \                     ??create_name_33:
   \   000001A4   2C00               MOVS     R4,R5
   \   000001A6   5FF0080B           MOVS     R11,#+8
   \   000001AA   5FF00B0A           MOVS     R10,#+11
   \   000001AE   5FEA8909           LSLS     R9,R9,#+2
   \   000001B2   A3E7               B.N      ??create_name_18
   \                     ??create_name_30:
   \   000001B4   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000001B6   802F               CMP      R7,#+128
   \   000001B8   10D3               BCC.N    ??create_name_34
   \   000001BA   0021               MOVS     R1,#+0
   \   000001BC   3800               MOVS     R0,R7
   \   000001BE   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001C0   ........           BL       ff_convert
   \   000001C4   0700               MOVS     R7,R0
   \   000001C6   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000001C8   002F               CMP      R7,#+0
   \   000001CA   05D0               BEQ.N    ??create_name_35
   \   000001CC   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000001CE   ........           LDR.W    R0,??DataTable12_1
   \   000001D2   3818               ADDS     R0,R7,R0
   \   000001D4   10F8807C           LDRB     R7,[R0, #-128]
   \                     ??create_name_35:
   \   000001D8   58F00208           ORRS     R8,R8,#0x2
   \                     ??create_name_34:
   \   000001DC   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000001DE   002F               CMP      R7,#+0
   \   000001E0   07D0               BEQ.N    ??create_name_36
   \   000001E2   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000001E4   3900               MOVS     R1,R7
   \   000001E6   ........           ADR.W    R0,`?<Constant "+,;[=]">`
   \   000001EA   ........           BL       chk_chr
   \   000001EE   0028               CMP      R0,#+0
   \   000001F0   03D0               BEQ.N    ??create_name_37
   \                     ??create_name_36:
   \   000001F2   5F27               MOVS     R7,#+95
   \   000001F4   58F00308           ORRS     R8,R8,#0x3
   \   000001F8   0FE0               B.N      ??create_name_38
   \                     ??create_name_37:
   \   000001FA   B7F14100           SUBS     R0,R7,#+65
   \   000001FE   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000200   1A28               CMP      R0,#+26
   \   00000202   02D2               BCS.N    ??create_name_39
   \   00000204   59F00209           ORRS     R9,R9,#0x2
   \   00000208   07E0               B.N      ??create_name_38
   \                     ??create_name_39:
   \   0000020A   B7F16100           SUBS     R0,R7,#+97
   \   0000020E   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000210   1A28               CMP      R0,#+26
   \   00000212   02D2               BCS.N    ??create_name_38
   \   00000214   59F00109           ORRS     R9,R9,#0x1
   \   00000218   203F               SUBS     R7,R7,#+32
   \                     ??create_name_38:
   \   0000021A   0098               LDR      R0,[SP, #+0]
   \   0000021C   8069               LDR      R0,[R0, #+24]
   \   0000021E   0BF80070           STRB     R7,[R11, R0]
   \   00000222   1BF1010B           ADDS     R11,R11,#+1
   \   00000226   69E7               B.N      ??create_name_18
   1226          
   1227          
   1228          #else	/* Non-LFN configuration */
   1229          	BYTE b, c, d, *sfn;
   1230          	int ni, si, i;
   1231          	const char *p;
   1232          
   1233          	/* Create file name in directory form */
   1234          	sfn = dj->fn;
   1235          	mem_set(sfn, ' ', 11);
   1236          	si = i = b = 0; ni = 8;
   1237          	p = *path;
   1238          #if _FS_RPATH
   1239          	if (p[si] == '.') { /* Is this a dot entry? */
   1240          		for (;;) {
   1241          			c = p[si++];
   1242          			if (c != '.' || si >= 3) break;
   1243          			sfn[i++] = c;
   1244          		}
   1245          		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
   1246          		*path = &p[si];									/* Return pointer to the next segment */
   1247          		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
   1248          		return FR_OK;
   1249          	}
   1250          #endif
   1251          	for (;;) {
   1252          		c = p[si++];
   1253          		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
   1254          		if (c == '.' || i >= ni) {
   1255          			if (ni != 8 || c != '.') return FR_INVALID_NAME;
   1256          			i = 8; ni = 11;
   1257          			b <<= 2; continue;
   1258          		}
   1259          		if (c >= 0x80) {				/* Extended char */
   1260          #ifdef _EXCVT
   1261          			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
   1262          #else
   1263          			b |= 3;						/* Eliminate NT flag if ext char is exist */
   1264          #if !_DF1S	/* ASCII only cfg */
   1265          			return FR_INVALID_NAME;
   1266          #endif
   1267          #endif
   1268          		}
   1269          		if (IsDBCS1(c)) {				/* DBC 1st byte? */
   1270          			d = p[si++];				/* Get 2nd byte */
   1271          			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
   1272          				return FR_INVALID_NAME;
   1273          			sfn[i++] = c;
   1274          			sfn[i++] = d;
   1275          		} else {						/* Single byte code */
   1276          			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
   1277          				return FR_INVALID_NAME;
   1278          			if (IsUpper(c)) {			/* ASCII large capital? */
   1279          				b |= 2;
   1280          			} else {
   1281          				if (IsLower(c)) {		/* ASCII small capital? */
   1282          					b |= 1; c -= 0x20;
   1283          				}
   1284          			}
   1285          			sfn[i++] = c;
   1286          		}
   1287          	}
   1288          	*path = &p[si];						/* Return pointer to the next segment */
   1289          	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   1290          
   1291          	if (!i) return FR_INVALID_NAME;		/* Reject null string */
   1292          	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
   1293          
   1294          	if (ni == 8) b <<= 2;
   1295          	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
   1296          	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
   1297          
   1298          	sfn[NS] = c;		/* Store NT flag, File name is created */
   1299          
   1300          	return FR_OK;
   1301          #endif
   1302          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??cvt:
   \   00000000                      ; Initializer data, 128 bytes
   \   00000000   808182838485       DC8 128, 129, 130, 131, 132, 133, 134, 135, 136, 137
   \              86878889    
   \   0000000A   8A8B8C8D8E8F       DC8 138, 139, 140, 141, 142, 143, 144, 145, 146, 147
   \              90919293    
   \   00000014   949596979899       DC8 148, 149, 150, 151, 152, 153, 173, 155, 140, 157
   \              AD9B8C9D    
   \   0000001E   AE9FA021A2A3       DC8 174, 159, 160, 33, 162, 163, 164, 165, 166, 167
   \              A4A5A6A7    
   \   00000028   A8A9AAABACAD       DC8 168, 169, 170, 171, 172, 173, 174, 175, 176, 177
   \              AEAFB0B1    
   \   00000032   B2B3B4B5B6B7       DC8 178, 179, 180, 181, 182, 183, 184, 185, 186, 187
   \              B8B9BABB    
   \   0000003C   BCBDBEBFC0C1       DC8 188, 189, 190, 191, 192, 193, 194, 195, 196, 197
   \              C2C3C4C5    
   \   00000046   C6C7C8C9CACB       DC8 198, 199, 200, 201, 202, 203, 204, 205, 206, 207
   \              CCCDCECF    
   \   00000050   D0D1D2D3D4D5       DC8 208, 209, 210, 211, 212, 213, 214, 215, 216, 217
   \              D6D7D8D9    
   \   0000005A   DADBDCDDDEDF       DC8 218, 219, 220, 221, 222, 223, 192, 193, 194, 195
   \              C0C1C2C3    
   \   00000064   C4C5C6C7C8C9       DC8 196, 197, 198, 199, 200, 201, 202, 203, 204, 205
   \              CACBCCCD    
   \   0000006E   CECFD0D1D2D3       DC8 206, 207, 208, 209, 210, 211, 212, 213, 214, 247
   \              D4D5D6F7    
   \   00000078   D8D9DADBDCDD       DC8 216, 217, 218, 219, 220, 221, 222, 159
   \              DE9F        
   1303          
   1304          
   1305          
   1306          
   1307          /*-----------------------------------------------------------------------*/
   1308          /* Get file information from directory entry                             */
   1309          /*-----------------------------------------------------------------------*/
   1310          #if _FS_MINIMIZE <= 1

   \                                 In section .text, align 2, keep-with-next
   1311          static
   1312          void get_fileinfo (		/* No return code */
   1313          	DIR *dj,			/* Pointer to the directory object */
   1314          	FILINFO *fno	 	/* Pointer to the file information to be filled */
   1315          )
   1316          {
   \                     get_fileinfo:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0C00               MOVS     R4,R1
   1317          	int i;
   1318          	BYTE c, nt, *dir;
   1319          	char *p;
   1320          
   1321          
   1322          	p = fno->fname;
   \   00000004   04F20901           ADDW     R1,R4,#+9
   1323          	if (dj->sect) {
   \   00000008   0269               LDR      R2,[R0, #+16]
   \   0000000A   002A               CMP      R2,#+0
   \   0000000C   48D0               BEQ.N    ??get_fileinfo_0
   1324          		dir = dj->dir;
   \   0000000E   4269               LDR      R2,[R0, #+20]
   1325          		nt = dir[DIR_NTres];		/* NT flag */
   \   00000010   167B               LDRB     R6,[R2, #+12]
   1326          		for (i = 0; i < 8; i++) {	/* Copy name body */
   \   00000012   0025               MOVS     R5,#+0
   \   00000014   0EE0               B.N      ??get_fileinfo_1
   1327          			c = dir[i];
   1328          			if (c == ' ') break;
   1329          			if (c == 0x05) c = 0xE5;
   \                     ??get_fileinfo_2:
   \   00000016   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000018   052B               CMP      R3,#+5
   \   0000001A   00D1               BNE.N    ??get_fileinfo_3
   \   0000001C   E523               MOVS     R3,#+229
   1330          			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
   \                     ??get_fileinfo_3:
   \   0000001E   3707               LSLS     R7,R6,#+28
   \   00000020   05D5               BPL.N    ??get_fileinfo_4
   \   00000022   B3F14107           SUBS     R7,R3,#+65
   \   00000026   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000028   1A2F               CMP      R7,#+26
   \   0000002A   00D2               BCS.N    ??get_fileinfo_4
   \   0000002C   2033               ADDS     R3,R3,#+32
   1331          			*p++ = c;
   \                     ??get_fileinfo_4:
   \   0000002E   0B70               STRB     R3,[R1, #+0]
   \   00000030   491C               ADDS     R1,R1,#+1
   \   00000032   6D1C               ADDS     R5,R5,#+1
   \                     ??get_fileinfo_1:
   \   00000034   082D               CMP      R5,#+8
   \   00000036   03DA               BGE.N    ??get_fileinfo_5
   \   00000038   AB5C               LDRB     R3,[R5, R2]
   \   0000003A   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000003C   202B               CMP      R3,#+32
   \   0000003E   EAD1               BNE.N    ??get_fileinfo_2
   1332          		}
   1333          		if (dir[8] != ' ') {		/* Copy name extension */
   \                     ??get_fileinfo_5:
   \   00000040   137A               LDRB     R3,[R2, #+8]
   \   00000042   202B               CMP      R3,#+32
   \   00000044   15D0               BEQ.N    ??get_fileinfo_6
   1334          			*p++ = '.';
   \   00000046   2E23               MOVS     R3,#+46
   \   00000048   0B70               STRB     R3,[R1, #+0]
   \   0000004A   491C               ADDS     R1,R1,#+1
   1335          			for (i = 8; i < 11; i++) {
   \   0000004C   0825               MOVS     R5,#+8
   \   0000004E   0AE0               B.N      ??get_fileinfo_7
   1336          				c = dir[i];
   1337          				if (c == ' ') break;
   1338          				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
   \                     ??get_fileinfo_8:
   \   00000050   F706               LSLS     R7,R6,#+27
   \   00000052   05D5               BPL.N    ??get_fileinfo_9
   \   00000054   B3F14107           SUBS     R7,R3,#+65
   \   00000058   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000005A   1A2F               CMP      R7,#+26
   \   0000005C   00D2               BCS.N    ??get_fileinfo_9
   \   0000005E   2033               ADDS     R3,R3,#+32
   1339          				*p++ = c;
   \                     ??get_fileinfo_9:
   \   00000060   0B70               STRB     R3,[R1, #+0]
   \   00000062   491C               ADDS     R1,R1,#+1
   \   00000064   6D1C               ADDS     R5,R5,#+1
   \                     ??get_fileinfo_7:
   \   00000066   0B2D               CMP      R5,#+11
   \   00000068   03DA               BGE.N    ??get_fileinfo_6
   \   0000006A   AB5C               LDRB     R3,[R5, R2]
   \   0000006C   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000006E   202B               CMP      R3,#+32
   \   00000070   EED1               BNE.N    ??get_fileinfo_8
   1340          			}
   1341          		}
   1342          		fno->fattrib = dir[DIR_Attr];				/* Attribute */
   \                     ??get_fileinfo_6:
   \   00000072   D37A               LDRB     R3,[R2, #+11]
   \   00000074   2372               STRB     R3,[R4, #+8]
   1343          		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
   \   00000076   D37F               LDRB     R3,[R2, #+31]
   \   00000078   957F               LDRB     R5,[R2, #+30]
   \   0000007A   2D04               LSLS     R5,R5,#+16
   \   0000007C   55EA0363           ORRS     R3,R5,R3, LSL #+24
   \   00000080   557F               LDRB     R5,[R2, #+29]
   \   00000082   53EA0523           ORRS     R3,R3,R5, LSL #+8
   \   00000086   157F               LDRB     R5,[R2, #+28]
   \   00000088   2B43               ORRS     R3,R5,R3
   \   0000008A   2360               STR      R3,[R4, #+0]
   1344          		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
   \   0000008C   537E               LDRB     R3,[R2, #+25]
   \   0000008E   157E               LDRB     R5,[R2, #+24]
   \   00000090   55EA0323           ORRS     R3,R5,R3, LSL #+8
   \   00000094   A380               STRH     R3,[R4, #+4]
   1345          		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
   \   00000096   D37D               LDRB     R3,[R2, #+23]
   \   00000098   927D               LDRB     R2,[R2, #+22]
   \   0000009A   52EA0322           ORRS     R2,R2,R3, LSL #+8
   \   0000009E   E280               STRH     R2,[R4, #+6]
   1346          	}
   1347          	*p = 0;
   \                     ??get_fileinfo_0:
   \   000000A0   0022               MOVS     R2,#+0
   \   000000A2   0A70               STRB     R2,[R1, #+0]
   1348          
   1349          #if _USE_LFN
   1350          	if (fno->lfname) {
   \   000000A4   A169               LDR      R1,[R4, #+24]
   \   000000A6   0029               CMP      R1,#+0
   \   000000A8   23D0               BEQ.N    ??get_fileinfo_10
   1351          		XCHAR *tp = fno->lfname;
   \   000000AA   A669               LDR      R6,[R4, #+24]
   1352          		WCHAR w, *lfn;
   1353          
   1354          		i = 0;
   \   000000AC   0025               MOVS     R5,#+0
   1355          		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
   \   000000AE   0169               LDR      R1,[R0, #+16]
   \   000000B0   0029               CMP      R1,#+0
   \   000000B2   1CD0               BEQ.N    ??get_fileinfo_11
   \   000000B4   018C               LDRH     R1,[R0, #+32]
   \   000000B6   4FF6FF72           MOVW     R2,#+65535
   \   000000BA   9142               CMP      R1,R2
   \   000000BC   17D0               BEQ.N    ??get_fileinfo_11
   1356          			lfn = dj->lfn;
   \   000000BE   C769               LDR      R7,[R0, #+28]
   \   000000C0   01E0               B.N      ??get_fileinfo_12
   1357          			while ((w = *lfn++) != 0) {			/* Get an LFN char */
   1358          #if !_LFN_UNICODE
   1359          				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
   1360          				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
   1361          				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC */
   1362          					tp[i++] = (XCHAR)(w >> 8);
   1363          #endif
   1364          				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overrun, no LFN */
   1365          				tp[i++] = (XCHAR)w;
   \                     ??get_fileinfo_13:
   \   000000C2   A855               STRB     R0,[R5, R6]
   \   000000C4   6D1C               ADDS     R5,R5,#+1
   \                     ??get_fileinfo_12:
   \   000000C6   3888               LDRH     R0,[R7, #+0]
   \   000000C8   BF1C               ADDS     R7,R7,#+2
   \   000000CA   0100               MOVS     R1,R0
   \   000000CC   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000CE   0029               CMP      R1,#+0
   \   000000D0   0DD0               BEQ.N    ??get_fileinfo_11
   \   000000D2   0021               MOVS     R1,#+0
   \   000000D4   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000D6   ........           BL       ff_convert
   \   000000DA   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000DC   0028               CMP      R0,#+0
   \   000000DE   01D1               BNE.N    ??get_fileinfo_14
   \   000000E0   0025               MOVS     R5,#+0
   \   000000E2   04E0               B.N      ??get_fileinfo_11
   \                     ??get_fileinfo_14:
   \   000000E4   E169               LDR      R1,[R4, #+28]
   \   000000E6   491E               SUBS     R1,R1,#+1
   \   000000E8   8D42               CMP      R5,R1
   \   000000EA   EADB               BLT.N    ??get_fileinfo_13
   \   000000EC   0025               MOVS     R5,#+0
   1366          			}
   1367          		}
   1368          		tp[i] = 0;	/* Terminator */
   \                     ??get_fileinfo_11:
   \   000000EE   0020               MOVS     R0,#+0
   \   000000F0   A855               STRB     R0,[R5, R6]
   1369          	}
   1370          #endif
   1371          }
   \                     ??get_fileinfo_10:
   \   000000F2   F1BD               POP      {R0,R4-R7,PC}    ;; return
   1372          #endif /* _FS_MINIMIZE <= 1 */
   1373          
   1374          
   1375          
   1376          
   1377          /*-----------------------------------------------------------------------*/
   1378          /* Follow a file path                                                    */
   1379          /*-----------------------------------------------------------------------*/
   1380          

   \                                 In section .text, align 2, keep-with-next
   1381          static
   1382          FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
   1383          	DIR *dj,			/* Directory object to return last directory and found object */
   1384          	const XCHAR *path	/* Full-path string to find a file or directory */
   1385          )
   1386          {
   \                     follow_path:
   \   00000000   13B5               PUSH     {R0,R1,R4,LR}
   \   00000002   0400               MOVS     R4,R0
   1387          	FRESULT res;
   1388          	BYTE *dir, last;
   1389          
   1390          	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
   1391          #if _FS_RPATH
   1392          	if (*path == '/' || *path == '\\') { /* There is a heading separator */
   1393          		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
   1394          	} else {							/* No heading separator */
   1395          		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
   1396          	}
   1397          #else
   1398          	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   \   00000004   0198               LDR      R0,[SP, #+4]
   \   00000006   0078               LDRB     R0,[R0, #+0]
   \   00000008   2F28               CMP      R0,#+47
   \   0000000A   03D0               BEQ.N    ??follow_path_0
   \   0000000C   0198               LDR      R0,[SP, #+4]
   \   0000000E   0078               LDRB     R0,[R0, #+0]
   \   00000010   5C28               CMP      R0,#+92
   \   00000012   02D1               BNE.N    ??follow_path_1
   1399          		path++;
   \                     ??follow_path_0:
   \   00000014   0198               LDR      R0,[SP, #+4]
   \   00000016   401C               ADDS     R0,R0,#+1
   \   00000018   0190               STR      R0,[SP, #+4]
   1400          	dj->sclust = 0;						/* Start from the root dir */
   \                     ??follow_path_1:
   \   0000001A   0020               MOVS     R0,#+0
   \   0000001C   A060               STR      R0,[R4, #+8]
   1401          #endif
   1402          
   1403          	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
   \   0000001E   0198               LDR      R0,[SP, #+4]
   \   00000020   0078               LDRB     R0,[R0, #+0]
   \   00000022   2028               CMP      R0,#+32
   \   00000024   13D2               BCS.N    ??follow_path_2
   1404          		res = dir_seek(dj, 0);
   \   00000026   0021               MOVS     R1,#+0
   \   00000028   2000               MOVS     R0,R4
   \   0000002A   ........           BL       dir_seek
   1405          		dj->dir = NULL;
   \   0000002E   0021               MOVS     R1,#+0
   \   00000030   6161               STR      R1,[R4, #+20]
   \   00000032   2DE0               B.N      ??follow_path_3
   1406          
   1407          	} else {							/* Follow path */
   1408          		for (;;) {
   1409          			res = create_name(dj, &path);	/* Get a segment */
   1410          			if (res != FR_OK) break;
   1411          			res = dir_find(dj);				/* Find it */
   1412          			last = *(dj->fn+NS) & NS_LAST;
   1413          			if (res != FR_OK) {				/* Could not find the object */
   1414          				if (res == FR_NO_FILE && !last)
   1415          					res = FR_NO_PATH;
   1416          				break;
   1417          			}
   1418          			if (last) break;				/* Last segment match. Function completed. */
   1419          			dir = dj->dir;					/* There is next segment. Follow the sub directory */
   1420          			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
   1421          				res = FR_NO_PATH; break;
   1422          			}
   1423          			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
   \                     ??follow_path_4:
   \   00000034   417D               LDRB     R1,[R0, #+21]
   \   00000036   027D               LDRB     R2,[R0, #+20]
   \   00000038   52EA0121           ORRS     R1,R2,R1, LSL #+8
   \   0000003C   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000003E   C27E               LDRB     R2,[R0, #+27]
   \   00000040   807E               LDRB     R0,[R0, #+26]
   \   00000042   50EA0220           ORRS     R0,R0,R2, LSL #+8
   \   00000046   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000048   50EA0140           ORRS     R0,R0,R1, LSL #+16
   \   0000004C   A060               STR      R0,[R4, #+8]
   \                     ??follow_path_2:
   \   0000004E   01A9               ADD      R1,SP,#+4
   \   00000050   2000               MOVS     R0,R4
   \   00000052   ........           BL       create_name
   \   00000056   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000058   0028               CMP      R0,#+0
   \   0000005A   19D1               BNE.N    ??follow_path_3
   \                     ??follow_path_5:
   \   0000005C   2000               MOVS     R0,R4
   \   0000005E   ........           BL       dir_find
   \   00000062   A169               LDR      R1,[R4, #+24]
   \   00000064   C97A               LDRB     R1,[R1, #+11]
   \   00000066   11F00401           ANDS     R1,R1,#0x4
   \   0000006A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006C   0028               CMP      R0,#+0
   \   0000006E   07D0               BEQ.N    ??follow_path_6
   \   00000070   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000072   0428               CMP      R0,#+4
   \   00000074   03D1               BNE.N    ??follow_path_7
   \   00000076   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000078   0029               CMP      R1,#+0
   \   0000007A   00D1               BNE.N    ??follow_path_7
   \   0000007C   0520               MOVS     R0,#+5
   \                     ??follow_path_7:
   \   0000007E   07E0               B.N      ??follow_path_3
   \                     ??follow_path_6:
   \   00000080   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000082   0029               CMP      R1,#+0
   \   00000084   04D1               BNE.N    ??follow_path_3
   \                     ??follow_path_8:
   \   00000086   6069               LDR      R0,[R4, #+20]
   \   00000088   C17A               LDRB     R1,[R0, #+11]
   \   0000008A   C906               LSLS     R1,R1,#+27
   \   0000008C   D2D4               BMI.N    ??follow_path_4
   \   0000008E   0520               MOVS     R0,#+5
   1424          		}
   1425          	}
   1426          
   1427          	return res;
   \                     ??follow_path_3:
   \   00000090   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000092   16BD               POP      {R1,R2,R4,PC}    ;; return
   1428          }
   1429          
   1430          
   1431          
   1432          
   1433          /*-----------------------------------------------------------------------*/
   1434          /* Load boot record and check if it is an FAT boot record                */
   1435          /*-----------------------------------------------------------------------*/
   1436          

   \                                 In section .text, align 2, keep-with-next
   1437          static
   1438          BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
   1439          	FATFS *fs,	/* File system object */
   1440          	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
   1441          )
   1442          {
   \                     check_fs:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
   1443          	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   \   00000004   0123               MOVS     R3,#+1
   \   00000006   0A00               MOVS     R2,R1
   \   00000008   14F13001           ADDS     R1,R4,#+48
   \   0000000C   6078               LDRB     R0,[R4, #+1]
   \   0000000E   ........           BL       disk_read
   \   00000012   0028               CMP      R0,#+0
   \   00000014   01D0               BEQ.N    ??check_fs_0
   1444          		return 3;
   \   00000016   0320               MOVS     R0,#+3
   \   00000018   2DE0               B.N      ??check_fs_1
   1445          	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   \                     ??check_fs_0:
   \   0000001A   94F82F02           LDRB     R0,[R4, #+559]
   \   0000001E   94F82E12           LDRB     R1,[R4, #+558]
   \   00000022   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   00000026   4AF65521           MOVW     R1,#+43605
   \   0000002A   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   8842               CMP      R0,R1
   \   0000002E   01D0               BEQ.N    ??check_fs_2
   1446          		return 2;
   \   00000030   0220               MOVS     R0,#+2
   \   00000032   20E0               B.N      ??check_fs_1
   1447          
   1448          	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   \                     ??check_fs_2:
   \   00000034   94F86800           LDRB     R0,[R4, #+104]
   \   00000038   94F86710           LDRB     R1,[R4, #+103]
   \   0000003C   0902               LSLS     R1,R1,#+8
   \   0000003E   51EA0040           ORRS     R0,R1,R0, LSL #+16
   \   00000042   94F86610           LDRB     R1,[R4, #+102]
   \   00000046   0843               ORRS     R0,R1,R0
   \   00000048   ........           LDR.W    R1,??DataTable15  ;; 0x544146
   \   0000004C   8842               CMP      R0,R1
   \   0000004E   01D1               BNE.N    ??check_fs_3
   1449          		return 0;
   \   00000050   0020               MOVS     R0,#+0
   \   00000052   10E0               B.N      ??check_fs_1
   1450          	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   \                     ??check_fs_3:
   \   00000054   94F88400           LDRB     R0,[R4, #+132]
   \   00000058   94F88310           LDRB     R1,[R4, #+131]
   \   0000005C   0902               LSLS     R1,R1,#+8
   \   0000005E   51EA0040           ORRS     R0,R1,R0, LSL #+16
   \   00000062   94F88210           LDRB     R1,[R4, #+130]
   \   00000066   0843               ORRS     R0,R1,R0
   \   00000068   ........           LDR.W    R1,??DataTable15  ;; 0x544146
   \   0000006C   8842               CMP      R0,R1
   \   0000006E   01D1               BNE.N    ??check_fs_4
   1451          		return 0;
   \   00000070   0020               MOVS     R0,#+0
   \   00000072   00E0               B.N      ??check_fs_1
   1452          
   1453          	return 1;
   \                     ??check_fs_4:
   \   00000074   0120               MOVS     R0,#+1
   \                     ??check_fs_1:
   \   00000076   10BD               POP      {R4,PC}          ;; return
   1454          }
   1455          
   1456          
   1457          
   1458          
   1459          /*-----------------------------------------------------------------------*/
   1460          /* Make sure that the file system is valid                               */
   1461          /*-----------------------------------------------------------------------*/
   1462          
   1463          

   \                                 In section .text, align 2, keep-with-next
   1464          FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
   1465          	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
   1466          	FATFS **rfs,		/* Pointer to pointer to the found file system object */
   1467          	BYTE chk_wp			/* !=0: Check media write protection for write access */
   1468          )
   1469          {
   \                     chk_mounted:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   1500               MOVS     R5,R2
   1470          	BYTE fmt, *tbl;
   1471          	UINT vol;
   1472          	DSTATUS stat;
   1473          	DWORD bsect, fsize, tsect, mclst;
   1474          	const XCHAR *p = *path;
   \   00000004   0268               LDR      R2,[R0, #+0]
   1475          	FATFS *fs;
   1476          
   1477          	/* Get logical drive number from the path name */
   1478          	vol = p[0] - '0';				/* Is there a drive number? */
   \   00000006   1378               LDRB     R3,[R2, #+0]
   \   00000008   B3F13006           SUBS     R6,R3,#+48
   1479          	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
   \   0000000C   0A2E               CMP      R6,#+10
   \   0000000E   05D2               BCS.N    ??chk_mounted_0
   \   00000010   5378               LDRB     R3,[R2, #+1]
   \   00000012   3A2B               CMP      R3,#+58
   \   00000014   02D1               BNE.N    ??chk_mounted_0
   1480          		p += 2; *path = p;			/* Return pointer to the path name */
   \   00000016   921C               ADDS     R2,R2,#+2
   \   00000018   0260               STR      R2,[R0, #+0]
   \   0000001A   00E0               B.N      ??chk_mounted_1
   1481          	} else {						/* No drive number is given */
   1482          #if _FS_RPATH
   1483          		vol = Drive;				/* Use current drive */
   1484          #else
   1485          		vol = 0;					/* Use drive 0 */
   \                     ??chk_mounted_0:
   \   0000001C   0026               MOVS     R6,#+0
   1486          #endif
   1487          	}
   1488          
   1489          	/* Check if the logical drive is valid or not */
   1490          	if (vol >= _DRIVES) 			/* Is the drive number valid? */
   \                     ??chk_mounted_1:
   \   0000001E   002E               CMP      R6,#+0
   \   00000020   01D0               BEQ.N    ??chk_mounted_2
   1491          		return FR_INVALID_DRIVE;
   \   00000022   0B20               MOVS     R0,#+11
   \   00000024   51E1               B.N      ??chk_mounted_3
   1492          	*rfs = fs = FatFs[vol];			/* Return pointer to the corresponding file system object */
   \                     ??chk_mounted_2:
   \   00000026   ........           LDR.W    R0,??DataTable15_1
   \   0000002A   50F82640           LDR      R4,[R0, R6, LSL #+2]
   \   0000002E   0C60               STR      R4,[R1, #+0]
   1493          	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
   \   00000030   002C               CMP      R4,#+0
   \   00000032   01D1               BNE.N    ??chk_mounted_4
   \   00000034   0C20               MOVS     R0,#+12
   \   00000036   48E1               B.N      ??chk_mounted_3
   1494          
   1495          	ENTER_FF(fs);					/* Lock file system */
   1496          
   1497          	if (fs->fs_type) {				/* If the logical drive has been mounted */
   \                     ??chk_mounted_4:
   \   00000038   2078               LDRB     R0,[R4, #+0]
   \   0000003A   0028               CMP      R0,#+0
   \   0000003C   0DD0               BEQ.N    ??chk_mounted_5
   1498          		stat = disk_status(fs->drive);
   \   0000003E   6078               LDRB     R0,[R4, #+1]
   \   00000040   ........           BL       disk_status
   1499          		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
   \   00000044   C107               LSLS     R1,R0,#+31
   \   00000046   08D4               BMI.N    ??chk_mounted_5
   1500          #if !_FS_READONLY
   1501          			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   \   00000048   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004A   002D               CMP      R5,#+0
   \   0000004C   03D0               BEQ.N    ??chk_mounted_6
   \   0000004E   4007               LSLS     R0,R0,#+29
   \   00000050   01D5               BPL.N    ??chk_mounted_6
   1502          				return FR_WRITE_PROTECTED;
   \   00000052   0A20               MOVS     R0,#+10
   \   00000054   39E1               B.N      ??chk_mounted_3
   1503          #endif
   1504          			return FR_OK;			/* The file system object is valid */
   \                     ??chk_mounted_6:
   \   00000056   0020               MOVS     R0,#+0
   \   00000058   37E1               B.N      ??chk_mounted_3
   1505          		}
   1506          	}
   1507          
   1508          	/* The logical drive must be mounted. Following code attempts to mount the volume */
   1509          
   1510          	fs->fs_type = 0;					/* Clear the file system object */
   \                     ??chk_mounted_5:
   \   0000005A   0020               MOVS     R0,#+0
   \   0000005C   2070               STRB     R0,[R4, #+0]
   1511          	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
   \   0000005E   6670               STRB     R6,[R4, #+1]
   1512          	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
   \   00000060   6078               LDRB     R0,[R4, #+1]
   \   00000062   ........           BL       disk_initialize
   1513          	if (stat & STA_NOINIT)				/* Check if the drive is ready */
   \   00000066   C107               LSLS     R1,R0,#+31
   \   00000068   01D5               BPL.N    ??chk_mounted_7
   1514          		return FR_NOT_READY;
   \   0000006A   0320               MOVS     R0,#+3
   \   0000006C   2DE1               B.N      ??chk_mounted_3
   1515          #if _MAX_SS != 512						/* Get disk sector size if needed */
   1516          	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
   1517          		return FR_NO_FILESYSTEM;
   1518          #endif
   1519          #if !_FS_READONLY
   1520          	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   \                     ??chk_mounted_7:
   \   0000006E   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000070   002D               CMP      R5,#+0
   \   00000072   03D0               BEQ.N    ??chk_mounted_8
   \   00000074   4007               LSLS     R0,R0,#+29
   \   00000076   01D5               BPL.N    ??chk_mounted_8
   1521          		return FR_WRITE_PROTECTED;
   \   00000078   0A20               MOVS     R0,#+10
   \   0000007A   26E1               B.N      ??chk_mounted_3
   1522          #endif
   1523          	/* Search FAT partition on the drive */
   1524          	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
   \                     ??chk_mounted_8:
   \   0000007C   0025               MOVS     R5,#+0
   \   0000007E   2900               MOVS     R1,R5
   \   00000080   2000               MOVS     R0,R4
   \   00000082   ........           BL       check_fs
   \   00000086   0600               MOVS     R6,R0
   1525          	if (fmt == 1) {						/* Not an FAT boot record, it may be partitioned */
   \   00000088   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000008A   012E               CMP      R6,#+1
   \   0000008C   14D1               BNE.N    ??chk_mounted_9
   1526          		/* Check a partition listed in top of the partition table */
   1527          		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
   \   0000008E   04F2EE10           ADDW     R0,R4,#+494
   1528          		if (tbl[4]) {									/* Is the partition existing? */
   \   00000092   0179               LDRB     R1,[R0, #+4]
   \   00000094   0029               CMP      R1,#+0
   \   00000096   0FD0               BEQ.N    ??chk_mounted_9
   1529          			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
   \   00000098   C17A               LDRB     R1,[R0, #+11]
   \   0000009A   827A               LDRB     R2,[R0, #+10]
   \   0000009C   1204               LSLS     R2,R2,#+16
   \   0000009E   52EA0161           ORRS     R1,R2,R1, LSL #+24
   \   000000A2   427A               LDRB     R2,[R0, #+9]
   \   000000A4   51EA0221           ORRS     R1,R1,R2, LSL #+8
   \   000000A8   007A               LDRB     R0,[R0, #+8]
   \   000000AA   50EA0105           ORRS     R5,R0,R1
   1530          			fmt = check_fs(fs, bsect);					/* Check the partition */
   \   000000AE   2900               MOVS     R1,R5
   \   000000B0   2000               MOVS     R0,R4
   \   000000B2   ........           BL       check_fs
   \   000000B6   0600               MOVS     R6,R0
   1531          		}
   1532          	}
   1533          	if (fmt == 3) return FR_DISK_ERR;
   \                     ??chk_mounted_9:
   \   000000B8   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000BA   032E               CMP      R6,#+3
   \   000000BC   01D1               BNE.N    ??chk_mounted_10
   \   000000BE   0120               MOVS     R0,#+1
   \   000000C0   03E1               B.N      ??chk_mounted_3
   1534          	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT partition is found */
   \                     ??chk_mounted_10:
   \   000000C2   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000C4   002E               CMP      R6,#+0
   \   000000C6   0AD1               BNE.N    ??chk_mounted_11
   \   000000C8   94F83C00           LDRB     R0,[R4, #+60]
   \   000000CC   94F83B10           LDRB     R1,[R4, #+59]
   \   000000D0   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   000000D4   4FF40071           MOV      R1,#+512
   \   000000D8   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000DA   8842               CMP      R0,R1
   \   000000DC   01D0               BEQ.N    ??chk_mounted_12
   1535          		return FR_NO_FILESYSTEM;
   \                     ??chk_mounted_11:
   \   000000DE   0D20               MOVS     R0,#+13
   \   000000E0   F3E0               B.N      ??chk_mounted_3
   1536          
   1537          	/* Initialize the file system object */
   1538          	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   \                     ??chk_mounted_12:
   \   000000E2   94F84700           LDRB     R0,[R4, #+71]
   \   000000E6   94F84610           LDRB     R1,[R4, #+70]
   \   000000EA   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   000000EE   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   1539          	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
   \   000000F0   0028               CMP      R0,#+0
   \   000000F2   0DD1               BNE.N    ??chk_mounted_13
   \   000000F4   94F85700           LDRB     R0,[R4, #+87]
   \   000000F8   94F85610           LDRB     R1,[R4, #+86]
   \   000000FC   0904               LSLS     R1,R1,#+16
   \   000000FE   51EA0060           ORRS     R0,R1,R0, LSL #+24
   \   00000102   94F85510           LDRB     R1,[R4, #+85]
   \   00000106   50EA0120           ORRS     R0,R0,R1, LSL #+8
   \   0000010A   94F85410           LDRB     R1,[R4, #+84]
   \   0000010E   0843               ORRS     R0,R1,R0
   1540          	fs->sects_fat = fsize;
   \                     ??chk_mounted_13:
   \   00000110   A061               STR      R0,[R4, #+24]
   1541          	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
   \   00000112   94F84010           LDRB     R1,[R4, #+64]
   \   00000116   E170               STRB     R1,[R4, #+3]
   1542          	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
   \   00000118   E178               LDRB     R1,[R4, #+3]
   \   0000011A   4843               MULS     R0,R1,R0
   1543          	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
   \   0000011C   94F83F10           LDRB     R1,[R4, #+63]
   \   00000120   94F83E20           LDRB     R2,[R4, #+62]
   \   00000124   52EA0121           ORRS     R1,R2,R1, LSL #+8
   \   00000128   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000012A   4919               ADDS     R1,R1,R5
   \   0000012C   2162               STR      R1,[R4, #+32]
   1544          	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
   \   0000012E   94F83D10           LDRB     R1,[R4, #+61]
   \   00000132   A170               STRB     R1,[R4, #+2]
   1545          	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   \   00000134   94F84210           LDRB     R1,[R4, #+66]
   \   00000138   94F84120           LDRB     R2,[R4, #+65]
   \   0000013C   52EA0121           ORRS     R1,R2,R1, LSL #+8
   \   00000140   2181               STRH     R1,[R4, #+8]
   1546          	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   \   00000142   94F84410           LDRB     R1,[R4, #+68]
   \   00000146   94F84320           LDRB     R2,[R4, #+67]
   \   0000014A   52EA0121           ORRS     R1,R2,R1, LSL #+8
   \   0000014E   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   1547          	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   \   00000150   0029               CMP      R1,#+0
   \   00000152   0DD1               BNE.N    ??chk_mounted_14
   \   00000154   94F85310           LDRB     R1,[R4, #+83]
   \   00000158   94F85220           LDRB     R2,[R4, #+82]
   \   0000015C   1204               LSLS     R2,R2,#+16
   \   0000015E   52EA0161           ORRS     R1,R2,R1, LSL #+24
   \   00000162   94F85120           LDRB     R2,[R4, #+81]
   \   00000166   51EA0221           ORRS     R1,R1,R2, LSL #+8
   \   0000016A   94F85020           LDRB     R2,[R4, #+80]
   \   0000016E   1143               ORRS     R1,R2,R1
   1548          	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
   1549          		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
   1550          		) / fs->csize + 2;
   \                     ??chk_mounted_14:
   \   00000170   94F83F20           LDRB     R2,[R4, #+63]
   \   00000174   94F83E30           LDRB     R3,[R4, #+62]
   \   00000178   53EA0222           ORRS     R2,R3,R2, LSL #+8
   \   0000017C   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000017E   891A               SUBS     R1,R1,R2
   \   00000180   091A               SUBS     R1,R1,R0
   \   00000182   2289               LDRH     R2,[R4, #+8]
   \   00000184   B1EB1211           SUBS     R1,R1,R2, LSR #+4
   \   00000188   A278               LDRB     R2,[R4, #+2]
   \   0000018A   B1FBF2F1           UDIV     R1,R1,R2
   \   0000018E   891C               ADDS     R1,R1,#+2
   \   00000190   E161               STR      R1,[R4, #+28]
   1551          
   1552          	fmt = FS_FAT12;										/* Determine the FAT sub type */
   \   00000192   0126               MOVS     R6,#+1
   1553          	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
   \   00000194   40F6F772           MOVW     R2,#+4087
   \   00000198   9142               CMP      R1,R2
   \   0000019A   00D3               BCC.N    ??chk_mounted_15
   \   0000019C   0226               MOVS     R6,#+2
   1554          	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
   \                     ??chk_mounted_15:
   \   0000019E   4FF6F772           MOVW     R2,#+65527
   \   000001A2   9142               CMP      R1,R2
   \   000001A4   00D3               BCC.N    ??chk_mounted_16
   \   000001A6   0326               MOVS     R6,#+3
   1555          
   1556          	if (fmt == FS_FAT32)
   \                     ??chk_mounted_16:
   \   000001A8   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001AA   032E               CMP      R6,#+3
   \   000001AC   0FD1               BNE.N    ??chk_mounted_17
   1557          		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   \   000001AE   94F85F10           LDRB     R1,[R4, #+95]
   \   000001B2   94F85E20           LDRB     R2,[R4, #+94]
   \   000001B6   1204               LSLS     R2,R2,#+16
   \   000001B8   52EA0161           ORRS     R1,R2,R1, LSL #+24
   \   000001BC   94F85D20           LDRB     R2,[R4, #+93]
   \   000001C0   51EA0221           ORRS     R1,R1,R2, LSL #+8
   \   000001C4   94F85C20           LDRB     R2,[R4, #+92]
   \   000001C8   1143               ORRS     R1,R2,R1
   \   000001CA   6162               STR      R1,[R4, #+36]
   \   000001CC   02E0               B.N      ??chk_mounted_18
   1558          	else
   1559          		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
   \                     ??chk_mounted_17:
   \   000001CE   216A               LDR      R1,[R4, #+32]
   \   000001D0   4118               ADDS     R1,R0,R1
   \   000001D2   6162               STR      R1,[R4, #+36]
   1560          	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
   \                     ??chk_mounted_18:
   \   000001D4   216A               LDR      R1,[R4, #+32]
   \   000001D6   4018               ADDS     R0,R0,R1
   \   000001D8   2189               LDRH     R1,[R4, #+8]
   \   000001DA   10EB1110           ADDS     R0,R0,R1, LSR #+4
   \   000001DE   A062               STR      R0,[R4, #+40]
   1561          
   1562          #if !_FS_READONLY
   1563          	/* Initialize allocation information */
   1564          	fs->free_clust = 0xFFFFFFFF;
   \   000001E0   5FF0FF30           MOVS     R0,#-1
   \   000001E4   2061               STR      R0,[R4, #+16]
   1565          	fs->wflag = 0;
   \   000001E6   0020               MOVS     R0,#+0
   \   000001E8   2071               STRB     R0,[R4, #+4]
   1566          	/* Get fsinfo if needed */
   1567          	if (fmt == FS_FAT32) {
   \   000001EA   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001EC   032E               CMP      R6,#+3
   \   000001EE   60D1               BNE.N    ??chk_mounted_19
   1568          	 	fs->fsi_flag = 0;
   \   000001F0   0020               MOVS     R0,#+0
   \   000001F2   6071               STRB     R0,[R4, #+5]
   1569          		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   \   000001F4   94F86100           LDRB     R0,[R4, #+97]
   \   000001F8   94F86010           LDRB     R1,[R4, #+96]
   \   000001FC   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   00000200   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000202   4019               ADDS     R0,R0,R5
   \   00000204   6061               STR      R0,[R4, #+20]
   1570          		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
   1571          			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   1572          			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   1573          			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   \   00000206   0123               MOVS     R3,#+1
   \   00000208   6269               LDR      R2,[R4, #+20]
   \   0000020A   14F13001           ADDS     R1,R4,#+48
   \   0000020E   6078               LDRB     R0,[R4, #+1]
   \   00000210   ........           BL       disk_read
   \   00000214   0028               CMP      R0,#+0
   \   00000216   4CD1               BNE.N    ??chk_mounted_19
   \   00000218   94F82F02           LDRB     R0,[R4, #+559]
   \   0000021C   94F82E12           LDRB     R1,[R4, #+558]
   \   00000220   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   00000224   4AF65521           MOVW     R1,#+43605
   \   00000228   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000022A   8842               CMP      R0,R1
   \   0000022C   41D1               BNE.N    ??chk_mounted_19
   \   0000022E   94F83300           LDRB     R0,[R4, #+51]
   \   00000232   94F83210           LDRB     R1,[R4, #+50]
   \   00000236   0904               LSLS     R1,R1,#+16
   \   00000238   51EA0060           ORRS     R0,R1,R0, LSL #+24
   \   0000023C   94F83110           LDRB     R1,[R4, #+49]
   \   00000240   50EA0120           ORRS     R0,R0,R1, LSL #+8
   \   00000244   94F83010           LDRB     R1,[R4, #+48]
   \   00000248   0843               ORRS     R0,R1,R0
   \   0000024A   ........           LDR.W    R1,??DataTable16  ;; 0x41615252
   \   0000024E   8842               CMP      R0,R1
   \   00000250   2FD1               BNE.N    ??chk_mounted_19
   \   00000252   94F81702           LDRB     R0,[R4, #+535]
   \   00000256   94F81612           LDRB     R1,[R4, #+534]
   \   0000025A   0904               LSLS     R1,R1,#+16
   \   0000025C   51EA0060           ORRS     R0,R1,R0, LSL #+24
   \   00000260   94F81512           LDRB     R1,[R4, #+533]
   \   00000264   50EA0120           ORRS     R0,R0,R1, LSL #+8
   \   00000268   94F81412           LDRB     R1,[R4, #+532]
   \   0000026C   0843               ORRS     R0,R1,R0
   \   0000026E   ........           LDR.W    R1,??DataTable16_1  ;; 0x61417272
   \   00000272   8842               CMP      R0,R1
   \   00000274   1DD1               BNE.N    ??chk_mounted_19
   1574          			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   \   00000276   94F81F02           LDRB     R0,[R4, #+543]
   \   0000027A   94F81E12           LDRB     R1,[R4, #+542]
   \   0000027E   0904               LSLS     R1,R1,#+16
   \   00000280   51EA0060           ORRS     R0,R1,R0, LSL #+24
   \   00000284   94F81D12           LDRB     R1,[R4, #+541]
   \   00000288   50EA0120           ORRS     R0,R0,R1, LSL #+8
   \   0000028C   94F81C12           LDRB     R1,[R4, #+540]
   \   00000290   0843               ORRS     R0,R1,R0
   \   00000292   E060               STR      R0,[R4, #+12]
   1575          			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   \   00000294   94F81B02           LDRB     R0,[R4, #+539]
   \   00000298   94F81A12           LDRB     R1,[R4, #+538]
   \   0000029C   0904               LSLS     R1,R1,#+16
   \   0000029E   51EA0060           ORRS     R0,R1,R0, LSL #+24
   \   000002A2   94F81912           LDRB     R1,[R4, #+537]
   \   000002A6   50EA0120           ORRS     R0,R0,R1, LSL #+8
   \   000002AA   94F81812           LDRB     R1,[R4, #+536]
   \   000002AE   0843               ORRS     R0,R1,R0
   \   000002B0   2061               STR      R0,[R4, #+16]
   1576          		}
   1577          	}
   1578          #endif
   1579          	fs->fs_type = fmt;		/* FAT sub-type */
   \                     ??chk_mounted_19:
   \   000002B2   2670               STRB     R6,[R4, #+0]
   1580          	fs->winsect = 0;		/* Invalidate sector cache */
   \   000002B4   0020               MOVS     R0,#+0
   \   000002B6   E062               STR      R0,[R4, #+44]
   1581          #if _FS_RPATH
   1582          	fs->cdir = 0;			/* Current directory (root dir) */
   1583          #endif
   1584          	fs->id = ++Fsid;		/* File system mount ID */
   \   000002B8   ........           LDR.W    R0,??DataTable16_2
   \   000002BC   0088               LDRH     R0,[R0, #+0]
   \   000002BE   401C               ADDS     R0,R0,#+1
   \   000002C0   ........           LDR.W    R1,??DataTable16_2
   \   000002C4   0880               STRH     R0,[R1, #+0]
   \   000002C6   E080               STRH     R0,[R4, #+6]
   1585          
   1586          	return FR_OK;
   \   000002C8   0020               MOVS     R0,#+0
   \                     ??chk_mounted_3:
   \   000002CA   70BD               POP      {R4-R6,PC}       ;; return
   1587          }
   1588          
   1589          
   1590          
   1591          
   1592          /*-----------------------------------------------------------------------*/
   1593          /* Check if the file/dir object is valid or not                          */
   1594          /*-----------------------------------------------------------------------*/
   1595          

   \                                 In section .text, align 2, keep-with-next
   1596          static
   1597          FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
   1598          	FATFS *fs,		/* Pointer to the file system object */
   1599          	WORD id			/* Member id of the target object to be checked */
   1600          )
   1601          {
   \                     validate:
   \   00000000   80B5               PUSH     {R7,LR}
   1602          	if (!fs || !fs->fs_type || fs->id != id)
   \   00000002   0028               CMP      R0,#+0
   \   00000004   06D0               BEQ.N    ??validate_0
   \   00000006   0278               LDRB     R2,[R0, #+0]
   \   00000008   002A               CMP      R2,#+0
   \   0000000A   03D0               BEQ.N    ??validate_0
   \   0000000C   C288               LDRH     R2,[R0, #+6]
   \   0000000E   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   8A42               CMP      R2,R1
   \   00000012   01D0               BEQ.N    ??validate_1
   1603          		return FR_INVALID_OBJECT;
   \                     ??validate_0:
   \   00000014   0920               MOVS     R0,#+9
   \   00000016   07E0               B.N      ??validate_2
   1604          
   1605          	ENTER_FF(fs);		/* Lock file system */
   1606          
   1607          	if (disk_status(fs->drive) & STA_NOINIT)
   \                     ??validate_1:
   \   00000018   4078               LDRB     R0,[R0, #+1]
   \   0000001A   ........           BL       disk_status
   \   0000001E   C007               LSLS     R0,R0,#+31
   \   00000020   01D5               BPL.N    ??validate_3
   1608          		return FR_NOT_READY;
   \   00000022   0320               MOVS     R0,#+3
   \   00000024   00E0               B.N      ??validate_2
   1609          
   1610          	return FR_OK;
   \                     ??validate_3:
   \   00000026   0020               MOVS     R0,#+0
   \                     ??validate_2:
   \   00000028   02BD               POP      {R1,PC}          ;; return
   1611          }
   1612          
   1613          
   1614          
   1615          
   1616          /*--------------------------------------------------------------------------
   1617          
   1618             Public Functions
   1619          
   1620          --------------------------------------------------------------------------*/
   1621          
   1622          
   1623          
   1624          /*-----------------------------------------------------------------------*/
   1625          /* Mount/Unmount a Logical Drive                                         */
   1626          /*-----------------------------------------------------------------------*/
   1627          

   \                                 In section .text, align 2, keep-with-next
   1628          FRESULT f_mount (
   1629          	BYTE vol,		/* Logical drive number to be mounted/unmounted */
   1630          	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
   1631          )
   1632          {
   1633          	FATFS *rfs;
   1634          
   1635          
   1636          	if (vol >= _DRIVES)				/* Check if the drive number is valid */
   \                     f_mount:
   \   00000000   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0128               CMP      R0,#+1
   \   00000004   01D3               BCC.N    ??f_mount_0
   1637          		return FR_INVALID_DRIVE;
   \   00000006   0B20               MOVS     R0,#+11
   \   00000008   12E0               B.N      ??f_mount_1
   1638          	rfs = FatFs[vol];				/* Get current fs object */
   \                     ??f_mount_0:
   \   0000000A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   ........           LDR.W    R2,??DataTable15_1
   \   00000010   52F82020           LDR      R2,[R2, R0, LSL #+2]
   1639          
   1640          	if (rfs) {
   \   00000014   002A               CMP      R2,#+0
   \   00000016   01D0               BEQ.N    ??f_mount_2
   1641          #if _FS_REENTRANT					/* Discard sync object of the current volume */
   1642          		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
   1643          #endif
   1644          		rfs->fs_type = 0;			/* Clear old fs object */
   \   00000018   0023               MOVS     R3,#+0
   \   0000001A   1370               STRB     R3,[R2, #+0]
   1645          	}
   1646          
   1647          	if (fs) {
   \                     ??f_mount_2:
   \   0000001C   0029               CMP      R1,#+0
   \   0000001E   01D0               BEQ.N    ??f_mount_3
   1648          		fs->fs_type = 0;			/* Clear new fs object */
   \   00000020   0022               MOVS     R2,#+0
   \   00000022   0A70               STRB     R2,[R1, #+0]
   1649          #if _FS_REENTRANT					/* Create sync object for the new volume */
   1650          		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
   1651          #endif
   1652          	}
   1653          	FatFs[vol] = fs;				/* Register new fs object */
   \                     ??f_mount_3:
   \   00000024   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   ........           LDR.W    R2,??DataTable15_1
   \   0000002A   42F82010           STR      R1,[R2, R0, LSL #+2]
   1654          
   1655          	return FR_OK;
   \   0000002E   0020               MOVS     R0,#+0
   \                     ??f_mount_1:
   \   00000030   7047               BX       LR               ;; return
   1656          }
   1657          
   1658          
   1659          
   1660          
   1661          /*-----------------------------------------------------------------------*/
   1662          /* Open or Create a File                                                 */
   1663          /*-----------------------------------------------------------------------*/
   1664          

   \                                 In section .text, align 2, keep-with-next
   1665          FRESULT f_open (
   1666          	FIL *fp,			/* Pointer to the blank file object */
   1667          	const XCHAR *path,	/* Pointer to the file name */
   1668          	BYTE mode			/* Access mode and file open mode flags */
   1669          )
   1670          {
   \                     f_open:
   \   00000000   2DE9F241           PUSH     {R1,R4-R8,LR}
   \   00000004   8DB0               SUB      SP,SP,#+52
   \   00000006   0400               MOVS     R4,R0
   \   00000008   1500               MOVS     R5,R2
   1671          	FRESULT res;
   1672          	DIR dj;
   1673          	NAMEBUF(sfn, lfn);
   \   0000000A   ........           LDR.W    R6,??DataTable16_3
   1674          	BYTE *dir;
   1675          
   1676          
   1677          	fp->fs = NULL;		/* Clear file object */
   \   0000000E   0020               MOVS     R0,#+0
   \   00000010   2060               STR      R0,[R4, #+0]
   1678          #if !_FS_READONLY
   1679          	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
   \   00000012   15F01F05           ANDS     R5,R5,#0x1F
   1680          	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
   \   00000016   15F01E02           ANDS     R2,R5,#0x1E
   \   0000001A   00A9               ADD      R1,SP,#+0
   \   0000001C   0DA8               ADD      R0,SP,#+52
   \   0000001E   ........           BL       chk_mounted
   1681          #else
   1682          	mode &= FA_READ;
   1683          	res = chk_mounted(&path, &dj.fs, 0);
   1684          #endif
   1685          	if (res != FR_OK) LEAVE_FF(dj.fs, res);
   \   00000022   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0028               CMP      R0,#+0
   \   00000026   01D0               BEQ.N    ??f_open_0
   \   00000028   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   5DE0               B.N      ??f_open_1
   1686          	INITBUF(dj, sfn, lfn);
   \                     ??f_open_0:
   \   0000002C   09A8               ADD      R0,SP,#+36
   \   0000002E   0690               STR      R0,[SP, #+24]
   \   00000030   0796               STR      R6,[SP, #+28]
   1687          	res = follow_path(&dj, path);	/* Follow the file path */
   \   00000032   0D99               LDR      R1,[SP, #+52]
   \   00000034   00A8               ADD      R0,SP,#+0
   \   00000036   ........           BL       follow_path
   1688          
   1689          #if !_FS_READONLY
   1690          	/* Create or Open a file */
   1691          	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   \   0000003A   1C21               MOVS     R1,#+28
   \   0000003C   0D42               TST      R5,R1
   \   0000003E   00F09F80           BEQ.W    ??f_open_2
   1692          		DWORD ps, cl;
   1693          
   1694          		if (res != FR_OK) {			/* No file, create new */
   \   00000042   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0028               CMP      R0,#+0
   \   00000046   52D0               BEQ.N    ??f_open_3
   1695          			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
   \   00000048   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0428               CMP      R0,#+4
   \   0000004C   02D1               BNE.N    ??f_open_4
   1696          				res = dir_register(&dj);
   \   0000004E   00A8               ADD      R0,SP,#+0
   \   00000050   ........           BL       dir_register
   1697          			if (res != FR_OK) LEAVE_FF(dj.fs, res);
   \                     ??f_open_4:
   \   00000054   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0028               CMP      R0,#+0
   \   00000058   01D0               BEQ.N    ??f_open_5
   \   0000005A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005C   44E0               B.N      ??f_open_1
   1698          			mode |= FA_CREATE_ALWAYS;
   \                     ??f_open_5:
   \   0000005E   55F00805           ORRS     R5,R5,#0x8
   1699          			dir = dj.dir;			/* Created entry (SFN entry) */
   \   00000062   059E               LDR      R6,[SP, #+20]
   1700          		}
   1701          		else {						/* Any object is already existing */
   1702          			if (mode & FA_CREATE_NEW)			/* Cannot create new */
   1703          				LEAVE_FF(dj.fs, FR_EXIST);
   1704          			dir = dj.dir;
   1705          			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
   1706          				LEAVE_FF(dj.fs, FR_DENIED);
   1707          			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
   1708          				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
   1709          				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
   1710          				ST_WORD(dir+DIR_FstClusLO, 0);
   1711          				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
   1712          				dj.fs->wflag = 1;
   1713          				ps = dj.fs->winsect;			/* Remove the cluster chain */
   1714          				if (cl) {
   1715          					res = remove_chain(dj.fs, cl);
   1716          					if (res) LEAVE_FF(dj.fs, res);
   1717          					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   1718          				}
   1719          				res = move_window(dj.fs, ps);
   1720          				if (res != FR_OK) LEAVE_FF(dj.fs, res);
   1721          			}
   1722          		}
   1723          		if (mode & FA_CREATE_ALWAYS) {
   \                     ??f_open_6:
   \   00000064   2807               LSLS     R0,R5,#+28
   \   00000066   15D5               BPL.N    ??f_open_7
   1724          			dir[DIR_Attr] = 0;					/* Reset attribute */
   \   00000068   0020               MOVS     R0,#+0
   \   0000006A   F072               STRB     R0,[R6, #+11]
   1725          			ps = get_fattime();
   \   0000006C   ........           BL       get_fattime
   \   00000070   8046               MOV      R8,R0
   1726          			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
   \   00000072   86F80E80           STRB     R8,[R6, #+14]
   \   00000076   4046               MOV      R0,R8
   \   00000078   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000007A   000A               LSRS     R0,R0,#+8
   \   0000007C   F073               STRB     R0,[R6, #+15]
   \   0000007E   5FEA1840           LSRS     R0,R8,#+16
   \   00000082   3074               STRB     R0,[R6, #+16]
   \   00000084   5FEA1860           LSRS     R0,R8,#+24
   \   00000088   7074               STRB     R0,[R6, #+17]
   1727          			dj.fs->wflag = 1;
   \   0000008A   0098               LDR      R0,[SP, #+0]
   \   0000008C   0121               MOVS     R1,#+1
   \   0000008E   0171               STRB     R1,[R0, #+4]
   1728          			mode |= FA__WRITTEN;				/* Set file changed flag */
   \   00000090   55F02005           ORRS     R5,R5,#0x20
   1729          		}
   1730          	}
   1731          	/* Open an existing file */
   1732          	else {
   1733          #endif /* !_FS_READONLY */
   1734          		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
   1735          		dir = dj.dir;
   1736          		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
   1737          			LEAVE_FF(dj.fs, FR_NO_FILE);
   1738          #if !_FS_READONLY
   1739          		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   1740          			LEAVE_FF(dj.fs, FR_DENIED);
   1741          	}
   1742          	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
   \                     ??f_open_7:
   \   00000094   0098               LDR      R0,[SP, #+0]
   \   00000096   C06A               LDR      R0,[R0, #+44]
   \   00000098   E061               STR      R0,[R4, #+28]
   1743          	fp->dir_ptr = dj.dir;
   \   0000009A   0598               LDR      R0,[SP, #+20]
   \   0000009C   2062               STR      R0,[R4, #+32]
   1744          #endif
   1745          	fp->flag = mode;					/* File access mode */
   \   0000009E   A571               STRB     R5,[R4, #+6]
   1746          	fp->org_clust =						/* File start cluster */
   1747          		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
   \   000000A0   707D               LDRB     R0,[R6, #+21]
   \   000000A2   317D               LDRB     R1,[R6, #+20]
   \   000000A4   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   000000A8   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000AA   F17E               LDRB     R1,[R6, #+27]
   \   000000AC   B27E               LDRB     R2,[R6, #+26]
   \   000000AE   52EA0121           ORRS     R1,R2,R1, LSL #+8
   \   000000B2   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000B4   51EA0040           ORRS     R0,R1,R0, LSL #+16
   \   000000B8   2061               STR      R0,[R4, #+16]
   1748          	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   \   000000BA   F07F               LDRB     R0,[R6, #+31]
   \   000000BC   B17F               LDRB     R1,[R6, #+30]
   \   000000BE   0904               LSLS     R1,R1,#+16
   \   000000C0   51EA0060           ORRS     R0,R1,R0, LSL #+24
   \   000000C4   717F               LDRB     R1,[R6, #+29]
   \   000000C6   50EA0120           ORRS     R0,R0,R1, LSL #+8
   \   000000CA   317F               LDRB     R1,[R6, #+28]
   \   000000CC   0843               ORRS     R0,R1,R0
   \   000000CE   E060               STR      R0,[R4, #+12]
   1749          	fp->fptr = 0; fp->csect = 255;		/* File pointer */
   \   000000D0   0020               MOVS     R0,#+0
   \   000000D2   A060               STR      R0,[R4, #+8]
   \   000000D4   FF20               MOVS     R0,#+255
   \   000000D6   E071               STRB     R0,[R4, #+7]
   1750          	fp->dsect = 0;
   \   000000D8   0020               MOVS     R0,#+0
   \   000000DA   A061               STR      R0,[R4, #+24]
   1751          	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
   \   000000DC   0098               LDR      R0,[SP, #+0]
   \   000000DE   2060               STR      R0,[R4, #+0]
   \   000000E0   0098               LDR      R0,[SP, #+0]
   \   000000E2   C088               LDRH     R0,[R0, #+6]
   \   000000E4   A080               STRH     R0,[R4, #+4]
   1752          
   1753          	LEAVE_FF(dj.fs, FR_OK);
   \   000000E6   0020               MOVS     R0,#+0
   \                     ??f_open_1:
   \   000000E8   0EB0               ADD      SP,SP,#+56
   \   000000EA   BDE8F081           POP      {R4-R8,PC}       ;; return
   \                     ??f_open_3:
   \   000000EE   6807               LSLS     R0,R5,#+29
   \   000000F0   01D5               BPL.N    ??f_open_8
   \   000000F2   0820               MOVS     R0,#+8
   \   000000F4   F8E7               B.N      ??f_open_1
   \                     ??f_open_8:
   \   000000F6   059E               LDR      R6,[SP, #+20]
   \   000000F8   002E               CMP      R6,#+0
   \   000000FA   03D0               BEQ.N    ??f_open_9
   \   000000FC   F07A               LDRB     R0,[R6, #+11]
   \   000000FE   1121               MOVS     R1,#+17
   \   00000100   0842               TST      R0,R1
   \   00000102   01D0               BEQ.N    ??f_open_10
   \                     ??f_open_9:
   \   00000104   0720               MOVS     R0,#+7
   \   00000106   EFE7               B.N      ??f_open_1
   \                     ??f_open_10:
   \   00000108   2807               LSLS     R0,R5,#+28
   \   0000010A   ABD5               BPL.N    ??f_open_6
   \   0000010C   707D               LDRB     R0,[R6, #+21]
   \   0000010E   317D               LDRB     R1,[R6, #+20]
   \   00000110   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   00000114   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000116   F17E               LDRB     R1,[R6, #+27]
   \   00000118   B27E               LDRB     R2,[R6, #+26]
   \   0000011A   52EA0121           ORRS     R1,R2,R1, LSL #+8
   \   0000011E   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000120   51EA0047           ORRS     R7,R1,R0, LSL #+16
   \   00000124   0020               MOVS     R0,#+0
   \   00000126   3075               STRB     R0,[R6, #+20]
   \   00000128   0020               MOVS     R0,#+0
   \   0000012A   7075               STRB     R0,[R6, #+21]
   \   0000012C   0020               MOVS     R0,#+0
   \   0000012E   B076               STRB     R0,[R6, #+26]
   \   00000130   0020               MOVS     R0,#+0
   \   00000132   F076               STRB     R0,[R6, #+27]
   \   00000134   0020               MOVS     R0,#+0
   \   00000136   3077               STRB     R0,[R6, #+28]
   \   00000138   0020               MOVS     R0,#+0
   \   0000013A   7077               STRB     R0,[R6, #+29]
   \   0000013C   0020               MOVS     R0,#+0
   \   0000013E   B077               STRB     R0,[R6, #+30]
   \   00000140   0020               MOVS     R0,#+0
   \   00000142   F077               STRB     R0,[R6, #+31]
   \   00000144   0098               LDR      R0,[SP, #+0]
   \   00000146   0121               MOVS     R1,#+1
   \   00000148   0171               STRB     R1,[R0, #+4]
   \   0000014A   0098               LDR      R0,[SP, #+0]
   \   0000014C   D0F82C80           LDR      R8,[R0, #+44]
   \   00000150   002F               CMP      R7,#+0
   \   00000152   0BD0               BEQ.N    ??f_open_11
   \   00000154   3900               MOVS     R1,R7
   \   00000156   0098               LDR      R0,[SP, #+0]
   \   00000158   ........           BL       remove_chain
   \   0000015C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000015E   0028               CMP      R0,#+0
   \   00000160   01D0               BEQ.N    ??f_open_12
   \   00000162   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000164   C0E7               B.N      ??f_open_1
   \                     ??f_open_12:
   \   00000166   0098               LDR      R0,[SP, #+0]
   \   00000168   791E               SUBS     R1,R7,#+1
   \   0000016A   C160               STR      R1,[R0, #+12]
   \                     ??f_open_11:
   \   0000016C   4146               MOV      R1,R8
   \   0000016E   0098               LDR      R0,[SP, #+0]
   \   00000170   ........           BL       move_window
   \   00000174   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000176   0028               CMP      R0,#+0
   \   00000178   3FF474AF           BEQ.W    ??f_open_6
   \   0000017C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000017E   B3E7               B.N      ??f_open_1
   \                     ??f_open_2:
   \   00000180   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000182   0028               CMP      R0,#+0
   \   00000184   01D0               BEQ.N    ??f_open_13
   \   00000186   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000188   AEE7               B.N      ??f_open_1
   \                     ??f_open_13:
   \   0000018A   059E               LDR      R6,[SP, #+20]
   \   0000018C   002E               CMP      R6,#+0
   \   0000018E   02D0               BEQ.N    ??f_open_14
   \   00000190   F07A               LDRB     R0,[R6, #+11]
   \   00000192   C006               LSLS     R0,R0,#+27
   \   00000194   01D5               BPL.N    ??f_open_15
   \                     ??f_open_14:
   \   00000196   0420               MOVS     R0,#+4
   \   00000198   A6E7               B.N      ??f_open_1
   \                     ??f_open_15:
   \   0000019A   A807               LSLS     R0,R5,#+30
   \   0000019C   7FF57AAF           BPL.W    ??f_open_7
   \   000001A0   F07A               LDRB     R0,[R6, #+11]
   \   000001A2   C007               LSLS     R0,R0,#+31
   \   000001A4   7FF576AF           BPL.W    ??f_open_7
   \   000001A8   0720               MOVS     R0,#+7
   \   000001AA   9DE7               B.N      ??f_open_1
   1754          }
   1755          
   1756          
   1757          
   1758          
   1759          /*-----------------------------------------------------------------------*/
   1760          /* Read File                                                             */
   1761          /*-----------------------------------------------------------------------*/
   1762          

   \                                 In section .text, align 2, keep-with-next
   1763          FRESULT f_read (
   1764          	FIL *fp, 		/* Pointer to the file object */
   1765          	void *buff,		/* Pointer to data buffer */
   1766          	UINT btr,		/* Number of bytes to read */
   1767          	UINT *br		/* Pointer to number of bytes read */
   1768          )
   1769          {
   \                     f_read:
   \   00000000   2DE9F843           PUSH     {R3-R9,LR}
   \   00000004   0500               MOVS     R5,R0
   \   00000006   1600               MOVS     R6,R2
   \   00000008   1F00               MOVS     R7,R3
   1770          	FRESULT res;
   1771          	DWORD clst, sect, remain;
   1772          	UINT rcnt, cc;
   1773          	BYTE *rbuff = buff;
   \   0000000A   0C00               MOVS     R4,R1
   1774          
   1775          
   1776          	*br = 0;	/* Initialize bytes read */
   \   0000000C   0020               MOVS     R0,#+0
   \   0000000E   3860               STR      R0,[R7, #+0]
   1777          
   1778          	res = validate(fp->fs, fp->id);					/* Check validity of the object */
   \   00000010   A988               LDRH     R1,[R5, #+4]
   \   00000012   2868               LDR      R0,[R5, #+0]
   \   00000014   ........           BL       validate
   1779          	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   \   00000018   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0028               CMP      R0,#+0
   \   0000001C   01D0               BEQ.N    ??f_read_0
   \   0000001E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   E8E0               B.N      ??f_read_1
   1780          	if (fp->flag & FA__ERROR)						/* Check abort flag */
   \                     ??f_read_0:
   \   00000022   A879               LDRB     R0,[R5, #+6]
   \   00000024   0006               LSLS     R0,R0,#+24
   \   00000026   01D5               BPL.N    ??f_read_2
   1781          		LEAVE_FF(fp->fs, FR_INT_ERR);
   \   00000028   0220               MOVS     R0,#+2
   \   0000002A   E3E0               B.N      ??f_read_1
   1782          	if (!(fp->flag & FA_READ)) 						/* Check access mode */
   \                     ??f_read_2:
   \   0000002C   A879               LDRB     R0,[R5, #+6]
   \   0000002E   C007               LSLS     R0,R0,#+31
   \   00000030   01D4               BMI.N    ??f_read_3
   1783          		LEAVE_FF(fp->fs, FR_DENIED);
   \   00000032   0720               MOVS     R0,#+7
   \   00000034   DEE0               B.N      ??f_read_1
   1784          	remain = fp->fsize - fp->fptr;
   \                     ??f_read_3:
   \   00000036   E868               LDR      R0,[R5, #+12]
   \   00000038   A968               LDR      R1,[R5, #+8]
   \   0000003A   401A               SUBS     R0,R0,R1
   1785          	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
   \   0000003C   B042               CMP      R0,R6
   \   0000003E   2ED2               BCS.N    ??f_read_4
   \   00000040   0600               MOVS     R6,R0
   \   00000042   2CE0               B.N      ??f_read_4
   1786          
   1787          	for ( ;  btr;									/* Repeat until all data transferred */
   1788          		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
   1789          		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
   1790          			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
   1791          				clst = (fp->fptr == 0) ?			/* On the top of the file? */
   1792          					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
   1793          				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
   1794          				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   1795          				fp->curr_clust = clst;				/* Update current cluster */
   1796          				fp->csect = 0;						/* Reset sector offset in the cluster */
   1797          			}
   1798          			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
   1799          			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   1800          			sect += fp->csect;
   1801          			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
   1802          			if (cc) {								/* Read maximum contiguous sectors directly */
   1803          				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   1804          					cc = fp->fs->csize - fp->csect;
   1805          				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
   1806          					ABORT(fp->fs, FR_DISK_ERR);
   1807          #if !_FS_READONLY && _FS_MINIMIZE <= 2
   1808          #if _FS_TINY
   1809          				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
   1810          					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
   1811          #else
   1812          				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
   1813          					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
   1814          #endif
   1815          #endif
   1816          				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
   1817          				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
   1818          				continue;
   1819          			}
   1820          #if !_FS_TINY
   1821          #if !_FS_READONLY
   1822          			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
   1823          				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
   1824          					ABORT(fp->fs, FR_DISK_ERR);
   1825          				fp->flag &= ~FA__DIRTY;
   1826          			}
   1827          #endif
   1828          			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
   1829          				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
   1830          					ABORT(fp->fs, FR_DISK_ERR);
   1831          			}
   1832          #endif
   1833          			fp->dsect = sect;
   \                     ??f_read_5:
   \   00000044   C5F81880           STR      R8,[R5, #+24]
   1834          			fp->csect++;							/* Next sector address in the cluster */
   \   00000048   E879               LDRB     R0,[R5, #+7]
   \   0000004A   401C               ADDS     R0,R0,#+1
   \   0000004C   E871               STRB     R0,[R5, #+7]
   1835          		}
   1836          		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
   \                     ??f_read_6:
   \   0000004E   4FF40070           MOV      R0,#+512
   \   00000052   A968               LDR      R1,[R5, #+8]
   \   00000054   4FF40072           MOV      R2,#+512
   \   00000058   B1FBF2F3           UDIV     R3,R1,R2
   \   0000005C   03FB1213           MLS      R3,R3,R2,R1
   \   00000060   B0EB0308           SUBS     R8,R0,R3
   1837          		if (rcnt > btr) rcnt = btr;
   \   00000064   4645               CMP      R6,R8
   \   00000066   00D2               BCS.N    ??f_read_7
   \   00000068   B046               MOV      R8,R6
   1838          #if _FS_TINY
   1839          		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
   1840          			ABORT(fp->fs, FR_DISK_ERR);
   1841          		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
   1842          #else
   1843          		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
   \                     ??f_read_7:
   \   0000006A   4246               MOV      R2,R8
   \   0000006C   A868               LDR      R0,[R5, #+8]
   \   0000006E   4FF40071           MOV      R1,#+512
   \   00000072   B0FBF1F3           UDIV     R3,R0,R1
   \   00000076   03FB1103           MLS      R3,R3,R1,R0
   \   0000007A   5819               ADDS     R0,R3,R5
   \   0000007C   10F12401           ADDS     R1,R0,#+36
   \   00000080   2000               MOVS     R0,R4
   \   00000082   ........           BL       mem_cpy
   \                     ??f_read_8:
   \   00000086   18EB0404           ADDS     R4,R8,R4
   \   0000008A   A868               LDR      R0,[R5, #+8]
   \   0000008C   18EB0000           ADDS     R0,R8,R0
   \   00000090   A860               STR      R0,[R5, #+8]
   \   00000092   3868               LDR      R0,[R7, #+0]
   \   00000094   18EB0000           ADDS     R0,R8,R0
   \   00000098   3860               STR      R0,[R7, #+0]
   \   0000009A   B6EB0806           SUBS     R6,R6,R8
   \                     ??f_read_4:
   \   0000009E   002E               CMP      R6,#+0
   \   000000A0   00F0A780           BEQ.W    ??f_read_9
   \   000000A4   A868               LDR      R0,[R5, #+8]
   \   000000A6   4FF40071           MOV      R1,#+512
   \   000000AA   B0FBF1F2           UDIV     R2,R0,R1
   \   000000AE   02FB1102           MLS      R2,R2,R1,R0
   \   000000B2   002A               CMP      R2,#+0
   \   000000B4   CBD1               BNE.N    ??f_read_6
   \   000000B6   E879               LDRB     R0,[R5, #+7]
   \   000000B8   2968               LDR      R1,[R5, #+0]
   \   000000BA   8978               LDRB     R1,[R1, #+2]
   \   000000BC   8842               CMP      R0,R1
   \   000000BE   1CD3               BCC.N    ??f_read_10
   \   000000C0   A868               LDR      R0,[R5, #+8]
   \   000000C2   0028               CMP      R0,#+0
   \   000000C4   01D1               BNE.N    ??f_read_11
   \   000000C6   2869               LDR      R0,[R5, #+16]
   \   000000C8   03E0               B.N      ??f_read_12
   \                     ??f_read_11:
   \   000000CA   6969               LDR      R1,[R5, #+20]
   \   000000CC   2868               LDR      R0,[R5, #+0]
   \   000000CE   ........           BL       get_fat
   \                     ??f_read_12:
   \   000000D2   0228               CMP      R0,#+2
   \   000000D4   05D2               BCS.N    ??f_read_13
   \   000000D6   A879               LDRB     R0,[R5, #+6]
   \   000000D8   50F08000           ORRS     R0,R0,#0x80
   \   000000DC   A871               STRB     R0,[R5, #+6]
   \   000000DE   0220               MOVS     R0,#+2
   \   000000E0   88E0               B.N      ??f_read_1
   \                     ??f_read_13:
   \   000000E2   10F1010F           CMN      R0,#+1
   \   000000E6   05D1               BNE.N    ??f_read_14
   \   000000E8   A879               LDRB     R0,[R5, #+6]
   \   000000EA   50F08000           ORRS     R0,R0,#0x80
   \   000000EE   A871               STRB     R0,[R5, #+6]
   \   000000F0   0120               MOVS     R0,#+1
   \   000000F2   7FE0               B.N      ??f_read_1
   \                     ??f_read_14:
   \   000000F4   6861               STR      R0,[R5, #+20]
   \   000000F6   0020               MOVS     R0,#+0
   \   000000F8   E871               STRB     R0,[R5, #+7]
   \                     ??f_read_10:
   \   000000FA   6969               LDR      R1,[R5, #+20]
   \   000000FC   2868               LDR      R0,[R5, #+0]
   \   000000FE   ........           BL       clust2sect
   \   00000102   8046               MOV      R8,R0
   \   00000104   B8F1000F           CMP      R8,#+0
   \   00000108   05D1               BNE.N    ??f_read_15
   \   0000010A   A879               LDRB     R0,[R5, #+6]
   \   0000010C   50F08000           ORRS     R0,R0,#0x80
   \   00000110   A871               STRB     R0,[R5, #+6]
   \   00000112   0220               MOVS     R0,#+2
   \   00000114   6EE0               B.N      ??f_read_1
   \                     ??f_read_15:
   \   00000116   E879               LDRB     R0,[R5, #+7]
   \   00000118   10EB0808           ADDS     R8,R0,R8
   \   0000011C   5FEA5629           LSRS     R9,R6,#+9
   \   00000120   B9F1000F           CMP      R9,#+0
   \   00000124   39D0               BEQ.N    ??f_read_16
   \   00000126   2868               LDR      R0,[R5, #+0]
   \   00000128   8078               LDRB     R0,[R0, #+2]
   \   0000012A   E979               LDRB     R1,[R5, #+7]
   \   0000012C   19EB0101           ADDS     R1,R9,R1
   \   00000130   8842               CMP      R0,R1
   \   00000132   04D2               BCS.N    ??f_read_17
   \   00000134   2868               LDR      R0,[R5, #+0]
   \   00000136   8078               LDRB     R0,[R0, #+2]
   \   00000138   E979               LDRB     R1,[R5, #+7]
   \   0000013A   B0EB0109           SUBS     R9,R0,R1
   \                     ??f_read_17:
   \   0000013E   4B46               MOV      R3,R9
   \   00000140   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000142   4246               MOV      R2,R8
   \   00000144   2100               MOVS     R1,R4
   \   00000146   2868               LDR      R0,[R5, #+0]
   \   00000148   4078               LDRB     R0,[R0, #+1]
   \   0000014A   ........           BL       disk_read
   \   0000014E   0028               CMP      R0,#+0
   \   00000150   05D0               BEQ.N    ??f_read_18
   \   00000152   A879               LDRB     R0,[R5, #+6]
   \   00000154   50F08000           ORRS     R0,R0,#0x80
   \   00000158   A871               STRB     R0,[R5, #+6]
   \   0000015A   0120               MOVS     R0,#+1
   \   0000015C   4AE0               B.N      ??f_read_1
   \                     ??f_read_18:
   \   0000015E   A879               LDRB     R0,[R5, #+6]
   \   00000160   4006               LSLS     R0,R0,#+25
   \   00000162   11D5               BPL.N    ??f_read_19
   \   00000164   A869               LDR      R0,[R5, #+24]
   \   00000166   B0EB0800           SUBS     R0,R0,R8
   \   0000016A   4845               CMP      R0,R9
   \   0000016C   0CD2               BCS.N    ??f_read_19
   \   0000016E   4FF40072           MOV      R2,#+512
   \   00000172   15F12401           ADDS     R1,R5,#+36
   \   00000176   A869               LDR      R0,[R5, #+24]
   \   00000178   B0EB0800           SUBS     R0,R0,R8
   \   0000017C   4FF40073           MOV      R3,#+512
   \   00000180   03FB0040           MLA      R0,R3,R0,R4
   \   00000184   ........           BL       mem_cpy
   \                     ??f_read_19:
   \   00000188   E879               LDRB     R0,[R5, #+7]
   \   0000018A   19EB0000           ADDS     R0,R9,R0
   \   0000018E   E871               STRB     R0,[R5, #+7]
   \   00000190   4FF40070           MOV      R0,#+512
   \   00000194   00FB09F8           MUL      R8,R0,R9
   \   00000198   75E7               B.N      ??f_read_8
   \                     ??f_read_16:
   \   0000019A   A879               LDRB     R0,[R5, #+6]
   \   0000019C   4006               LSLS     R0,R0,#+25
   \   0000019E   13D5               BPL.N    ??f_read_20
   \   000001A0   0123               MOVS     R3,#+1
   \   000001A2   AA69               LDR      R2,[R5, #+24]
   \   000001A4   15F12401           ADDS     R1,R5,#+36
   \   000001A8   2868               LDR      R0,[R5, #+0]
   \   000001AA   4078               LDRB     R0,[R0, #+1]
   \   000001AC   ........           BL       disk_write
   \   000001B0   0028               CMP      R0,#+0
   \   000001B2   05D0               BEQ.N    ??f_read_21
   \   000001B4   A879               LDRB     R0,[R5, #+6]
   \   000001B6   50F08000           ORRS     R0,R0,#0x80
   \   000001BA   A871               STRB     R0,[R5, #+6]
   \   000001BC   0120               MOVS     R0,#+1
   \   000001BE   19E0               B.N      ??f_read_1
   \                     ??f_read_21:
   \   000001C0   A879               LDRB     R0,[R5, #+6]
   \   000001C2   10F0BF00           ANDS     R0,R0,#0xBF
   \   000001C6   A871               STRB     R0,[R5, #+6]
   \                     ??f_read_20:
   \   000001C8   A869               LDR      R0,[R5, #+24]
   \   000001CA   4045               CMP      R0,R8
   \   000001CC   3FF43AAF           BEQ.W    ??f_read_5
   \   000001D0   0123               MOVS     R3,#+1
   \   000001D2   4246               MOV      R2,R8
   \   000001D4   15F12401           ADDS     R1,R5,#+36
   \   000001D8   2868               LDR      R0,[R5, #+0]
   \   000001DA   4078               LDRB     R0,[R0, #+1]
   \   000001DC   ........           BL       disk_read
   \   000001E0   0028               CMP      R0,#+0
   \   000001E2   3FF42FAF           BEQ.W    ??f_read_5
   \   000001E6   A879               LDRB     R0,[R5, #+6]
   \   000001E8   50F08000           ORRS     R0,R0,#0x80
   \   000001EC   A871               STRB     R0,[R5, #+6]
   \   000001EE   0120               MOVS     R0,#+1
   \   000001F0   00E0               B.N      ??f_read_1
   1844          #endif
   1845          	}
   1846          
   1847          	LEAVE_FF(fp->fs, FR_OK);
   \                     ??f_read_9:
   \   000001F2   0020               MOVS     R0,#+0
   \                     ??f_read_1:
   \   000001F4   BDE8F283           POP      {R1,R4-R9,PC}    ;; return
   1848          }
   1849          
   1850          
   1851          
   1852          
   1853          #if !_FS_READONLY
   1854          /*-----------------------------------------------------------------------*/
   1855          /* Write File                                                            */
   1856          /*-----------------------------------------------------------------------*/
   1857          

   \                                 In section .text, align 2, keep-with-next
   1858          FRESULT f_write (
   1859          	FIL *fp,			/* Pointer to the file object */
   1860          	const void *buff,	/* Pointer to the data to be written */
   1861          	UINT btw,			/* Number of bytes to write */
   1862          	UINT *bw			/* Pointer to number of bytes written */
   1863          )
   1864          {
   \                     f_write:
   \   00000000   2DE9F843           PUSH     {R3-R9,LR}
   \   00000004   0500               MOVS     R5,R0
   \   00000006   1600               MOVS     R6,R2
   \   00000008   1F00               MOVS     R7,R3
   1865          	FRESULT res;
   1866          	DWORD clst, sect;
   1867          	UINT wcnt, cc;
   1868          	const BYTE *wbuff = buff;
   \   0000000A   0C00               MOVS     R4,R1
   1869          
   1870          
   1871          	*bw = 0;	/* Initialize bytes written */
   \   0000000C   0020               MOVS     R0,#+0
   \   0000000E   3860               STR      R0,[R7, #+0]
   1872          
   1873          	res = validate(fp->fs, fp->id);					/* Check validity of the object */
   \   00000010   A988               LDRH     R1,[R5, #+4]
   \   00000012   2868               LDR      R0,[R5, #+0]
   \   00000014   ........           BL       validate
   1874          	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   \   00000018   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0028               CMP      R0,#+0
   \   0000001C   01D0               BEQ.N    ??f_write_0
   \   0000001E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   6EE0               B.N      ??f_write_1
   1875          	if (fp->flag & FA__ERROR)						/* Check abort flag */
   \                     ??f_write_0:
   \   00000022   A879               LDRB     R0,[R5, #+6]
   \   00000024   0006               LSLS     R0,R0,#+24
   \   00000026   01D5               BPL.N    ??f_write_2
   1876          		LEAVE_FF(fp->fs, FR_INT_ERR);
   \   00000028   0220               MOVS     R0,#+2
   \   0000002A   69E0               B.N      ??f_write_1
   1877          	if (!(fp->flag & FA_WRITE))						/* Check access mode */
   \                     ??f_write_2:
   \   0000002C   A879               LDRB     R0,[R5, #+6]
   \   0000002E   8007               LSLS     R0,R0,#+30
   \   00000030   01D4               BMI.N    ??f_write_3
   1878          		LEAVE_FF(fp->fs, FR_DENIED);
   \   00000032   0720               MOVS     R0,#+7
   \   00000034   64E0               B.N      ??f_write_1
   1879          	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
   \                     ??f_write_3:
   \   00000036   E868               LDR      R0,[R5, #+12]
   \   00000038   3018               ADDS     R0,R6,R0
   \   0000003A   E968               LDR      R1,[R5, #+12]
   \   0000003C   8842               CMP      R0,R1
   \   0000003E   32D2               BCS.N    ??f_write_4
   \   00000040   0026               MOVS     R6,#+0
   \   00000042   30E0               B.N      ??f_write_4
   1880          
   1881          	for ( ;  btw;									/* Repeat until all data transferred */
   1882          		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   1883          		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
   1884          			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
   1885          				if (fp->fptr == 0) {				/* On the top of the file? */
   1886          					clst = fp->org_clust;			/* Follow from the origin */
   1887          					if (clst == 0)					/* When there is no cluster chain, */
   1888          						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   1889          				} else {							/* Middle or end of the file */
   1890          					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or stretch cluster chain */
   1891          				}
   1892          				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
   1893          				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   1894          				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   1895          				fp->curr_clust = clst;				/* Update current cluster */
   1896          				fp->csect = 0;						/* Reset sector address in the cluster */
   1897          			}
   1898          #if _FS_TINY
   1899          			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
   1900          				ABORT(fp->fs, FR_DISK_ERR);
   1901          #else
   1902          			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
   1903          				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
   1904          					ABORT(fp->fs, FR_DISK_ERR);
   1905          				fp->flag &= ~FA__DIRTY;
   1906          			}
   1907          #endif
   1908          			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
   1909          			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   1910          			sect += fp->csect;
   1911          			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
   1912          			if (cc) {								/* Write maximum contiguous sectors directly */
   1913          				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   1914          					cc = fp->fs->csize - fp->csect;
   1915          				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
   1916          					ABORT(fp->fs, FR_DISK_ERR);
   1917          #if _FS_TINY
   1918          				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
   1919          					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   1920          					fp->fs->wflag = 0;
   1921          				}
   1922          #else
   1923          				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
   1924          					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
   1925          					fp->flag &= ~FA__DIRTY;
   1926          				}
   1927          #endif
   1928          				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
   1929          				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
   1930          				continue;
   1931          			}
   1932          #if _FS_TINY
   1933          			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
   1934          				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   1935          				fp->fs->winsect = sect;
   1936          			}
   1937          #else
   1938          			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
   1939          				if (fp->fptr < fp->fsize &&
   1940          					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
   1941          						ABORT(fp->fs, FR_DISK_ERR);
   1942          			}
   1943          #endif
   1944          			fp->dsect = sect;
   \                     ??f_write_5:
   \   00000044   C5F81880           STR      R8,[R5, #+24]
   1945          			fp->csect++;							/* Next sector address in the cluster */
   \   00000048   E879               LDRB     R0,[R5, #+7]
   \   0000004A   401C               ADDS     R0,R0,#+1
   \   0000004C   E871               STRB     R0,[R5, #+7]
   1946          		}
   1947          		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
   \                     ??f_write_6:
   \   0000004E   4FF40070           MOV      R0,#+512
   \   00000052   A968               LDR      R1,[R5, #+8]
   \   00000054   4FF40072           MOV      R2,#+512
   \   00000058   B1FBF2F3           UDIV     R3,R1,R2
   \   0000005C   03FB1213           MLS      R3,R3,R2,R1
   \   00000060   B0EB0308           SUBS     R8,R0,R3
   1948          		if (wcnt > btw) wcnt = btw;
   \   00000064   4645               CMP      R6,R8
   \   00000066   00D2               BCS.N    ??f_write_7
   \   00000068   B046               MOV      R8,R6
   1949          #if _FS_TINY
   1950          		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
   1951          			ABORT(fp->fs, FR_DISK_ERR);
   1952          		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   1953          		fp->fs->wflag = 1;
   1954          #else
   1955          		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   \                     ??f_write_7:
   \   0000006A   4246               MOV      R2,R8
   \   0000006C   2100               MOVS     R1,R4
   \   0000006E   A868               LDR      R0,[R5, #+8]
   \   00000070   4FF40073           MOV      R3,#+512
   \   00000074   B0FBF3FC           UDIV     R12,R0,R3
   \   00000078   0CFB130C           MLS      R12,R12,R3,R0
   \   0000007C   1CEB0500           ADDS     R0,R12,R5
   \   00000080   2430               ADDS     R0,R0,#+36
   \   00000082   ........           BL       mem_cpy
   1956          		fp->flag |= FA__DIRTY;
   \   00000086   A879               LDRB     R0,[R5, #+6]
   \   00000088   50F04000           ORRS     R0,R0,#0x40
   \   0000008C   A871               STRB     R0,[R5, #+6]
   \                     ??f_write_8:
   \   0000008E   18EB0404           ADDS     R4,R8,R4
   \   00000092   A868               LDR      R0,[R5, #+8]
   \   00000094   18EB0000           ADDS     R0,R8,R0
   \   00000098   A860               STR      R0,[R5, #+8]
   \   0000009A   3868               LDR      R0,[R7, #+0]
   \   0000009C   18EB0000           ADDS     R0,R8,R0
   \   000000A0   3860               STR      R0,[R7, #+0]
   \   000000A2   B6EB0806           SUBS     R6,R6,R8
   \                     ??f_write_4:
   \   000000A6   002E               CMP      R6,#+0
   \   000000A8   1FD0               BEQ.N    ??f_write_9
   \   000000AA   A868               LDR      R0,[R5, #+8]
   \   000000AC   4FF40071           MOV      R1,#+512
   \   000000B0   B0FBF1F2           UDIV     R2,R0,R1
   \   000000B4   02FB1102           MLS      R2,R2,R1,R0
   \   000000B8   002A               CMP      R2,#+0
   \   000000BA   C8D1               BNE.N    ??f_write_6
   \   000000BC   E879               LDRB     R0,[R5, #+7]
   \   000000BE   2968               LDR      R1,[R5, #+0]
   \   000000C0   8978               LDRB     R1,[R1, #+2]
   \   000000C2   8842               CMP      R0,R1
   \   000000C4   32D3               BCC.N    ??f_write_10
   \   000000C6   A868               LDR      R0,[R5, #+8]
   \   000000C8   0028               CMP      R0,#+0
   \   000000CA   08D1               BNE.N    ??f_write_11
   \   000000CC   2869               LDR      R0,[R5, #+16]
   \   000000CE   0028               CMP      R0,#+0
   \   000000D0   09D1               BNE.N    ??f_write_12
   \   000000D2   0021               MOVS     R1,#+0
   \   000000D4   2868               LDR      R0,[R5, #+0]
   \   000000D6   ........           BL       create_chain
   \   000000DA   2861               STR      R0,[R5, #+16]
   \   000000DC   03E0               B.N      ??f_write_12
   \                     ??f_write_11:
   \   000000DE   6969               LDR      R1,[R5, #+20]
   \   000000E0   2868               LDR      R0,[R5, #+0]
   \   000000E2   ........           BL       create_chain
   \                     ??f_write_12:
   \   000000E6   0028               CMP      R0,#+0
   \   000000E8   0CD1               BNE.N    ??f_write_13
   1957          #endif
   1958          	}
   1959          
   1960          	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   \                     ??f_write_9:
   \   000000EA   E868               LDR      R0,[R5, #+12]
   \   000000EC   A968               LDR      R1,[R5, #+8]
   \   000000EE   8842               CMP      R0,R1
   \   000000F0   01D2               BCS.N    ??f_write_14
   \   000000F2   A868               LDR      R0,[R5, #+8]
   \   000000F4   E860               STR      R0,[R5, #+12]
   1961          	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
   \                     ??f_write_14:
   \   000000F6   A879               LDRB     R0,[R5, #+6]
   \   000000F8   50F02000           ORRS     R0,R0,#0x20
   \   000000FC   A871               STRB     R0,[R5, #+6]
   1962          
   1963          	LEAVE_FF(fp->fs, FR_OK);
   \   000000FE   0020               MOVS     R0,#+0
   \                     ??f_write_1:
   \   00000100   BDE8F283           POP      {R1,R4-R9,PC}    ;; return
   \                     ??f_write_13:
   \   00000104   0128               CMP      R0,#+1
   \   00000106   05D1               BNE.N    ??f_write_15
   \   00000108   A879               LDRB     R0,[R5, #+6]
   \   0000010A   50F08000           ORRS     R0,R0,#0x80
   \   0000010E   A871               STRB     R0,[R5, #+6]
   \   00000110   0220               MOVS     R0,#+2
   \   00000112   F5E7               B.N      ??f_write_1
   \                     ??f_write_15:
   \   00000114   10F1010F           CMN      R0,#+1
   \   00000118   05D1               BNE.N    ??f_write_16
   \   0000011A   A879               LDRB     R0,[R5, #+6]
   \   0000011C   50F08000           ORRS     R0,R0,#0x80
   \   00000120   A871               STRB     R0,[R5, #+6]
   \   00000122   0120               MOVS     R0,#+1
   \   00000124   ECE7               B.N      ??f_write_1
   \                     ??f_write_16:
   \   00000126   6861               STR      R0,[R5, #+20]
   \   00000128   0020               MOVS     R0,#+0
   \   0000012A   E871               STRB     R0,[R5, #+7]
   \                     ??f_write_10:
   \   0000012C   A879               LDRB     R0,[R5, #+6]
   \   0000012E   4006               LSLS     R0,R0,#+25
   \   00000130   13D5               BPL.N    ??f_write_17
   \   00000132   0123               MOVS     R3,#+1
   \   00000134   AA69               LDR      R2,[R5, #+24]
   \   00000136   15F12401           ADDS     R1,R5,#+36
   \   0000013A   2868               LDR      R0,[R5, #+0]
   \   0000013C   4078               LDRB     R0,[R0, #+1]
   \   0000013E   ........           BL       disk_write
   \   00000142   0028               CMP      R0,#+0
   \   00000144   05D0               BEQ.N    ??f_write_18
   \   00000146   A879               LDRB     R0,[R5, #+6]
   \   00000148   50F08000           ORRS     R0,R0,#0x80
   \   0000014C   A871               STRB     R0,[R5, #+6]
   \   0000014E   0120               MOVS     R0,#+1
   \   00000150   D6E7               B.N      ??f_write_1
   \                     ??f_write_18:
   \   00000152   A879               LDRB     R0,[R5, #+6]
   \   00000154   10F0BF00           ANDS     R0,R0,#0xBF
   \   00000158   A871               STRB     R0,[R5, #+6]
   \                     ??f_write_17:
   \   0000015A   6969               LDR      R1,[R5, #+20]
   \   0000015C   2868               LDR      R0,[R5, #+0]
   \   0000015E   ........           BL       clust2sect
   \   00000162   8046               MOV      R8,R0
   \   00000164   B8F1000F           CMP      R8,#+0
   \   00000168   05D1               BNE.N    ??f_write_19
   \   0000016A   A879               LDRB     R0,[R5, #+6]
   \   0000016C   50F08000           ORRS     R0,R0,#0x80
   \   00000170   A871               STRB     R0,[R5, #+6]
   \   00000172   0220               MOVS     R0,#+2
   \   00000174   C4E7               B.N      ??f_write_1
   \                     ??f_write_19:
   \   00000176   E879               LDRB     R0,[R5, #+7]
   \   00000178   10EB0808           ADDS     R8,R0,R8
   \   0000017C   5FEA5629           LSRS     R9,R6,#+9
   \   00000180   B9F1000F           CMP      R9,#+0
   \   00000184   3AD0               BEQ.N    ??f_write_20
   \   00000186   2868               LDR      R0,[R5, #+0]
   \   00000188   8078               LDRB     R0,[R0, #+2]
   \   0000018A   E979               LDRB     R1,[R5, #+7]
   \   0000018C   19EB0101           ADDS     R1,R9,R1
   \   00000190   8842               CMP      R0,R1
   \   00000192   04D2               BCS.N    ??f_write_21
   \   00000194   2868               LDR      R0,[R5, #+0]
   \   00000196   8078               LDRB     R0,[R0, #+2]
   \   00000198   E979               LDRB     R1,[R5, #+7]
   \   0000019A   B0EB0109           SUBS     R9,R0,R1
   \                     ??f_write_21:
   \   0000019E   4B46               MOV      R3,R9
   \   000001A0   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000001A2   4246               MOV      R2,R8
   \   000001A4   2100               MOVS     R1,R4
   \   000001A6   2868               LDR      R0,[R5, #+0]
   \   000001A8   4078               LDRB     R0,[R0, #+1]
   \   000001AA   ........           BL       disk_write
   \   000001AE   0028               CMP      R0,#+0
   \   000001B0   05D0               BEQ.N    ??f_write_22
   \   000001B2   A879               LDRB     R0,[R5, #+6]
   \   000001B4   50F08000           ORRS     R0,R0,#0x80
   \   000001B8   A871               STRB     R0,[R5, #+6]
   \   000001BA   0120               MOVS     R0,#+1
   \   000001BC   A0E7               B.N      ??f_write_1
   \                     ??f_write_22:
   \   000001BE   A869               LDR      R0,[R5, #+24]
   \   000001C0   B0EB0800           SUBS     R0,R0,R8
   \   000001C4   4845               CMP      R0,R9
   \   000001C6   10D2               BCS.N    ??f_write_23
   \   000001C8   4FF40072           MOV      R2,#+512
   \   000001CC   A869               LDR      R0,[R5, #+24]
   \   000001CE   B0EB0800           SUBS     R0,R0,R8
   \   000001D2   4FF40071           MOV      R1,#+512
   \   000001D6   01FB0041           MLA      R1,R1,R0,R4
   \   000001DA   15F12400           ADDS     R0,R5,#+36
   \   000001DE   ........           BL       mem_cpy
   \   000001E2   A879               LDRB     R0,[R5, #+6]
   \   000001E4   10F0BF00           ANDS     R0,R0,#0xBF
   \   000001E8   A871               STRB     R0,[R5, #+6]
   \                     ??f_write_23:
   \   000001EA   E879               LDRB     R0,[R5, #+7]
   \   000001EC   19EB0000           ADDS     R0,R9,R0
   \   000001F0   E871               STRB     R0,[R5, #+7]
   \   000001F2   4FF40070           MOV      R0,#+512
   \   000001F6   00FB09F8           MUL      R8,R0,R9
   \   000001FA   48E7               B.N      ??f_write_8
   \                     ??f_write_20:
   \   000001FC   A869               LDR      R0,[R5, #+24]
   \   000001FE   4045               CMP      R0,R8
   \   00000200   3FF420AF           BEQ.W    ??f_write_5
   \   00000204   A868               LDR      R0,[R5, #+8]
   \   00000206   E968               LDR      R1,[R5, #+12]
   \   00000208   8842               CMP      R0,R1
   \   0000020A   BFF41BAF           BCS.W    ??f_write_5
   \   0000020E   0123               MOVS     R3,#+1
   \   00000210   4246               MOV      R2,R8
   \   00000212   15F12401           ADDS     R1,R5,#+36
   \   00000216   2868               LDR      R0,[R5, #+0]
   \   00000218   4078               LDRB     R0,[R0, #+1]
   \   0000021A   ........           BL       disk_read
   \   0000021E   0028               CMP      R0,#+0
   \   00000220   3FF410AF           BEQ.W    ??f_write_5
   \   00000224   A879               LDRB     R0,[R5, #+6]
   \   00000226   50F08000           ORRS     R0,R0,#0x80
   \   0000022A   A871               STRB     R0,[R5, #+6]
   \   0000022C   0120               MOVS     R0,#+1
   \   0000022E   67E7               B.N      ??f_write_1
   1964          }
   1965          
   1966          
   1967          
   1968          
   1969          /*-----------------------------------------------------------------------*/
   1970          /* Synchronize the File Object                                           */
   1971          /*-----------------------------------------------------------------------*/
   1972          

   \                                 In section .text, align 2, keep-with-next
   1973          FRESULT f_sync (
   1974          	FIL *fp		/* Pointer to the file object */
   1975          )
   1976          {
   \                     f_sync:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
   1977          	FRESULT res;
   1978          	DWORD tim;
   1979          	BYTE *dir;
   1980          
   1981          
   1982          	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   \   00000004   A188               LDRH     R1,[R4, #+4]
   \   00000006   2068               LDR      R0,[R4, #+0]
   \   00000008   ........           BL       validate
   1983          	if (res == FR_OK) {
   \   0000000C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   50D1               BNE.N    ??f_sync_0
   1984          		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   \   00000012   A179               LDRB     R1,[R4, #+6]
   \   00000014   8906               LSLS     R1,R1,#+26
   \   00000016   4DD5               BPL.N    ??f_sync_0
   1985          #if !_FS_TINY	/* Write-back dirty buffer */
   1986          			if (fp->flag & FA__DIRTY) {
   \   00000018   A079               LDRB     R0,[R4, #+6]
   \   0000001A   4006               LSLS     R0,R0,#+25
   \   0000001C   0FD5               BPL.N    ??f_sync_1
   1987          				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
   \   0000001E   0123               MOVS     R3,#+1
   \   00000020   A269               LDR      R2,[R4, #+24]
   \   00000022   14F12401           ADDS     R1,R4,#+36
   \   00000026   2068               LDR      R0,[R4, #+0]
   \   00000028   4078               LDRB     R0,[R0, #+1]
   \   0000002A   ........           BL       disk_write
   \   0000002E   0028               CMP      R0,#+0
   \   00000030   01D0               BEQ.N    ??f_sync_2
   1988          					LEAVE_FF(fp->fs, FR_DISK_ERR);
   \   00000032   0120               MOVS     R0,#+1
   \   00000034   3FE0               B.N      ??f_sync_3
   1989          				fp->flag &= ~FA__DIRTY;
   \                     ??f_sync_2:
   \   00000036   A079               LDRB     R0,[R4, #+6]
   \   00000038   10F0BF00           ANDS     R0,R0,#0xBF
   \   0000003C   A071               STRB     R0,[R4, #+6]
   1990          			}
   1991          #endif
   1992          			/* Update the directory entry */
   1993          			res = move_window(fp->fs, fp->dir_sect);
   \                     ??f_sync_1:
   \   0000003E   E169               LDR      R1,[R4, #+28]
   \   00000040   2068               LDR      R0,[R4, #+0]
   \   00000042   ........           BL       move_window
   1994          			if (res == FR_OK) {
   \   00000046   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0028               CMP      R0,#+0
   \   0000004A   33D1               BNE.N    ??f_sync_0
   1995          				dir = fp->dir_ptr;
   \   0000004C   256A               LDR      R5,[R4, #+32]
   1996          				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   \   0000004E   E87A               LDRB     R0,[R5, #+11]
   \   00000050   50F02000           ORRS     R0,R0,#0x20
   \   00000054   E872               STRB     R0,[R5, #+11]
   1997          				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   \   00000056   E068               LDR      R0,[R4, #+12]
   \   00000058   2877               STRB     R0,[R5, #+28]
   \   0000005A   E068               LDR      R0,[R4, #+12]
   \   0000005C   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005E   000A               LSRS     R0,R0,#+8
   \   00000060   6877               STRB     R0,[R5, #+29]
   \   00000062   E068               LDR      R0,[R4, #+12]
   \   00000064   000C               LSRS     R0,R0,#+16
   \   00000066   A877               STRB     R0,[R5, #+30]
   \   00000068   E068               LDR      R0,[R4, #+12]
   \   0000006A   000E               LSRS     R0,R0,#+24
   \   0000006C   E877               STRB     R0,[R5, #+31]
   1998          				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
   \   0000006E   2069               LDR      R0,[R4, #+16]
   \   00000070   A876               STRB     R0,[R5, #+26]
   \   00000072   2069               LDR      R0,[R4, #+16]
   \   00000074   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000076   000A               LSRS     R0,R0,#+8
   \   00000078   E876               STRB     R0,[R5, #+27]
   1999          				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
   \   0000007A   2069               LDR      R0,[R4, #+16]
   \   0000007C   000C               LSRS     R0,R0,#+16
   \   0000007E   2875               STRB     R0,[R5, #+20]
   \   00000080   2069               LDR      R0,[R4, #+16]
   \   00000082   000C               LSRS     R0,R0,#+16
   \   00000084   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000086   000A               LSRS     R0,R0,#+8
   \   00000088   6875               STRB     R0,[R5, #+21]
   2000          				tim = get_fattime();			/* Updated time */
   \   0000008A   ........           BL       get_fattime
   2001          				ST_DWORD(dir+DIR_WrtTime, tim);
   \   0000008E   A875               STRB     R0,[R5, #+22]
   \   00000090   0100               MOVS     R1,R0
   \   00000092   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000094   090A               LSRS     R1,R1,#+8
   \   00000096   E975               STRB     R1,[R5, #+23]
   \   00000098   010C               LSRS     R1,R0,#+16
   \   0000009A   2976               STRB     R1,[R5, #+24]
   \   0000009C   000E               LSRS     R0,R0,#+24
   \   0000009E   6876               STRB     R0,[R5, #+25]
   2002          				fp->flag &= ~FA__WRITTEN;
   \   000000A0   A079               LDRB     R0,[R4, #+6]
   \   000000A2   10F0DF00           ANDS     R0,R0,#0xDF
   \   000000A6   A071               STRB     R0,[R4, #+6]
   2003          				fp->fs->wflag = 1;
   \   000000A8   2068               LDR      R0,[R4, #+0]
   \   000000AA   0121               MOVS     R1,#+1
   \   000000AC   0171               STRB     R1,[R0, #+4]
   2004          				res = sync(fp->fs);
   \   000000AE   2068               LDR      R0,[R4, #+0]
   \   000000B0   ........           BL       sync
   2005          			}
   2006          		}
   2007          	}
   2008          
   2009          	LEAVE_FF(fp->fs, res);
   \                     ??f_sync_0:
   \   000000B4   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??f_sync_3:
   \   000000B6   32BD               POP      {R1,R4,R5,PC}    ;; return
   2010          }
   2011          
   2012          #endif /* !_FS_READONLY */
   2013          
   2014          
   2015          
   2016          
   2017          /*-----------------------------------------------------------------------*/
   2018          /* Close File                                                            */
   2019          /*-----------------------------------------------------------------------*/
   2020          

   \                                 In section .text, align 2, keep-with-next
   2021          FRESULT f_close (
   2022          	FIL *fp		/* Pointer to the file object to be closed */
   2023          )
   2024          {
   \                     f_close:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
   2025          	FRESULT res;
   2026          
   2027          
   2028          #if _FS_READONLY
   2029          	res = validate(fp->fs, fp->id);
   2030          	if (res == FR_OK) fp->fs = NULL;
   2031          	LEAVE_FF(fp->fs, res);
   2032          #else
   2033          	res = f_sync(fp);
   \   00000004   2000               MOVS     R0,R4
   \   00000006   ........           BL       f_sync
   2034          	if (res == FR_OK) fp->fs = NULL;
   \   0000000A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0028               CMP      R0,#+0
   \   0000000E   01D1               BNE.N    ??f_close_0
   \   00000010   0021               MOVS     R1,#+0
   \   00000012   2160               STR      R1,[R4, #+0]
   2035          	return res;
   \                     ??f_close_0:
   \   00000014   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   10BD               POP      {R4,PC}          ;; return
   2036          #endif
   2037          }
   2038          
   2039          
   2040          
   2041          
   2042          /*-----------------------------------------------------------------------*/
   2043          /* Change Current Drive/Directory                                        */
   2044          /*-----------------------------------------------------------------------*/
   2045          
   2046          #if _FS_RPATH
   2047          
   2048          FRESULT f_chdrive (
   2049          	BYTE drv		/* Drive number */
   2050          )
   2051          {
   2052          	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
   2053          
   2054          	Drive = drv;
   2055          
   2056          	return FR_OK;
   2057          }
   2058          
   2059          
   2060          
   2061          
   2062          FRESULT f_chdir (
   2063          	const XCHAR *path	/* Pointer to the directory path */
   2064          )
   2065          {
   2066          	FRESULT res;
   2067          	DIR dj;
   2068          	NAMEBUF(sfn, lfn);
   2069          	BYTE *dir;
   2070          
   2071          
   2072          	res = chk_mounted(&path, &dj.fs, 0);
   2073          	if (res == FR_OK) {
   2074          		INITBUF(dj, sfn, lfn);
   2075          		res = follow_path(&dj, path);		/* Follow the file path */
   2076          		if (res == FR_OK) {					/* Follow completed */
   2077          			dir = dj.dir;					/* Pointer to the entry */
   2078          			if (!dir) {
   2079          				dj.fs->cdir = 0;			/* No entry (root dir) */
   2080          			} else {
   2081          				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the dir */
   2082          					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
   2083          				else
   2084          					res = FR_NO_PATH;		/* Could not reach the dir (it is a file) */
   2085          			}
   2086          		}
   2087          		if (res == FR_NO_FILE) res = FR_NO_PATH;
   2088          	}
   2089          
   2090          	LEAVE_FF(dj.fs, res);
   2091          }
   2092          
   2093          #endif
   2094          
   2095          
   2096          
   2097          #if _FS_MINIMIZE <= 2
   2098          /*-----------------------------------------------------------------------*/
   2099          /* Seek File R/W Pointer                                                 */
   2100          /*-----------------------------------------------------------------------*/
   2101          

   \                                 In section .text, align 2, keep-with-next
   2102          FRESULT f_lseek (
   2103          	FIL *fp,		/* Pointer to the file object */
   2104          	DWORD ofs		/* File pointer from top of file */
   2105          )
   2106          {
   \                     f_lseek:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0D00               MOVS     R5,R1
   2107          	FRESULT res;
   2108          	DWORD clst, bcs, nsect, ifptr;
   2109          
   2110          
   2111          	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   \   00000008   A188               LDRH     R1,[R4, #+4]
   \   0000000A   2068               LDR      R0,[R4, #+0]
   \   0000000C   ........           BL       validate
   \   00000010   0600               MOVS     R6,R0
   2112          	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   \   00000012   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000014   002E               CMP      R6,#+0
   \   00000016   02D0               BEQ.N    ??f_lseek_0
   \   00000018   3000               MOVS     R0,R6
   \   0000001A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   D4E0               B.N      ??f_lseek_1
   2113          	if (fp->flag & FA__ERROR)			/* Check abort flag */
   \                     ??f_lseek_0:
   \   0000001E   A079               LDRB     R0,[R4, #+6]
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   01D5               BPL.N    ??f_lseek_2
   2114          		LEAVE_FF(fp->fs, FR_INT_ERR);
   \   00000024   0220               MOVS     R0,#+2
   \   00000026   CFE0               B.N      ??f_lseek_1
   2115          	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
   2116          #if !_FS_READONLY
   2117          		 && !(fp->flag & FA_WRITE)
   2118          #endif
   2119          		) ofs = fp->fsize;
   \                     ??f_lseek_2:
   \   00000028   E068               LDR      R0,[R4, #+12]
   \   0000002A   A842               CMP      R0,R5
   \   0000002C   03D2               BCS.N    ??f_lseek_3
   \   0000002E   A079               LDRB     R0,[R4, #+6]
   \   00000030   8007               LSLS     R0,R0,#+30
   \   00000032   00D4               BMI.N    ??f_lseek_3
   \   00000034   E568               LDR      R5,[R4, #+12]
   2120          
   2121          	ifptr = fp->fptr;
   \                     ??f_lseek_3:
   \   00000036   A068               LDR      R0,[R4, #+8]
   2122          	fp->fptr = nsect = 0; fp->csect = 255;
   \   00000038   0027               MOVS     R7,#+0
   \   0000003A   A760               STR      R7,[R4, #+8]
   \   0000003C   FF21               MOVS     R1,#+255
   \   0000003E   E171               STRB     R1,[R4, #+7]
   2123          	if (ofs > 0) {
   \   00000040   002D               CMP      R5,#+0
   \   00000042   00F08180           BEQ.W    ??f_lseek_4
   2124          		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
   \   00000046   2168               LDR      R1,[R4, #+0]
   \   00000048   8978               LDRB     R1,[R1, #+2]
   \   0000004A   4FF40072           MOV      R2,#+512
   \   0000004E   02FB01F8           MUL      R8,R2,R1
   2125          		if (ifptr > 0 &&
   2126          			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
   \   00000052   0028               CMP      R0,#+0
   \   00000054   10D0               BEQ.N    ??f_lseek_5
   \   00000056   411E               SUBS     R1,R0,#+1
   \   00000058   B1FBF8F1           UDIV     R1,R1,R8
   \   0000005C   6A1E               SUBS     R2,R5,#+1
   \   0000005E   B2FBF8F2           UDIV     R2,R2,R8
   \   00000062   8A42               CMP      R2,R1
   \   00000064   08D3               BCC.N    ??f_lseek_5
   2127          			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
   \   00000066   401E               SUBS     R0,R0,#+1
   \   00000068   B8F10101           SUBS     R1,R8,#+1
   \   0000006C   8843               BICS     R0,R0,R1
   \   0000006E   A060               STR      R0,[R4, #+8]
   2128          			ofs -= fp->fptr;
   \   00000070   A068               LDR      R0,[R4, #+8]
   \   00000072   2D1A               SUBS     R5,R5,R0
   2129          			clst = fp->curr_clust;
   \   00000074   6069               LDR      R0,[R4, #+20]
   \   00000076   19E0               B.N      ??f_lseek_6
   2130          		} else {									/* When seek to back cluster, */
   2131          			clst = fp->org_clust;					/* start from the first cluster */
   \                     ??f_lseek_5:
   \   00000078   2069               LDR      R0,[R4, #+16]
   2132          #if !_FS_READONLY
   2133          			if (clst == 0) {						/* If no cluster chain, create a new chain */
   \   0000007A   0028               CMP      R0,#+0
   \   0000007C   15D1               BNE.N    ??f_lseek_7
   2134          				clst = create_chain(fp->fs, 0);
   \   0000007E   0021               MOVS     R1,#+0
   \   00000080   2068               LDR      R0,[R4, #+0]
   \   00000082   ........           BL       create_chain
   2135          				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   \   00000086   0128               CMP      R0,#+1
   \   00000088   05D1               BNE.N    ??f_lseek_8
   \   0000008A   A079               LDRB     R0,[R4, #+6]
   \   0000008C   50F08000           ORRS     R0,R0,#0x80
   \   00000090   A071               STRB     R0,[R4, #+6]
   \   00000092   0220               MOVS     R0,#+2
   \   00000094   98E0               B.N      ??f_lseek_1
   2136          				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   \                     ??f_lseek_8:
   \   00000096   10F1010F           CMN      R0,#+1
   \   0000009A   05D1               BNE.N    ??f_lseek_9
   \   0000009C   A079               LDRB     R0,[R4, #+6]
   \   0000009E   50F08000           ORRS     R0,R0,#0x80
   \   000000A2   A071               STRB     R0,[R4, #+6]
   \   000000A4   0120               MOVS     R0,#+1
   \   000000A6   8FE0               B.N      ??f_lseek_1
   2137          				fp->org_clust = clst;
   \                     ??f_lseek_9:
   \   000000A8   2061               STR      R0,[R4, #+16]
   2138          			}
   2139          #endif
   2140          			fp->curr_clust = clst;
   \                     ??f_lseek_7:
   \   000000AA   6061               STR      R0,[R4, #+20]
   2141          		}
   2142          		if (clst != 0) {
   \                     ??f_lseek_6:
   \   000000AC   0028               CMP      R0,#+0
   \   000000AE   07D1               BNE.N    ??f_lseek_10
   \   000000B0   4AE0               B.N      ??f_lseek_4
   2143          			while (ofs > bcs) {						/* Cluster following loop */
   2144          #if !_FS_READONLY
   2145          				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   2146          					clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
   2147          					if (clst == 0) {				/* When disk gets full, clip file size */
   2148          						ofs = bcs; break;
   2149          					}
   2150          				} else
   2151          #endif
   2152          					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
   2153          				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2154          				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
   2155          				fp->curr_clust = clst;
   \                     ??f_lseek_11:
   \   000000B2   6061               STR      R0,[R4, #+20]
   2156          				fp->fptr += bcs;
   \   000000B4   A168               LDR      R1,[R4, #+8]
   \   000000B6   18EB0101           ADDS     R1,R8,R1
   \   000000BA   A160               STR      R1,[R4, #+8]
   2157          				ofs -= bcs;
   \   000000BC   B5EB0805           SUBS     R5,R5,R8
   \                     ??f_lseek_10:
   \   000000C0   A845               CMP      R8,R5
   \   000000C2   09D2               BCS.N    ??f_lseek_12
   \   000000C4   A179               LDRB     R1,[R4, #+6]
   \   000000C6   8907               LSLS     R1,R1,#+30
   \   000000C8   20D5               BPL.N    ??f_lseek_13
   \   000000CA   0100               MOVS     R1,R0
   \   000000CC   2068               LDR      R0,[R4, #+0]
   \   000000CE   ........           BL       create_chain
   \   000000D2   0028               CMP      R0,#+0
   \   000000D4   1ED1               BNE.N    ??f_lseek_14
   \   000000D6   4546               MOV      R5,R8
   2158          			}
   2159          			fp->fptr += ofs;
   \                     ??f_lseek_12:
   \   000000D8   A168               LDR      R1,[R4, #+8]
   \   000000DA   6918               ADDS     R1,R5,R1
   \   000000DC   A160               STR      R1,[R4, #+8]
   2160          			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
   \   000000DE   690A               LSRS     R1,R5,#+9
   \   000000E0   E171               STRB     R1,[R4, #+7]
   2161          			if (ofs % SS(fp->fs)) {
   \   000000E2   4FF40071           MOV      R1,#+512
   \   000000E6   B5FBF1F2           UDIV     R2,R5,R1
   \   000000EA   02FB1152           MLS      R2,R2,R1,R5
   \   000000EE   002A               CMP      R2,#+0
   \   000000F0   2AD0               BEQ.N    ??f_lseek_4
   2162          				nsect = clust2sect(fp->fs, clst);	/* Current sector */
   \   000000F2   0100               MOVS     R1,R0
   \   000000F4   2068               LDR      R0,[R4, #+0]
   \   000000F6   ........           BL       clust2sect
   \   000000FA   0700               MOVS     R7,R0
   2163          				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
   \   000000FC   002F               CMP      R7,#+0
   \   000000FE   1ED1               BNE.N    ??f_lseek_15
   \   00000100   A079               LDRB     R0,[R4, #+6]
   \   00000102   50F08000           ORRS     R0,R0,#0x80
   \   00000106   A071               STRB     R0,[R4, #+6]
   \   00000108   0220               MOVS     R0,#+2
   \   0000010A   5DE0               B.N      ??f_lseek_1
   \                     ??f_lseek_13:
   \   0000010C   0100               MOVS     R1,R0
   \   0000010E   2068               LDR      R0,[R4, #+0]
   \   00000110   ........           BL       get_fat
   \                     ??f_lseek_14:
   \   00000114   10F1010F           CMN      R0,#+1
   \   00000118   05D1               BNE.N    ??f_lseek_16
   \   0000011A   A079               LDRB     R0,[R4, #+6]
   \   0000011C   50F08000           ORRS     R0,R0,#0x80
   \   00000120   A071               STRB     R0,[R4, #+6]
   \   00000122   0120               MOVS     R0,#+1
   \   00000124   50E0               B.N      ??f_lseek_1
   \                     ??f_lseek_16:
   \   00000126   0228               CMP      R0,#+2
   \   00000128   03D3               BCC.N    ??f_lseek_17
   \   0000012A   2168               LDR      R1,[R4, #+0]
   \   0000012C   C969               LDR      R1,[R1, #+28]
   \   0000012E   8842               CMP      R0,R1
   \   00000130   BFD3               BCC.N    ??f_lseek_11
   \                     ??f_lseek_17:
   \   00000132   A079               LDRB     R0,[R4, #+6]
   \   00000134   50F08000           ORRS     R0,R0,#0x80
   \   00000138   A071               STRB     R0,[R4, #+6]
   \   0000013A   0220               MOVS     R0,#+2
   \   0000013C   44E0               B.N      ??f_lseek_1
   2164          				nsect += fp->csect;
   \                     ??f_lseek_15:
   \   0000013E   E079               LDRB     R0,[R4, #+7]
   \   00000140   C719               ADDS     R7,R0,R7
   2165          				fp->csect++;
   \   00000142   E079               LDRB     R0,[R4, #+7]
   \   00000144   401C               ADDS     R0,R0,#+1
   \   00000146   E071               STRB     R0,[R4, #+7]
   2166          			}
   2167          		}
   2168          	}
   2169          	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
   \                     ??f_lseek_4:
   \   00000148   A068               LDR      R0,[R4, #+8]
   \   0000014A   4FF40071           MOV      R1,#+512
   \   0000014E   B0FBF1F2           UDIV     R2,R0,R1
   \   00000152   02FB1102           MLS      R2,R2,R1,R0
   \   00000156   002A               CMP      R2,#+0
   \   00000158   2AD0               BEQ.N    ??f_lseek_18
   \   0000015A   A069               LDR      R0,[R4, #+24]
   \   0000015C   8742               CMP      R7,R0
   \   0000015E   27D0               BEQ.N    ??f_lseek_18
   2170          #if !_FS_TINY
   2171          #if !_FS_READONLY
   2172          		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
   \   00000160   A079               LDRB     R0,[R4, #+6]
   \   00000162   4006               LSLS     R0,R0,#+25
   \   00000164   13D5               BPL.N    ??f_lseek_19
   2173          			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
   \   00000166   0123               MOVS     R3,#+1
   \   00000168   A269               LDR      R2,[R4, #+24]
   \   0000016A   14F12401           ADDS     R1,R4,#+36
   \   0000016E   2068               LDR      R0,[R4, #+0]
   \   00000170   4078               LDRB     R0,[R0, #+1]
   \   00000172   ........           BL       disk_write
   \   00000176   0028               CMP      R0,#+0
   \   00000178   05D0               BEQ.N    ??f_lseek_20
   2174          				ABORT(fp->fs, FR_DISK_ERR);
   \   0000017A   A079               LDRB     R0,[R4, #+6]
   \   0000017C   50F08000           ORRS     R0,R0,#0x80
   \   00000180   A071               STRB     R0,[R4, #+6]
   \   00000182   0120               MOVS     R0,#+1
   \   00000184   20E0               B.N      ??f_lseek_1
   2175          			fp->flag &= ~FA__DIRTY;
   \                     ??f_lseek_20:
   \   00000186   A079               LDRB     R0,[R4, #+6]
   \   00000188   10F0BF00           ANDS     R0,R0,#0xBF
   \   0000018C   A071               STRB     R0,[R4, #+6]
   2176          		}
   2177          #endif
   2178          		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
   \                     ??f_lseek_19:
   \   0000018E   0123               MOVS     R3,#+1
   \   00000190   3A00               MOVS     R2,R7
   \   00000192   14F12401           ADDS     R1,R4,#+36
   \   00000196   2068               LDR      R0,[R4, #+0]
   \   00000198   4078               LDRB     R0,[R0, #+1]
   \   0000019A   ........           BL       disk_read
   \   0000019E   0028               CMP      R0,#+0
   \   000001A0   05D0               BEQ.N    ??f_lseek_21
   2179          			ABORT(fp->fs, FR_DISK_ERR);
   \   000001A2   A079               LDRB     R0,[R4, #+6]
   \   000001A4   50F08000           ORRS     R0,R0,#0x80
   \   000001A8   A071               STRB     R0,[R4, #+6]
   \   000001AA   0120               MOVS     R0,#+1
   \   000001AC   0CE0               B.N      ??f_lseek_1
   2180          #endif
   2181          		fp->dsect = nsect;
   \                     ??f_lseek_21:
   \   000001AE   A761               STR      R7,[R4, #+24]
   2182          	}
   2183          #if !_FS_READONLY
   2184          	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
   \                     ??f_lseek_18:
   \   000001B0   E068               LDR      R0,[R4, #+12]
   \   000001B2   A168               LDR      R1,[R4, #+8]
   \   000001B4   8842               CMP      R0,R1
   \   000001B6   05D2               BCS.N    ??f_lseek_22
   2185          		fp->fsize = fp->fptr;
   \   000001B8   A068               LDR      R0,[R4, #+8]
   \   000001BA   E060               STR      R0,[R4, #+12]
   2186          		fp->flag |= FA__WRITTEN;
   \   000001BC   A079               LDRB     R0,[R4, #+6]
   \   000001BE   50F02000           ORRS     R0,R0,#0x20
   \   000001C2   A071               STRB     R0,[R4, #+6]
   2187          	}
   2188          #endif
   2189          
   2190          	LEAVE_FF(fp->fs, res);
   \                     ??f_lseek_22:
   \   000001C4   3000               MOVS     R0,R6
   \   000001C6   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??f_lseek_1:
   \   000001C8   BDE8F081           POP      {R4-R8,PC}       ;; return
   2191          }
   2192          
   2193          
   2194          
   2195          
   2196          #if _FS_MINIMIZE <= 1
   2197          /*-----------------------------------------------------------------------*/
   2198          /* Create a Directroy Object                                             */
   2199          /*-----------------------------------------------------------------------*/
   2200          

   \                                 In section .text, align 2, keep-with-next
   2201          FRESULT f_opendir (
   2202          	DIR *dj,			/* Pointer to directory object to create */
   2203          	const XCHAR *path	/* Pointer to the directory path */
   2204          )
   2205          {
   \                     f_opendir:
   \   00000000   32B5               PUSH     {R1,R4,R5,LR}
   \   00000002   84B0               SUB      SP,SP,#+16
   \   00000004   0400               MOVS     R4,R0
   2206          	FRESULT res;
   2207          	NAMEBUF(sfn, lfn);
   \   00000006   ........           LDR.W    R5,??DataTable16_3
   2208          	BYTE *dir;
   2209          
   2210          	res = chk_mounted(&path, &dj->fs, 0);
   \   0000000A   0022               MOVS     R2,#+0
   \   0000000C   2100               MOVS     R1,R4
   \   0000000E   04A8               ADD      R0,SP,#+16
   \   00000010   ........           BL       chk_mounted
   2211          	if (res == FR_OK) {
   \   00000014   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0028               CMP      R0,#+0
   \   00000018   2CD1               BNE.N    ??f_opendir_0
   2212          		INITBUF((*dj), sfn, lfn);
   \   0000001A   00A8               ADD      R0,SP,#+0
   \   0000001C   A061               STR      R0,[R4, #+24]
   \   0000001E   E561               STR      R5,[R4, #+28]
   2213          		res = follow_path(dj, path);			/* Follow the path to the directory */
   \   00000020   0499               LDR      R1,[SP, #+16]
   \   00000022   2000               MOVS     R0,R4
   \   00000024   ........           BL       follow_path
   2214          		if (res == FR_OK) {						/* Follow completed */
   \   00000028   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0028               CMP      R0,#+0
   \   0000002C   1ED1               BNE.N    ??f_opendir_1
   2215          			dir = dj->dir;
   \   0000002E   6169               LDR      R1,[R4, #+20]
   2216          			if (dir) {							/* It is not the root dir */
   \   00000030   0029               CMP      R1,#+0
   \   00000032   11D0               BEQ.N    ??f_opendir_2
   2217          				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
   \   00000034   CA7A               LDRB     R2,[R1, #+11]
   \   00000036   D206               LSLS     R2,R2,#+27
   \   00000038   0DD5               BPL.N    ??f_opendir_3
   2218          					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
   \   0000003A   4A7D               LDRB     R2,[R1, #+21]
   \   0000003C   0B7D               LDRB     R3,[R1, #+20]
   \   0000003E   53EA0222           ORRS     R2,R3,R2, LSL #+8
   \   00000042   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000044   CB7E               LDRB     R3,[R1, #+27]
   \   00000046   897E               LDRB     R1,[R1, #+26]
   \   00000048   51EA0321           ORRS     R1,R1,R3, LSL #+8
   \   0000004C   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000004E   51EA0241           ORRS     R1,R1,R2, LSL #+16
   \   00000052   A160               STR      R1,[R4, #+8]
   \   00000054   00E0               B.N      ??f_opendir_2
   2219          				} else {						/* The object is not a directory */
   2220          					res = FR_NO_PATH;
   \                     ??f_opendir_3:
   \   00000056   0520               MOVS     R0,#+5
   2221          				}
   2222          			}
   2223          			if (res == FR_OK) {
   \                     ??f_opendir_2:
   \   00000058   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005A   0028               CMP      R0,#+0
   \   0000005C   06D1               BNE.N    ??f_opendir_1
   2224          				dj->id = dj->fs->id;
   \   0000005E   2068               LDR      R0,[R4, #+0]
   \   00000060   C088               LDRH     R0,[R0, #+6]
   \   00000062   A080               STRH     R0,[R4, #+4]
   2225          				res = dir_seek(dj, 0);			/* Rewind dir */
   \   00000064   0021               MOVS     R1,#+0
   \   00000066   2000               MOVS     R0,R4
   \   00000068   ........           BL       dir_seek
   2226          			}
   2227          		}
   2228          		if (res == FR_NO_FILE) res = FR_NO_PATH;
   \                     ??f_opendir_1:
   \   0000006C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0428               CMP      R0,#+4
   \   00000070   00D1               BNE.N    ??f_opendir_0
   \   00000072   0520               MOVS     R0,#+5
   2229          	}
   2230          
   2231          	LEAVE_FF(dj->fs, res);
   \                     ??f_opendir_0:
   \   00000074   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000076   05B0               ADD      SP,SP,#+20
   \   00000078   30BD               POP      {R4,R5,PC}       ;; return
   2232          }
   2233          
   2234          
   2235          
   2236          
   2237          /*-----------------------------------------------------------------------*/
   2238          /* Read Directory Entry in Sequense                                      */
   2239          /*-----------------------------------------------------------------------*/
   2240          

   \                                 In section .text, align 2, keep-with-next
   2241          FRESULT f_readdir (
   2242          	DIR *dj,			/* Pointer to the open directory object */
   2243          	FILINFO *fno		/* Pointer to file information to return */
   2244          )
   2245          {
   \                     f_readdir:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   84B0               SUB      SP,SP,#+16
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0D00               MOVS     R5,R1
   2246          	FRESULT res;
   2247          	NAMEBUF(sfn, lfn);
   \   00000008   ........           LDR.W    R6,??DataTable16_3
   2248          
   2249          
   2250          	res = validate(dj->fs, dj->id);			/* Check validity of the object */
   \   0000000C   A188               LDRH     R1,[R4, #+4]
   \   0000000E   2068               LDR      R0,[R4, #+0]
   \   00000010   ........           BL       validate
   2251          	if (res == FR_OK) {
   \   00000014   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0028               CMP      R0,#+0
   \   00000018   23D1               BNE.N    ??f_readdir_0
   2252          		INITBUF((*dj), sfn, lfn);
   \   0000001A   00A8               ADD      R0,SP,#+0
   \   0000001C   A061               STR      R0,[R4, #+24]
   \   0000001E   E661               STR      R6,[R4, #+28]
   2253          		if (!fno) {
   \   00000020   002D               CMP      R5,#+0
   \   00000022   04D1               BNE.N    ??f_readdir_1
   2254          			res = dir_seek(dj, 0);
   \   00000024   0021               MOVS     R1,#+0
   \   00000026   2000               MOVS     R0,R4
   \   00000028   ........           BL       dir_seek
   \   0000002C   19E0               B.N      ??f_readdir_0
   2255          		} else {
   2256          			res = dir_read(dj);
   \                     ??f_readdir_1:
   \   0000002E   2000               MOVS     R0,R4
   \   00000030   ........           BL       dir_read
   2257          			if (res == FR_NO_FILE) {
   \   00000034   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0428               CMP      R0,#+4
   \   00000038   02D1               BNE.N    ??f_readdir_2
   2258          				dj->sect = 0;
   \   0000003A   0020               MOVS     R0,#+0
   \   0000003C   2061               STR      R0,[R4, #+16]
   2259          				res = FR_OK;
   \   0000003E   0020               MOVS     R0,#+0
   2260          			}
   2261          			if (res == FR_OK) {				/* A valid entry is found */
   \                     ??f_readdir_2:
   \   00000040   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000042   0028               CMP      R0,#+0
   \   00000044   0DD1               BNE.N    ??f_readdir_0
   2262          				get_fileinfo(dj, fno);		/* Get the object information */
   \   00000046   2900               MOVS     R1,R5
   \   00000048   2000               MOVS     R0,R4
   \   0000004A   ........           BL       get_fileinfo
   2263          				res = dir_next(dj, FALSE);	/* Increment index for next */
   \   0000004E   0021               MOVS     R1,#+0
   \   00000050   2000               MOVS     R0,R4
   \   00000052   ........           BL       dir_next
   2264          				if (res == FR_NO_FILE) {
   \   00000056   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000058   0428               CMP      R0,#+4
   \   0000005A   02D1               BNE.N    ??f_readdir_0
   2265          					dj->sect = 0;
   \   0000005C   0020               MOVS     R0,#+0
   \   0000005E   2061               STR      R0,[R4, #+16]
   2266          					res = FR_OK;
   \   00000060   0020               MOVS     R0,#+0
   2267          				}
   2268          			}
   2269          		}
   2270          	}
   2271          
   2272          	LEAVE_FF(dj->fs, res);
   \                     ??f_readdir_0:
   \   00000062   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   04B0               ADD      SP,SP,#+16
   \   00000066   70BD               POP      {R4-R6,PC}       ;; return
   2273          }
   2274          
   2275          
   2276          
   2277          #if _FS_MINIMIZE == 0
   2278          /*-----------------------------------------------------------------------*/
   2279          /* Get File Status                                                       */
   2280          /*-----------------------------------------------------------------------*/
   2281          

   \                                 In section .text, align 2, keep-with-next
   2282          FRESULT f_stat (
   2283          	const XCHAR *path,	/* Pointer to the file path */
   2284          	FILINFO *fno		/* Pointer to file information to return */
   2285          )
   2286          {
   \                     f_stat:
   \   00000000   71B5               PUSH     {R0,R4-R6,LR}
   \   00000002   8DB0               SUB      SP,SP,#+52
   \   00000004   0C00               MOVS     R4,R1
   2287          	FRESULT res;
   2288          	DIR dj;
   2289          	NAMEBUF(sfn, lfn);
   \   00000006   ....               LDR.N    R6,??DataTable16_3
   2290          
   2291          
   2292          	res = chk_mounted(&path, &dj.fs, 0);
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   03A9               ADD      R1,SP,#+12
   \   0000000C   0DA8               ADD      R0,SP,#+52
   \   0000000E   ........           BL       chk_mounted
   \   00000012   0500               MOVS     R5,R0
   2293          	if (res == FR_OK) {
   \   00000014   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000016   002D               CMP      R5,#+0
   \   00000018   13D1               BNE.N    ??f_stat_0
   2294          		INITBUF(dj, sfn, lfn);
   \   0000001A   00A8               ADD      R0,SP,#+0
   \   0000001C   0990               STR      R0,[SP, #+36]
   \   0000001E   0A96               STR      R6,[SP, #+40]
   2295          		res = follow_path(&dj, path);	/* Follow the file path */
   \   00000020   0D99               LDR      R1,[SP, #+52]
   \   00000022   03A8               ADD      R0,SP,#+12
   \   00000024   ........           BL       follow_path
   \   00000028   0500               MOVS     R5,R0
   2296          		if (res == FR_OK) {				/* Follow completed */
   \   0000002A   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002C   002D               CMP      R5,#+0
   \   0000002E   08D1               BNE.N    ??f_stat_0
   2297          			if (dj.dir)	/* Found an object */
   \   00000030   0898               LDR      R0,[SP, #+32]
   \   00000032   0028               CMP      R0,#+0
   \   00000034   04D0               BEQ.N    ??f_stat_1
   2298          				get_fileinfo(&dj, fno);
   \   00000036   2100               MOVS     R1,R4
   \   00000038   03A8               ADD      R0,SP,#+12
   \   0000003A   ........           BL       get_fileinfo
   \   0000003E   00E0               B.N      ??f_stat_0
   2299          			else		/* It is root dir */
   2300          				res = FR_INVALID_NAME;
   \                     ??f_stat_1:
   \   00000040   0625               MOVS     R5,#+6
   2301          		}
   2302          	}
   2303          
   2304          	LEAVE_FF(dj.fs, res);
   \                     ??f_stat_0:
   \   00000042   2800               MOVS     R0,R5
   \   00000044   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0EB0               ADD      SP,SP,#+56
   \   00000048   70BD               POP      {R4-R6,PC}       ;; return
   2305          }
   2306          
   2307          
   2308          
   2309          #if !_FS_READONLY
   2310          /*-----------------------------------------------------------------------*/
   2311          /* Get Number of Free Clusters                                           */
   2312          /*-----------------------------------------------------------------------*/
   2313          

   \                                 In section .text, align 2, keep-with-next
   2314          FRESULT f_getfree (
   2315          	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
   2316          	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
   2317          	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
   2318          )
   2319          {
   \                     f_getfree:
   \   00000000   2DE9F143           PUSH     {R0,R4-R9,LR}
   \   00000004   0C00               MOVS     R4,R1
   \   00000006   1500               MOVS     R5,R2
   2320          	FRESULT res;
   2321          	DWORD n, clst, sect, stat;
   2322          	UINT i;
   2323          	BYTE fat, *p;
   2324          
   2325          
   2326          	/* Get drive number */
   2327          	res = chk_mounted(&path, fatfs, 0);
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   2900               MOVS     R1,R5
   \   0000000C   00A8               ADD      R0,SP,#+0
   \   0000000E   ........           BL       chk_mounted
   2328          	if (res != FR_OK) LEAVE_FF(*fatfs, res);
   \   00000012   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0028               CMP      R0,#+0
   \   00000016   01D0               BEQ.N    ??f_getfree_0
   \   00000018   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   70E0               B.N      ??f_getfree_1
   2329          
   2330          	/* If number of free cluster is valid, return it without cluster scan. */
   2331          	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
   \                     ??f_getfree_0:
   \   0000001C   2868               LDR      R0,[R5, #+0]
   \   0000001E   C069               LDR      R0,[R0, #+28]
   \   00000020   801E               SUBS     R0,R0,#+2
   \   00000022   2968               LDR      R1,[R5, #+0]
   \   00000024   0969               LDR      R1,[R1, #+16]
   \   00000026   8842               CMP      R0,R1
   \   00000028   04D3               BCC.N    ??f_getfree_2
   2332          		*nclst = (*fatfs)->free_clust;
   \   0000002A   2868               LDR      R0,[R5, #+0]
   \   0000002C   0069               LDR      R0,[R0, #+16]
   \   0000002E   2060               STR      R0,[R4, #+0]
   2333          		LEAVE_FF(*fatfs, FR_OK);
   \   00000030   0020               MOVS     R0,#+0
   \   00000032   64E0               B.N      ??f_getfree_1
   2334          	}
   2335          
   2336          	/* Get number of free clusters */
   2337          	fat = (*fatfs)->fs_type;
   \                     ??f_getfree_2:
   \   00000034   2868               LDR      R0,[R5, #+0]
   \   00000036   0678               LDRB     R6,[R0, #+0]
   2338          	n = 0;
   \   00000038   0027               MOVS     R7,#+0
   2339          	if (fat == FS_FAT12) {
   \   0000003A   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000003C   012E               CMP      R6,#+1
   \   0000003E   18D1               BNE.N    ??f_getfree_3
   2340          		clst = 2;
   \   00000040   5FF00208           MOVS     R8,#+2
   2341          		do {
   2342          			stat = get_fat(*fatfs, clst);
   \                     ??f_getfree_4:
   \   00000044   4146               MOV      R1,R8
   \   00000046   2868               LDR      R0,[R5, #+0]
   \   00000048   ........           BL       get_fat
   2343          			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
   \   0000004C   10F1010F           CMN      R0,#+1
   \   00000050   01D1               BNE.N    ??f_getfree_5
   \   00000052   0120               MOVS     R0,#+1
   \   00000054   53E0               B.N      ??f_getfree_1
   2344          			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
   \                     ??f_getfree_5:
   \   00000056   0128               CMP      R0,#+1
   \   00000058   01D1               BNE.N    ??f_getfree_6
   \   0000005A   0220               MOVS     R0,#+2
   \   0000005C   4FE0               B.N      ??f_getfree_1
   2345          			if (stat == 0) n++;
   \                     ??f_getfree_6:
   \   0000005E   0028               CMP      R0,#+0
   \   00000060   00D1               BNE.N    ??f_getfree_7
   \   00000062   7F1C               ADDS     R7,R7,#+1
   2346          		} while (++clst < (*fatfs)->max_clust);
   \                     ??f_getfree_7:
   \   00000064   18F10108           ADDS     R8,R8,#+1
   \   00000068   2868               LDR      R0,[R5, #+0]
   \   0000006A   C069               LDR      R0,[R0, #+28]
   \   0000006C   8045               CMP      R8,R0
   \   0000006E   E9D3               BCC.N    ??f_getfree_4
   \   00000070   3BE0               B.N      ??f_getfree_8
   2347          	} else {
   2348          		clst = (*fatfs)->max_clust;
   \                     ??f_getfree_3:
   \   00000072   2868               LDR      R0,[R5, #+0]
   \   00000074   D0F81C80           LDR      R8,[R0, #+28]
   2349          		sect = (*fatfs)->fatbase;
   \   00000078   2868               LDR      R0,[R5, #+0]
   \   0000007A   D0F82090           LDR      R9,[R0, #+32]
   2350          		i = 0; p = 0;
   \   0000007E   0021               MOVS     R1,#+0
   \   00000080   0020               MOVS     R0,#+0
   2351          		do {
   2352          			if (!i) {
   \                     ??f_getfree_9:
   \   00000082   0029               CMP      R1,#+0
   \   00000084   0FD1               BNE.N    ??f_getfree_10
   2353          				res = move_window(*fatfs, sect++);
   \   00000086   4946               MOV      R1,R9
   \   00000088   2868               LDR      R0,[R5, #+0]
   \   0000008A   ........           BL       move_window
   \   0000008E   19F10109           ADDS     R9,R9,#+1
   2354          				if (res != FR_OK)
   \   00000092   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000094   0028               CMP      R0,#+0
   \   00000096   01D0               BEQ.N    ??f_getfree_11
   2355          					LEAVE_FF(*fatfs, res);
   \   00000098   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009A   30E0               B.N      ??f_getfree_1
   2356          				p = (*fatfs)->win;
   \                     ??f_getfree_11:
   \   0000009C   2868               LDR      R0,[R5, #+0]
   \   0000009E   00F23000           ADDW     R0,R0,#+48
   2357          				i = SS(*fatfs);
   \   000000A2   4FF40071           MOV      R1,#+512
   2358          			}
   2359          			if (fat == FS_FAT16) {
   \                     ??f_getfree_10:
   \   000000A6   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000A8   022E               CMP      R6,#+2
   \   000000AA   0AD1               BNE.N    ??f_getfree_12
   2360          				if (LD_WORD(p) == 0) n++;
   \   000000AC   4278               LDRB     R2,[R0, #+1]
   \   000000AE   0378               LDRB     R3,[R0, #+0]
   \   000000B0   53EA0222           ORRS     R2,R3,R2, LSL #+8
   \   000000B4   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000B6   002A               CMP      R2,#+0
   \   000000B8   00D1               BNE.N    ??f_getfree_13
   \   000000BA   7F1C               ADDS     R7,R7,#+1
   2361          				p += 2; i -= 2;
   \                     ??f_getfree_13:
   \   000000BC   801C               ADDS     R0,R0,#+2
   \   000000BE   891E               SUBS     R1,R1,#+2
   \   000000C0   0EE0               B.N      ??f_getfree_14
   2362          			} else {
   2363          				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
   \                     ??f_getfree_12:
   \   000000C2   C278               LDRB     R2,[R0, #+3]
   \   000000C4   8378               LDRB     R3,[R0, #+2]
   \   000000C6   1B04               LSLS     R3,R3,#+16
   \   000000C8   53EA0262           ORRS     R2,R3,R2, LSL #+24
   \   000000CC   4378               LDRB     R3,[R0, #+1]
   \   000000CE   52EA0322           ORRS     R2,R2,R3, LSL #+8
   \   000000D2   0378               LDRB     R3,[R0, #+0]
   \   000000D4   1A43               ORRS     R2,R3,R2
   \   000000D6   1201               LSLS     R2,R2,#+4
   \   000000D8   00D1               BNE.N    ??f_getfree_15
   \   000000DA   7F1C               ADDS     R7,R7,#+1
   2364          				p += 4; i -= 4;
   \                     ??f_getfree_15:
   \   000000DC   001D               ADDS     R0,R0,#+4
   \   000000DE   091F               SUBS     R1,R1,#+4
   2365          			}
   2366          		} while (--clst);
   \                     ??f_getfree_14:
   \   000000E0   B8F10108           SUBS     R8,R8,#+1
   \   000000E4   B8F1000F           CMP      R8,#+0
   \   000000E8   CBD1               BNE.N    ??f_getfree_9
   2367          	}
   2368          	(*fatfs)->free_clust = n;
   \                     ??f_getfree_8:
   \   000000EA   2868               LDR      R0,[R5, #+0]
   \   000000EC   0761               STR      R7,[R0, #+16]
   2369          	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
   \   000000EE   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000F0   032E               CMP      R6,#+3
   \   000000F2   02D1               BNE.N    ??f_getfree_16
   \   000000F4   2868               LDR      R0,[R5, #+0]
   \   000000F6   0121               MOVS     R1,#+1
   \   000000F8   4171               STRB     R1,[R0, #+5]
   2370          	*nclst = n;
   \                     ??f_getfree_16:
   \   000000FA   2760               STR      R7,[R4, #+0]
   2371          
   2372          	LEAVE_FF(*fatfs, FR_OK);
   \   000000FC   0020               MOVS     R0,#+0
   \                     ??f_getfree_1:
   \   000000FE   BDE8F283           POP      {R1,R4-R9,PC}    ;; return
   2373          }
   2374          
   2375          
   2376          
   2377          
   2378          /*-----------------------------------------------------------------------*/
   2379          /* Truncate File                                                         */
   2380          /*-----------------------------------------------------------------------*/
   2381          

   \                                 In section .text, align 2, keep-with-next
   2382          FRESULT f_truncate (
   2383          	FIL *fp		/* Pointer to the file object */
   2384          )
   2385          {
   \                     f_truncate:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
   2386          	FRESULT res;
   2387          	DWORD ncl;
   2388          
   2389          
   2390          	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   \   00000004   A188               LDRH     R1,[R4, #+4]
   \   00000006   2068               LDR      R0,[R4, #+0]
   \   00000008   ........           BL       validate
   2391          	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   \   0000000C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   01D0               BEQ.N    ??f_truncate_0
   \   00000012   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   46E0               B.N      ??f_truncate_1
   2392          	if (fp->flag & FA__ERROR)			/* Check abort flag */
   \                     ??f_truncate_0:
   \   00000016   A179               LDRB     R1,[R4, #+6]
   \   00000018   0906               LSLS     R1,R1,#+24
   \   0000001A   01D5               BPL.N    ??f_truncate_2
   2393          		LEAVE_FF(fp->fs, FR_INT_ERR);
   \   0000001C   0220               MOVS     R0,#+2
   \   0000001E   41E0               B.N      ??f_truncate_1
   2394          	if (!(fp->flag & FA_WRITE))			/* Check access mode */
   \                     ??f_truncate_2:
   \   00000020   A179               LDRB     R1,[R4, #+6]
   \   00000022   8907               LSLS     R1,R1,#+30
   \   00000024   01D4               BMI.N    ??f_truncate_3
   2395          		LEAVE_FF(fp->fs, FR_DENIED);
   \   00000026   0720               MOVS     R0,#+7
   \   00000028   3CE0               B.N      ??f_truncate_1
   2396          
   2397          	if (fp->fsize > fp->fptr) {
   \                     ??f_truncate_3:
   \   0000002A   A168               LDR      R1,[R4, #+8]
   \   0000002C   E268               LDR      R2,[R4, #+12]
   \   0000002E   9142               CMP      R1,R2
   \   00000030   30D2               BCS.N    ??f_truncate_4
   2398          		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
   \   00000032   A068               LDR      R0,[R4, #+8]
   \   00000034   E060               STR      R0,[R4, #+12]
   2399          		fp->flag |= FA__WRITTEN;
   \   00000036   A079               LDRB     R0,[R4, #+6]
   \   00000038   50F02000           ORRS     R0,R0,#0x20
   \   0000003C   A071               STRB     R0,[R4, #+6]
   2400          		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
   \   0000003E   A068               LDR      R0,[R4, #+8]
   \   00000040   0028               CMP      R0,#+0
   \   00000042   06D1               BNE.N    ??f_truncate_5
   2401          			res = remove_chain(fp->fs, fp->org_clust);
   \   00000044   2169               LDR      R1,[R4, #+16]
   \   00000046   2068               LDR      R0,[R4, #+0]
   \   00000048   ........           BL       remove_chain
   2402          			fp->org_clust = 0;
   \   0000004C   0021               MOVS     R1,#+0
   \   0000004E   2161               STR      R1,[R4, #+16]
   \   00000050   20E0               B.N      ??f_truncate_4
   2403          		} else {				/* When truncate a part of the file, remove remaining clusters */
   2404          			ncl = get_fat(fp->fs, fp->curr_clust);
   \                     ??f_truncate_5:
   \   00000052   6169               LDR      R1,[R4, #+20]
   \   00000054   2068               LDR      R0,[R4, #+0]
   \   00000056   ........           BL       get_fat
   \   0000005A   0500               MOVS     R5,R0
   2405          			res = FR_OK;
   \   0000005C   0020               MOVS     R0,#+0
   2406          			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   \   0000005E   15F1010F           CMN      R5,#+1
   \   00000062   00D1               BNE.N    ??f_truncate_6
   \   00000064   0120               MOVS     R0,#+1
   2407          			if (ncl == 1) res = FR_INT_ERR;
   \                     ??f_truncate_6:
   \   00000066   012D               CMP      R5,#+1
   \   00000068   00D1               BNE.N    ??f_truncate_7
   \   0000006A   0220               MOVS     R0,#+2
   2408          			if (res == FR_OK && ncl < fp->fs->max_clust) {
   \                     ??f_truncate_7:
   \   0000006C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0028               CMP      R0,#+0
   \   00000070   10D1               BNE.N    ??f_truncate_4
   \   00000072   2168               LDR      R1,[R4, #+0]
   \   00000074   C969               LDR      R1,[R1, #+28]
   \   00000076   8D42               CMP      R5,R1
   \   00000078   0CD2               BCS.N    ??f_truncate_4
   2409          				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
   \   0000007A   7FF07042           MVNS     R2,#-268435456
   \   0000007E   6169               LDR      R1,[R4, #+20]
   \   00000080   2068               LDR      R0,[R4, #+0]
   \   00000082   ........           BL       put_fat
   2410          				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
   \   00000086   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000088   0028               CMP      R0,#+0
   \   0000008A   03D1               BNE.N    ??f_truncate_4
   \   0000008C   2900               MOVS     R1,R5
   \   0000008E   2068               LDR      R0,[R4, #+0]
   \   00000090   ........           BL       remove_chain
   2411          			}
   2412          		}
   2413          	}
   2414          	if (res != FR_OK) fp->flag |= FA__ERROR;
   \                     ??f_truncate_4:
   \   00000094   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0028               CMP      R0,#+0
   \   00000098   03D0               BEQ.N    ??f_truncate_8
   \   0000009A   A179               LDRB     R1,[R4, #+6]
   \   0000009C   51F08001           ORRS     R1,R1,#0x80
   \   000000A0   A171               STRB     R1,[R4, #+6]
   2415          
   2416          	LEAVE_FF(fp->fs, res);
   \                     ??f_truncate_8:
   \   000000A2   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??f_truncate_1:
   \   000000A4   32BD               POP      {R1,R4,R5,PC}    ;; return
   2417          }
   2418          
   2419          
   2420          
   2421          
   2422          /*-----------------------------------------------------------------------*/
   2423          /* Delete a File or Directory                                            */
   2424          /*-----------------------------------------------------------------------*/
   2425          

   \                                 In section .text, align 2, keep-with-next
   2426          FRESULT f_unlink (
   2427          	const XCHAR *path		/* Pointer to the file or directory path */
   2428          )
   2429          {
   \                     f_unlink:
   \   00000000   11B5               PUSH     {R0,R4,LR}
   \   00000002   95B0               SUB      SP,SP,#+84
   2430          	FRESULT res;
   2431          	DIR dj, sdj;
   2432          	NAMEBUF(sfn, lfn);
   \   00000004   ....               LDR.N    R4,??DataTable16_3
   2433          	BYTE *dir;
   2434          	DWORD dclst;
   2435          
   2436          
   2437          	res = chk_mounted(&path, &dj.fs, 1);
   \   00000006   0122               MOVS     R2,#+1
   \   00000008   00A9               ADD      R1,SP,#+0
   \   0000000A   15A8               ADD      R0,SP,#+84
   \   0000000C   ........           BL       chk_mounted
   2438          	if (res != FR_OK) LEAVE_FF(dj.fs, res);
   \   00000010   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0028               CMP      R0,#+0
   \   00000014   01D0               BEQ.N    ??f_unlink_0
   \   00000016   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   56E0               B.N      ??f_unlink_1
   2439          
   2440          	INITBUF(dj, sfn, lfn);
   \                     ??f_unlink_0:
   \   0000001A   09A8               ADD      R0,SP,#+36
   \   0000001C   0690               STR      R0,[SP, #+24]
   \   0000001E   0794               STR      R4,[SP, #+28]
   2441          	res = follow_path(&dj, path);			/* Follow the file path */
   \   00000020   1599               LDR      R1,[SP, #+84]
   \   00000022   00A8               ADD      R0,SP,#+0
   \   00000024   ........           BL       follow_path
   2442          	if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
   2443          		res = FR_INVALID_NAME;
   2444          	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
   \   00000028   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0028               CMP      R0,#+0
   \   0000002C   01D0               BEQ.N    ??f_unlink_2
   \   0000002E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   4AE0               B.N      ??f_unlink_1
   2445          
   2446          	dir = dj.dir;
   \                     ??f_unlink_2:
   \   00000032   0598               LDR      R0,[SP, #+20]
   2447          	if (!dir)								/* Is it the root directory? */
   \   00000034   0028               CMP      R0,#+0
   \   00000036   01D1               BNE.N    ??f_unlink_3
   2448          		LEAVE_FF(dj.fs, FR_INVALID_NAME);
   \   00000038   0620               MOVS     R0,#+6
   \   0000003A   45E0               B.N      ??f_unlink_1
   2449          	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
   \                     ??f_unlink_3:
   \   0000003C   C17A               LDRB     R1,[R0, #+11]
   \   0000003E   C907               LSLS     R1,R1,#+31
   \   00000040   01D5               BPL.N    ??f_unlink_4
   2450          		LEAVE_FF(dj.fs, FR_DENIED);
   \   00000042   0720               MOVS     R0,#+7
   \   00000044   40E0               B.N      ??f_unlink_1
   2451          	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
   \                     ??f_unlink_4:
   \   00000046   417D               LDRB     R1,[R0, #+21]
   \   00000048   027D               LDRB     R2,[R0, #+20]
   \   0000004A   52EA0121           ORRS     R1,R2,R1, LSL #+8
   \   0000004E   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000050   C27E               LDRB     R2,[R0, #+27]
   \   00000052   837E               LDRB     R3,[R0, #+26]
   \   00000054   53EA0222           ORRS     R2,R3,R2, LSL #+8
   \   00000058   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000005A   52EA0144           ORRS     R4,R2,R1, LSL #+16
   2452          
   2453          	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
   \   0000005E   C07A               LDRB     R0,[R0, #+11]
   \   00000060   C006               LSLS     R0,R0,#+27
   \   00000062   1ED5               BPL.N    ??f_unlink_5
   2454          		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
   \   00000064   022C               CMP      R4,#+2
   \   00000066   01D2               BCS.N    ??f_unlink_6
   \   00000068   0220               MOVS     R0,#+2
   \   0000006A   2DE0               B.N      ??f_unlink_1
   2455          		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
   \                     ??f_unlink_6:
   \   0000006C   2422               MOVS     R2,#+36
   \   0000006E   00A9               ADD      R1,SP,#+0
   \   00000070   0CA8               ADD      R0,SP,#+48
   \   00000072   ........           BL       mem_cpy
   2456          		sdj.sclust = dclst;
   \   00000076   0E94               STR      R4,[SP, #+56]
   2457          		res = dir_seek(&sdj, 2);
   \   00000078   0221               MOVS     R1,#+2
   \   0000007A   0CA8               ADD      R0,SP,#+48
   \   0000007C   ........           BL       dir_seek
   2458          		if (res != FR_OK) LEAVE_FF(dj.fs, res);
   \   00000080   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000082   0028               CMP      R0,#+0
   \   00000084   01D0               BEQ.N    ??f_unlink_7
   \   00000086   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000088   1EE0               B.N      ??f_unlink_1
   2459          		res = dir_read(&sdj);
   \                     ??f_unlink_7:
   \   0000008A   0CA8               ADD      R0,SP,#+48
   \   0000008C   ........           BL       dir_read
   2460          		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
   \   00000090   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000092   0028               CMP      R0,#+0
   \   00000094   00D1               BNE.N    ??f_unlink_8
   \   00000096   0720               MOVS     R0,#+7
   2461          		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
   \                     ??f_unlink_8:
   \   00000098   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009A   0428               CMP      R0,#+4
   \   0000009C   01D0               BEQ.N    ??f_unlink_5
   \   0000009E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A0   12E0               B.N      ??f_unlink_1
   2462          	}
   2463          
   2464          	res = dir_remove(&dj);					/* Remove directory entry */
   \                     ??f_unlink_5:
   \   000000A2   00A8               ADD      R0,SP,#+0
   \   000000A4   ........           BL       dir_remove
   2465          	if (res == FR_OK) {
   \   000000A8   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AA   0028               CMP      R0,#+0
   \   000000AC   0BD1               BNE.N    ??f_unlink_9
   2466          		if (dclst)
   \   000000AE   002C               CMP      R4,#+0
   \   000000B0   03D0               BEQ.N    ??f_unlink_10
   2467          			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
   \   000000B2   2100               MOVS     R1,R4
   \   000000B4   0098               LDR      R0,[SP, #+0]
   \   000000B6   ........           BL       remove_chain
   2468          		if (res == FR_OK) res = sync(dj.fs);
   \                     ??f_unlink_10:
   \   000000BA   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BC   0028               CMP      R0,#+0
   \   000000BE   02D1               BNE.N    ??f_unlink_9
   \   000000C0   0098               LDR      R0,[SP, #+0]
   \   000000C2   ........           BL       sync
   2469          	}
   2470          
   2471          	LEAVE_FF(dj.fs, res);
   \                     ??f_unlink_9:
   \   000000C6   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??f_unlink_1:
   \   000000C8   16B0               ADD      SP,SP,#+88
   \   000000CA   10BD               POP      {R4,PC}          ;; return
   2472          }
   2473          
   2474          
   2475          
   2476          
   2477          /*-----------------------------------------------------------------------*/
   2478          /* Create a Directory                                                    */
   2479          /*-----------------------------------------------------------------------*/
   2480          

   \                                 In section .text, align 2, keep-with-next
   2481          FRESULT f_mkdir (
   2482          	const XCHAR *path		/* Pointer to the directory path */
   2483          )
   2484          {
   \                     f_mkdir:
   \   00000000   2DE9F143           PUSH     {R0,R4-R9,LR}
   \   00000004   8CB0               SUB      SP,SP,#+48
   2485          	FRESULT res;
   2486          	DIR dj;
   2487          	NAMEBUF(sfn, lfn);
   \   00000006   ........           LDR.W    R4,??DataTable21
   2488          	BYTE *dir, n;
   2489          	DWORD dsect, dclst, pclst, tim;
   2490          
   2491          
   2492          	res = chk_mounted(&path, &dj.fs, 1);
   \   0000000A   0122               MOVS     R2,#+1
   \   0000000C   00A9               ADD      R1,SP,#+0
   \   0000000E   0CA8               ADD      R0,SP,#+48
   \   00000010   ........           BL       chk_mounted
   \   00000014   8146               MOV      R9,R0
   2493          	if (res != FR_OK) LEAVE_FF(dj.fs, res);
   \   00000016   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000001A   B9F1000F           CMP      R9,#+0
   \   0000001E   02D0               BEQ.N    ??f_mkdir_0
   \   00000020   4846               MOV      R0,R9
   \   00000022   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   DEE0               B.N      ??f_mkdir_1
   2494          
   2495          	INITBUF(dj, sfn, lfn);
   \                     ??f_mkdir_0:
   \   00000026   09A8               ADD      R0,SP,#+36
   \   00000028   0690               STR      R0,[SP, #+24]
   \   0000002A   0794               STR      R4,[SP, #+28]
   2496          	res = follow_path(&dj, path);			/* Follow the file path */
   \   0000002C   0C99               LDR      R1,[SP, #+48]
   \   0000002E   00A8               ADD      R0,SP,#+0
   \   00000030   ........           BL       follow_path
   \   00000034   8146               MOV      R9,R0
   2497          	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
   \   00000036   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000003A   B9F1000F           CMP      R9,#+0
   \   0000003E   01D1               BNE.N    ??f_mkdir_2
   \   00000040   5FF00809           MOVS     R9,#+8
   2498          	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
   2499          		res = FR_INVALID_NAME;
   2500          	if (res != FR_NO_FILE)					/* Any error occurred */
   \                     ??f_mkdir_2:
   \   00000044   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000048   B9F1040F           CMP      R9,#+4
   \   0000004C   02D0               BEQ.N    ??f_mkdir_3
   2501          		LEAVE_FF(dj.fs, res);
   \   0000004E   4846               MOV      R0,R9
   \   00000050   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000052   C7E0               B.N      ??f_mkdir_1
   2502          
   2503          	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
   \                     ??f_mkdir_3:
   \   00000054   0021               MOVS     R1,#+0
   \   00000056   0098               LDR      R0,[SP, #+0]
   \   00000058   ........           BL       create_chain
   \   0000005C   0400               MOVS     R4,R0
   2504          	res = FR_OK;
   \   0000005E   5FF00009           MOVS     R9,#+0
   2505          	if (dclst == 0) res = FR_DENIED;
   \   00000062   002C               CMP      R4,#+0
   \   00000064   01D1               BNE.N    ??f_mkdir_4
   \   00000066   5FF00709           MOVS     R9,#+7
   2506          	if (dclst == 1) res = FR_INT_ERR;
   \                     ??f_mkdir_4:
   \   0000006A   012C               CMP      R4,#+1
   \   0000006C   01D1               BNE.N    ??f_mkdir_5
   \   0000006E   5FF00209           MOVS     R9,#+2
   2507          	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
   \                     ??f_mkdir_5:
   \   00000072   14F1010F           CMN      R4,#+1
   \   00000076   01D1               BNE.N    ??f_mkdir_6
   \   00000078   5FF00109           MOVS     R9,#+1
   2508          	if (res == FR_OK)
   \                     ??f_mkdir_6:
   \   0000007C   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000080   B9F1000F           CMP      R9,#+0
   \   00000084   04D1               BNE.N    ??f_mkdir_7
   2509          		res = move_window(dj.fs, 0);
   \   00000086   0021               MOVS     R1,#+0
   \   00000088   0098               LDR      R0,[SP, #+0]
   \   0000008A   ........           BL       move_window
   \   0000008E   8146               MOV      R9,R0
   2510          	if (res != FR_OK) LEAVE_FF(dj.fs, res);
   \                     ??f_mkdir_7:
   \   00000090   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000094   B9F1000F           CMP      R9,#+0
   \   00000098   02D0               BEQ.N    ??f_mkdir_8
   \   0000009A   4846               MOV      R0,R9
   \   0000009C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009E   A1E0               B.N      ??f_mkdir_1
   2511          	dsect = clust2sect(dj.fs, dclst);
   \                     ??f_mkdir_8:
   \   000000A0   2100               MOVS     R1,R4
   \   000000A2   0098               LDR      R0,[SP, #+0]
   \   000000A4   ........           BL       clust2sect
   \   000000A8   0500               MOVS     R5,R0
   2512          
   2513          	dir = dj.fs->win;						/* Initialize the new directory table */
   \   000000AA   0098               LDR      R0,[SP, #+0]
   \   000000AC   00F23006           ADDW     R6,R0,#+48
   2514          	mem_set(dir, 0, SS(dj.fs));
   \   000000B0   4FF40072           MOV      R2,#+512
   \   000000B4   0021               MOVS     R1,#+0
   \   000000B6   3000               MOVS     R0,R6
   \   000000B8   ........           BL       mem_set
   2515          	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
   \   000000BC   0B22               MOVS     R2,#+11
   \   000000BE   2021               MOVS     R1,#+32
   \   000000C0   3000               MOVS     R0,R6
   \   000000C2   ........           BL       mem_set
   2516          	dir[DIR_Name] = '.';
   \   000000C6   2E20               MOVS     R0,#+46
   \   000000C8   3070               STRB     R0,[R6, #+0]
   2517          	dir[DIR_Attr] = AM_DIR;
   \   000000CA   1020               MOVS     R0,#+16
   \   000000CC   F072               STRB     R0,[R6, #+11]
   2518          	tim = get_fattime();
   \   000000CE   ........           BL       get_fattime
   \   000000D2   0700               MOVS     R7,R0
   2519          	ST_DWORD(dir+DIR_WrtTime, tim);
   \   000000D4   B775               STRB     R7,[R6, #+22]
   \   000000D6   3800               MOVS     R0,R7
   \   000000D8   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000DA   000A               LSRS     R0,R0,#+8
   \   000000DC   F075               STRB     R0,[R6, #+23]
   \   000000DE   380C               LSRS     R0,R7,#+16
   \   000000E0   3076               STRB     R0,[R6, #+24]
   \   000000E2   380E               LSRS     R0,R7,#+24
   \   000000E4   7076               STRB     R0,[R6, #+25]
   2520          	ST_WORD(dir+DIR_FstClusLO, dclst);
   \   000000E6   B476               STRB     R4,[R6, #+26]
   \   000000E8   2000               MOVS     R0,R4
   \   000000EA   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000EC   000A               LSRS     R0,R0,#+8
   \   000000EE   F076               STRB     R0,[R6, #+27]
   2521          	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
   \   000000F0   200C               LSRS     R0,R4,#+16
   \   000000F2   3075               STRB     R0,[R6, #+20]
   \   000000F4   200C               LSRS     R0,R4,#+16
   \   000000F6   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000F8   000A               LSRS     R0,R0,#+8
   \   000000FA   7075               STRB     R0,[R6, #+21]
   2522          	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
   \   000000FC   2022               MOVS     R2,#+32
   \   000000FE   3100               MOVS     R1,R6
   \   00000100   16F12000           ADDS     R0,R6,#+32
   \   00000104   ........           BL       mem_cpy
   2523          	dir[33] = '.';
   \   00000108   2E20               MOVS     R0,#+46
   \   0000010A   86F82100           STRB     R0,[R6, #+33]
   2524          	pclst = dj.sclust;
   \   0000010E   0298               LDR      R0,[SP, #+8]
   2525          	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
   \   00000110   0099               LDR      R1,[SP, #+0]
   \   00000112   0978               LDRB     R1,[R1, #+0]
   \   00000114   0329               CMP      R1,#+3
   \   00000116   04D1               BNE.N    ??f_mkdir_9
   \   00000118   0099               LDR      R1,[SP, #+0]
   \   0000011A   496A               LDR      R1,[R1, #+36]
   \   0000011C   8842               CMP      R0,R1
   \   0000011E   00D1               BNE.N    ??f_mkdir_9
   2526          		pclst = 0;
   \   00000120   0020               MOVS     R0,#+0
   2527          	ST_WORD(dir+32+DIR_FstClusLO, pclst);
   \                     ??f_mkdir_9:
   \   00000122   86F83A00           STRB     R0,[R6, #+58]
   \   00000126   0100               MOVS     R1,R0
   \   00000128   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000012A   090A               LSRS     R1,R1,#+8
   \   0000012C   86F83B10           STRB     R1,[R6, #+59]
   2528          	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
   \   00000130   010C               LSRS     R1,R0,#+16
   \   00000132   86F83410           STRB     R1,[R6, #+52]
   \   00000136   000C               LSRS     R0,R0,#+16
   \   00000138   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000013A   000A               LSRS     R0,R0,#+8
   \   0000013C   86F83500           STRB     R0,[R6, #+53]
   2529          	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
   \   00000140   5FF00008           MOVS     R8,#+0
   \   00000144   07E0               B.N      ??f_mkdir_10
   2530          		dj.fs->winsect = dsect++;
   2531          		dj.fs->wflag = 1;
   2532          		res = move_window(dj.fs, 0);
   2533          		if (res) LEAVE_FF(dj.fs, res);
   2534          		mem_set(dir, 0, SS(dj.fs));
   \                     ??f_mkdir_11:
   \   00000146   4FF40072           MOV      R2,#+512
   \   0000014A   0021               MOVS     R1,#+0
   \   0000014C   3000               MOVS     R0,R6
   \   0000014E   ........           BL       mem_set
   \   00000152   18F10108           ADDS     R8,R8,#+1
   \                     ??f_mkdir_10:
   \   00000156   0098               LDR      R0,[SP, #+0]
   \   00000158   8078               LDRB     R0,[R0, #+2]
   \   0000015A   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000015E   8045               CMP      R8,R0
   \   00000160   12D2               BCS.N    ??f_mkdir_12
   \   00000162   0098               LDR      R0,[SP, #+0]
   \   00000164   C562               STR      R5,[R0, #+44]
   \   00000166   6D1C               ADDS     R5,R5,#+1
   \   00000168   0098               LDR      R0,[SP, #+0]
   \   0000016A   0121               MOVS     R1,#+1
   \   0000016C   0171               STRB     R1,[R0, #+4]
   \   0000016E   0021               MOVS     R1,#+0
   \   00000170   0098               LDR      R0,[SP, #+0]
   \   00000172   ........           BL       move_window
   \   00000176   8146               MOV      R9,R0
   \   00000178   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000017C   B9F1000F           CMP      R9,#+0
   \   00000180   E1D0               BEQ.N    ??f_mkdir_11
   \   00000182   4846               MOV      R0,R9
   \   00000184   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000186   2DE0               B.N      ??f_mkdir_1
   2535          	}
   2536          
   2537          	res = dir_register(&dj);
   \                     ??f_mkdir_12:
   \   00000188   00A8               ADD      R0,SP,#+0
   \   0000018A   ........           BL       dir_register
   \   0000018E   8146               MOV      R9,R0
   2538          	if (res != FR_OK) {
   \   00000190   5FFA89F9           UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000194   B9F1000F           CMP      R9,#+0
   \   00000198   04D0               BEQ.N    ??f_mkdir_13
   2539          		remove_chain(dj.fs, dclst);
   \   0000019A   2100               MOVS     R1,R4
   \   0000019C   0098               LDR      R0,[SP, #+0]
   \   0000019E   ........           BL       remove_chain
   \   000001A2   1DE0               B.N      ??f_mkdir_14
   2540          	} else {
   2541          		dir = dj.dir;
   \                     ??f_mkdir_13:
   \   000001A4   059E               LDR      R6,[SP, #+20]
   2542          		dir[DIR_Attr] = AM_DIR;					/* Attribute */
   \   000001A6   1020               MOVS     R0,#+16
   \   000001A8   F072               STRB     R0,[R6, #+11]
   2543          		ST_DWORD(dir+DIR_WrtTime, tim);			/* Create time */
   \   000001AA   B775               STRB     R7,[R6, #+22]
   \   000001AC   3800               MOVS     R0,R7
   \   000001AE   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001B0   000A               LSRS     R0,R0,#+8
   \   000001B2   F075               STRB     R0,[R6, #+23]
   \   000001B4   380C               LSRS     R0,R7,#+16
   \   000001B6   3076               STRB     R0,[R6, #+24]
   \   000001B8   380E               LSRS     R0,R7,#+24
   \   000001BA   7076               STRB     R0,[R6, #+25]
   2544          		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
   \   000001BC   B476               STRB     R4,[R6, #+26]
   \   000001BE   2000               MOVS     R0,R4
   \   000001C0   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001C2   000A               LSRS     R0,R0,#+8
   \   000001C4   F076               STRB     R0,[R6, #+27]
   2545          		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
   \   000001C6   200C               LSRS     R0,R4,#+16
   \   000001C8   3075               STRB     R0,[R6, #+20]
   \   000001CA   200C               LSRS     R0,R4,#+16
   \   000001CC   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001CE   000A               LSRS     R0,R0,#+8
   \   000001D0   7075               STRB     R0,[R6, #+21]
   2546          		dj.fs->wflag = 1;
   \   000001D2   0098               LDR      R0,[SP, #+0]
   \   000001D4   0121               MOVS     R1,#+1
   \   000001D6   0171               STRB     R1,[R0, #+4]
   2547          		res = sync(dj.fs);
   \   000001D8   0098               LDR      R0,[SP, #+0]
   \   000001DA   ........           BL       sync
   \   000001DE   8146               MOV      R9,R0
   2548          	}
   2549          
   2550          	LEAVE_FF(dj.fs, res);
   \                     ??f_mkdir_14:
   \   000001E0   4846               MOV      R0,R9
   \   000001E2   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??f_mkdir_1:
   \   000001E4   0DB0               ADD      SP,SP,#+52
   \   000001E6   BDE8F083           POP      {R4-R9,PC}       ;; return
   2551          }
   2552          
   2553          
   2554          
   2555          
   2556          /*-----------------------------------------------------------------------*/
   2557          /* Change File Attribute                                                 */
   2558          /*-----------------------------------------------------------------------*/
   2559          

   \                                 In section .text, align 2, keep-with-next
   2560          FRESULT f_chmod (
   2561          	const XCHAR *path,	/* Pointer to the file path */
   2562          	BYTE value,			/* Attribute bits */
   2563          	BYTE mask			/* Attribute mask to change */
   2564          )
   2565          {
   \                     f_chmod:
   \   00000000   71B5               PUSH     {R0,R4-R6,LR}
   \   00000002   8DB0               SUB      SP,SP,#+52
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1400               MOVS     R4,R2
   2566          	FRESULT res;
   2567          	DIR dj;
   2568          	NAMEBUF(sfn, lfn);
   \   00000008   ........           LDR.W    R6,??DataTable21
   2569          	BYTE *dir;
   2570          
   2571          
   2572          	res = chk_mounted(&path, &dj.fs, 1);
   \   0000000C   0122               MOVS     R2,#+1
   \   0000000E   03A9               ADD      R1,SP,#+12
   \   00000010   0DA8               ADD      R0,SP,#+52
   \   00000012   ........           BL       chk_mounted
   2573          	if (res == FR_OK) {
   \   00000016   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0028               CMP      R0,#+0
   \   0000001A   1CD1               BNE.N    ??f_chmod_0
   2574          		INITBUF(dj, sfn, lfn);
   \   0000001C   00A8               ADD      R0,SP,#+0
   \   0000001E   0990               STR      R0,[SP, #+36]
   \   00000020   0A96               STR      R6,[SP, #+40]
   2575          		res = follow_path(&dj, path);		/* Follow the file path */
   \   00000022   0D99               LDR      R1,[SP, #+52]
   \   00000024   03A8               ADD      R0,SP,#+12
   \   00000026   ........           BL       follow_path
   2576          		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
   2577          			res = FR_INVALID_NAME;
   2578          		if (res == FR_OK) {
   \   0000002A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0028               CMP      R0,#+0
   \   0000002E   12D1               BNE.N    ??f_chmod_0
   2579          			dir = dj.dir;
   \   00000030   0898               LDR      R0,[SP, #+32]
   2580          			if (!dir) {						/* Is it a root directory? */
   \   00000032   0028               CMP      R0,#+0
   \   00000034   01D1               BNE.N    ??f_chmod_1
   2581          				res = FR_INVALID_NAME;
   \   00000036   0620               MOVS     R0,#+6
   \   00000038   0DE0               B.N      ??f_chmod_0
   2582          			} else {						/* File or sub directory */
   2583          				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
   \                     ??f_chmod_1:
   \   0000003A   14F02704           ANDS     R4,R4,#0x27
   2584          				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
   \   0000003E   14EA0501           ANDS     R1,R4,R5
   \   00000042   C27A               LDRB     R2,[R0, #+11]
   \   00000044   A243               BICS     R2,R2,R4
   \   00000046   1143               ORRS     R1,R2,R1
   \   00000048   C172               STRB     R1,[R0, #+11]
   2585          				dj.fs->wflag = 1;
   \   0000004A   0398               LDR      R0,[SP, #+12]
   \   0000004C   0121               MOVS     R1,#+1
   \   0000004E   0171               STRB     R1,[R0, #+4]
   2586          				res = sync(dj.fs);
   \   00000050   0398               LDR      R0,[SP, #+12]
   \   00000052   ........           BL       sync
   2587          			}
   2588          		}
   2589          	}
   2590          
   2591          	LEAVE_FF(dj.fs, res);
   \                     ??f_chmod_0:
   \   00000056   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000058   0EB0               ADD      SP,SP,#+56
   \   0000005A   70BD               POP      {R4-R6,PC}       ;; return
   2592          }
   2593          
   2594          
   2595          
   2596          
   2597          /*-----------------------------------------------------------------------*/
   2598          /* Change Timestamp                                                      */
   2599          /*-----------------------------------------------------------------------*/
   2600          

   \                                 In section .text, align 2, keep-with-next
   2601          FRESULT f_utime (
   2602          	const XCHAR *path,	/* Pointer to the file/directory name */
   2603          	const FILINFO *fno	/* Pointer to the time-stamp to be set */
   2604          )
   2605          {
   \                     f_utime:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   8CB0               SUB      SP,SP,#+48
   \   00000004   0C00               MOVS     R4,R1
   2606          	FRESULT res;
   2607          	DIR dj;
   2608          	NAMEBUF(sfn, lfn);
   \   00000006   ........           LDR.W    R5,??DataTable21
   2609          	BYTE *dir;
   2610          
   2611          
   2612          	res = chk_mounted(&path, &dj.fs, 1);
   \   0000000A   0122               MOVS     R2,#+1
   \   0000000C   03A9               ADD      R1,SP,#+12
   \   0000000E   0CA8               ADD      R0,SP,#+48
   \   00000010   ........           BL       chk_mounted
   2613          	if (res == FR_OK) {
   \   00000014   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0028               CMP      R0,#+0
   \   00000018   20D1               BNE.N    ??f_utime_0
   2614          		INITBUF(dj, sfn, lfn);
   \   0000001A   00A8               ADD      R0,SP,#+0
   \   0000001C   0990               STR      R0,[SP, #+36]
   \   0000001E   0A95               STR      R5,[SP, #+40]
   2615          		res = follow_path(&dj, path);	/* Follow the file path */
   \   00000020   0C99               LDR      R1,[SP, #+48]
   \   00000022   03A8               ADD      R0,SP,#+12
   \   00000024   ........           BL       follow_path
   2616          		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
   2617          			res = FR_INVALID_NAME;
   2618          		if (res == FR_OK) {
   \   00000028   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0028               CMP      R0,#+0
   \   0000002C   16D1               BNE.N    ??f_utime_0
   2619          			dir = dj.dir;
   \   0000002E   0898               LDR      R0,[SP, #+32]
   2620          			if (!dir) {				/* Root directory */
   \   00000030   0028               CMP      R0,#+0
   \   00000032   01D1               BNE.N    ??f_utime_1
   2621          				res = FR_INVALID_NAME;
   \   00000034   0620               MOVS     R0,#+6
   \   00000036   11E0               B.N      ??f_utime_0
   2622          			} else {				/* File or sub-directory */
   2623          				ST_WORD(dir+DIR_WrtTime, fno->ftime);
   \                     ??f_utime_1:
   \   00000038   E188               LDRH     R1,[R4, #+6]
   \   0000003A   8175               STRB     R1,[R0, #+22]
   \   0000003C   E188               LDRH     R1,[R4, #+6]
   \   0000003E   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000040   090A               LSRS     R1,R1,#+8
   \   00000042   C175               STRB     R1,[R0, #+23]
   2624          				ST_WORD(dir+DIR_WrtDate, fno->fdate);
   \   00000044   A188               LDRH     R1,[R4, #+4]
   \   00000046   0176               STRB     R1,[R0, #+24]
   \   00000048   A188               LDRH     R1,[R4, #+4]
   \   0000004A   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000004C   090A               LSRS     R1,R1,#+8
   \   0000004E   4176               STRB     R1,[R0, #+25]
   2625          				dj.fs->wflag = 1;
   \   00000050   0398               LDR      R0,[SP, #+12]
   \   00000052   0121               MOVS     R1,#+1
   \   00000054   0171               STRB     R1,[R0, #+4]
   2626          				res = sync(dj.fs);
   \   00000056   0398               LDR      R0,[SP, #+12]
   \   00000058   ........           BL       sync
   2627          			}
   2628          		}
   2629          	}
   2630          
   2631          	LEAVE_FF(dj.fs, res);
   \                     ??f_utime_0:
   \   0000005C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0DB0               ADD      SP,SP,#+52
   \   00000060   30BD               POP      {R4,R5,PC}       ;; return
   2632          }
   2633          
   2634          
   2635          
   2636          
   2637          /*-----------------------------------------------------------------------*/
   2638          /* Rename File/Directory                                                 */
   2639          /*-----------------------------------------------------------------------*/
   2640          

   \                                 In section .text, align 2, keep-with-next
   2641          FRESULT f_rename (
   2642          	const XCHAR *path_old,	/* Pointer to the old name */
   2643          	const XCHAR *path_new	/* Pointer to the new name */
   2644          )
   2645          {
   \                     f_rename:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   9CB0               SUB      SP,SP,#+112
   \   00000004   0C00               MOVS     R4,R1
   2646          	FRESULT res;
   2647          	DIR dj_old, dj_new;
   2648          	NAMEBUF(sfn, lfn);
   \   00000006   ........           LDR.W    R0,??DataTable21
   2649          	BYTE buf[21], *dir;
   2650          	DWORD dw;
   2651          
   2652          
   2653          	INITBUF(dj_old, sfn, lfn);
   \   0000000A   18A9               ADD      R1,SP,#+96
   \   0000000C   0F91               STR      R1,[SP, #+60]
   \   0000000E   1090               STR      R0,[SP, #+64]
   2654          	res = chk_mounted(&path_old, &dj_old.fs, 1);
   \   00000010   0122               MOVS     R2,#+1
   \   00000012   09A9               ADD      R1,SP,#+36
   \   00000014   1CA8               ADD      R0,SP,#+112
   \   00000016   ........           BL       chk_mounted
   \   0000001A   0500               MOVS     R5,R0
   2655          	if (res == FR_OK) {
   \   0000001C   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001E   002D               CMP      R5,#+0
   \   00000020   06D1               BNE.N    ??f_rename_0
   2656          		dj_new.fs = dj_old.fs;
   \   00000022   0998               LDR      R0,[SP, #+36]
   \   00000024   0090               STR      R0,[SP, #+0]
   2657          		res = follow_path(&dj_old, path_old);	/* Check old object */
   \   00000026   1C99               LDR      R1,[SP, #+112]
   \   00000028   09A8               ADD      R0,SP,#+36
   \   0000002A   ........           BL       follow_path
   \   0000002E   0500               MOVS     R5,R0
   2658          		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
   2659          			res = FR_INVALID_NAME;
   2660          	}
   2661          	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
   \                     ??f_rename_0:
   \   00000030   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000032   002D               CMP      R5,#+0
   \   00000034   02D0               BEQ.N    ??f_rename_1
   \   00000036   2800               MOVS     R0,R5
   \   00000038   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   80E0               B.N      ??f_rename_2
   2662          
   2663          	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
   \                     ??f_rename_1:
   \   0000003C   0E98               LDR      R0,[SP, #+56]
   \   0000003E   0028               CMP      R0,#+0
   \   00000040   01D1               BNE.N    ??f_rename_3
   \   00000042   0420               MOVS     R0,#+4
   \   00000044   7BE0               B.N      ??f_rename_2
   2664          	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */
   \                     ??f_rename_3:
   \   00000046   1522               MOVS     R2,#+21
   \   00000048   0E98               LDR      R0,[SP, #+56]
   \   0000004A   10F10B01           ADDS     R1,R0,#+11
   \   0000004E   12A8               ADD      R0,SP,#+72
   \   00000050   ........           BL       mem_cpy
   2665          
   2666          	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
   \   00000054   2422               MOVS     R2,#+36
   \   00000056   09A9               ADD      R1,SP,#+36
   \   00000058   00A8               ADD      R0,SP,#+0
   \   0000005A   ........           BL       mem_cpy
   2667          	res = follow_path(&dj_new, path_new);		/* Check new object */
   \   0000005E   2100               MOVS     R1,R4
   \   00000060   00A8               ADD      R0,SP,#+0
   \   00000062   ........           BL       follow_path
   \   00000066   0500               MOVS     R5,R0
   2668          	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
   \   00000068   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006A   002D               CMP      R5,#+0
   \   0000006C   00D1               BNE.N    ??f_rename_4
   \   0000006E   0825               MOVS     R5,#+8
   2669          	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
   \                     ??f_rename_4:
   \   00000070   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000072   042D               CMP      R5,#+4
   \   00000074   61D1               BNE.N    ??f_rename_5
   2670          		res = dir_register(&dj_new);			/* Register the new object */
   \   00000076   00A8               ADD      R0,SP,#+0
   \   00000078   ........           BL       dir_register
   \   0000007C   0500               MOVS     R5,R0
   2671          		if (res == FR_OK) {
   \   0000007E   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000080   002D               CMP      R5,#+0
   \   00000082   5AD1               BNE.N    ??f_rename_5
   2672          			dir = dj_new.dir;					/* Copy object information into new entry */
   \   00000084   059C               LDR      R4,[SP, #+20]
   2673          			mem_cpy(dir+13, buf+2, 19);
   \   00000086   1322               MOVS     R2,#+19
   \   00000088   0DF14A01           ADD      R1,SP,#+74
   \   0000008C   14F10D00           ADDS     R0,R4,#+13
   \   00000090   ........           BL       mem_cpy
   2674          			dir[DIR_Attr] = buf[0] | AM_ARC;
   \   00000094   9DF84800           LDRB     R0,[SP, #+72]
   \   00000098   50F02000           ORRS     R0,R0,#0x20
   \   0000009C   E072               STRB     R0,[R4, #+11]
   2675          			dj_old.fs->wflag = 1;
   \   0000009E   0998               LDR      R0,[SP, #+36]
   \   000000A0   0121               MOVS     R1,#+1
   \   000000A2   0171               STRB     R1,[R0, #+4]
   2676          			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
   \   000000A4   E07A               LDRB     R0,[R4, #+11]
   \   000000A6   C006               LSLS     R0,R0,#+27
   \   000000A8   39D5               BPL.N    ??f_rename_6
   2677          				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
   \   000000AA   607D               LDRB     R0,[R4, #+21]
   \   000000AC   217D               LDRB     R1,[R4, #+20]
   \   000000AE   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   000000B2   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000B4   E17E               LDRB     R1,[R4, #+27]
   \   000000B6   A27E               LDRB     R2,[R4, #+26]
   \   000000B8   52EA0121           ORRS     R1,R2,R1, LSL #+8
   \   000000BC   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000BE   0143               ORRS     R1,R1,R0
   \   000000C0   0098               LDR      R0,[SP, #+0]
   \   000000C2   ........           BL       clust2sect
   2678          				if (!dw) {
   \   000000C6   0028               CMP      R0,#+0
   \   000000C8   01D1               BNE.N    ??f_rename_7
   2679          					res = FR_INT_ERR;
   \   000000CA   0225               MOVS     R5,#+2
   \   000000CC   27E0               B.N      ??f_rename_6
   2680          				} else {
   2681          					res = move_window(dj_new.fs, dw);
   \                     ??f_rename_7:
   \   000000CE   0100               MOVS     R1,R0
   \   000000D0   0098               LDR      R0,[SP, #+0]
   \   000000D2   ........           BL       move_window
   \   000000D6   0500               MOVS     R5,R0
   2682          					dir = dj_new.fs->win+32;
   \   000000D8   0098               LDR      R0,[SP, #+0]
   \   000000DA   00F25004           ADDW     R4,R0,#+80
   2683          					if (res == FR_OK && dir[1] == '.') {
   \   000000DE   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000E0   002D               CMP      R5,#+0
   \   000000E2   1CD1               BNE.N    ??f_rename_6
   \   000000E4   6078               LDRB     R0,[R4, #+1]
   \   000000E6   2E28               CMP      R0,#+46
   \   000000E8   19D1               BNE.N    ??f_rename_6
   2684          						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
   \   000000EA   0098               LDR      R0,[SP, #+0]
   \   000000EC   0078               LDRB     R0,[R0, #+0]
   \   000000EE   0328               CMP      R0,#+3
   \   000000F0   06D1               BNE.N    ??f_rename_8
   \   000000F2   0298               LDR      R0,[SP, #+8]
   \   000000F4   0099               LDR      R1,[SP, #+0]
   \   000000F6   496A               LDR      R1,[R1, #+36]
   \   000000F8   8842               CMP      R0,R1
   \   000000FA   01D1               BNE.N    ??f_rename_8
   \   000000FC   0020               MOVS     R0,#+0
   \   000000FE   00E0               B.N      ??f_rename_9
   \                     ??f_rename_8:
   \   00000100   0298               LDR      R0,[SP, #+8]
   2685          						ST_WORD(dir+DIR_FstClusLO, dw);
   \                     ??f_rename_9:
   \   00000102   A076               STRB     R0,[R4, #+26]
   \   00000104   0100               MOVS     R1,R0
   \   00000106   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000108   090A               LSRS     R1,R1,#+8
   \   0000010A   E176               STRB     R1,[R4, #+27]
   2686          						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
   \   0000010C   010C               LSRS     R1,R0,#+16
   \   0000010E   2175               STRB     R1,[R4, #+20]
   \   00000110   000C               LSRS     R0,R0,#+16
   \   00000112   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000114   000A               LSRS     R0,R0,#+8
   \   00000116   6075               STRB     R0,[R4, #+21]
   2687          						dj_new.fs->wflag = 1;
   \   00000118   0098               LDR      R0,[SP, #+0]
   \   0000011A   0121               MOVS     R1,#+1
   \   0000011C   0171               STRB     R1,[R0, #+4]
   2688          					}
   2689          				}
   2690          			}
   2691          			if (res == FR_OK) {
   \                     ??f_rename_6:
   \   0000011E   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000120   002D               CMP      R5,#+0
   \   00000122   0AD1               BNE.N    ??f_rename_5
   2692          				res = dir_remove(&dj_old);			/* Remove old entry */
   \   00000124   09A8               ADD      R0,SP,#+36
   \   00000126   ........           BL       dir_remove
   \   0000012A   0500               MOVS     R5,R0
   2693          				if (res == FR_OK)
   \   0000012C   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000012E   002D               CMP      R5,#+0
   \   00000130   03D1               BNE.N    ??f_rename_5
   2694          					res = sync(dj_old.fs);
   \   00000132   0998               LDR      R0,[SP, #+36]
   \   00000134   ........           BL       sync
   \   00000138   0500               MOVS     R5,R0
   2695          			}
   2696          		}
   2697          	}
   2698          
   2699          	LEAVE_FF(dj_old.fs, res);
   \                     ??f_rename_5:
   \   0000013A   2800               MOVS     R0,R5
   \   0000013C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??f_rename_2:
   \   0000013E   1DB0               ADD      SP,SP,#+116
   \   00000140   30BD               POP      {R4,R5,PC}       ;; return
   2700          }
   2701          
   2702          #endif /* !_FS_READONLY */
   2703          #endif /* _FS_MINIMIZE == 0 */
   2704          #endif /* _FS_MINIMIZE <= 1 */
   2705          #endif /* _FS_MINIMIZE <= 2 */
   2706          
   2707          
   2708          
   2709          /*-----------------------------------------------------------------------*/
   2710          /* Forward data to the stream directly (Available on only _FS_TINY cfg)  */
   2711          /*-----------------------------------------------------------------------*/
   2712          #if _USE_FORWARD && _FS_TINY
   2713          
   2714          FRESULT f_forward (
   2715          	FIL *fp, 						/* Pointer to the file object */
   2716          	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
   2717          	UINT btr,						/* Number of bytes to forward */
   2718          	UINT *bf						/* Pointer to number of bytes forwarded */
   2719          )
   2720          {
   2721          	FRESULT res;
   2722          	DWORD remain, clst, sect;
   2723          	UINT rcnt;
   2724          
   2725          
   2726          	*bf = 0;
   2727          
   2728          	res = validate(fp->fs, fp->id);					/* Check validity of the object */
   2729          	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2730          	if (fp->flag & FA__ERROR)						/* Check error flag */
   2731          		LEAVE_FF(fp->fs, FR_INT_ERR);
   2732          	if (!(fp->flag & FA_READ))						/* Check access mode */
   2733          		LEAVE_FF(fp->fs, FR_DENIED);
   2734          
   2735          	remain = fp->fsize - fp->fptr;
   2736          	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
   2737          
   2738          	for ( ;  btr && (*func)(NULL, 0);				/* Repeat until all data transferred or stream becomes busy */
   2739          		fp->fptr += rcnt, *bf += rcnt, btr -= rcnt) {
   2740          		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
   2741          			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
   2742          				clst = (fp->fptr == 0) ?			/* On the top of the file? */
   2743          					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
   2744          				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
   2745          				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2746          				fp->curr_clust = clst;				/* Update current cluster */
   2747          				fp->csect = 0;						/* Reset sector address in the cluster */
   2748          			}
   2749          			fp->csect++;							/* Next sector address in the cluster */
   2750          		}
   2751          		sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current data sector */
   2752          		if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2753          		sect += fp->csect - 1;
   2754          		if (move_window(fp->fs, sect))				/* Move sector window */
   2755          			ABORT(fp->fs, FR_DISK_ERR);
   2756          		fp->dsect = sect;
   2757          		rcnt = SS(fp->fs) - (WORD)(fp->fptr % SS(fp->fs));	/* Forward data from sector window */
   2758          		if (rcnt > btr) rcnt = btr;
   2759          		rcnt = (*func)(&fp->fs->win[(WORD)fp->fptr % SS(fp->fs)], rcnt);
   2760          		if (!rcnt) ABORT(fp->fs, FR_INT_ERR);
   2761          	}
   2762          
   2763          	LEAVE_FF(fp->fs, FR_OK);
   2764          }
   2765          #endif /* _USE_FORWARD */
   2766          
   2767          
   2768          
   2769          #if _USE_MKFS && !_FS_READONLY
   2770          /*-----------------------------------------------------------------------*/
   2771          /* Create File System on the Drive                                       */
   2772          /*-----------------------------------------------------------------------*/
   2773          #define N_ROOTDIR	512			/* Multiple of 32 and <= 2048 */
   2774          #define N_FATS		1			/* 1 or 2 */
   2775          #define MAX_SECTOR	131072000UL	/* Maximum partition size */
   2776          #define MIN_SECTOR	2000UL		/* Minimum partition size */
   2777          
   2778          

   \                                 In section .text, align 2, keep-with-next
   2779          FRESULT f_mkfs (
   2780          	BYTE drv,			/* Logical drive number */
   2781          	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
   2782          	WORD allocsize		/* Allocation unit size [bytes] */
   2783          )
   2784          {
   \                     f_mkfs:
   \   00000000   2DE9F24F           PUSH     {R1,R4-R11,LR}
   \   00000004   86B0               SUB      SP,SP,#+24
   \   00000006   0500               MOVS     R5,R0
   \   00000008   1400               MOVS     R4,R2
   2785          	static const DWORD sstbl[] = { 2048000, 1024000, 512000, 256000, 128000, 64000, 32000, 16000, 8000, 4000,   0 };
   2786          	static const WORD cstbl[] =  {   32768,   16384,   8192,   4096,   2048, 16384,  8192,  4096, 2048, 1024, 512 };
   2787          	BYTE fmt, m, *tbl;
   2788          	DWORD b_part, b_fat, b_dir, b_data;		/* Area offset (LBA) */
   2789          	DWORD n_part, n_rsv, n_fat, n_dir;		/* Area size */
   2790          	DWORD n_clst, d, n;
   2791          	WORD as;
   2792          	FATFS *fs;
   2793          	DSTATUS stat;
   2794          
   2795          
   2796          	/* Check validity of the parameters */
   2797          	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
   \   0000000A   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000C   012D               CMP      R5,#+1
   \   0000000E   01D3               BCC.N    ??f_mkfs_0
   \   00000010   0B20               MOVS     R0,#+11
   \   00000012   5EE3               B.N      ??f_mkfs_1
   2798          	if (partition >= 2) return FR_MKFS_ABORTED;
   \                     ??f_mkfs_0:
   \   00000014   9DF81800           LDRB     R0,[SP, #+24]
   \   00000018   0228               CMP      R0,#+2
   \   0000001A   01D3               BCC.N    ??f_mkfs_2
   \   0000001C   0E20               MOVS     R0,#+14
   \   0000001E   58E3               B.N      ??f_mkfs_1
   2799          
   2800          	/* Check mounted drive and clear work area */
   2801          	fs = FatFs[drv];
   \                     ??f_mkfs_2:
   \   00000020   EDB2               UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   ........           LDR.W    R0,??DataTable21_1
   \   00000026   50F82500           LDR      R0,[R0, R5, LSL #+2]
   \   0000002A   0490               STR      R0,[SP, #+16]
   2802          	if (!fs) return FR_NOT_ENABLED;
   \   0000002C   0498               LDR      R0,[SP, #+16]
   \   0000002E   0028               CMP      R0,#+0
   \   00000030   01D1               BNE.N    ??f_mkfs_3
   \   00000032   0C20               MOVS     R0,#+12
   \   00000034   4DE3               B.N      ??f_mkfs_1
   2803          	fs->fs_type = 0;
   \                     ??f_mkfs_3:
   \   00000036   0498               LDR      R0,[SP, #+16]
   \   00000038   0021               MOVS     R1,#+0
   \   0000003A   0170               STRB     R1,[R0, #+0]
   2804          	drv = LD2PD(drv);
   2805          
   2806          	/* Get disk statics */
   2807          	stat = disk_initialize(drv);
   \   0000003C   2800               MOVS     R0,R5
   \   0000003E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   ........           BL       disk_initialize
   2808          	if (stat & STA_NOINIT) return FR_NOT_READY;
   \   00000044   C107               LSLS     R1,R0,#+31
   \   00000046   01D5               BPL.N    ??f_mkfs_4
   \   00000048   0320               MOVS     R0,#+3
   \   0000004A   42E3               B.N      ??f_mkfs_1
   2809          	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
   \                     ??f_mkfs_4:
   \   0000004C   4007               LSLS     R0,R0,#+29
   \   0000004E   01D5               BPL.N    ??f_mkfs_5
   \   00000050   0A20               MOVS     R0,#+10
   \   00000052   3EE3               B.N      ??f_mkfs_1
   2810          #if _MAX_SS != 512						/* Get disk sector size */
   2811          	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
   2812          		|| SS(fs) > _MAX_SS)
   2813          		return FR_MKFS_ABORTED;
   2814          #endif
   2815          	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
   \                     ??f_mkfs_5:
   \   00000054   01AA               ADD      R2,SP,#+4
   \   00000056   0121               MOVS     R1,#+1
   \   00000058   2800               MOVS     R0,R5
   \   0000005A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005C   ........           BL       disk_ioctl
   \   00000060   0028               CMP      R0,#+0
   \   00000062   03D1               BNE.N    ??f_mkfs_6
   \   00000064   0198               LDR      R0,[SP, #+4]
   \   00000066   B0F5FA6F           CMP      R0,#+2000
   \   0000006A   01D2               BCS.N    ??f_mkfs_7
   2816          		return FR_MKFS_ABORTED;
   \                     ??f_mkfs_6:
   \   0000006C   0E20               MOVS     R0,#+14
   \   0000006E   30E3               B.N      ??f_mkfs_1
   2817          	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
   \                     ??f_mkfs_7:
   \   00000070   0198               LDR      R0,[SP, #+4]
   \   00000072   B0F1FA6F           CMP      R0,#+131072000
   \   00000076   02D9               BLS.N    ??f_mkfs_8
   \   00000078   5FF0FA60           MOVS     R0,#+131072000
   \   0000007C   0190               STR      R0,[SP, #+4]
   2818          	b_part = (!partition) ? 63 : 0;		/* Boot sector */
   \                     ??f_mkfs_8:
   \   0000007E   9DF81800           LDRB     R0,[SP, #+24]
   \   00000082   0028               CMP      R0,#+0
   \   00000084   01D1               BNE.N    ??f_mkfs_9
   \   00000086   3F20               MOVS     R0,#+63
   \   00000088   00E0               B.N      ??f_mkfs_10
   \                     ??f_mkfs_9:
   \   0000008A   0020               MOVS     R0,#+0
   \                     ??f_mkfs_10:
   \   0000008C   0290               STR      R0,[SP, #+8]
   2819          	n_part -= b_part;
   \   0000008E   0198               LDR      R0,[SP, #+4]
   \   00000090   0299               LDR      R1,[SP, #+8]
   \   00000092   401A               SUBS     R0,R0,R1
   \   00000094   0190               STR      R0,[SP, #+4]
   2820          	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
   \   00000096   4FF40070           MOV      R0,#+512
   \   0000009A   00E0               B.N      ??f_mkfs_11
   \                     ??f_mkfs_12:
   \   0000009C   4000               LSLS     R0,R0,#+1
   \                     ??f_mkfs_11:
   \   0000009E   B0F5004F           CMP      R0,#+32768
   \   000000A2   02D8               BHI.N    ??f_mkfs_13
   \   000000A4   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000A6   A042               CMP      R0,R4
   \   000000A8   F8D1               BNE.N    ??f_mkfs_12
   2821          	if (d != allocsize) allocsize = 0;
   \                     ??f_mkfs_13:
   \   000000AA   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000AC   A042               CMP      R0,R4
   \   000000AE   00D0               BEQ.N    ??f_mkfs_14
   \   000000B0   0024               MOVS     R4,#+0
   2822          	if (!allocsize) {					/* Auto selection of cluster size */
   \                     ??f_mkfs_14:
   \   000000B2   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000B4   002C               CMP      R4,#+0
   \   000000B6   1DD1               BNE.N    ??f_mkfs_15
   2823          		d = n_part;
   \   000000B8   0198               LDR      R0,[SP, #+4]
   2824          		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
   \   000000BA   4FF40071           MOV      R1,#+512
   \   000000BE   02E0               B.N      ??f_mkfs_16
   \                     ??f_mkfs_17:
   \   000000C0   4008               LSRS     R0,R0,#+1
   \   000000C2   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000C4   4908               LSRS     R1,R1,#+1
   \                     ??f_mkfs_16:
   \   000000C6   40F20122           MOVW     R2,#+513
   \   000000CA   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000CC   9142               CMP      R1,R2
   \   000000CE   F7D2               BCS.N    ??f_mkfs_17
   2825          		for (n = 0; d < sstbl[n]; n++) ;
   \   000000D0   0021               MOVS     R1,#+0
   \   000000D2   0091               STR      R1,[SP, #+0]
   \   000000D4   02E0               B.N      ??f_mkfs_18
   \                     ??f_mkfs_19:
   \   000000D6   0099               LDR      R1,[SP, #+0]
   \   000000D8   491C               ADDS     R1,R1,#+1
   \   000000DA   0091               STR      R1,[SP, #+0]
   \                     ??f_mkfs_18:
   \   000000DC   0099               LDR      R1,[SP, #+0]
   \   000000DE   ........           ADR.W    R2,??sstbl
   \   000000E2   52F82110           LDR      R1,[R2, R1, LSL #+2]
   \   000000E6   8842               CMP      R0,R1
   \   000000E8   F5D3               BCC.N    ??f_mkfs_19
   2826          		allocsize = cstbl[n];
   \   000000EA   0098               LDR      R0,[SP, #+0]
   \   000000EC   ........           ADR.W    R1,??cstbl
   \   000000F0   31F81040           LDRH     R4,[R1, R0, LSL #+1]
   2827          	}
   2828          	if (allocsize < SS(fs)) allocsize = SS(fs);
   \                     ??f_mkfs_15:
   \   000000F4   4FF40070           MOV      R0,#+512
   \   000000F8   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000FA   8442               CMP      R4,R0
   \   000000FC   01D2               BCS.N    ??f_mkfs_20
   \   000000FE   4FF40074           MOV      R4,#+512
   2829          
   2830          	allocsize /= SS(fs);		/* Number of sectors per cluster */
   \                     ??f_mkfs_20:
   \   00000102   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000104   640A               LSRS     R4,R4,#+9
   2831          
   2832          	/* Pre-compute number of clusters and FAT type */
   2833          	n_clst = n_part / allocsize;
   \   00000106   0198               LDR      R0,[SP, #+4]
   \   00000108   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000010A   B0FBF4FB           UDIV     R11,R0,R4
   2834          	fmt = FS_FAT12;
   \   0000010E   0126               MOVS     R6,#+1
   2835          	if (n_clst >= 0xFF5) fmt = FS_FAT16;
   \   00000110   40F6F570           MOVW     R0,#+4085
   \   00000114   8345               CMP      R11,R0
   \   00000116   00D3               BCC.N    ??f_mkfs_21
   \   00000118   0226               MOVS     R6,#+2
   2836          	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
   \                     ??f_mkfs_21:
   \   0000011A   4FF6F570           MOVW     R0,#+65525
   \   0000011E   8345               CMP      R11,R0
   \   00000120   00D3               BCC.N    ??f_mkfs_22
   \   00000122   0326               MOVS     R6,#+3
   2837          
   2838          	/* Determine offset and size of FAT structure */
   2839          	switch (fmt) {
   \                     ??f_mkfs_22:
   \   00000124   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000126   3000               MOVS     R0,R6
   \   00000128   0128               CMP      R0,#+1
   \   0000012A   02D0               BEQ.N    ??f_mkfs_23
   \   0000012C   0228               CMP      R0,#+2
   \   0000012E   10D0               BEQ.N    ??f_mkfs_24
   \   00000130   1CE0               B.N      ??f_mkfs_25
   2840          	case FS_FAT12:
   2841          		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
   \                     ??f_mkfs_23:
   \   00000132   0320               MOVS     R0,#+3
   \   00000134   00FB0BF0           MUL      R0,R0,R11
   \   00000138   401C               ADDS     R0,R0,#+1
   \   0000013A   4008               LSRS     R0,R0,#+1
   \   0000013C   00F20220           ADDW     R0,R0,#+514
   \   00000140   5FEA502A           LSRS     R10,R0,#+9
   2842          		n_rsv = 1 + partition;
   \   00000144   9DF81800           LDRB     R0,[SP, #+24]
   \   00000148   401C               ADDS     R0,R0,#+1
   \   0000014A   0590               STR      R0,[SP, #+20]
   2843          		n_dir = N_ROOTDIR * 32 / SS(fs);
   \   0000014C   2020               MOVS     R0,#+32
   \   0000014E   0390               STR      R0,[SP, #+12]
   2844          		break;
   \   00000150   19E0               B.N      ??f_mkfs_26
   2845          	case FS_FAT16:
   2846          		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
   \                     ??f_mkfs_24:
   \   00000152   5FEA4B00           LSLS     R0,R11,#+1
   \   00000156   00F20320           ADDW     R0,R0,#+515
   \   0000015A   5FEA502A           LSRS     R10,R0,#+9
   2847          		n_rsv = 1 + partition;
   \   0000015E   9DF81800           LDRB     R0,[SP, #+24]
   \   00000162   401C               ADDS     R0,R0,#+1
   \   00000164   0590               STR      R0,[SP, #+20]
   2848          		n_dir = N_ROOTDIR * 32 / SS(fs);
   \   00000166   2020               MOVS     R0,#+32
   \   00000168   0390               STR      R0,[SP, #+12]
   2849          		break;
   \   0000016A   0CE0               B.N      ??f_mkfs_26
   2850          	default:
   2851          		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
   \                     ??f_mkfs_25:
   \   0000016C   5FEA8B00           LSLS     R0,R11,#+2
   \   00000170   00F20720           ADDW     R0,R0,#+519
   \   00000174   5FEA502A           LSRS     R10,R0,#+9
   2852          		n_rsv = 33 - partition;
   \   00000178   9DF81800           LDRB     R0,[SP, #+24]
   \   0000017C   D0F12100           RSBS     R0,R0,#+33
   \   00000180   0590               STR      R0,[SP, #+20]
   2853          		n_dir = 0;
   \   00000182   0020               MOVS     R0,#+0
   \   00000184   0390               STR      R0,[SP, #+12]
   2854          	}
   2855          	b_fat = b_part + n_rsv;			/* FATs start sector */
   \                     ??f_mkfs_26:
   \   00000186   0298               LDR      R0,[SP, #+8]
   \   00000188   0599               LDR      R1,[SP, #+20]
   \   0000018A   11EB0009           ADDS     R9,R1,R0
   2856          	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
   \   0000018E   1AEB0900           ADDS     R0,R10,R9
   2857          	b_data = b_dir + n_dir;			/* Data start sector */
   \   00000192   0399               LDR      R1,[SP, #+12]
   \   00000194   0F18               ADDS     R7,R1,R0
   2858          
   2859          	/* Align data start sector to erase block boundary (for flash memory media) */
   2860          	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
   \   00000196   00AA               ADD      R2,SP,#+0
   \   00000198   0321               MOVS     R1,#+3
   \   0000019A   2800               MOVS     R0,R5
   \   0000019C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000019E   ........           BL       disk_ioctl
   \   000001A2   0028               CMP      R0,#+0
   \   000001A4   01D0               BEQ.N    ??f_mkfs_27
   \   000001A6   0E20               MOVS     R0,#+14
   \   000001A8   93E2               B.N      ??f_mkfs_1
   2861          	n = (b_data + n - 1) & ~(n - 1);
   \                     ??f_mkfs_27:
   \   000001AA   0098               LDR      R0,[SP, #+0]
   \   000001AC   C019               ADDS     R0,R0,R7
   \   000001AE   401E               SUBS     R0,R0,#+1
   \   000001B0   0099               LDR      R1,[SP, #+0]
   \   000001B2   491E               SUBS     R1,R1,#+1
   \   000001B4   8843               BICS     R0,R0,R1
   \   000001B6   0090               STR      R0,[SP, #+0]
   2862          	n_fat += (n - b_data) / N_FATS;
   \   000001B8   0098               LDR      R0,[SP, #+0]
   \   000001BA   C01B               SUBS     R0,R0,R7
   \   000001BC   0121               MOVS     R1,#+1
   \   000001BE   B0FBF1F0           UDIV     R0,R0,R1
   \   000001C2   10EB0A0A           ADDS     R10,R0,R10
   2863          	/* b_dir and b_data are no longer used below */
   2864          
   2865          	/* Determine number of cluster and final check of validity of the FAT type */
   2866          	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
   \   000001C6   0198               LDR      R0,[SP, #+4]
   \   000001C8   0599               LDR      R1,[SP, #+20]
   \   000001CA   401A               SUBS     R0,R0,R1
   \   000001CC   B0EB0A00           SUBS     R0,R0,R10
   \   000001D0   0399               LDR      R1,[SP, #+12]
   \   000001D2   401A               SUBS     R0,R0,R1
   \   000001D4   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000001D6   B0FBF4FB           UDIV     R11,R0,R4
   2867          	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
   2868          		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
   \   000001DA   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001DC   022E               CMP      R6,#+2
   \   000001DE   03D1               BNE.N    ??f_mkfs_28
   \   000001E0   40F6F570           MOVW     R0,#+4085
   \   000001E4   8345               CMP      R11,R0
   \   000001E6   06D3               BCC.N    ??f_mkfs_29
   \                     ??f_mkfs_28:
   \   000001E8   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001EA   032E               CMP      R6,#+3
   \   000001EC   05D1               BNE.N    ??f_mkfs_30
   \   000001EE   4FF6F570           MOVW     R0,#+65525
   \   000001F2   8345               CMP      R11,R0
   \   000001F4   01D2               BCS.N    ??f_mkfs_30
   2869          		return FR_MKFS_ABORTED;
   \                     ??f_mkfs_29:
   \   000001F6   0E20               MOVS     R0,#+14
   \   000001F8   6BE2               B.N      ??f_mkfs_1
   2870          
   2871          	/* Create partition table if needed */
   2872          	if (!partition) {
   \                     ??f_mkfs_30:
   \   000001FA   9DF81800           LDRB     R0,[SP, #+24]
   \   000001FE   0028               CMP      R0,#+0
   \   00000200   76D1               BNE.N    ??f_mkfs_31
   2873          		DWORD n_disk = b_part + n_part;
   \   00000202   0298               LDR      R0,[SP, #+8]
   \   00000204   0199               LDR      R1,[SP, #+4]
   \   00000206   0F18               ADDS     R7,R1,R0
   2874          
   2875          		mem_set(fs->win, 0, SS(fs));
   \   00000208   4FF40072           MOV      R2,#+512
   \   0000020C   0021               MOVS     R1,#+0
   \   0000020E   0498               LDR      R0,[SP, #+16]
   \   00000210   3030               ADDS     R0,R0,#+48
   \   00000212   ........           BL       mem_set
   2876          		tbl = fs->win+MBR_Table;
   \   00000216   0498               LDR      R0,[SP, #+16]
   \   00000218   00F2EE18           ADDW     R8,R0,#+494
   2877          		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
   \   0000021C   8020               MOVS     R0,#+128
   \   0000021E   88F80000           STRB     R0,[R8, #+0]
   \   00000222   0120               MOVS     R0,#+1
   \   00000224   88F80100           STRB     R0,[R8, #+1]
   \   00000228   0120               MOVS     R0,#+1
   \   0000022A   88F80200           STRB     R0,[R8, #+2]
   \   0000022E   0020               MOVS     R0,#+0
   \   00000230   88F80300           STRB     R0,[R8, #+3]
   2878          		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
   \   00000234   ........           LDR.W    R0,??DataTable21_2  ;; 0xfb0400
   \   00000238   8742               CMP      R7,R0
   \   0000023A   0DD2               BCS.N    ??f_mkfs_32
   2879          			n_disk = n_disk / 63 / 255;
   \   0000023C   3F20               MOVS     R0,#+63
   \   0000023E   B7FBF0F0           UDIV     R0,R7,R0
   \   00000242   FF21               MOVS     R1,#+255
   \   00000244   B0FBF1F7           UDIV     R7,R0,R1
   2880          			tbl[7] = (BYTE)n_disk;
   \   00000248   88F80770           STRB     R7,[R8, #+7]
   2881          			tbl[6] = (BYTE)((n_disk >> 2) | 63);
   \   0000024C   B808               LSRS     R0,R7,#+2
   \   0000024E   50F03F00           ORRS     R0,R0,#0x3F
   \   00000252   88F80600           STRB     R0,[R8, #+6]
   \   00000256   05E0               B.N      ??f_mkfs_33
   2882          		} else {
   2883          			ST_WORD(&tbl[6], 0xFFFF);
   \                     ??f_mkfs_32:
   \   00000258   FF20               MOVS     R0,#+255
   \   0000025A   88F80600           STRB     R0,[R8, #+6]
   \   0000025E   FF20               MOVS     R0,#+255
   \   00000260   88F80700           STRB     R0,[R8, #+7]
   2884          		}
   2885          		tbl[5] = 254;
   \                     ??f_mkfs_33:
   \   00000264   FE20               MOVS     R0,#+254
   \   00000266   88F80500           STRB     R0,[R8, #+5]
   2886          		if (fmt != FS_FAT32)			/* System ID */
   \   0000026A   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000026C   032E               CMP      R6,#+3
   \   0000026E   09D0               BEQ.N    ??f_mkfs_34
   2887          			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
   \   00000270   0198               LDR      R0,[SP, #+4]
   \   00000272   B0F5803F           CMP      R0,#+65536
   \   00000276   01D2               BCS.N    ??f_mkfs_35
   \   00000278   0420               MOVS     R0,#+4
   \   0000027A   00E0               B.N      ??f_mkfs_36
   \                     ??f_mkfs_35:
   \   0000027C   0620               MOVS     R0,#+6
   \                     ??f_mkfs_36:
   \   0000027E   88F80400           STRB     R0,[R8, #+4]
   \   00000282   02E0               B.N      ??f_mkfs_37
   2888          		else
   2889          			tbl[4] = 0x0c;
   \                     ??f_mkfs_34:
   \   00000284   0C20               MOVS     R0,#+12
   \   00000286   88F80400           STRB     R0,[R8, #+4]
   2890          		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
   \                     ??f_mkfs_37:
   \   0000028A   3F20               MOVS     R0,#+63
   \   0000028C   88F80800           STRB     R0,[R8, #+8]
   \   00000290   0020               MOVS     R0,#+0
   \   00000292   88F80900           STRB     R0,[R8, #+9]
   \   00000296   0020               MOVS     R0,#+0
   \   00000298   88F80A00           STRB     R0,[R8, #+10]
   \   0000029C   0020               MOVS     R0,#+0
   \   0000029E   88F80B00           STRB     R0,[R8, #+11]
   2891          		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
   \   000002A2   0198               LDR      R0,[SP, #+4]
   \   000002A4   88F80C00           STRB     R0,[R8, #+12]
   \   000002A8   0198               LDR      R0,[SP, #+4]
   \   000002AA   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000002AC   000A               LSRS     R0,R0,#+8
   \   000002AE   88F80D00           STRB     R0,[R8, #+13]
   \   000002B2   0198               LDR      R0,[SP, #+4]
   \   000002B4   000C               LSRS     R0,R0,#+16
   \   000002B6   88F80E00           STRB     R0,[R8, #+14]
   \   000002BA   0198               LDR      R0,[SP, #+4]
   \   000002BC   000E               LSRS     R0,R0,#+24
   \   000002BE   88F80F00           STRB     R0,[R8, #+15]
   2892          		ST_WORD(tbl+64, 0xAA55);		/* Signature */
   \   000002C2   5520               MOVS     R0,#+85
   \   000002C4   88F84000           STRB     R0,[R8, #+64]
   \   000002C8   AA20               MOVS     R0,#+170
   \   000002CA   88F84100           STRB     R0,[R8, #+65]
   2893          		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
   \   000002CE   0123               MOVS     R3,#+1
   \   000002D0   0022               MOVS     R2,#+0
   \   000002D2   0498               LDR      R0,[SP, #+16]
   \   000002D4   10F13001           ADDS     R1,R0,#+48
   \   000002D8   2800               MOVS     R0,R5
   \   000002DA   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002DC   ........           BL       disk_write
   \   000002E0   0028               CMP      R0,#+0
   \   000002E2   01D0               BEQ.N    ??f_mkfs_38
   2894          			return FR_DISK_ERR;
   \   000002E4   0120               MOVS     R0,#+1
   \   000002E6   F4E1               B.N      ??f_mkfs_1
   2895          		partition = 0xF8;
   \                     ??f_mkfs_38:
   \   000002E8   F820               MOVS     R0,#+248
   \   000002EA   8DF81800           STRB     R0,[SP, #+24]
   \   000002EE   02E0               B.N      ??f_mkfs_39
   2896          	} else {
   2897          		partition = 0xF0;
   \                     ??f_mkfs_31:
   \   000002F0   F020               MOVS     R0,#+240
   \   000002F2   8DF81800           STRB     R0,[SP, #+24]
   2898          	}
   2899          
   2900          	/* Create boot record */
   2901          	tbl = fs->win;								/* Clear buffer */
   \                     ??f_mkfs_39:
   \   000002F6   0498               LDR      R0,[SP, #+16]
   \   000002F8   00F23008           ADDW     R8,R0,#+48
   2902          	mem_set(tbl, 0, SS(fs));
   \   000002FC   4FF40072           MOV      R2,#+512
   \   00000300   0021               MOVS     R1,#+0
   \   00000302   4046               MOV      R0,R8
   \   00000304   ........           BL       mem_set
   2903          	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
   \   00000308   EB20               MOVS     R0,#+235
   \   0000030A   88F80000           STRB     R0,[R8, #+0]
   \   0000030E   FE20               MOVS     R0,#+254
   \   00000310   88F80100           STRB     R0,[R8, #+1]
   \   00000314   9020               MOVS     R0,#+144
   \   00000316   88F80200           STRB     R0,[R8, #+2]
   \   0000031A   0020               MOVS     R0,#+0
   \   0000031C   88F80300           STRB     R0,[R8, #+3]
   2904          	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
   \   00000320   0020               MOVS     R0,#+0
   \   00000322   88F80B00           STRB     R0,[R8, #+11]
   \   00000326   0220               MOVS     R0,#+2
   \   00000328   88F80C00           STRB     R0,[R8, #+12]
   2905          	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
   \   0000032C   88F80D40           STRB     R4,[R8, #+13]
   2906          	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
   \   00000330   0598               LDR      R0,[SP, #+20]
   \   00000332   88F80E00           STRB     R0,[R8, #+14]
   \   00000336   0598               LDR      R0,[SP, #+20]
   \   00000338   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000033A   000A               LSRS     R0,R0,#+8
   \   0000033C   88F80F00           STRB     R0,[R8, #+15]
   2907          	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
   \   00000340   0120               MOVS     R0,#+1
   \   00000342   88F81000           STRB     R0,[R8, #+16]
   2908          	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
   \   00000346   0398               LDR      R0,[SP, #+12]
   \   00000348   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000034A   0001               LSLS     R0,R0,#+4
   \   0000034C   88F81100           STRB     R0,[R8, #+17]
   \   00000350   0398               LDR      R0,[SP, #+12]
   \   00000352   0001               LSLS     R0,R0,#+4
   \   00000354   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000356   000A               LSRS     R0,R0,#+8
   \   00000358   88F81200           STRB     R0,[R8, #+18]
   2909          	if (n_part < 0x10000) {						/* Number of total sectors */
   \   0000035C   0198               LDR      R0,[SP, #+4]
   \   0000035E   B0F5803F           CMP      R0,#+65536
   \   00000362   08D2               BCS.N    ??f_mkfs_40
   2910          		ST_WORD(tbl+BPB_TotSec16, n_part);
   \   00000364   0198               LDR      R0,[SP, #+4]
   \   00000366   88F81300           STRB     R0,[R8, #+19]
   \   0000036A   0198               LDR      R0,[SP, #+4]
   \   0000036C   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000036E   000A               LSRS     R0,R0,#+8
   \   00000370   88F81400           STRB     R0,[R8, #+20]
   \   00000374   0FE0               B.N      ??f_mkfs_41
   2911          	} else {
   2912          		ST_DWORD(tbl+BPB_TotSec32, n_part);
   \                     ??f_mkfs_40:
   \   00000376   0198               LDR      R0,[SP, #+4]
   \   00000378   88F82000           STRB     R0,[R8, #+32]
   \   0000037C   0198               LDR      R0,[SP, #+4]
   \   0000037E   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000380   000A               LSRS     R0,R0,#+8
   \   00000382   88F82100           STRB     R0,[R8, #+33]
   \   00000386   0198               LDR      R0,[SP, #+4]
   \   00000388   000C               LSRS     R0,R0,#+16
   \   0000038A   88F82200           STRB     R0,[R8, #+34]
   \   0000038E   0198               LDR      R0,[SP, #+4]
   \   00000390   000E               LSRS     R0,R0,#+24
   \   00000392   88F82300           STRB     R0,[R8, #+35]
   2913          	}
   2914          	tbl[BPB_Media] = partition;					/* Media descriptor */
   \                     ??f_mkfs_41:
   \   00000396   9DF81800           LDRB     R0,[SP, #+24]
   \   0000039A   88F81500           STRB     R0,[R8, #+21]
   2915          	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
   \   0000039E   3F20               MOVS     R0,#+63
   \   000003A0   88F81800           STRB     R0,[R8, #+24]
   \   000003A4   0020               MOVS     R0,#+0
   \   000003A6   88F81900           STRB     R0,[R8, #+25]
   2916          	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
   \   000003AA   FF20               MOVS     R0,#+255
   \   000003AC   88F81A00           STRB     R0,[R8, #+26]
   \   000003B0   0020               MOVS     R0,#+0
   \   000003B2   88F81B00           STRB     R0,[R8, #+27]
   2917          	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
   \   000003B6   0298               LDR      R0,[SP, #+8]
   \   000003B8   88F81C00           STRB     R0,[R8, #+28]
   \   000003BC   0298               LDR      R0,[SP, #+8]
   \   000003BE   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000003C0   000A               LSRS     R0,R0,#+8
   \   000003C2   88F81D00           STRB     R0,[R8, #+29]
   \   000003C6   0298               LDR      R0,[SP, #+8]
   \   000003C8   000C               LSRS     R0,R0,#+16
   \   000003CA   88F81E00           STRB     R0,[R8, #+30]
   \   000003CE   0298               LDR      R0,[SP, #+8]
   \   000003D0   000E               LSRS     R0,R0,#+24
   \   000003D2   88F81F00           STRB     R0,[R8, #+31]
   2918          	n = get_fattime();							/* Use current time as a VSN */
   \   000003D6   ........           BL       get_fattime
   \   000003DA   0090               STR      R0,[SP, #+0]
   2919          	if (fmt != FS_FAT32) {
   \   000003DC   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000003DE   032E               CMP      R6,#+3
   \   000003E0   24D0               BEQ.N    ??f_mkfs_42
   2920          		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
   \   000003E2   0098               LDR      R0,[SP, #+0]
   \   000003E4   88F82700           STRB     R0,[R8, #+39]
   \   000003E8   0098               LDR      R0,[SP, #+0]
   \   000003EA   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000003EC   000A               LSRS     R0,R0,#+8
   \   000003EE   88F82800           STRB     R0,[R8, #+40]
   \   000003F2   0098               LDR      R0,[SP, #+0]
   \   000003F4   000C               LSRS     R0,R0,#+16
   \   000003F6   88F82900           STRB     R0,[R8, #+41]
   \   000003FA   0098               LDR      R0,[SP, #+0]
   \   000003FC   000E               LSRS     R0,R0,#+24
   \   000003FE   88F82A00           STRB     R0,[R8, #+42]
   2921          		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of sectors per FAT */
   \   00000402   88F816A0           STRB     R10,[R8, #+22]
   \   00000406   5046               MOV      R0,R10
   \   00000408   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000040A   000A               LSRS     R0,R0,#+8
   \   0000040C   88F81700           STRB     R0,[R8, #+23]
   2922          		tbl[BS_DrvNum] = 0x80;					/* Drive number */
   \   00000410   8020               MOVS     R0,#+128
   \   00000412   88F82400           STRB     R0,[R8, #+36]
   2923          		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
   \   00000416   2920               MOVS     R0,#+41
   \   00000418   88F82600           STRB     R0,[R8, #+38]
   2924          		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume label, FAT signature */
   \   0000041C   1322               MOVS     R2,#+19
   \   0000041E   ........           ADR.W    R1,`?<Constant "NO NAME    FAT     ">`
   \   00000422   18F12B00           ADDS     R0,R8,#+43
   \   00000426   ........           BL       mem_cpy
   \   0000042A   43E0               B.N      ??f_mkfs_43
   2925          	} else {
   2926          		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
   \                     ??f_mkfs_42:
   \   0000042C   0098               LDR      R0,[SP, #+0]
   \   0000042E   88F84300           STRB     R0,[R8, #+67]
   \   00000432   0098               LDR      R0,[SP, #+0]
   \   00000434   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000436   000A               LSRS     R0,R0,#+8
   \   00000438   88F84400           STRB     R0,[R8, #+68]
   \   0000043C   0098               LDR      R0,[SP, #+0]
   \   0000043E   000C               LSRS     R0,R0,#+16
   \   00000440   88F84500           STRB     R0,[R8, #+69]
   \   00000444   0098               LDR      R0,[SP, #+0]
   \   00000446   000E               LSRS     R0,R0,#+24
   \   00000448   88F84600           STRB     R0,[R8, #+70]
   2927          		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of sectors per FAT */
   \   0000044C   88F824A0           STRB     R10,[R8, #+36]
   \   00000450   5046               MOV      R0,R10
   \   00000452   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000454   000A               LSRS     R0,R0,#+8
   \   00000456   88F82500           STRB     R0,[R8, #+37]
   \   0000045A   5FEA1A40           LSRS     R0,R10,#+16
   \   0000045E   88F82600           STRB     R0,[R8, #+38]
   \   00000462   5FEA1A60           LSRS     R0,R10,#+24
   \   00000466   88F82700           STRB     R0,[R8, #+39]
   2928          		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
   \   0000046A   0220               MOVS     R0,#+2
   \   0000046C   88F82C00           STRB     R0,[R8, #+44]
   \   00000470   0020               MOVS     R0,#+0
   \   00000472   88F82D00           STRB     R0,[R8, #+45]
   \   00000476   0020               MOVS     R0,#+0
   \   00000478   88F82E00           STRB     R0,[R8, #+46]
   \   0000047C   0020               MOVS     R0,#+0
   \   0000047E   88F82F00           STRB     R0,[R8, #+47]
   2929          		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
   \   00000482   0120               MOVS     R0,#+1
   \   00000484   88F83000           STRB     R0,[R8, #+48]
   \   00000488   0020               MOVS     R0,#+0
   \   0000048A   88F83100           STRB     R0,[R8, #+49]
   2930          		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
   \   0000048E   0620               MOVS     R0,#+6
   \   00000490   88F83200           STRB     R0,[R8, #+50]
   \   00000494   0020               MOVS     R0,#+0
   \   00000496   88F83300           STRB     R0,[R8, #+51]
   2931          		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
   \   0000049A   8020               MOVS     R0,#+128
   \   0000049C   88F84000           STRB     R0,[R8, #+64]
   2932          		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
   \   000004A0   2920               MOVS     R0,#+41
   \   000004A2   88F84200           STRB     R0,[R8, #+66]
   2933          		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume label, FAT signature */
   \   000004A6   1322               MOVS     R2,#+19
   \   000004A8   ........           ADR.W    R1,`?<Constant "NO NAME    FAT32   ">`
   \   000004AC   18F14700           ADDS     R0,R8,#+71
   \   000004B0   ........           BL       mem_cpy
   2934          	}
   2935          	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
   \                     ??f_mkfs_43:
   \   000004B4   5520               MOVS     R0,#+85
   \   000004B6   88F8FE01           STRB     R0,[R8, #+510]
   \   000004BA   AA20               MOVS     R0,#+170
   \   000004BC   88F8FF01           STRB     R0,[R8, #+511]
   2936          	if (SS(fs) > 512U) {
   2937          		ST_WORD(tbl+SS(fs)-2, 0xAA55);
   2938          	}
   2939          	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
   \   000004C0   0123               MOVS     R3,#+1
   \   000004C2   029A               LDR      R2,[SP, #+8]
   \   000004C4   4146               MOV      R1,R8
   \   000004C6   2800               MOVS     R0,R5
   \   000004C8   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000004CA   ........           BL       disk_write
   \   000004CE   0028               CMP      R0,#+0
   \   000004D0   01D0               BEQ.N    ??f_mkfs_44
   2940          		return FR_DISK_ERR;
   \   000004D2   0120               MOVS     R0,#+1
   \   000004D4   FDE0               B.N      ??f_mkfs_1
   2941          	if (fmt == FS_FAT32)
   \                     ??f_mkfs_44:
   \   000004D6   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000004D8   032E               CMP      R6,#+3
   \   000004DA   07D1               BNE.N    ??f_mkfs_45
   2942          		disk_write(drv, tbl, b_part+6, 1);
   \   000004DC   0123               MOVS     R3,#+1
   \   000004DE   0298               LDR      R0,[SP, #+8]
   \   000004E0   821D               ADDS     R2,R0,#+6
   \   000004E2   4146               MOV      R1,R8
   \   000004E4   2800               MOVS     R0,R5
   \   000004E6   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000004E8   ........           BL       disk_write
   2943          
   2944          	/* Initialize FAT area */
   2945          	for (m = 0; m < N_FATS; m++) {
   \                     ??f_mkfs_45:
   \   000004EC   0027               MOVS     R7,#+0
   \   000004EE   00E0               B.N      ??f_mkfs_46
   \                     ??f_mkfs_47:
   \   000004F0   7F1C               ADDS     R7,R7,#+1
   \                     ??f_mkfs_46:
   \   000004F2   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000004F4   012F               CMP      R7,#+1
   \   000004F6   76D2               BCS.N    ??f_mkfs_48
   2946          		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
   \   000004F8   4FF40072           MOV      R2,#+512
   \   000004FC   0021               MOVS     R1,#+0
   \   000004FE   4046               MOV      R0,R8
   \   00000500   ........           BL       mem_set
   2947          		if (fmt != FS_FAT32) {
   \   00000504   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000506   032E               CMP      R6,#+3
   \   00000508   1ED0               BEQ.N    ??f_mkfs_49
   2948          			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
   \   0000050A   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000050C   012E               CMP      R6,#+1
   \   0000050E   02D1               BNE.N    ??f_mkfs_50
   \   00000510   ....               LDR.N    R0,??DataTable21_3  ;; 0xffff00
   \   00000512   0090               STR      R0,[SP, #+0]
   \   00000514   02E0               B.N      ??f_mkfs_51
   \                     ??f_mkfs_50:
   \   00000516   7FF0FF00           MVNS     R0,#+255
   \   0000051A   0090               STR      R0,[SP, #+0]
   2949          			n |= partition;
   \                     ??f_mkfs_51:
   \   0000051C   0098               LDR      R0,[SP, #+0]
   \   0000051E   9DF81810           LDRB     R1,[SP, #+24]
   \   00000522   0843               ORRS     R0,R1,R0
   \   00000524   0090               STR      R0,[SP, #+0]
   2950          			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
   \   00000526   0098               LDR      R0,[SP, #+0]
   \   00000528   88F80000           STRB     R0,[R8, #+0]
   \   0000052C   0098               LDR      R0,[SP, #+0]
   \   0000052E   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000530   000A               LSRS     R0,R0,#+8
   \   00000532   88F80100           STRB     R0,[R8, #+1]
   \   00000536   0098               LDR      R0,[SP, #+0]
   \   00000538   000C               LSRS     R0,R0,#+16
   \   0000053A   88F80200           STRB     R0,[R8, #+2]
   \   0000053E   0098               LDR      R0,[SP, #+0]
   \   00000540   000E               LSRS     R0,R0,#+24
   \   00000542   88F80300           STRB     R0,[R8, #+3]
   \   00000546   23E0               B.N      ??f_mkfs_52
   2951          		} else {
   2952          			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
   \                     ??f_mkfs_49:
   \   00000548   F820               MOVS     R0,#+248
   \   0000054A   88F80000           STRB     R0,[R8, #+0]
   \   0000054E   FF20               MOVS     R0,#+255
   \   00000550   88F80100           STRB     R0,[R8, #+1]
   \   00000554   FF20               MOVS     R0,#+255
   \   00000556   88F80200           STRB     R0,[R8, #+2]
   \   0000055A   FF20               MOVS     R0,#+255
   \   0000055C   88F80300           STRB     R0,[R8, #+3]
   2953          			ST_DWORD(tbl+4, 0xFFFFFFFF);
   \   00000560   FF20               MOVS     R0,#+255
   \   00000562   88F80400           STRB     R0,[R8, #+4]
   \   00000566   FF20               MOVS     R0,#+255
   \   00000568   88F80500           STRB     R0,[R8, #+5]
   \   0000056C   FF20               MOVS     R0,#+255
   \   0000056E   88F80600           STRB     R0,[R8, #+6]
   \   00000572   FF20               MOVS     R0,#+255
   \   00000574   88F80700           STRB     R0,[R8, #+7]
   2954          			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
   \   00000578   FF20               MOVS     R0,#+255
   \   0000057A   88F80800           STRB     R0,[R8, #+8]
   \   0000057E   FF20               MOVS     R0,#+255
   \   00000580   88F80900           STRB     R0,[R8, #+9]
   \   00000584   FF20               MOVS     R0,#+255
   \   00000586   88F80A00           STRB     R0,[R8, #+10]
   \   0000058A   0F20               MOVS     R0,#+15
   \   0000058C   88F80B00           STRB     R0,[R8, #+11]
   2955          		}
   2956          		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
   \                     ??f_mkfs_52:
   \   00000590   0123               MOVS     R3,#+1
   \   00000592   4A46               MOV      R2,R9
   \   00000594   4146               MOV      R1,R8
   \   00000596   2800               MOVS     R0,R5
   \   00000598   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000059A   ........           BL       disk_write
   \   0000059E   19F10109           ADDS     R9,R9,#+1
   \   000005A2   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005A4   0028               CMP      R0,#+0
   \   000005A6   01D0               BEQ.N    ??f_mkfs_53
   2957          			return FR_DISK_ERR;
   \   000005A8   0120               MOVS     R0,#+1
   \   000005AA   92E0               B.N      ??f_mkfs_1
   2958          		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
   \                     ??f_mkfs_53:
   \   000005AC   4FF40072           MOV      R2,#+512
   \   000005B0   0021               MOVS     R1,#+0
   \   000005B2   4046               MOV      R0,R8
   \   000005B4   ........           BL       mem_set
   2959          		for (n = 1; n < n_fat; n++) {
   \   000005B8   0120               MOVS     R0,#+1
   \   000005BA   0090               STR      R0,[SP, #+0]
   \   000005BC   02E0               B.N      ??f_mkfs_54
   \                     ??f_mkfs_55:
   \   000005BE   0098               LDR      R0,[SP, #+0]
   \   000005C0   401C               ADDS     R0,R0,#+1
   \   000005C2   0090               STR      R0,[SP, #+0]
   \                     ??f_mkfs_54:
   \   000005C4   0098               LDR      R0,[SP, #+0]
   \   000005C6   5045               CMP      R0,R10
   \   000005C8   92D2               BCS.N    ??f_mkfs_47
   2960          			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
   \   000005CA   0123               MOVS     R3,#+1
   \   000005CC   4A46               MOV      R2,R9
   \   000005CE   4146               MOV      R1,R8
   \   000005D0   2800               MOVS     R0,R5
   \   000005D2   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005D4   ........           BL       disk_write
   \   000005D8   19F10109           ADDS     R9,R9,#+1
   \   000005DC   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005DE   0028               CMP      R0,#+0
   \   000005E0   EDD0               BEQ.N    ??f_mkfs_55
   2961          				return FR_DISK_ERR;
   \   000005E2   0120               MOVS     R0,#+1
   \   000005E4   75E0               B.N      ??f_mkfs_1
   2962          		}
   2963          	}
   2964          
   2965          	/* Initialize Root directory */
   2966          	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
   \                     ??f_mkfs_48:
   \   000005E6   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000005E8   032E               CMP      R6,#+3
   \   000005EA   01D1               BNE.N    ??f_mkfs_56
   \   000005EC   2700               MOVS     R7,R4
   \   000005EE   00E0               B.N      ??f_mkfs_57
   \                     ??f_mkfs_56:
   \   000005F0   039F               LDR      R7,[SP, #+12]
   2967          	do {
   2968          		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
   \                     ??f_mkfs_57:
   \                     ??f_mkfs_58:
   \   000005F2   0123               MOVS     R3,#+1
   \   000005F4   4A46               MOV      R2,R9
   \   000005F6   4146               MOV      R1,R8
   \   000005F8   2800               MOVS     R0,R5
   \   000005FA   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000005FC   ........           BL       disk_write
   \   00000600   19F10109           ADDS     R9,R9,#+1
   \   00000604   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000606   0028               CMP      R0,#+0
   \   00000608   01D0               BEQ.N    ??f_mkfs_59
   2969          			return FR_DISK_ERR;
   \   0000060A   0120               MOVS     R0,#+1
   \   0000060C   61E0               B.N      ??f_mkfs_1
   2970          	} while (--m);
   \                     ??f_mkfs_59:
   \   0000060E   7F1E               SUBS     R7,R7,#+1
   \   00000610   3800               MOVS     R0,R7
   \   00000612   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000614   0028               CMP      R0,#+0
   \   00000616   ECD1               BNE.N    ??f_mkfs_58
   2971          
   2972          	/* Create FSInfo record if needed */
   2973          	if (fmt == FS_FAT32) {
   \   00000618   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000061A   032E               CMP      R6,#+3
   \   0000061C   4DD1               BNE.N    ??f_mkfs_60
   2974          		ST_WORD(tbl+BS_55AA, 0xAA55);
   \   0000061E   5520               MOVS     R0,#+85
   \   00000620   88F8FE01           STRB     R0,[R8, #+510]
   \   00000624   AA20               MOVS     R0,#+170
   \   00000626   88F8FF01           STRB     R0,[R8, #+511]
   2975          		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
   \   0000062A   5220               MOVS     R0,#+82
   \   0000062C   88F80000           STRB     R0,[R8, #+0]
   \   00000630   5220               MOVS     R0,#+82
   \   00000632   88F80100           STRB     R0,[R8, #+1]
   \   00000636   6120               MOVS     R0,#+97
   \   00000638   88F80200           STRB     R0,[R8, #+2]
   \   0000063C   4120               MOVS     R0,#+65
   \   0000063E   88F80300           STRB     R0,[R8, #+3]
   2976          		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
   \   00000642   7220               MOVS     R0,#+114
   \   00000644   88F8E401           STRB     R0,[R8, #+484]
   \   00000648   7220               MOVS     R0,#+114
   \   0000064A   88F8E501           STRB     R0,[R8, #+485]
   \   0000064E   4120               MOVS     R0,#+65
   \   00000650   88F8E601           STRB     R0,[R8, #+486]
   \   00000654   6120               MOVS     R0,#+97
   \   00000656   88F8E701           STRB     R0,[R8, #+487]
   2977          		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
   \   0000065A   5846               MOV      R0,R11
   \   0000065C   401E               SUBS     R0,R0,#+1
   \   0000065E   88F8E801           STRB     R0,[R8, #+488]
   \   00000662   5846               MOV      R0,R11
   \   00000664   401E               SUBS     R0,R0,#+1
   \   00000666   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000668   000A               LSRS     R0,R0,#+8
   \   0000066A   88F8E901           STRB     R0,[R8, #+489]
   \   0000066E   BBF10100           SUBS     R0,R11,#+1
   \   00000672   000C               LSRS     R0,R0,#+16
   \   00000674   88F8EA01           STRB     R0,[R8, #+490]
   \   00000678   BBF10100           SUBS     R0,R11,#+1
   \   0000067C   000E               LSRS     R0,R0,#+24
   \   0000067E   88F8EB01           STRB     R0,[R8, #+491]
   2978          		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
   \   00000682   FF20               MOVS     R0,#+255
   \   00000684   88F8EC01           STRB     R0,[R8, #+492]
   \   00000688   FF20               MOVS     R0,#+255
   \   0000068A   88F8ED01           STRB     R0,[R8, #+493]
   \   0000068E   FF20               MOVS     R0,#+255
   \   00000690   88F8EE01           STRB     R0,[R8, #+494]
   \   00000694   FF20               MOVS     R0,#+255
   \   00000696   88F8EF01           STRB     R0,[R8, #+495]
   2979          		disk_write(drv, tbl, b_part+1, 1);
   \   0000069A   0123               MOVS     R3,#+1
   \   0000069C   0298               LDR      R0,[SP, #+8]
   \   0000069E   421C               ADDS     R2,R0,#+1
   \   000006A0   4146               MOV      R1,R8
   \   000006A2   2800               MOVS     R0,R5
   \   000006A4   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000006A6   ........           BL       disk_write
   2980          		disk_write(drv, tbl, b_part+7, 1);
   \   000006AA   0123               MOVS     R3,#+1
   \   000006AC   0298               LDR      R0,[SP, #+8]
   \   000006AE   C21D               ADDS     R2,R0,#+7
   \   000006B0   4146               MOV      R1,R8
   \   000006B2   2800               MOVS     R0,R5
   \   000006B4   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000006B6   ........           BL       disk_write
   2981          	}
   2982          
   2983          	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
   \                     ??f_mkfs_60:
   \   000006BA   0022               MOVS     R2,#+0
   \   000006BC   0021               MOVS     R1,#+0
   \   000006BE   2800               MOVS     R0,R5
   \   000006C0   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000006C2   ........           BL       disk_ioctl
   \   000006C6   0028               CMP      R0,#+0
   \   000006C8   01D1               BNE.N    ??f_mkfs_61
   \   000006CA   0020               MOVS     R0,#+0
   \   000006CC   00E0               B.N      ??f_mkfs_62
   \                     ??f_mkfs_61:
   \   000006CE   0120               MOVS     R0,#+1
   \                     ??f_mkfs_62:
   \   000006D0   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??f_mkfs_1:
   \   000006D2   07B0               ADD      SP,SP,#+28
   \   000006D4   BDE8F08F           POP      {R4-R11,PC}      ;; return
   2984          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??sstbl:
   \   00000000                      ; Initializer data, 44 bytes
   \   00000000   00401F0000A0       DC32 2048000, 1024000, 512000, 256000, 128000, 64000, 32000, 16000, 8000, 4000
   \              0F0000D00700
   \              00E8030000F4
   \              010000FA0000
   \              007D0000803E
   \              0000401F0000
   \              A00F0000    
   \   00000028   00000000           DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??cstbl:
   \   00000000                      ; Initializer data, 24 bytes
   \   00000000   008000400020       DC16 32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024
   \              001000080040
   \              002000100008
   \              0004        
   \   00000014   0002               DC16 512
   \   00000016   0000               DC8 0, 0
   2985          
   2986          #endif /* _USE_MKFS && !_FS_READONLY */
   2987          
   2988          
   2989          
   2990          
   2991          #if _USE_STRFUNC
   2992          /*-----------------------------------------------------------------------*/
   2993          /* Get a string from the file                                            */
   2994          /*-----------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   2995          char* f_gets (
   2996          	char* buff,	/* Pointer to the string buffer to read */
   2997          	int len,	/* Size of string buffer */
   2998          	FIL* fil	/* Pointer to the file object */
   2999          )
   3000          {
   \                     f_gets:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   82B0               SUB      SP,SP,#+8
   \   00000006   0400               MOVS     R4,R0
   \   00000008   0F00               MOVS     R7,R1
   \   0000000A   9046               MOV      R8,R2
   3001          	int i = 0;
   \   0000000C   0025               MOVS     R5,#+0
   3002          	char *p = buff;
   \   0000000E   2600               MOVS     R6,R4
   \   00000010   FFE7               B.N      ??f_gets_0
   3003          	UINT rc;
   3004          
   3005          
   3006          	while (i < len - 1) {			/* Read bytes until buffer gets filled */
   3007          		f_read(fil, p, 1, &rc);
   3008          		if (rc != 1) break;			/* Break when no data to read */
   3009          #if _USE_STRFUNC >= 2
   3010          		if (*p == '\r') continue;	/* Strip '\r' */
   \                     ??f_gets_1:
   \                     ??f_gets_0:
   \   00000012   781E               SUBS     R0,R7,#+1
   \   00000014   8542               CMP      R5,R0
   \   00000016   11DA               BGE.N    ??f_gets_2
   \   00000018   00AB               ADD      R3,SP,#+0
   \   0000001A   0122               MOVS     R2,#+1
   \   0000001C   3100               MOVS     R1,R6
   \   0000001E   4046               MOV      R0,R8
   \   00000020   ........           BL       f_read
   \   00000024   0098               LDR      R0,[SP, #+0]
   \   00000026   0128               CMP      R0,#+1
   \   00000028   08D1               BNE.N    ??f_gets_2
   \                     ??f_gets_3:
   \   0000002A   3078               LDRB     R0,[R6, #+0]
   \   0000002C   0D28               CMP      R0,#+13
   \   0000002E   F0D0               BEQ.N    ??f_gets_1
   3011          #endif
   3012          		i++;
   \   00000030   6D1C               ADDS     R5,R5,#+1
   3013          		if (*p++ == '\n') break;	/* Break when reached end of line */
   \   00000032   3000               MOVS     R0,R6
   \   00000034   461C               ADDS     R6,R0,#+1
   \   00000036   0078               LDRB     R0,[R0, #+0]
   \   00000038   0A28               CMP      R0,#+10
   \   0000003A   EAD1               BNE.N    ??f_gets_0
   3014          	}
   3015          	*p = 0;
   \                     ??f_gets_2:
   \   0000003C   0020               MOVS     R0,#+0
   \   0000003E   3070               STRB     R0,[R6, #+0]
   3016          	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
   \   00000040   002D               CMP      R5,#+0
   \   00000042   00D1               BNE.N    ??f_gets_4
   \                     ??f_gets_5:
   \   00000044   0024               MOVS     R4,#+0
   \                     ??f_gets_4:
   \   00000046   2000               MOVS     R0,R4
   \   00000048   BDE8F681           POP      {R1,R2,R4-R8,PC}  ;; return
   3017          }
   3018          
   3019          
   3020          
   3021          #if !_FS_READONLY
   3022          #include <stdarg.h>
   3023          /*-----------------------------------------------------------------------*/
   3024          /* Put a character to the file                                           */
   3025          /*-----------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   3026          int f_putc (
   3027          	int chr,	/* A character to be output */
   3028          	FIL* fil	/* Pointer to the file object */
   3029          )
   3030          {
   \                     f_putc:
   \   00000000   30B5               PUSH     {R4,R5,LR}
   \   00000002   83B0               SUB      SP,SP,#+12
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0D00               MOVS     R5,R1
   3031          	UINT bw;
   3032          	char c;
   3033          
   3034          
   3035          #if _USE_STRFUNC >= 2
   3036          	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
   \   00000008   0A2C               CMP      R4,#+10
   \   0000000A   03D1               BNE.N    ??f_putc_0
   \   0000000C   2900               MOVS     R1,R5
   \   0000000E   0D20               MOVS     R0,#+13
   \   00000010   FFF7F6FF           BL       f_putc
   3037          #endif
   3038          	if (!fil) {	/* Special value may be used to switch the destination to any other device */
   \                     ??f_putc_0:
   \   00000014   002D               CMP      R5,#+0
   \   00000016   01D1               BNE.N    ??f_putc_1
   3039          	/*	put_console(chr);	*/
   3040          		return chr;
   \   00000018   2000               MOVS     R0,R4
   \   0000001A   0EE0               B.N      ??f_putc_2
   3041          	}
   3042          	c = (char)chr;
   \                     ??f_putc_1:
   \   0000001C   2000               MOVS     R0,R4
   \   0000001E   8DF80000           STRB     R0,[SP, #+0]
   3043          	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
   \   00000022   01AB               ADD      R3,SP,#+4
   \   00000024   0122               MOVS     R2,#+1
   \   00000026   00A9               ADD      R1,SP,#+0
   \   00000028   2800               MOVS     R0,R5
   \   0000002A   ........           BL       f_write
   3044          	return bw ? chr : EOF;		/* Return the result */
   \   0000002E   0198               LDR      R0,[SP, #+4]
   \   00000030   0028               CMP      R0,#+0
   \   00000032   01D1               BNE.N    ??f_putc_3
   \                     ??f_putc_4:
   \   00000034   5FF0FF34           MOVS     R4,#-1
   \                     ??f_putc_3:
   \   00000038   2000               MOVS     R0,R4
   \                     ??f_putc_2:
   \   0000003A   3EBD               POP      {R1-R5,PC}       ;; return
   3045          }
   3046          
   3047          
   3048          
   3049          
   3050          /*-----------------------------------------------------------------------*/
   3051          /* Put a string to the file                                              */
   3052          /*-----------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   3053          int f_puts (
   3054          	const char* str,	/* Pointer to the string to be output */
   3055          	FIL* fil			/* Pointer to the file object */
   3056          )
   3057          {
   \                     f_puts:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   3058          	int n;
   3059          
   3060          
   3061          	for (n = 0; *str; str++, n++) {
   \   00000006   0026               MOVS     R6,#+0
   \   00000008   01E0               B.N      ??f_puts_0
   \                     ??f_puts_1:
   \   0000000A   641C               ADDS     R4,R4,#+1
   \   0000000C   761C               ADDS     R6,R6,#+1
   \                     ??f_puts_0:
   \   0000000E   2078               LDRB     R0,[R4, #+0]
   \   00000010   0028               CMP      R0,#+0
   \   00000012   09D0               BEQ.N    ??f_puts_2
   3062          		if (f_putc(*str, fil) == EOF) return EOF;
   \   00000014   2900               MOVS     R1,R5
   \   00000016   2078               LDRB     R0,[R4, #+0]
   \   00000018   ........           BL       f_putc
   \   0000001C   10F1010F           CMN      R0,#+1
   \   00000020   F3D1               BNE.N    ??f_puts_1
   \   00000022   5FF0FF30           MOVS     R0,#-1
   \   00000026   00E0               B.N      ??f_puts_3
   3063          	}
   3064          	return n;
   \                     ??f_puts_2:
   \   00000028   3000               MOVS     R0,R6
   \                     ??f_puts_3:
   \   0000002A   70BD               POP      {R4-R6,PC}       ;; return
   3065          }
   3066          
   3067          
   3068          
   3069          
   3070          /*-----------------------------------------------------------------------*/
   3071          /* Put a formatted string to the file                                    */
   3072          /*-----------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   3073          int f_printf (
   3074          	FIL* fil,			/* Pointer to the file object */
   3075          	const char* str,	/* Pointer to the format string */
   3076          	...					/* Optional arguments... */
   3077          )
   3078          {
   \                     f_printf:
   \   00000000   0CB4               PUSH     {R2,R3}
   \   00000002   2DE9FF41           PUSH     {R0-R8,LR}
   \   00000006   0500               MOVS     R5,R0
   \   00000008   0E00               MOVS     R6,R1
   3079          	va_list arp;
   3080          	UCHAR c, f, r;
   3081          	ULONG val;
   3082          	char s[16];
   3083          	int i, w, res, cc;
   3084          
   3085          
   3086          	va_start(arp, str);
   \   0000000A   0AAF               ADD      R7,SP,#+40
   3087          
   3088          	for (cc = res = 0; cc != EOF; res += cc) {
   \   0000000C   0020               MOVS     R0,#+0
   \   0000000E   0400               MOVS     R4,R0
   \   00000010   05E0               B.N      ??f_printf_0
   3089          		c = *str++;
   3090          		if (c == 0) break;			/* End of string */
   3091          		if (c != '%') {				/* Non escape character */
   3092          			cc = f_putc(c, fil);
   3093          			if (cc != EOF) cc = 1;
   3094          			continue;
   3095          		}
   3096          		w = f = 0;
   3097          		c = *str++;
   3098          		if (c == '0') {				/* Flag: '0' padding */
   3099          			f = 1; c = *str++;
   3100          		}
   3101          		while (c >= '0' && c <= '9') {	/* Precision */
   3102          			w = w * 10 + (c - '0');
   3103          			c = *str++;
   3104          		}
   3105          		if (c == 'l') {				/* Prefix: Size is long int */
   3106          			f |= 2; c = *str++;
   3107          		}
   3108          		if (c == 's') {				/* Type is string */
   3109          			cc = f_puts(va_arg(arp, char*), fil);
   3110          			continue;
   3111          		}
   3112          		if (c == 'c') {				/* Type is character */
   3113          			cc = f_putc(va_arg(arp, int), fil);
   3114          			if (cc != EOF) cc = 1;
   3115          			continue;
   3116          		}
   3117          		r = 0;
   3118          		if (c == 'd') r = 10;		/* Type is signed decimal */
   3119          		if (c == 'u') r = 10;		/* Type is unsigned decimal */
   3120          		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
   3121          		if (r == 0) break;			/* Unknown type */
   3122          		if (f & 2) {				/* Get the value */
   3123          			val = (ULONG)va_arg(arp, long);
   3124          		} else {
   3125          			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
   3126          		}
   3127          		/* Put numeral string */
   3128          		if (c == 'd') {
   3129          			if (val & 0x80000000) {
   3130          				val = 0 - val;
   3131          				f |= 4;
   3132          			}
   3133          		}
   3134          		i = sizeof(s) - 1; s[i] = 0;
   3135          		do {
   3136          			c = (UCHAR)(val % r + '0');
   3137          			if (c > '9') c += 7;
   3138          			s[--i] = c;
   3139          			val /= r;
   3140          		} while (i && val);
   3141          		if (i && (f & 4)) s[--i] = '-';
   3142          		w = sizeof(s) - 1 - w;
   3143          		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
   3144          		cc = f_puts(&s[i], fil);
   \                     ??f_printf_1:
   \   00000012   2900               MOVS     R1,R5
   \   00000014   00AA               ADD      R2,SP,#+0
   \   00000016   8018               ADDS     R0,R0,R2
   \   00000018   ........           BL       f_puts
   \                     ??f_printf_2:
   \   0000001C   0419               ADDS     R4,R0,R4
   \                     ??f_printf_0:
   \   0000001E   10F1010F           CMN      R0,#+1
   \   00000022   04D0               BEQ.N    ??f_printf_3
   \   00000024   3278               LDRB     R2,[R6, #+0]
   \   00000026   761C               ADDS     R6,R6,#+1
   \   00000028   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000002A   002A               CMP      R2,#+0
   \   0000002C   04D1               BNE.N    ??f_printf_4
   3145          	}
   3146          
   3147          	va_end(arp);
   3148          	return (cc == EOF) ? cc : res;
   \                     ??f_printf_3:
   \   0000002E   10F1010F           CMN      R0,#+1
   \   00000032   40F0B780           BNE.W    ??f_printf_5
   \   00000036   B6E0               B.N      ??f_printf_6
   \                     ??f_printf_4:
   \   00000038   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000003A   252A               CMP      R2,#+37
   \   0000003C   09D0               BEQ.N    ??f_printf_7
   \   0000003E   2900               MOVS     R1,R5
   \   00000040   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000042   1000               MOVS     R0,R2
   \   00000044   ........           BL       f_putc
   \   00000048   10F1010F           CMN      R0,#+1
   \   0000004C   00D0               BEQ.N    ??f_printf_8
   \   0000004E   0120               MOVS     R0,#+1
   \                     ??f_printf_8:
   \   00000050   E4E7               B.N      ??f_printf_2
   \                     ??f_printf_7:
   \   00000052   0021               MOVS     R1,#+0
   \   00000054   0B00               MOVS     R3,R1
   \   00000056   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000058   3278               LDRB     R2,[R6, #+0]
   \   0000005A   761C               ADDS     R6,R6,#+1
   \   0000005C   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000005E   302A               CMP      R2,#+48
   \   00000060   0CD1               BNE.N    ??f_printf_9
   \   00000062   0121               MOVS     R1,#+1
   \   00000064   3278               LDRB     R2,[R6, #+0]
   \   00000066   761C               ADDS     R6,R6,#+1
   \   00000068   08E0               B.N      ??f_printf_9
   \                     ??f_printf_10:
   \   0000006A   5FF00A0C           MOVS     R12,#+10
   \   0000006E   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000070   0CFB0322           MLA      R2,R12,R3,R2
   \   00000074   B2F13003           SUBS     R3,R2,#+48
   \   00000078   3278               LDRB     R2,[R6, #+0]
   \   0000007A   761C               ADDS     R6,R6,#+1
   \                     ??f_printf_9:
   \   0000007C   B2F1300C           SUBS     R12,R2,#+48
   \   00000080   5FFA8CFC           UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000084   BCF10A0F           CMP      R12,#+10
   \   00000088   EFD3               BCC.N    ??f_printf_10
   \   0000008A   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000008C   6C2A               CMP      R2,#+108
   \   0000008E   03D1               BNE.N    ??f_printf_11
   \   00000090   51F00201           ORRS     R1,R1,#0x2
   \   00000094   3278               LDRB     R2,[R6, #+0]
   \   00000096   761C               ADDS     R6,R6,#+1
   \                     ??f_printf_11:
   \   00000098   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000009A   732A               CMP      R2,#+115
   \   0000009C   06D1               BNE.N    ??f_printf_12
   \   0000009E   3800               MOVS     R0,R7
   \   000000A0   071D               ADDS     R7,R0,#+4
   \   000000A2   2900               MOVS     R1,R5
   \   000000A4   0068               LDR      R0,[R0, #+0]
   \   000000A6   ........           BL       f_puts
   \   000000AA   B7E7               B.N      ??f_printf_2
   \                     ??f_printf_12:
   \   000000AC   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000AE   632A               CMP      R2,#+99
   \   000000B0   0AD1               BNE.N    ??f_printf_13
   \   000000B2   3800               MOVS     R0,R7
   \   000000B4   071D               ADDS     R7,R0,#+4
   \   000000B6   2900               MOVS     R1,R5
   \   000000B8   0068               LDR      R0,[R0, #+0]
   \   000000BA   ........           BL       f_putc
   \   000000BE   10F1010F           CMN      R0,#+1
   \   000000C2   00D0               BEQ.N    ??f_printf_14
   \   000000C4   0120               MOVS     R0,#+1
   \                     ??f_printf_14:
   \   000000C6   A9E7               B.N      ??f_printf_2
   \                     ??f_printf_13:
   \   000000C8   5FF0000C           MOVS     R12,#+0
   \   000000CC   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000CE   642A               CMP      R2,#+100
   \   000000D0   01D1               BNE.N    ??f_printf_15
   \   000000D2   5FF00A0C           MOVS     R12,#+10
   \                     ??f_printf_15:
   \   000000D6   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000D8   752A               CMP      R2,#+117
   \   000000DA   01D1               BNE.N    ??f_printf_16
   \   000000DC   5FF00A0C           MOVS     R12,#+10
   \                     ??f_printf_16:
   \   000000E0   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000E2   582A               CMP      R2,#+88
   \   000000E4   01D1               BNE.N    ??f_printf_17
   \   000000E6   5FF0100C           MOVS     R12,#+16
   \                     ??f_printf_17:
   \   000000EA   5FFA8CFC           UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   000000EE   BCF1000F           CMP      R12,#+0
   \   000000F2   9CD0               BEQ.N    ??f_printf_3
   \                     ??f_printf_18:
   \   000000F4   8807               LSLS     R0,R1,#+30
   \   000000F6   03D5               BPL.N    ??f_printf_19
   \   000000F8   D7F800E0           LDR      LR,[R7, #+0]
   \   000000FC   3F1D               ADDS     R7,R7,#+4
   \   000000FE   09E0               B.N      ??f_printf_20
   \                     ??f_printf_19:
   \   00000100   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000102   642A               CMP      R2,#+100
   \   00000104   03D1               BNE.N    ??f_printf_21
   \   00000106   D7F800E0           LDR      LR,[R7, #+0]
   \   0000010A   3F1D               ADDS     R7,R7,#+4
   \   0000010C   02E0               B.N      ??f_printf_20
   \                     ??f_printf_21:
   \   0000010E   D7F800E0           LDR      LR,[R7, #+0]
   \   00000112   3F1D               ADDS     R7,R7,#+4
   \                     ??f_printf_20:
   \   00000114   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000116   642A               CMP      R2,#+100
   \   00000118   06D1               BNE.N    ??f_printf_22
   \   0000011A   BEF1000F           CMP      LR,#+0
   \   0000011E   03D5               BPL.N    ??f_printf_22
   \   00000120   DEF1000E           RSBS     LR,LR,#+0
   \   00000124   51F00401           ORRS     R1,R1,#0x4
   \                     ??f_printf_22:
   \   00000128   0F20               MOVS     R0,#+15
   \   0000012A   00AA               ADD      R2,SP,#+0
   \   0000012C   5FF00008           MOVS     R8,#+0
   \   00000130   00F80280           STRB     R8,[R0, R2]
   \                     ??f_printf_23:
   \   00000134   5FFA8CFC           UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000138   BEFBFCF2           UDIV     R2,LR,R12
   \   0000013C   0CFB12E2           MLS      R2,R12,R2,LR
   \   00000140   3032               ADDS     R2,R2,#+48
   \   00000142   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000144   3A2A               CMP      R2,#+58
   \   00000146   00D3               BCC.N    ??f_printf_24
   \   00000148   D21D               ADDS     R2,R2,#+7
   \                     ??f_printf_24:
   \   0000014A   401E               SUBS     R0,R0,#+1
   \   0000014C   0DF10008           ADD      R8,SP,#+0
   \   00000150   00F80820           STRB     R2,[R0, R8]
   \   00000154   5FFA8CFC           UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   00000158   BEFBFCFE           UDIV     LR,LR,R12
   \   0000015C   0028               CMP      R0,#+0
   \   0000015E   02D0               BEQ.N    ??f_printf_25
   \   00000160   BEF1000F           CMP      LR,#+0
   \   00000164   E6D1               BNE.N    ??f_printf_23
   \                     ??f_printf_25:
   \   00000166   0028               CMP      R0,#+0
   \   00000168   07D0               BEQ.N    ??f_printf_26
   \   0000016A   4A07               LSLS     R2,R1,#+29
   \   0000016C   05D5               BPL.N    ??f_printf_26
   \   0000016E   401E               SUBS     R0,R0,#+1
   \   00000170   00AA               ADD      R2,SP,#+0
   \   00000172   5FF02D0C           MOVS     R12,#+45
   \   00000176   00F802C0           STRB     R12,[R0, R2]
   \                     ??f_printf_26:
   \   0000017A   D3F10F03           RSBS     R3,R3,#+15
   \   0000017E   04E0               B.N      ??f_printf_27
   \                     ??f_printf_28:
   \   00000180   2022               MOVS     R2,#+32
   \                     ??f_printf_29:
   \   00000182   0DF1000E           ADD      LR,SP,#+0
   \   00000186   0CF80E20           STRB     R2,[R12, LR]
   \                     ??f_printf_27:
   \   0000018A   0028               CMP      R0,#+0
   \   0000018C   3FF441AF           BEQ.W    ??f_printf_1
   \   00000190   8342               CMP      R3,R0
   \   00000192   BFF63EAF           BGE.W    ??f_printf_1
   \   00000196   B0F1010C           SUBS     R12,R0,#+1
   \   0000019A   6046               MOV      R0,R12
   \   0000019C   CA07               LSLS     R2,R1,#+31
   \   0000019E   EFD5               BPL.N    ??f_printf_28
   \   000001A0   3022               MOVS     R2,#+48
   \   000001A2   EEE7               B.N      ??f_printf_29
   \                     ??f_printf_5:
   \   000001A4   2000               MOVS     R0,R4
   \                     ??f_printf_6:
   \   000001A6   04B0               ADD      SP,SP,#+16
   \   000001A8   BDE8F001           POP      {R4-R8}
   \   000001AC   5DF80CFB           LDR      PC,[SP], #+12    ;; return
   3149          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     `?<Constant "\\"*:<>?|\\177">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   ........           DC32     ??cvt

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\"*:<>?|\\177">`:
   \   00000000                      ; Initializer data, 12 bytes
   \   00000000   222A3A3C3E3F       DC8 34, 42, 58, 60, 62, 63, 124, 127, 0, 0
   \              7C7F0000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   46415400           DC32     0x544146

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   ........           DC32     FatFs

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "+,;[=]">`:
   \   00000000                      ; Initializer data, 8 bytes
   \   00000000   2B2C3B5B3D5D       DC8 43, 44, 59, 91, 61, 93, 0, 0
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   52526141           DC32     0x41615252

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   72724161           DC32     0x61417272

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   ........           DC32     Fsid

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   ........           DC32     LfnBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     LfnBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \   00000000   ........           DC32     FatFs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_2:
   \   00000000   0004FB00           DC32     0xfb0400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_3:
   \   00000000   00FFFF00           DC32     0xffff00

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "NO NAME    FAT     ">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   4E4F204E414D       DC8 78, 79, 32, 78, 65, 77, 69, 32, 32, 32
   \              45202020    
   \   0000000A   204641542020       DC8 32, 70, 65, 84, 32, 32, 32, 32, 32, 0
   \              20202000    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "NO NAME    FAT32   ">`:
   \   00000000                      ; Initializer data, 20 bytes
   \   00000000   4E4F204E414D       DC8 78, 79, 32, 78, 65, 77, 69, 32, 32, 32
   \              45202020    
   \   0000000A   204641543332       DC8 32, 70, 65, 84, 51, 50, 32, 32, 32, 0
   \              20202000    
   3150          
   3151          #endif /* !_FS_READONLY */
   3152          #endif /* _USE_STRFUNC */

   Maximum stack usage in bytes:

     Function     .cstack
     --------     -------
     check_fs          8
     chk_chr           0
     chk_mounted      16
     clust2sect        0
     cmp_lfn          24
     create_chain     24
     create_name      40
     dir_find         24
     dir_next         24
     dir_read         24
     dir_register     40
     dir_remove       16
     dir_seek         16
     f_chmod          72
     f_close           8
     f_getfree        32
     f_gets           32
     f_lseek          24
     f_mkdir          80
     f_mkfs           64
     f_mount           0
     f_open           80
     f_opendir        32
     f_printf         48
     f_putc           24
     f_puts           16
     f_read           32
     f_readdir        32
     f_rename        128
     f_stat           72
     f_sync           16
     f_truncate       16
     f_unlink         96
     f_utime          64
     f_write          32
     fit_lfn          16
     follow_path      16
     gen_numname      24
     get_fat          24
     get_fileinfo     24
     mem_cmp           4
     mem_cpy           0
     mem_set           0
     move_window      24
     pick_lfn         12
     put_fat          24
     remove_chain     24
     sum_sfn           0
     sync             16
     validate          8


   Section sizes:

     Function/Label                    Bytes
     --------------                    -----
     FatFs                                4
     Fsid                                 2
     LfnBuf                             512
     mem_cpy                             20
     mem_set                             16
     mem_cmp                             32
     chk_chr                             20
     move_window                        116
     sync                               214
     get_fat                            250
     put_fat                            294
     remove_chain                       106
     create_chain                       174
     clust2sect                          24
     dir_seek                           176
     dir_next                           308
     LfnOfs                              16
     cmp_lfn                            150
     pick_lfn                           108
     fit_lfn                            116
     gen_numname                        126
     sum_sfn                             30
     dir_find                           230
     dir_read                           190
     dir_register                       442
     dir_remove                          96
     create_name                        552
     cvt                                128
     get_fileinfo                       244
     follow_path                        148
     check_fs                           120
     chk_mounted                        716
     validate                            42
     f_mount                             50
     f_open                             428
     f_read                             504
     f_write                            560
     f_sync                             184
     f_close                             24
     f_lseek                            460
     f_opendir                          122
     f_readdir                          104
     f_stat                              74
     f_getfree                          258
     f_truncate                         166
     f_unlink                           204
     f_mkdir                            490
     f_chmod                             92
     f_utime                             98
     f_rename                           322
     f_mkfs                            1752
     sstbl                               44
     cstbl                               24
     f_gets                              76
     f_putc                              60
     f_puts                              44
     f_printf                           432
     ??DataTable12                        4
     ??DataTable12_1                      4
     ?<Constant "\"*:<>?|\177">          12
     ??DataTable15                        4
     ??DataTable15_1                      4
     ?<Constant "+,;[=]">                 8
     ??DataTable16                        4
     ??DataTable16_1                      4
     ??DataTable16_2                      4
     ??DataTable16_3                      4
     ??DataTable21                        4
     ??DataTable21_1                      4
     ??DataTable21_2                      4
     ??DataTable21_3                      4
     ?<Constant "NO NAME    FAT     ">   20
     ?<Constant "NO NAME    FAT32   ">   20

 
    518 bytes in section .bss
 11 884 bytes in section .text
 
 11 884 bytes of CODE memory
    518 bytes of DATA memory

Errors: none
Warnings: none
