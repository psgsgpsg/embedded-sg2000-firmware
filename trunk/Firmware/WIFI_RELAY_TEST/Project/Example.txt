



uint16_t GetADC(void)
{
	uint16_t ret;
	
	__set_PRIMASK(1);  
	
	ret = ADC_GetConversionValue(ADC1);
	
	__set_PRIMASK(0);  
	
	return ret;
}

void Trans_DTG(u16 Index)
{
     u16 i2;
     TM_Struct Timer;
     //	static u16 Index = 0;
     //	for(i = 0 ; i < 10 ; i++)
     {
          DTG_EMS_DataLoad(Index);
          for(i2 = 0; i2 < 30 ;i2++)
          {
               
               RTC_BinaryToDate( DTG_NAND_Binary[i2].Datetime , &Timer );		// 시간저장된 데이터 변환
               printf("[%02d/%02d/%02d-%02d:%02d:%02d],%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",
                      Timer.tm_year,Timer.tm_mon,Timer.tm_mday,
                      Timer.tm_hour,Timer.tm_min,Timer.tm_sec,
                      
                      DTG_NAND_Binary[i2].DayDriveLength,
                      DTG_NAND_Binary[i2].TotalDriveLength,
                      DTG_NAND_Binary[i2].Speed,
                      DTG_NAND_Binary[i2].RPM,
                      DTG_NAND_Binary[i2].Sign_Break,
                      DTG_NAND_Binary[i2].GPSX,
                      DTG_NAND_Binary[i2].GPSY,
                      DTG_NAND_Binary[i2].Azimuth,
                      DTG_NAND_Binary[i2].AccelX,
                      DTG_NAND_Binary[i2].AccelY,
                      DTG_NAND_Binary[i2].MachineStatus);
               Delay(100);
          }
     }	
}



//------------------- RTC 테스트 --------------------------------------
	  
/*	  RTC_TimeShow();        
        sprintf(TempBuff,"Time %0.2d:%0.2d:%0.2d", RTC_TimeStructure.RTC_Hours, RTC_TimeStructure.RTC_Minutes, RTC_TimeStructure.RTC_Seconds);
        GLcd_PutString(0,0,TempBuff,1);
        sprintf(TempBuff," %04d prm / %03d km",0,0);
        GLcd_PutString(0,2,TempBuff,1);
  */      
	  //---------------------------------------------------------------------
        
        //------------------- 키 테스트 ---------------------------------------
        /*
        //printf( "%d %d %d %d %d %d \r\n",IsKey_ESC(),IsKey_OK(),IsKey_DOWN(),IsKey_UP(),IsKey_MODE(),IsKey_ECO());

        if(GetKey() == Key_ECO)
        {
            if( Temp1 )
            {
                Temp1 = 0;
                Voice_Play(1);
            }
            else
            {
                Temp1 = 1;
                Voice_Play(2);
            }
        }*/
        //---------------------------------------------------------------------
        
        
        //-------------------- FSMC 테스트 ------------------------------------
        
//	FSMC_NAND_ReadID(&NAND_ID);
//	printf("x = %x , y = %x, z = x\r\n",NAND_ID.Maker_ID,NAND_ID.Device_ID);        

	/*
	NAND_PAGE.Zone = 0;
	NAND_PAGE.Block = 0;
	NAND_PAGE.Page = 0;
	
	
	for( i = 0 ; i < 2048 ; i++)
	{
		NAND_Buffer[i] = 0x30 + ( i %10 );
	}
	
	FSMC_NAND_EraseBlock(NAND_PAGE);
	FSMC_NAND_WriteSmallPage(NAND_Buffer,NAND_PAGE,1);
	memset(NAND_Buffer,0,sizeof(NAND_Buffer));
	FSMC_NAND_ReadSmallPage(NAND_Buffer,NAND_PAGE,1);
	memset(NAND_SpearArea,0,sizeof(NAND_SpearArea));
	FSMC_NAND_WriteSpareArea(NAND_SpearArea,NAND_PAGE,1);
	FSMC_NAND_ReadSpareArea(NAND_SpearArea,NAND_PAGE,1);
	*/
      //--------------------------------------------------------------------

        
	
        /* 
        //-------------------- Tilt 테스트 -----------------------------------
        Temp0 = MEMS_WhoAmI();
        Tilt_Check();
        printf("MEMS Test : %d %d %d %d\r\n", Temp0 ,TiltInfo.x,TiltInfo.y,TiltInfo.z );
        //--------------------------------------------------------------------
        */
        /* 
        //-------------------- 출력 테스트  -----------------------------------
	  
	//  GPIO_ToggleBits(OUT_CPU_AIRCON_PORT,OUT_CPU_AIRCON_ON);   // 에어콘    
	
	//--------------------------------------------------------------------	
	
        */


  //  I2C_EE_BufferRead(Rx1_Buffer, EEPROM_ReadAddress1, 1); 
  /* Read from I2C EEPROM from EEPROM_ReadAddress1 */
   // I2C_EE_BufferRead(Rx1_Buffer, EEPROM_ReadAddress1, BufferSize1); 
    
/*	I2C_EE_BufferWrite( Tx1_Buffer, EEPROM_WriteAddress1, sizeof(Tx1_Buffer) ) ;
//	memset(Tx1_Buffer,0,sizeof(Tx1_Buffer));
//	I2C_EE_BufferRead(Buffer, EEPROM_ReadAddress1, sizeof(Tx1_Buffer) );	
	Read_EEPROM();
	i = sizeof(EEPROM_Memory);
    memcpy(Buffer,&EEPROM_Memory, i);
    I2C_EE_BufferWrite( Buffer, EEPROM_WriteAddress1, sizeof(EEPROM_Memory) ) ;
    I2C_EE_WaitEepromStandbyState();
     sprintf( (char *) EEPROM_Memory.CarNum, "경기11일1234" );
     EEPROM_Memory.LimitSpeed = 50;
     EEPROM_Memory.EmsStopTime =1000;
     EEPROM_Memory.RPM_Adjust[0] = 2000;    
    I2C_EE_BufferRead(Buffer, EEPROM_ReadAddress1, sizeof(EEPROM_Memory) ); 
    memcpy(&EEPROM_Memory,Buffer,sizeof(EEPROM_Memory) );    

//    I2C_EE_BufferRead(Rx1_Buffer, EEPROM_ReadAddress1, BufferSize1); 
*/    
//    ADC_Value = ADC_GetConversionValue(ADC1);
//    ADC_Value = GetADC();
//    ADC_Value = ADCConvertedValue[1] *3300/0xFFF;

//    v=(ADCConvertedValue)/1000;
//    mv = (ADCConvertedValue%1000)/100;    
//    printf( "%4d %4d %4d %4d %4d\r\n",ADCConvertedValue[0],ADCConvertedValue[1],ADCConvertedValue[2],ADCConvertedValue[3],ADCConvertedValue[4]);
/*    
    while(1)
    {	  
	    I2C_EE_BufferWrite(Tx1_Buffer,EEPROM_WriteAddress1 , sizeof(Tx1_Buffer) ); 	    
	    Delay(100);
	    I2C_EE_BufferRead(Buffer, EEPROM_ReadAddress1, sizeof(Tx1_Buffer) ); 
	    Delay(100);
    }    
    */
/*
while(1)
{
	NAND_ADDRESS NAND_PAGE;
       //-------------------- FSMC 테스트 ------------------------------------
	for( i = 0 ; i < 2048 ; i++)
	{
		NAND_Buffer[i] = 0x30 + ( i %10 );
	}
	FSMC_NAND_EraseBlock(NAND_PAGE);	// 페이지가 아닌 블럭 단위로 지운다.

	for(i = 0 ; i < 5 ; i++)
	{
		NAND_PAGE.Zone = 0;
		NAND_PAGE.Block = 0;
		NAND_PAGE.Page = 5+i;
		//FSMC_NAND_Reset();
		Delay(1);
		FSMC_NAND_WriteSmallPage(NAND_Buffer,NAND_PAGE,1);

	}
	for(i = 0 ; i < 5 ; i++)
	{
		NAND_PAGE.Zone = 0;
		NAND_PAGE.Block = 0;
		NAND_PAGE.Page = 5+i;
		memset(NAND_Buffer,0,sizeof(NAND_Buffer));
		
		FSMC_NAND_ReadSmallPage(NAND_Buffer,NAND_PAGE,1);

	}
	
//	memset(NAND_SpearArea,0,sizeof(NAND_SpearArea));
//	FSMC_NAND_WriteSpareArea(NAND_SpearArea,NAND_PAGE,1);
//	FSMC_NAND_ReadSpareArea(NAND_SpearArea,NAND_PAGE,1);

      //--------------------------------------------------------------------	
}*/
/*
while(1)
{
    ADC_Value = ADC_GetConversionValue(ADC1);
    ADC_Value = GetADC();
    ADC_Value = ADCConvertedValue[1] *3300/0xFFF;

//    v= ( ADCConvertedValue ) / 1000;
//    mv = (ADCConvertedValue %1000)/ 100;    
    printf( "%4d %4d %4d %4d %4d\r\n",ADCConvertedValue[0],ADCConvertedValue[1],ADCConvertedValue[2],ADCConvertedValue[3],ADCConvertedValue[4]);
    Delay(100);
}*/

/*
//    Temp0 = Void_Get_Voulme();   
//    printf("Voice Test : %d \r\n", Temp0 );
//    Voice_Play(Temp1++);
*/