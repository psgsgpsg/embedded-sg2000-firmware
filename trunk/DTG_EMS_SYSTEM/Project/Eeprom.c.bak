#include "Eeprom.h"
#include "main.h"
#ifdef DEBUG_LOG
#include "Log.h"
#endif
#include "spi_flash.h"
#include "Ems_System.h"
#include "nand_if.h"


u8 Verify_EEPROM(void)
{
	struct _EEPROM_Data Verify_Memroy;
	
     memset(&Verify_Memroy,0,sizeof(struct _EEPROM_Data));
     memset(Buffer,0,sizeof(Buffer));
     
	sFLASH_ReadBuffer(Buffer, EEPROM_ReadAddress1, sizeof(struct _EEPROM_Data) );   
	memcpy(&Verify_Memroy,&Buffer, sizeof(struct _EEPROM_Data));    
	
	if(! memcmp( &Verify_Memroy, &EEPROM_Memory, sizeof(struct _EEPROM_Data) ) )
	{
		return 1;   // 두개가 같으면  트루
	}
	
	return 0;
}

void Save_LookupTable(void)
{	
	memcpy(Buffer,&EEPROM_CarInfo, sizeof(EEPROM_CarInfo));       
	sFLASH_EraseSector( EEPROM_WriteAddress3 );
	sFLASH_WriteBuffer( Buffer, EEPROM_WriteAddress3, sizeof(EEPROM_CarInfo) ) ;
}

void Save_GPS(void)
{
	memcpy(Buffer,&GPS_RouteCheck, sizeof(GPS_RouteCheck));       
	sFLASH_EraseSector( EEPROM_WriteAddress2 );
	sFLASH_WriteBuffer( Buffer, EEPROM_WriteAddress2, sizeof(GPS_RouteCheck) ) ;    
//	sFLASH_ReadBuffer( Buffer, EEPROM_WriteAddress2, sizeof(GPS_RouteCheck) ) ;         
}

void Save_EEPROM_CarInfo(void)
{	
	memcpy(Buffer,&EEPROM_CarInfo, sizeof(EEPROM_CarInfo));       
	sFLASH_EraseSector( EEPROM_WriteAddress0 );
	sFLASH_WriteBuffer( Buffer, EEPROM_WriteAddress0, sizeof(EEPROM_CarInfo) ) ;
}

void Save_EEPROM(void)
{
	u8 ReWriteCount;
	// 데이터를 EEPROM으로 불러 온다.
	DataLoad();
	
	memcpy(Buffer,&EEPROM_Memory, sizeof(EEPROM_Memory));       
	sFLASH_EraseSector( EEPROM_WriteAddress1 );
	sFLASH_WriteBuffer( Buffer, EEPROM_WriteAddress1, sizeof(EEPROM_Memory) ) ;

     DataSetting();
     
#ifdef DEBUG_LOG
	// LOG -------------------------------------------------------------------------
	if(LOGWRITE & LOG_EEPROM)                       
	{
		sprintf((char *)Buffer,"EEPROM DATA WRITE\r\n "); 
		Write_Log(Buffer, NORMAL_LOG);
	}        
#endif     
	// -----------------------------------------------------------------------------        
	if( Verify_EEPROM() == 0 )
	{
		for( ReWriteCount = 0 ; ReWriteCount < 5 ; ReWriteCount++ )
		{
#ifdef DEBUG_LOG               
			// LOG -------------------------------------------------------------------------
			if(LOGWRITE & LOG_EEPROM)                       
			{
				sprintf((char *)Buffer,"EEPROM VERIFY ERROR Count = %d\r\n ", ReWriteCount ); 
				Write_Log(Buffer, FAIL_LOG);
			}            
#endif               
			// -----------------------------------------------------------------------------                
			memcpy(Buffer,&EEPROM_Memory, sizeof(EEPROM_Memory));
               sFLASH_EraseSector( EEPROM_WriteAddress1 );
			sFLASH_WriteBuffer( Buffer, EEPROM_WriteAddress1, sizeof(EEPROM_Memory) ) ;         
			if( Verify_EEPROM() )
			{
#ifdef DEBUG_LOG                    
				// LOG -------------------------------------------------------------------------
				if(LOGWRITE & LOG_EEPROM)                       
				{
					sprintf((char *)Buffer,"EEPROM VERIFY SUCCESS \r\n " );                 
					Write_Log(Buffer, NORMAL_LOG);
				}            
#endif                    
				// -----------------------------------------------------------------------------    
				return ;
			}
		}
		// LOG -------------------------------------------------------------------------
#ifdef DEBUG_LOG          
		if(LOGWRITE & LOG_EEPROM)                       
		{
			sprintf((char *)Buffer,"EEPROM VERIFY ERROR RESET EEPROM\r\n "); 
			Write_Log(Buffer, FAIL_LOG);
		}   
#endif          
		return;
		// -----------------------------------------------------------------------------            
	}           
	// LOG -------------------------------------------------------------------------
#ifdef DEBUG_LOG     
	if(LOGWRITE & LOG_EEPROM)                       
	{
		sprintf((char *)Buffer,"EEPROM VERIFY SUCCESS \r\n " ); 
		Write_Log(Buffer, NORMAL_LOG);
	}        
#endif      
	// -----------------------------------------------------------------------------
}

void DataLoad(void)
{    
	EEPROM_Memory.EcoStatus = Info.EcoStatus;                   // 에코상태  
}


void DataSetting(void)
{
	// 기준값으로 사용될 값들을 읽어옴     

//     if(EEPROM_Memory.Car_Maker == 2)        // 현대
//     {
//          Set_Info.RPM_Adjust = 4000;             // 1000RPM /  50hz
//          Set_Info.SPEED_Adjust = 108;          
//          Set_Info.Speed_OUT = 0;
//          Set_Info.IO_Reverser = EEPROM_Memory.IO_Reverser;
//          Set_Info.IO_Reverser = Set_Info.IO_Reverser ^ INPUT_GEAR_FLAG ^ INPUT_PARKING_BREAK_FLAG;          
//     }else if(EEPROM_Memory.Car_Maker == 2)       // 대우신형
//     {
//          Set_Info.RPM_Adjust = 1000;             // 1000RPM / 200hz          
//          Set_Info.SPEED_Adjust = 108;
//          Set_Info.Speed_OUT = 1;
//          Set_Info.IO_Reverser = EEPROM_Memory.IO_Reverser ;          
//     }else if(EEPROM_Memory.Car_Maker == 3)       // 대우 구형
//     {          
//          Set_Info.RPM_Adjust = 80;              // 1000RPM  / 2500hz 
//          Set_Info.SPEED_Adjust = 108;            
//          Set_Info.Speed_OUT = 0;
//          Set_Info.IO_Reverser = EEPROM_Memory.IO_Reverser ;
//
//     }else if(EEPROM_Memory.Car_Maker == 4)       // 기타
//     {
//          Set_Info.RPM_Adjust = EEPROM_Memory.RPM_Adjust;
//          Set_Info.SPEED_Adjust = EEPROM_Memory.SPEED_Adjust;
//          Set_Info.Speed_OUT = 0;          
//          Set_Info.IO_Reverser = EEPROM_Memory.IO_Reverser;
//     }
 
     if(EEPROM_Memory.Car_Maker == 2)        // 대우신형
     {
          Set_Info.Speed_OUT = 1;     
     }
     else
     {
          Set_Info.Speed_OUT = 0;     
     }     
   
     Set_Info.RPM_Adjust = EEPROM_Memory.RPM_Adjust;
     Set_Info.SPEED_Adjust = EEPROM_Memory.SPEED_Adjust;
     Set_Info.IO_Reverser = EEPROM_Memory.IO_Reverser;
     
     Set_Info.Distance_Adjust = (float) EEPROM_Memory.Distance_Adjust / 10000000; // 196247/10000000  = 0.0196247
     
     memset(Info.Driver_Num,0x30,sizeof(Info.Driver_Num));            // 처음 운전자 아이디 0으로 클리어 
        
     EEPROM_Memory.Driver_Index = NO_DRIVER;
     
//	memcpy(Info.CarNum, EEPROM_CarInfo.CarNum,sizeof(EEPROM_CarInfo.CarNum) );    // 차량번호

	Info.Voice_Volume = EEPROM_Memory.Voice_Volume;
     
	// ------  EEPROM  --------------------------------------------------------------
	
//	Info.NAND_Header_Info.Header_Count = EEPROM_Memory.NAND_Header_Info.Header_Count;
//	
//     Info.NAND_Header_Info.Page_Count = EEPROM_Memory.NAND_Header_Info.Page_Count;  
     
     // ----------------------------------------------------------------------------
	
}
void Read_EEPROM(void)
{
	u8 i;
     
	sFLASH_ReadBuffer(Buffer, EEPROM_ReadAddress0, sizeof(EEPROM_CarInfo) );     
	memcpy(&EEPROM_CarInfo,Buffer, sizeof(EEPROM_CarInfo));
	
	if( EEPROM_CarInfo.Verify != EEPROM_VERIFY0 )        // Verify를 읽었을때 오류인가
     {
          memset(&EEPROM_CarInfo,0,sizeof(EEPROM_CarInfo));
          sprintf( (char *) EEPROM_CarInfo.FirmWareVer, "EMS110818" );
          sprintf( (char *) EEPROM_CarInfo.SerialNumber, "1EMS1211000001" );
          sprintf( (char *) EEPROM_CarInfo.MachineVer, "DTGEMS00001" );
          sprintf( (char *) EEPROM_CarInfo.Recognition, "11-0033-01" );
          sprintf( (char *) EEPROM_CarInfo.CarNum, "경기11일1234" );
          strcpy((char * )EEPROM_CarInfo.SSID ,"U+NetF1F3");
          strcpy((char * )EEPROM_CarInfo.WWPA ,"12345678");
          strcpy((char * )EEPROM_CarInfo.ServerIP ,"118.107.161.70");
          strcpy((char * )EEPROM_CarInfo.ServerPort ,"9413");
          EEPROM_CarInfo.Verify = EEPROM_VERIFY0;
          Save_EEPROM_CarInfo();
     }
	
     sFLASH_ReadBuffer(Buffer, EEPROM_ReadAddress2, sizeof(GPS_RouteCheck) );     
	memcpy(&GPS_RouteCheck,Buffer, sizeof(GPS_RouteCheck));    	
     
     if( GPS_RouteCheck.Verify != EEPROM_VERIFY2 )        // Verify를 읽었을때 오류인가?
     {
          memset(&GPS_RouteCheck,0,sizeof(GPS_RouteCheck));
          GPS_RouteCheck.Verify = EEPROM_VERIFY2;
          Save_GPS();
     }

	sFLASH_ReadBuffer(Buffer, EEPROM_ReadAddress1, sizeof(EEPROM_Memory) );     
	memcpy(&EEPROM_Memory,Buffer, sizeof(EEPROM_Memory));
//	printf("%x %x ",EEPROM_Memory.Verify,EEPROM_VERIFY1);
	if( EEPROM_Memory.Verify != EEPROM_VERIFY1 )        // Verify를 읽었을때 오류인가?
	{
          memset(&EEPROM_Memory,0,sizeof(EEPROM_Memory));
         
          EEPROM_Memory.Driver_Index = NO_DRIVER;     
          for( i = 0 ; i < 5 ; i ++)
          {
               strcpy((char*)EEPROM_Memory.Driver[i], (char*)"000000000000000000");
               EEPROM_Memory.Driver[i][10] += i; 
               EEPROM_Memory.Driver[i][17] += i;               
          }
          
          EEPROM_Memory.Car_Maker = 1;
          
          EEPROM_Memory.RPM_Adjust = 4000;
          EEPROM_Memory.SPEED_Adjust = 108;
          
          EEPROM_Memory.Distance_Adjust = 196247;    //0.0196247
          
          EEPROM_Memory.SPEED_Reference = 50;     // 5.0v
          EEPROM_Memory.RPM_Reference = 50;       // 5.0v
          
          EEPROM_Memory.IO_Reverser = 0;
          
          EEPROM_Memory.EMS.USE_Enable = 1;
               
          EEPROM_Memory.EMS.Battery_Volt = 23000 ;
          EEPROM_Memory.EMS.ColdWaterTemp_Volt = 5000;
          EEPROM_Memory.EMS.Air_Volt = 4700;
          EEPROM_Memory.EMS.TILTX_Limit = 3;
          EEPROM_Memory.EMS.TILTY_Limit = 3;
          EEPROM_Memory.EMS.LimitSpeed = 30;
          EEPROM_Memory.EMS.StopTime = 5;
          
          EEPROM_Memory.FastOverSpeed = 80;
          EEPROM_Memory.QuickStop = 11;
          EEPROM_Memory.QuickStart = 8;               // 
          EEPROM_Memory.OverloadRPM = 1800;
          
//          EEPROM_Memory.TotalDriveLength = 0;          // 총 운행거리
          
          EEPROM_Memory.Voice_Volume = 100;
          
          // ------------ TILT ---------------------------------------
          
          EEPROM_Memory.Tilt_Reference = 'Z'; // 틸트 오리지날값
          EEPROM_Memory.TiltRefX = 0;
          EEPROM_Memory.TiltRefY = 0; 
          EEPROM_Memory.EventRefX = 0;
          EEPROM_Memory.EventRefY = 0;
          
          // ------------ GPS ---------------------------------------
          EEPROM_Memory.Home.Longitude = 0;                     // X             
          EEPROM_Memory.Home.Latitude = 0;                     // Y   

          EEPROM_Memory.GPS_EMS_Use = 0;               // GPS EMS 사용 0은 사용하지 않음(전체) 1: 차고지만 사용 2: 구간 EMS 사용
          //  -------- EEPROM -----------------------------------
          
          //          EEPROM_Memory.NAND_Header_Info.Header_Count =0;
          //          EEPROM_Memory.NAND_Header_Info.Page_Count =0;        
          
          EEPROM_Memory.DTG_EMS_Select = 1 ;                // 0은 DTG 1은 EMS
          
          // ---------- VERIFY ---------------------------------------------
          
          EEPROM_Memory.Verify = EEPROM_VERIFY1;
#ifdef DEBUG_LOG
          // LOG -------------------------------------------------------------------------
          if(LOGWRITE & LOG_EEPROM)                       
          {
               sprintf((char *)Buffer,"EEPROM MEMORY RESET  \r\n " ); 
               Write_Log(Buffer, NORMAL_LOG);
          }            
#endif
          // -----------------------------------------------------------------------------                
          Save_EEPROM();
	}   
	else
	{
#ifdef DEBUG_LOG          
		// LOG -------------------------------------------------------------------------
		if(LOGWRITE & LOG_EEPROM)                       
		{
			sprintf((char *)Buffer,"EEPROM READ SUCCESS \r\n " ); 
			Write_Log(Buffer, NORMAL_LOG);
		}   
#endif  
		// -----------------------------------------------------------------------------    
	}
	// EEPROM 데이터를 세팅값에 넣어준다.
	DataSetting();       

	sFLASH_ReadBuffer(Buffer, EEPROM_ReadAddress3, sizeof(LookUpTable) );     
	memcpy(&LookUpTable,Buffer, sizeof(LookUpTable));

     if( LookUpTable.Verify != EEPROM_VERIFY3 )
     {
          if(NAND_BuildLUT(0) == NAND_OK)
          {
               LookUpTable.Verify = EEPROM_VERIFY3;
               Save_LookupTable();
          }
     }
}
