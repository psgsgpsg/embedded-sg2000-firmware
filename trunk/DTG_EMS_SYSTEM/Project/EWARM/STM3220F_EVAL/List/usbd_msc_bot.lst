###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     16/May/2011  15:08:16 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4 #
#                    \STM32F2xx_StdPeriph_Lib_V0.0.4\Libraries\STM32_USB_Devi #
#                    ce_Library\Class\msc\src\usbd_msc_bot.c                  #
#    Command line =  "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Libraries\STM32_USB_Dev #
#                    ice_Library\Class\msc\src\usbd_msc_bot.c" -D             #
#                    USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM3220F_EVAL   #
#                    -D USE_USB_OTG_FS -D USE_ULPI_PHY -lC "D:\¹¬ÀÛ¾÷\[       #
#                    NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_S #
#                    tdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template #
#                    \EWARM\STM3220F_EVAL\List\" -lA "D:\¹¬ÀÛ¾÷\[ NewDTG      #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    STM3220F_EVAL\List\" -o "D:\¹¬ÀÛ¾÷\[ NewDTG              #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    STM3220F_EVAL\Obj\" --no_cse --no_unroll --no_inline     #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I "D:\¹¬ÀÛ¾÷\[ NewDTG                              #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    ..\" -I "D:\¹¬ÀÛ¾÷\[ NewDTG                              #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    ..\..\..\Libraries\CMSIS\CM3\CoreSupport\" -I            #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\..\..\..\Libraries\CMSIS\CM3\DeviceS #
#                    upport\ST\STM32F2xx\" -I "D:\¹¬ÀÛ¾÷\[ NewDTG             #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    ..\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\" -I   #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\..\..\..\Utilities\STM32_EVAL\" -I   #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\..\..\..\Utilities\STM32_EVAL\Common #
#                    \" -I "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib #
#                    _V0.0.4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx #
#                    _StdPeriph_Template\EWARM\..\..\..\Utilities\STM32_EVAL\ #
#                    STM3220F_EVAL\" -I "D:\¹¬ÀÛ¾÷\[ NewDTG                   #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    ..\..\..\Libraries\STM32_USB_OTG_Driver\inc\" -I         #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\..\..\..\Libraries\STM32_USB_Device_ #
#                    Library\Core\inc\" -I "D:\¹¬ÀÛ¾÷\[ NewDTG                #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    ..\..\..\Libraries\STM32_USB_Device_Library\Class\msc\in #
#                    c\" -Ol --use_c++_inline                                 #
#    List file    =  D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4 #
#                    \STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPer #
#                    iph_Template\EWARM\STM3220F_EVAL\List\usbd_msc_bot.lst   #
#    Object file  =  D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4 #
#                    \STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPer #
#                    iph_Template\EWARM\STM3220F_EVAL\Obj\usbd_msc_bot.o      #
#                                                                             #
#                                                                             #
###############################################################################

D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPeriph_Lib_V0.0.4\Libraries\STM32_USB_Device_Library\Class\msc\src\usbd_msc_bot.c
      1          /**
      2            ******************************************************************************
      3            * @file    usbd_msc_bot.c
      4            * @author  MCD Application Team
      5            * @version V0.0.1
      6            * @date    11/12/2010
      7            * @brief   This file provides all the BOT protocol core functions.
      8            ******************************************************************************
      9            * @copy
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h2>
     19            */ 
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "usbd_msc_bot.h"
     23          #include "usbd_msc_scsi.h"
     24          #include "usbd_ioreq.h"
     25          #include "usbd_msc_mem.h"
     26          /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
     27            * @{
     28            */
     29          
     30          
     31          /** @defgroup MSC_BOT 
     32            * @brief BOT protocol module
     33            * @{
     34            */ 
     35          
     36          /** @defgroup MSC_BOT_Private_TypesDefinitions
     37            * @{
     38            */ 
     39          /**
     40            * @}
     41            */ 
     42          
     43          
     44          /** @defgroup MSC_BOT_Private_Defines
     45            * @{
     46            */ 
     47          
     48          /**
     49            * @}
     50            */ 
     51          
     52          
     53          /** @defgroup MSC_BOT_Private_Macros
     54            * @{
     55            */ 
     56          /**
     57            * @}
     58            */ 
     59          
     60          
     61          /** @defgroup MSC_BOT_Private_Variables
     62            * @{
     63            */ 

   \                                 In section .bss, align 2
     64          uint16_t             MSC_BOT_DataLen;
   \                     MSC_BOT_DataLen:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     65          uint8_t              MSC_BOT_State;
   \                     MSC_BOT_State:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     66          uint8_t              MSC_BOT_Status;
   \                     MSC_BOT_Status:
   \   00000000                      DS8 1
     67          #ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED 
     68          #pragma data_alignment =  4
     69          #endif

   \                                 In section .bss, align 4
     70          uint8_t              MSC_BOT_Data[MSC_MEDIA_PACKET];
   \                     MSC_BOT_Data:
   \   00000000                      DS8 4096

   \                                 In section .bss, align 4
     71          MSC_BOT_CBW_TypeDef  MSC_BOT_cbw;
   \                     MSC_BOT_cbw:
   \   00000000                      DS8 32

   \                                 In section .bss, align 4
     72          MSC_BOT_CSW_TypeDef  MSC_BOT_csw;
   \                     MSC_BOT_csw:
   \   00000000                      DS8 16
     73          /**
     74            * @}
     75            */ 
     76          
     77          
     78          /** @defgroup MSC_BOT_Private_FunctionPrototypes
     79            * @{
     80            */ 
     81          static void MSC_BOT_CBW_Decode (USB_OTG_CORE_HANDLE  *pdev);
     82          
     83          static void MSC_BOT_SendData (USB_OTG_CORE_HANDLE  *pdev, 
     84                                        uint8_t* pbuf, 
     85                                        uint16_t len);
     86          
     87          static void MSC_BOT_Abort(USB_OTG_CORE_HANDLE  *pdev);
     88          /**
     89            * @}
     90            */ 
     91          
     92          
     93          /** @defgroup MSC_BOT_Private_Functions
     94            * @{
     95            */ 
     96          
     97          
     98          
     99          /**
    100          * @brief  MSC_BOT_Init
    101          *         Initialize the BOT Process
    102          * @param  pdev: device instance
    103          * @retval None
    104          */

   \                                 In section .text, align 2, keep-with-next
    105          void MSC_BOT_Init (USB_OTG_CORE_HANDLE  *pdev)
    106          {
   \                     MSC_BOT_Init:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    107            MSC_BOT_State = BOT_IDLE;
   \   00000004   ....               LDR.N    R0,??DataTable9
   \   00000006   0021               MOVS     R1,#+0
   \   00000008   0170               STRB     R1,[R0, #+0]
    108            MSC_BOT_Status = BOT_STATE_NORMAL;
   \   0000000A   ....               LDR.N    R0,??DataTable9_1
   \   0000000C   0021               MOVS     R1,#+0
   \   0000000E   0170               STRB     R1,[R0, #+0]
    109            USBD_STORAGE_fops->Init(0);
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   ....               LDR.N    R1,??DataTable9_2
   \   00000014   0968               LDR      R1,[R1, #+0]
   \   00000016   0968               LDR      R1,[R1, #+0]
   \   00000018   8847               BLX      R1
    110            
    111            DCD_EP_Flush(pdev, MSC_OUT_EP);
   \   0000001A   0121               MOVS     R1,#+1
   \   0000001C   2000               MOVS     R0,R4
   \   0000001E   ........           BL       DCD_EP_Flush
    112            DCD_EP_Flush(pdev, MSC_IN_EP);
   \   00000022   8121               MOVS     R1,#+129
   \   00000024   2000               MOVS     R0,R4
   \   00000026   ........           BL       DCD_EP_Flush
    113            /* Prapare EP to Receive First BOT Cmd */
    114            DCD_EP_PrepareRx (pdev,
    115                              MSC_OUT_EP,
    116                              (uint8_t *)&MSC_BOT_cbw,
    117                              BOT_CBW_LENGTH);    
   \   0000002A   1F23               MOVS     R3,#+31
   \   0000002C   ....               LDR.N    R2,??DataTable9_3
   \   0000002E   0121               MOVS     R1,#+1
   \   00000030   2000               MOVS     R0,R4
   \   00000032   ........           BL       DCD_EP_PrepareRx
    118          }
   \   00000036   10BD               POP      {R4,PC}          ;; return
    119          
    120          /**
    121          * @brief  MSC_BOT_Reset
    122          *         Reset the BOT Machine
    123          * @param  pdev: device instance
    124          * @retval  None
    125          */

   \                                 In section .text, align 2, keep-with-next
    126          void MSC_BOT_Reset (USB_OTG_CORE_HANDLE  *pdev)
    127          {
   \                     MSC_BOT_Reset:
   \   00000000   80B5               PUSH     {R7,LR}
    128            MSC_BOT_State = BOT_IDLE;
   \   00000002   ....               LDR.N    R1,??DataTable9
   \   00000004   0022               MOVS     R2,#+0
   \   00000006   0A70               STRB     R2,[R1, #+0]
    129            MSC_BOT_Status = BOT_STATE_RECOVERY;
   \   00000008   ....               LDR.N    R1,??DataTable9_1
   \   0000000A   0122               MOVS     R2,#+1
   \   0000000C   0A70               STRB     R2,[R1, #+0]
    130            /* Prapare EP to Receive First BOT Cmd */
    131            DCD_EP_PrepareRx (pdev,
    132                              MSC_OUT_EP,
    133                              (uint8_t *)&MSC_BOT_cbw,
    134                              BOT_CBW_LENGTH);    
   \   0000000E   1F23               MOVS     R3,#+31
   \   00000010   ....               LDR.N    R2,??DataTable9_3
   \   00000012   0121               MOVS     R1,#+1
   \   00000014   ........           BL       DCD_EP_PrepareRx
    135          }
   \   00000018   01BD               POP      {R0,PC}          ;; return
    136          
    137          /**
    138          * @brief  MSC_BOT_DeInit
    139          *         Uninitialize the BOT Machine
    140          * @param  pdev: device instance
    141          * @retval None
    142          */

   \                                 In section .text, align 2, keep-with-next
    143          void MSC_BOT_DeInit (USB_OTG_CORE_HANDLE  *pdev)
    144          {
    145            MSC_BOT_State = BOT_IDLE;
   \                     MSC_BOT_DeInit:
   \   00000000   ....               LDR.N    R0,??DataTable9
   \   00000002   0021               MOVS     R1,#+0
   \   00000004   0170               STRB     R1,[R0, #+0]
    146          }
   \   00000006   7047               BX       LR               ;; return
    147          
    148          /**
    149          * @brief  MSC_BOT_DataIn
    150          *         Handle BOT IN data stage
    151          * @param  pdev: device instance
    152          * @param  epnum: endpoint index
    153          * @retval None
    154          */

   \                                 In section .text, align 2, keep-with-next
    155          void MSC_BOT_DataIn (USB_OTG_CORE_HANDLE  *pdev, 
    156                               uint8_t epnum)
    157          {
   \                     MSC_BOT_DataIn:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    158            
    159            switch (MSC_BOT_State)
   \   00000004   ....               LDR.N    R0,??DataTable9
   \   00000006   0078               LDRB     R0,[R0, #+0]
   \   00000008   801E               SUBS     R0,R0,#+2
   \   0000000A   03D0               BEQ.N    ??MSC_BOT_DataIn_0
   \   0000000C   401E               SUBS     R0,R0,#+1
   \   0000000E   0128               CMP      R0,#+1
   \   00000010   0DD9               BLS.N    ??MSC_BOT_DataIn_1
   \   00000012   11E0               B.N      ??MSC_BOT_DataIn_2
    160            {
    161            case BOT_DATA_IN:
    162              if(SCSI_ProcessCmd(pdev,
    163                                  MSC_BOT_cbw.bLUN,
    164                                  &MSC_BOT_cbw.CB[0]) < 0)
   \                     ??MSC_BOT_DataIn_0:
   \   00000014   ....               LDR.N    R2,??DataTable9_4
   \   00000016   ....               LDR.N    R0,??DataTable9_3
   \   00000018   417B               LDRB     R1,[R0, #+13]
   \   0000001A   2000               MOVS     R0,R4
   \   0000001C   ........           BL       SCSI_ProcessCmd
   \   00000020   0028               CMP      R0,#+0
   \   00000022   03D5               BPL.N    ??MSC_BOT_DataIn_3
    165              {
    166                MSC_BOT_SendCSW (pdev, CSW_CMD_FAILED);
   \   00000024   0121               MOVS     R1,#+1
   \   00000026   2000               MOVS     R0,R4
   \   00000028   ........           BL       MSC_BOT_SendCSW
    167              }
    168              break;
   \                     ??MSC_BOT_DataIn_3:
   \   0000002C   04E0               B.N      ??MSC_BOT_DataIn_4
    169              
    170            case BOT_SEND_DATA:
    171            case BOT_LAST_DATA_IN:
    172              MSC_BOT_SendCSW (pdev, CSW_CMD_PASSED);
   \                     ??MSC_BOT_DataIn_1:
   \   0000002E   0021               MOVS     R1,#+0
   \   00000030   2000               MOVS     R0,R4
   \   00000032   ........           BL       MSC_BOT_SendCSW
    173              
    174              break;
   \   00000036   FFE7               B.N      ??MSC_BOT_DataIn_4
    175              
    176            default:
    177              break;
    178            }
    179          }
   \                     ??MSC_BOT_DataIn_2:
   \                     ??MSC_BOT_DataIn_4:
   \   00000038   10BD               POP      {R4,PC}          ;; return
    180          /**
    181          * @brief  MSC_BOT_DataOut
    182          *         Proccess MSC OUT data
    183          * @param  pdev: device instance
    184          * @param  epnum: endpoint index
    185          * @retval None
    186          */

   \                                 In section .text, align 2, keep-with-next
    187          void MSC_BOT_DataOut (USB_OTG_CORE_HANDLE  *pdev, 
    188                                uint8_t epnum)
    189          {
   \                     MSC_BOT_DataOut:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    190            switch (MSC_BOT_State)
   \   00000004   ....               LDR.N    R0,??DataTable9
   \   00000006   0078               LDRB     R0,[R0, #+0]
   \   00000008   0028               CMP      R0,#+0
   \   0000000A   02D0               BEQ.N    ??MSC_BOT_DataOut_0
   \   0000000C   0128               CMP      R0,#+1
   \   0000000E   04D0               BEQ.N    ??MSC_BOT_DataOut_1
   \   00000010   10E0               B.N      ??MSC_BOT_DataOut_2
    191            {
    192            case BOT_IDLE:
    193              MSC_BOT_CBW_Decode(pdev);
   \                     ??MSC_BOT_DataOut_0:
   \   00000012   2000               MOVS     R0,R4
   \   00000014   ........           BL       MSC_BOT_CBW_Decode
    194              break;
   \   00000018   0CE0               B.N      ??MSC_BOT_DataOut_3
    195              
    196            case BOT_DATA_OUT:
    197              
    198              if(SCSI_ProcessCmd(pdev,
    199                                  MSC_BOT_cbw.bLUN,
    200                                  &MSC_BOT_cbw.CB[0]) < 0)
   \                     ??MSC_BOT_DataOut_1:
   \   0000001A   ....               LDR.N    R2,??DataTable9_4
   \   0000001C   ....               LDR.N    R0,??DataTable9_3
   \   0000001E   417B               LDRB     R1,[R0, #+13]
   \   00000020   2000               MOVS     R0,R4
   \   00000022   ........           BL       SCSI_ProcessCmd
   \   00000026   0028               CMP      R0,#+0
   \   00000028   03D5               BPL.N    ??MSC_BOT_DataOut_4
    201              {
    202                MSC_BOT_SendCSW (pdev, CSW_CMD_FAILED);
   \   0000002A   0121               MOVS     R1,#+1
   \   0000002C   2000               MOVS     R0,R4
   \   0000002E   ........           BL       MSC_BOT_SendCSW
    203              }
    204          
    205              break;
   \                     ??MSC_BOT_DataOut_4:
   \   00000032   FFE7               B.N      ??MSC_BOT_DataOut_3
    206              
    207            default:
    208              break;
    209            }
    210            
    211          }
   \                     ??MSC_BOT_DataOut_2:
   \                     ??MSC_BOT_DataOut_3:
   \   00000034   10BD               POP      {R4,PC}          ;; return
    212          
    213          /**
    214          * @brief  MSC_BOT_CBW_Decode
    215          *         Decode the CBW command and set the BOT state machine accordingtly  
    216          * @param  pdev: device instance
    217          * @retval None
    218          */

   \                                 In section .text, align 2, keep-with-next
    219          static void  MSC_BOT_CBW_Decode (USB_OTG_CORE_HANDLE  *pdev)
    220          {
   \                     MSC_BOT_CBW_Decode:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    221            
    222            MSC_BOT_csw.dTag = MSC_BOT_cbw.dTag;
   \   00000004   ....               LDR.N    R0,??DataTable9_5
   \   00000006   ....               LDR.N    R1,??DataTable9_3
   \   00000008   4968               LDR      R1,[R1, #+4]
   \   0000000A   4160               STR      R1,[R0, #+4]
    223            MSC_BOT_csw.dDataResidue = MSC_BOT_cbw.dDataLength;
   \   0000000C   ....               LDR.N    R0,??DataTable9_5
   \   0000000E   ....               LDR.N    R1,??DataTable9_3
   \   00000010   8968               LDR      R1,[R1, #+8]
   \   00000012   8160               STR      R1,[R0, #+8]
    224            
    225            if ((pdev->dev.out_ep[MSC_OUT_EP].xfer_count != BOT_CBW_LENGTH) ||
    226                (MSC_BOT_cbw.dSignature != BOT_CBW_SIGNATURE)||
    227                  (MSC_BOT_cbw.bLUN > 1) || 
    228                    (MSC_BOT_cbw.bCBLength < 1) || 
    229                      (MSC_BOT_cbw.bCBLength > 16))
   \   00000014   D4F8B003           LDR      R0,[R4, #+944]
   \   00000018   1F28               CMP      R0,#+31
   \   0000001A   0ED1               BNE.N    ??MSC_BOT_CBW_Decode_0
   \   0000001C   ....               LDR.N    R0,??DataTable9_3
   \   0000001E   0068               LDR      R0,[R0, #+0]
   \   00000020   ....               LDR.N    R1,??DataTable9_6  ;; 0x43425355
   \   00000022   8842               CMP      R0,R1
   \   00000024   09D1               BNE.N    ??MSC_BOT_CBW_Decode_0
   \   00000026   ....               LDR.N    R0,??DataTable9_3
   \   00000028   407B               LDRB     R0,[R0, #+13]
   \   0000002A   0228               CMP      R0,#+2
   \   0000002C   05D2               BCS.N    ??MSC_BOT_CBW_Decode_0
   \   0000002E   ....               LDR.N    R0,??DataTable9_3
   \   00000030   807B               LDRB     R0,[R0, #+14]
   \   00000032   401E               SUBS     R0,R0,#+1
   \   00000034   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   1028               CMP      R0,#+16
   \   00000038   0CD3               BCC.N    ??MSC_BOT_CBW_Decode_1
    230            {
    231              
    232              SCSI_SenseCode(MSC_BOT_cbw.bLUN, 
    233                             ILLEGAL_REQUEST, 
    234                             INVALID_CDB);
   \                     ??MSC_BOT_CBW_Decode_0:
   \   0000003A   2022               MOVS     R2,#+32
   \   0000003C   0521               MOVS     R1,#+5
   \   0000003E   ....               LDR.N    R0,??DataTable9_3
   \   00000040   407B               LDRB     R0,[R0, #+13]
   \   00000042   ........           BL       SCSI_SenseCode
    235               MSC_BOT_Status = BOT_STATE_ERROR;   
   \   00000046   ....               LDR.N    R0,??DataTable9_1
   \   00000048   0221               MOVS     R1,#+2
   \   0000004A   0170               STRB     R1,[R0, #+0]
    236              MSC_BOT_Abort(pdev);
   \   0000004C   2000               MOVS     R0,R4
   \   0000004E   ........           BL       MSC_BOT_Abort
   \   00000052   2AE0               B.N      ??MSC_BOT_CBW_Decode_2
    237           
    238            }
    239            else
    240            {
    241              if(SCSI_ProcessCmd(pdev,
    242                                        MSC_BOT_cbw.bLUN,
    243                                        &MSC_BOT_cbw.CB[0]) < 0)
   \                     ??MSC_BOT_CBW_Decode_1:
   \   00000054   ....               LDR.N    R2,??DataTable9_4
   \   00000056   ....               LDR.N    R0,??DataTable9_3
   \   00000058   417B               LDRB     R1,[R0, #+13]
   \   0000005A   2000               MOVS     R0,R4
   \   0000005C   ........           BL       SCSI_ProcessCmd
   \   00000060   0028               CMP      R0,#+0
   \   00000062   03D5               BPL.N    ??MSC_BOT_CBW_Decode_3
    244              {
    245                MSC_BOT_Abort(pdev);
   \   00000064   2000               MOVS     R0,R4
   \   00000066   ........           BL       MSC_BOT_Abort
   \   0000006A   1EE0               B.N      ??MSC_BOT_CBW_Decode_2
    246              }
    247              /*Burst xfer handled internally*/
    248              else if ((MSC_BOT_State != BOT_DATA_IN) && 
    249                       (MSC_BOT_State != BOT_DATA_OUT) &&
    250                       (MSC_BOT_State != BOT_LAST_DATA_IN)) 
   \                     ??MSC_BOT_CBW_Decode_3:
   \   0000006C   ....               LDR.N    R0,??DataTable9
   \   0000006E   0078               LDRB     R0,[R0, #+0]
   \   00000070   0228               CMP      R0,#+2
   \   00000072   1AD0               BEQ.N    ??MSC_BOT_CBW_Decode_2
   \   00000074   ....               LDR.N    R0,??DataTable9
   \   00000076   0078               LDRB     R0,[R0, #+0]
   \   00000078   0128               CMP      R0,#+1
   \   0000007A   16D0               BEQ.N    ??MSC_BOT_CBW_Decode_2
   \   0000007C   ....               LDR.N    R0,??DataTable9
   \   0000007E   0078               LDRB     R0,[R0, #+0]
   \   00000080   0328               CMP      R0,#+3
   \   00000082   12D0               BEQ.N    ??MSC_BOT_CBW_Decode_2
    251              {
    252                if (MSC_BOT_DataLen > 0)
   \   00000084   ....               LDR.N    R0,??DataTable9_7
   \   00000086   0088               LDRH     R0,[R0, #+0]
   \   00000088   0128               CMP      R0,#+1
   \   0000008A   06D3               BCC.N    ??MSC_BOT_CBW_Decode_4
    253                {
    254                  MSC_BOT_SendData(pdev,
    255                                   MSC_BOT_Data, 
    256                                   MSC_BOT_DataLen);
   \   0000008C   ....               LDR.N    R0,??DataTable9_7
   \   0000008E   0288               LDRH     R2,[R0, #+0]
   \   00000090   ....               LDR.N    R1,??DataTable9_8
   \   00000092   2000               MOVS     R0,R4
   \   00000094   ........           BL       MSC_BOT_SendData
   \   00000098   07E0               B.N      ??MSC_BOT_CBW_Decode_2
    257                }
    258                else if (MSC_BOT_DataLen == 0) 
   \                     ??MSC_BOT_CBW_Decode_4:
   \   0000009A   ....               LDR.N    R0,??DataTable9_7
   \   0000009C   0088               LDRH     R0,[R0, #+0]
   \   0000009E   0028               CMP      R0,#+0
   \   000000A0   03D1               BNE.N    ??MSC_BOT_CBW_Decode_2
    259                {
    260                  MSC_BOT_SendCSW (pdev,
    261                                   CSW_CMD_PASSED);
   \   000000A2   0021               MOVS     R1,#+0
   \   000000A4   2000               MOVS     R0,R4
   \   000000A6   ........           BL       MSC_BOT_SendCSW
    262                }
    263              }
    264            }
    265          }
   \                     ??MSC_BOT_CBW_Decode_2:
   \   000000AA   10BD               POP      {R4,PC}          ;; return
    266          
    267          /**
    268          * @brief  MSC_BOT_SendData
    269          *         Send the requested data
    270          * @param  pdev: device instance
    271          * @param  buf: pointer to data buffer
    272          * @param  len: Data Length
    273          * @retval None
    274          */

   \                                 In section .text, align 2, keep-with-next
    275          static void  MSC_BOT_SendData(USB_OTG_CORE_HANDLE  *pdev,
    276                                        uint8_t* buf, 
    277                                        uint16_t len)
    278          {
   \                     MSC_BOT_SendData:
   \   00000000   10B5               PUSH     {R4,LR}
    279            
    280            len = MIN (MSC_BOT_cbw.dDataLength, len);
   \   00000002   ....               LDR.N    R3,??DataTable9_3
   \   00000004   9B68               LDR      R3,[R3, #+8]
   \   00000006   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000008   9342               CMP      R3,R2
   \   0000000A   02D2               BCS.N    ??MSC_BOT_SendData_0
   \   0000000C   ....               LDR.N    R2,??DataTable9_3
   \   0000000E   9268               LDR      R2,[R2, #+8]
   \   00000010   FFE7               B.N      ??MSC_BOT_SendData_1
    281            MSC_BOT_csw.dDataResidue -= len;
   \                     ??MSC_BOT_SendData_0:
   \                     ??MSC_BOT_SendData_1:
   \   00000012   ....               LDR.N    R3,??DataTable9_5
   \   00000014   9B68               LDR      R3,[R3, #+8]
   \   00000016   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000018   9B1A               SUBS     R3,R3,R2
   \   0000001A   ....               LDR.N    R4,??DataTable9_5
   \   0000001C   A360               STR      R3,[R4, #+8]
    282            MSC_BOT_csw.bStatus = CSW_CMD_PASSED;
   \   0000001E   ....               LDR.N    R3,??DataTable9_5
   \   00000020   0024               MOVS     R4,#+0
   \   00000022   1C73               STRB     R4,[R3, #+12]
    283            MSC_BOT_State = BOT_SEND_DATA;
   \   00000024   ....               LDR.N    R3,??DataTable9
   \   00000026   0424               MOVS     R4,#+4
   \   00000028   1C70               STRB     R4,[R3, #+0]
    284            
    285            DCD_EP_Tx (pdev, MSC_IN_EP, buf, len);  
   \   0000002A   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000002C   1300               MOVS     R3,R2
   \   0000002E   0A00               MOVS     R2,R1
   \   00000030   8121               MOVS     R1,#+129
   \   00000032   ........           BL       DCD_EP_Tx
    286          }
   \   00000036   10BD               POP      {R4,PC}          ;; return
    287          
    288          /**
    289          * @brief  MSC_BOT_SendCSW
    290          *         Send the Command Status Wrapper
    291          * @param  pdev: device instance
    292          * @param  status : CSW status
    293          * @retval None
    294          */

   \                                 In section .text, align 2, keep-with-next
    295          void  MSC_BOT_SendCSW (USB_OTG_CORE_HANDLE  *pdev,
    296                                        uint8_t CSW_Status)
    297          {
   \                     MSC_BOT_SendCSW:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    298            MSC_BOT_csw.dSignature = BOT_CSW_SIGNATURE;
   \   00000004   ....               LDR.N    R0,??DataTable9_5
   \   00000006   ....               LDR.N    R2,??DataTable9_9  ;; 0x53425355
   \   00000008   0260               STR      R2,[R0, #+0]
    299            MSC_BOT_csw.bStatus = CSW_Status;
   \   0000000A   ....               LDR.N    R0,??DataTable9_5
   \   0000000C   0173               STRB     R1,[R0, #+12]
    300            MSC_BOT_State = BOT_IDLE;
   \   0000000E   ....               LDR.N    R0,??DataTable9
   \   00000010   0021               MOVS     R1,#+0
   \   00000012   0170               STRB     R1,[R0, #+0]
    301            
    302            DCD_EP_Tx (pdev, 
    303                       MSC_IN_EP, 
    304                       (uint8_t *)&MSC_BOT_csw, 
    305                       BOT_CSW_LENGTH);
   \   00000014   0D23               MOVS     R3,#+13
   \   00000016   ....               LDR.N    R2,??DataTable9_5
   \   00000018   8121               MOVS     R1,#+129
   \   0000001A   2000               MOVS     R0,R4
   \   0000001C   ........           BL       DCD_EP_Tx
    306            
    307            /* Prapare EP to Receive next Cmd */
    308            DCD_EP_PrepareRx (pdev,
    309                              MSC_OUT_EP,
    310                              (uint8_t *)&MSC_BOT_cbw, 
    311                              BOT_CBW_LENGTH);  
   \   00000020   1F23               MOVS     R3,#+31
   \   00000022   ....               LDR.N    R2,??DataTable9_3
   \   00000024   0121               MOVS     R1,#+1
   \   00000026   2000               MOVS     R0,R4
   \   00000028   ........           BL       DCD_EP_PrepareRx
    312            
    313          }
   \   0000002C   10BD               POP      {R4,PC}          ;; return
    314          
    315          /**
    316          * @brief  MSC_BOT_Abort
    317          *         Abort the current transfer
    318          * @param  pdev: device instance
    319          * @retval status
    320          */
    321          

   \                                 In section .text, align 2, keep-with-next
    322          static void  MSC_BOT_Abort (USB_OTG_CORE_HANDLE  *pdev)
    323          {
   \                     MSC_BOT_Abort:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    324          
    325            if ((MSC_BOT_cbw.bmFlags == 0) && 
    326                (MSC_BOT_cbw.dDataLength != 0) &&
    327                (MSC_BOT_Status == BOT_STATE_NORMAL) )
   \   00000004   ....               LDR.N    R0,??DataTable9_3
   \   00000006   007B               LDRB     R0,[R0, #+12]
   \   00000008   0028               CMP      R0,#+0
   \   0000000A   0BD1               BNE.N    ??MSC_BOT_Abort_0
   \   0000000C   ....               LDR.N    R0,??DataTable9_3
   \   0000000E   8068               LDR      R0,[R0, #+8]
   \   00000010   0028               CMP      R0,#+0
   \   00000012   07D0               BEQ.N    ??MSC_BOT_Abort_0
   \   00000014   ....               LDR.N    R0,??DataTable9_1
   \   00000016   0078               LDRB     R0,[R0, #+0]
   \   00000018   0028               CMP      R0,#+0
   \   0000001A   03D1               BNE.N    ??MSC_BOT_Abort_0
    328            {
    329              DCD_EP_Stall(pdev, MSC_OUT_EP );
   \   0000001C   0121               MOVS     R1,#+1
   \   0000001E   2000               MOVS     R0,R4
   \   00000020   ........           BL       DCD_EP_Stall
    330            }
    331            DCD_EP_Stall(pdev, MSC_IN_EP);
   \                     ??MSC_BOT_Abort_0:
   \   00000024   8121               MOVS     R1,#+129
   \   00000026   2000               MOVS     R0,R4
   \   00000028   ........           BL       DCD_EP_Stall
    332            
    333            if(MSC_BOT_Status == BOT_STATE_ERROR)
   \   0000002C   ....               LDR.N    R0,??DataTable9_1
   \   0000002E   0078               LDRB     R0,[R0, #+0]
   \   00000030   0228               CMP      R0,#+2
   \   00000032   05D1               BNE.N    ??MSC_BOT_Abort_1
    334            {
    335              DCD_EP_PrepareRx (pdev,
    336                                MSC_OUT_EP,
    337                                (uint8_t *)&MSC_BOT_cbw, 
    338                                BOT_CBW_LENGTH);    
   \   00000034   1F23               MOVS     R3,#+31
   \   00000036   ....               LDR.N    R2,??DataTable9_3
   \   00000038   0121               MOVS     R1,#+1
   \   0000003A   2000               MOVS     R0,R4
   \   0000003C   ........           BL       DCD_EP_PrepareRx
    339            }
    340          }
   \                     ??MSC_BOT_Abort_1:
   \   00000040   10BD               POP      {R4,PC}          ;; return
    341          
    342          /**
    343          * @brief  MSC_BOT_CplClrFeature
    344          *         Complete the clear feature request
    345          * @param  pdev: device instance
    346          * @param  epnum: endpoint index
    347          * @retval None
    348          */
    349          

   \                                 In section .text, align 2, keep-with-next
    350          void  MSC_BOT_CplClrFeature (USB_OTG_CORE_HANDLE  *pdev, uint8_t epnum)
    351          {
   \                     MSC_BOT_CplClrFeature:
   \   00000000   80B5               PUSH     {R7,LR}
    352            if(MSC_BOT_Status == BOT_STATE_ERROR )/* Bad CBW Signature */
   \   00000002   ....               LDR.N    R2,??DataTable9_1
   \   00000004   1278               LDRB     R2,[R2, #+0]
   \   00000006   022A               CMP      R2,#+2
   \   00000008   06D1               BNE.N    ??MSC_BOT_CplClrFeature_0
    353            {
    354              DCD_EP_Stall(pdev, MSC_IN_EP);
   \   0000000A   8121               MOVS     R1,#+129
   \   0000000C   ........           BL       DCD_EP_Stall
    355              MSC_BOT_Status = BOT_STATE_NORMAL;    
   \   00000010   ....               LDR.N    R0,??DataTable9_1
   \   00000012   0021               MOVS     R1,#+0
   \   00000014   0170               STRB     R1,[R0, #+0]
   \   00000016   09E0               B.N      ??MSC_BOT_CplClrFeature_1
    356            }
    357            else if(((epnum & 0x80) == 0x80) && ( MSC_BOT_Status != BOT_STATE_RECOVERY))
   \                     ??MSC_BOT_CplClrFeature_0:
   \   00000018   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001A   0906               LSLS     R1,R1,#+24
   \   0000001C   06D5               BPL.N    ??MSC_BOT_CplClrFeature_1
   \   0000001E   ....               LDR.N    R1,??DataTable9_1
   \   00000020   0978               LDRB     R1,[R1, #+0]
   \   00000022   0129               CMP      R1,#+1
   \   00000024   02D0               BEQ.N    ??MSC_BOT_CplClrFeature_1
    358            {
    359              MSC_BOT_SendCSW (pdev, CSW_CMD_FAILED);
   \   00000026   0121               MOVS     R1,#+1
   \   00000028   ........           BL       MSC_BOT_SendCSW
    360            }
    361            
    362          }
   \                     ??MSC_BOT_CplClrFeature_1:
   \   0000002C   01BD               POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     MSC_BOT_State

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   ........           DC32     MSC_BOT_Status

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   ........           DC32     USBD_STORAGE_fops

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   ........           DC32     MSC_BOT_cbw

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   ........           DC32     MSC_BOT_cbw+0xF

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   ........           DC32     MSC_BOT_csw

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   55534243           DC32     0x43425355

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   ........           DC32     MSC_BOT_DataLen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   ........           DC32     MSC_BOT_Data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   55534253           DC32     0x53425355
    363          /**
    364            * @}
    365            */ 
    366          
    367          
    368          /**
    369            * @}
    370            */ 
    371          
    372          
    373          /**
    374            * @}
    375            */ 
    376          
    377          /******************* (C) COPYRIGHT 2010 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     MSC_BOT_Abort              8
     MSC_BOT_CBW_Decode         8
     MSC_BOT_CplClrFeature      8
     MSC_BOT_DataIn             8
     MSC_BOT_DataOut            8
     MSC_BOT_DeInit             0
     MSC_BOT_Init               8
     MSC_BOT_Reset              8
     MSC_BOT_SendCSW            8
     MSC_BOT_SendData           8


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     MSC_BOT_DataLen          2
     MSC_BOT_State            1
     MSC_BOT_Status           1
     MSC_BOT_Data          4096
     MSC_BOT_cbw             32
     MSC_BOT_csw             16
     MSC_BOT_Init            56
     MSC_BOT_Reset           26
     MSC_BOT_DeInit           8
     MSC_BOT_DataIn          58
     MSC_BOT_DataOut         54
     MSC_BOT_CBW_Decode     172
     MSC_BOT_SendData        56
     MSC_BOT_SendCSW         46
     MSC_BOT_Abort           66
     MSC_BOT_CplClrFeature   46
     ??DataTable9             4
     ??DataTable9_1           4
     ??DataTable9_2           4
     ??DataTable9_3           4
     ??DataTable9_4           4
     ??DataTable9_5           4
     ??DataTable9_6           4
     ??DataTable9_7           4
     ??DataTable9_8           4
     ??DataTable9_9           4

 
 4 148 bytes in section .bss
   628 bytes in section .text
 
   628 bytes of CODE memory
 4 148 bytes of DATA memory

Errors: none
Warnings: none
