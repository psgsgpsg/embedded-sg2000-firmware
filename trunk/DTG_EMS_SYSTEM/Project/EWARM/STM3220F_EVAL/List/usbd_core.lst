###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     08/Jan/2012  13:10:20 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Libraries\STM32_USB_ #
#                    Device_Library\Core\src\usbd_core.c                      #
#    Command line =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Libraries\STM32_USB_ #
#                    Device_Library\Core\src\usbd_core.c -D                   #
#                    USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM3220F_EVAL   #
#                    -D USE_USB_OTG_FS -D RTC_CLOCK_SOURCE_LSE -lC            #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\STM322 #
#                    0F_EVAL\List\ -lA E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Pr #
#                    oject\EWARM\STM3220F_EVAL\List\ -o                       #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\STM322 #
#                    0F_EVAL\Obj\ --no_cse --no_unroll --no_inline            #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWAR #
#                    M\..\ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWA #
#                    RM\..\..\Libraries\CMSIS\CM3\CoreSupport\ -I             #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\ -I       #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32F2xx_StdPeriph_Driver\inc\ -I             #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Utilities\STM32_EVAL\ -I E:\Work\Firmware\DTG\DTG_EMS_SY #
#                    STEM\Project\EWARM\..\..\Utilities\STM32_EVAL\Common\    #
#                    -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\ #
#                    ..\Utilities\STM32_EVAL\STM3220F_EVAL\ -I                #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32_USB_OTG_Driver\inc\ -I                   #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32_USB_Device_Library\Core\inc\ -I          #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32_USB_Device_Library\Class\msc\inc\ -I     #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\Usb #
#                    \ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\. #
#                    .\Usb\Inc\ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Projec #
#                    t\EWARM\..\Usb\src\ -I E:\Work\Firmware\DTG\DTG_EMS_SYST #
#                    EM\Project\EWARM\..\..\Libraries\STM32_USB_HOST_Library\ #
#                    Core\inc\ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project #
#                    \EWARM\..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\ #
#                    inc\ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWAR #
#                    M\..\..\Libraries\STM32_USB_Device_Library\Class\cdc\inc #
#                    \ -Ol --use_c++_inline                                   #
#    List file    =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\STM322 #
#                    0F_EVAL\List\usbd_core.lst                               #
#    Object file  =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\STM322 #
#                    0F_EVAL\Obj\usbd_core.o                                  #
#                                                                             #
#                                                                             #
###############################################################################

E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Libraries\STM32_USB_Device_Library\Core\src\usbd_core.c
      1          /**
      2            ******************************************************************************
      3            * @file    usbd_core.c
      4            * @author  MCD Application Team
      5            * @version V1.0.0RC1
      6            * @date    18-March-2011
      7            * @brief   This file provides all the USBD core functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */ 
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "usbd_core.h"
     24          #include "usbd_req.h"
     25          #include "usbd_ioreq.h"
     26          #include "usb_dcd_int.h"
     27          #include "usb_bsp.h"
     28          /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
     29            * @{
     30            */
     31          
     32          
     33          /** @defgroup USBD_CORE 
     34            * @brief usbd core module
     35            * @{
     36            */ 
     37          
     38          /** @defgroup USBD_CORE_Private_TypesDefinitions
     39            * @{
     40            */ 
     41          /**
     42            * @}
     43            */ 
     44          
     45          
     46          /** @defgroup USBD_CORE_Private_Defines
     47            * @{
     48            */ 
     49          
     50          /**
     51            * @}
     52            */ 
     53          
     54          
     55          /** @defgroup USBD_CORE_Private_Macros
     56            * @{
     57            */ 
     58          /**
     59            * @}
     60            */ 
     61          
     62          
     63          
     64          
     65          /** @defgroup USBD_CORE_Private_FunctionPrototypes
     66            * @{
     67            */ 
     68          static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev);
     69          static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum);
     70          static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum);
     71          static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev);
     72          static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev);
     73          static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev);
     74          static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev);
     75          /**
     76            * @}
     77            */ 
     78          
     79          /** @defgroup USBD_CORE_Private_Variables
     80            * @{
     81            */ 
     82          
     83          
     84          

   \                                 In section .data, align 4
     85          USBD_DCD_INT_cb_TypeDef USBD_DCD_INT_cb = 
   \                     USBD_DCD_INT_cb:
   \   00000000   ............       DC32 USBD_DataOutStage, USBD_DataInStage, USBD_SetupStage, USBD_SOF
   \              ............
   \              ........    
   \   00000010   ............       DC32 USBD_Reset, USBD_Suspend, USBD_Resume
   \              ............
     86          {
     87            USBD_DataOutStage,
     88            USBD_DataInStage,
     89            USBD_SetupStage,
     90            USBD_SOF,
     91            USBD_Reset,
     92            USBD_Suspend,
     93            USBD_Resume,
     94          };
     95          

   \                                 In section .data, align 4
     96          USBD_DCD_INT_cb_TypeDef  *USBD_DCD_INT_fops = &USBD_DCD_INT_cb;
   \                     USBD_DCD_INT_fops:
   \   00000000   ........           DC32 USBD_DCD_INT_cb
     97          /**
     98            * @}
     99            */ 
    100          
    101          /** @defgroup USBD_CORE_Private_Functions
    102            * @{
    103            */ 
    104          
    105          /**
    106          * @brief  USBD_Init
    107          *         Initailizes the device stack and load the class driver
    108          * @param  pdev: device instance
    109          * @param  core_address: USB OTG core ID
    110          * @param  class_cb: Class callback structure address
    111          * @param  usr_cb: User callback structure address
    112          * @retval None
    113          */

   \                                 In section .text, align 2, keep-with-next
    114          void USBD_Init(USB_OTG_CORE_HANDLE *pdev,
    115                         USB_OTG_CORE_ID_TypeDef coreID,
    116                         USBD_Class_cb_TypeDef *class_cb, 
    117                         USBD_Usr_cb_TypeDef *usr_cb)
    118          {
   \                     USBD_Init:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
   \   00000008   1F00               MOVS     R7,R3
    119              /* Hardware Init */
    120            USB_OTG_BSP_Init(pdev);  
   \   0000000A   2000               MOVS     R0,R4
   \   0000000C   ........           BL       USB_OTG_BSP_Init
    121            
    122            USBD_DeInit(pdev);
   \   00000010   2000               MOVS     R0,R4
   \   00000012   ........           BL       USBD_DeInit
    123            
    124            /*Register class and user callbacks */
    125            pdev->dev.class_cb = class_cb;
   \   00000016   C4F8E065           STR      R6,[R4, #+1504]
    126            pdev->dev.usr_cb = usr_cb;  
   \   0000001A   C4F8E475           STR      R7,[R4, #+1508]
    127            
    128            /* set USB OTG core params */
    129            DCD_Init(pdev , coreID);
   \   0000001E   2900               MOVS     R1,R5
   \   00000020   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   2000               MOVS     R0,R4
   \   00000024   ........           BL       DCD_Init
    130            
    131            /* Upon Init call usr callback */
    132            pdev->dev.usr_cb->Init();
   \   00000028   D4F8E405           LDR      R0,[R4, #+1508]
   \   0000002C   0068               LDR      R0,[R0, #+0]
   \   0000002E   8047               BLX      R0
    133            
    134            /* Enable Interrupts */
    135            USB_OTG_BSP_EnableInterrupt(pdev);
   \   00000030   2000               MOVS     R0,R4
   \   00000032   ........           BL       USB_OTG_BSP_EnableInterrupt
    136          }
   \   00000036   F1BD               POP      {R0,R4-R7,PC}    ;; return
    137          
    138          /**
    139          * @brief  USBD_DeInit 
    140          *         Re-Initialize th deviuce library
    141          * @param  pdev: device instance
    142          * @retval status: status
    143          */

   \                                 In section .text, align 2, keep-with-next
    144          USBD_Status USBD_DeInit(USB_OTG_CORE_HANDLE *pdev)
    145          {
    146            /* Software Init */
    147            
    148            return USBD_OK;
   \                     USBD_DeInit:
   \   00000000   0020               MOVS     R0,#+0
   \   00000002   7047               BX       LR               ;; return
    149          }
    150          
    151          /**
    152          * @brief  USBD_SetupStage 
    153          *         Handle the setup stage
    154          * @param  pdev: device instance
    155          * @retval status
    156          */

   \                                 In section .text, align 2, keep-with-next
    157          static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
    158          {
   \                     USBD_SetupStage:
   \   00000000   1CB5               PUSH     {R2-R4,LR}
   \   00000002   0400               MOVS     R4,R0
    159            USB_SETUP_REQ req;
    160            
    161            USBD_ParseSetupRequest(pdev , &req);
   \   00000004   00A9               ADD      R1,SP,#+0
   \   00000006   2000               MOVS     R0,R4
   \   00000008   ........           BL       USBD_ParseSetupRequest
    162            
    163            switch (req.bmRequest & 0x1F) 
   \   0000000C   9DF80000           LDRB     R0,[SP, #+0]
   \   00000010   10F01F00           ANDS     R0,R0,#0x1F
   \   00000014   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0028               CMP      R0,#+0
   \   00000018   03D0               BEQ.N    ??USBD_SetupStage_0
   \   0000001A   0228               CMP      R0,#+2
   \   0000001C   0BD0               BEQ.N    ??USBD_SetupStage_1
   \   0000001E   05D3               BCC.N    ??USBD_SetupStage_2
   \   00000020   0EE0               B.N      ??USBD_SetupStage_3
    164            {
    165            case USB_REQ_RECIPIENT_DEVICE:   
    166              USBD_StdDevReq (pdev, &req);
   \                     ??USBD_SetupStage_0:
   \   00000022   00A9               ADD      R1,SP,#+0
   \   00000024   2000               MOVS     R0,R4
   \   00000026   ........           BL       USBD_StdDevReq
    167              break;
   \   0000002A   10E0               B.N      ??USBD_SetupStage_4
    168              
    169            case USB_REQ_RECIPIENT_INTERFACE:     
    170              USBD_StdItfReq(pdev, &req);
   \                     ??USBD_SetupStage_2:
   \   0000002C   00A9               ADD      R1,SP,#+0
   \   0000002E   2000               MOVS     R0,R4
   \   00000030   ........           BL       USBD_StdItfReq
    171              break;
   \   00000034   0BE0               B.N      ??USBD_SetupStage_4
    172              
    173            case USB_REQ_RECIPIENT_ENDPOINT:        
    174              USBD_StdEPReq(pdev, &req);   
   \                     ??USBD_SetupStage_1:
   \   00000036   00A9               ADD      R1,SP,#+0
   \   00000038   2000               MOVS     R0,R4
   \   0000003A   ........           BL       USBD_StdEPReq
    175              break;
   \   0000003E   06E0               B.N      ??USBD_SetupStage_4
    176              
    177            default:           
    178              DCD_EP_Stall(pdev , req.bmRequest & 0x80);
   \                     ??USBD_SetupStage_3:
   \   00000040   9DF80000           LDRB     R0,[SP, #+0]
   \   00000044   10F08001           ANDS     R1,R0,#0x80
   \   00000048   2000               MOVS     R0,R4
   \   0000004A   ........           BL       DCD_EP_Stall
    179              break;
    180            }  
    181            return USBD_OK;
   \                     ??USBD_SetupStage_4:
   \   0000004E   0020               MOVS     R0,#+0
   \   00000050   16BD               POP      {R1,R2,R4,PC}    ;; return
    182          }
    183          
    184          /**
    185          * @brief  USBD_DataOutStage 
    186          *         Handle data out stage
    187          * @param  pdev: device instance
    188          * @param  epnum: endpoint index
    189          * @retval status
    190          */

   \                                 In section .text, align 2, keep-with-next
    191          static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
    192          {
   \                     USBD_DataOutStage:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    193            USB_OTG_EP *ep;
    194            
    195            if(epnum == 0) 
   \   00000004   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   0029               CMP      R1,#+0
   \   00000008   33D1               BNE.N    ??USBD_DataOutStage_0
    196            {
    197              ep = &pdev->dev.out_ep[0];
   \   0000000A   04F27030           ADDW     R0,R4,#+880
    198              if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
   \   0000000E   94F81111           LDRB     R1,[R4, #+273]
   \   00000012   0329               CMP      R1,#+3
   \   00000014   3CD1               BNE.N    ??USBD_DataOutStage_1
    199              {
    200                if(ep->rem_data_len > ep->maxpacket)
   \   00000016   8168               LDR      R1,[R0, #+8]
   \   00000018   C269               LDR      R2,[R0, #+28]
   \   0000001A   9142               CMP      R1,R2
   \   0000001C   17D2               BCS.N    ??USBD_DataOutStage_2
    201                {
    202                  ep->rem_data_len -=  ep->maxpacket;
   \   0000001E   C169               LDR      R1,[R0, #+28]
   \   00000020   8268               LDR      R2,[R0, #+8]
   \   00000022   891A               SUBS     R1,R1,R2
   \   00000024   C161               STR      R1,[R0, #+28]
    203                  
    204                  if(pdev->cfg.dma_enable == 1)
   \   00000026   E178               LDRB     R1,[R4, #+3]
   \   00000028   0129               CMP      R1,#+1
   \   0000002A   03D1               BNE.N    ??USBD_DataOutStage_3
    205                  {
    206                    /* in slave mode this, is handled by the RxSTSQLvl ISR */
    207                    ep->xfer_buff += ep->maxpacket; 
   \   0000002C   8168               LDR      R1,[R0, #+8]
   \   0000002E   C268               LDR      R2,[R0, #+12]
   \   00000030   8918               ADDS     R1,R1,R2
   \   00000032   C160               STR      R1,[R0, #+12]
    208                  }        
    209                  USBD_CtlContinueRx (pdev, 
    210                                      ep->xfer_buff,
    211                                      MIN(ep->rem_data_len ,ep->maxpacket));
   \                     ??USBD_DataOutStage_3:
   \   00000034   C169               LDR      R1,[R0, #+28]
   \   00000036   8268               LDR      R2,[R0, #+8]
   \   00000038   9142               CMP      R1,R2
   \   0000003A   01D2               BCS.N    ??USBD_DataOutStage_4
   \   0000003C   C269               LDR      R2,[R0, #+28]
   \   0000003E   00E0               B.N      ??USBD_DataOutStage_5
   \                     ??USBD_DataOutStage_4:
   \   00000040   8268               LDR      R2,[R0, #+8]
   \                     ??USBD_DataOutStage_5:
   \   00000042   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000044   C168               LDR      R1,[R0, #+12]
   \   00000046   2000               MOVS     R0,R4
   \   00000048   ........           BL       USBD_CtlContinueRx
   \   0000004C   20E0               B.N      ??USBD_DataOutStage_1
    212                }
    213                else
    214                {
    215                  if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
    216                     (pdev->dev.device_status == USB_OTG_CONFIGURED))
   \                     ??USBD_DataOutStage_2:
   \   0000004E   D4F8E005           LDR      R0,[R4, #+1504]
   \   00000052   0069               LDR      R0,[R0, #+16]
   \   00000054   0028               CMP      R0,#+0
   \   00000056   08D0               BEQ.N    ??USBD_DataOutStage_6
   \   00000058   94F81201           LDRB     R0,[R4, #+274]
   \   0000005C   0328               CMP      R0,#+3
   \   0000005E   04D1               BNE.N    ??USBD_DataOutStage_6
    217                  {
    218                    pdev->dev.class_cb->EP0_RxReady(pdev); 
   \   00000060   2000               MOVS     R0,R4
   \   00000062   D4F8E015           LDR      R1,[R4, #+1504]
   \   00000066   0969               LDR      R1,[R1, #+16]
   \   00000068   8847               BLX      R1
    219                  }
    220                  USBD_CtlSendStatus(pdev);
   \                     ??USBD_DataOutStage_6:
   \   0000006A   2000               MOVS     R0,R4
   \   0000006C   ........           BL       USBD_CtlSendStatus
   \   00000070   0EE0               B.N      ??USBD_DataOutStage_1
    221                }
    222              }
    223            }
    224            else if((pdev->dev.class_cb->DataOut != NULL)&&
    225                    (pdev->dev.device_status == USB_OTG_CONFIGURED))
   \                     ??USBD_DataOutStage_0:
   \   00000072   D4F8E005           LDR      R0,[R4, #+1504]
   \   00000076   8069               LDR      R0,[R0, #+24]
   \   00000078   0028               CMP      R0,#+0
   \   0000007A   09D0               BEQ.N    ??USBD_DataOutStage_1
   \   0000007C   94F81201           LDRB     R0,[R4, #+274]
   \   00000080   0328               CMP      R0,#+3
   \   00000082   05D1               BNE.N    ??USBD_DataOutStage_1
    226            {
    227              pdev->dev.class_cb->DataOut(pdev, epnum); 
   \   00000084   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000086   2000               MOVS     R0,R4
   \   00000088   D4F8E025           LDR      R2,[R4, #+1504]
   \   0000008C   9269               LDR      R2,[R2, #+24]
   \   0000008E   9047               BLX      R2
    228            }  
    229            return USBD_OK;
   \                     ??USBD_DataOutStage_1:
   \   00000090   0020               MOVS     R0,#+0
   \   00000092   10BD               POP      {R4,PC}          ;; return
    230          }
    231          
    232          /**
    233          * @brief  USBD_DataInStage 
    234          *         Handle data in stage
    235          * @param  pdev: device instance
    236          * @param  epnum: endpoint index
    237          * @retval status
    238          */

   \                                 In section .text, align 2, keep-with-next
    239          static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
    240          {
   \                     USBD_DataInStage:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
    241            USB_OTG_EP *ep;
    242            
    243            if(epnum == 0) 
   \   00000004   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   0029               CMP      R1,#+0
   \   00000008   45D1               BNE.N    ??USBD_DataInStage_0
    244            {
    245              ep = &pdev->dev.in_ep[0];
   \   0000000A   04F21815           ADDW     R5,R4,#+280
    246              if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
   \   0000000E   94F81101           LDRB     R0,[R4, #+273]
   \   00000012   0228               CMP      R0,#+2
   \   00000014   4ED1               BNE.N    ??USBD_DataInStage_1
    247              {
    248                if(ep->rem_data_len > ep->maxpacket)
   \   00000016   A868               LDR      R0,[R5, #+8]
   \   00000018   E969               LDR      R1,[R5, #+28]
   \   0000001A   8842               CMP      R0,R1
   \   0000001C   11D2               BCS.N    ??USBD_DataInStage_2
    249                {
    250                  ep->rem_data_len -=  ep->maxpacket;
   \   0000001E   E869               LDR      R0,[R5, #+28]
   \   00000020   A968               LDR      R1,[R5, #+8]
   \   00000022   401A               SUBS     R0,R0,R1
   \   00000024   E861               STR      R0,[R5, #+28]
    251                  if(pdev->cfg.dma_enable == 1)
   \   00000026   E078               LDRB     R0,[R4, #+3]
   \   00000028   0128               CMP      R0,#+1
   \   0000002A   03D1               BNE.N    ??USBD_DataInStage_3
    252                  {
    253                    /* in slave mode this, is handled by the TxFifoEmpty ISR */
    254                    ep->xfer_buff += ep->maxpacket;
   \   0000002C   A868               LDR      R0,[R5, #+8]
   \   0000002E   E968               LDR      R1,[R5, #+12]
   \   00000030   4018               ADDS     R0,R0,R1
   \   00000032   E860               STR      R0,[R5, #+12]
    255                  }
    256                  USBD_CtlContinueSendData (pdev, 
    257                                            ep->xfer_buff, 
    258                                            ep->rem_data_len);
   \                     ??USBD_DataInStage_3:
   \   00000034   EA69               LDR      R2,[R5, #+28]
   \   00000036   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000038   E968               LDR      R1,[R5, #+12]
   \   0000003A   2000               MOVS     R0,R4
   \   0000003C   ........           BL       USBD_CtlContinueSendData
   \   00000040   38E0               B.N      ??USBD_DataInStage_1
    259                }
    260                else
    261                { /* last packet is MPS multiple, so send ZLP packet */
    262                  if((ep->total_data_len % ep->maxpacket == 0) &&
    263                     (ep->total_data_len >= ep->maxpacket) &&
    264                       (ep->total_data_len < ep->ctl_data_len ))
   \                     ??USBD_DataInStage_2:
   \   00000042   286A               LDR      R0,[R5, #+32]
   \   00000044   A968               LDR      R1,[R5, #+8]
   \   00000046   B0FBF1F2           UDIV     R2,R0,R1
   \   0000004A   01FB1200           MLS      R0,R1,R2,R0
   \   0000004E   0028               CMP      R0,#+0
   \   00000050   0FD1               BNE.N    ??USBD_DataInStage_4
   \   00000052   286A               LDR      R0,[R5, #+32]
   \   00000054   A968               LDR      R1,[R5, #+8]
   \   00000056   8842               CMP      R0,R1
   \   00000058   0BD3               BCC.N    ??USBD_DataInStage_4
   \   0000005A   286A               LDR      R0,[R5, #+32]
   \   0000005C   696A               LDR      R1,[R5, #+36]
   \   0000005E   8842               CMP      R0,R1
   \   00000060   07D2               BCS.N    ??USBD_DataInStage_4
    265                  {
    266                    
    267                    USBD_CtlContinueSendData(pdev , NULL, 0);
   \   00000062   0022               MOVS     R2,#+0
   \   00000064   0021               MOVS     R1,#+0
   \   00000066   2000               MOVS     R0,R4
   \   00000068   ........           BL       USBD_CtlContinueSendData
    268                    ep->ctl_data_len = 0;
   \   0000006C   0020               MOVS     R0,#+0
   \   0000006E   6862               STR      R0,[R5, #+36]
   \   00000070   20E0               B.N      ??USBD_DataInStage_1
    269                  }
    270                  else
    271                  {
    272                    if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
    273                       (pdev->dev.device_status == USB_OTG_CONFIGURED))
   \                     ??USBD_DataInStage_4:
   \   00000072   D4F8E005           LDR      R0,[R4, #+1504]
   \   00000076   C068               LDR      R0,[R0, #+12]
   \   00000078   0028               CMP      R0,#+0
   \   0000007A   08D0               BEQ.N    ??USBD_DataInStage_5
   \   0000007C   94F81201           LDRB     R0,[R4, #+274]
   \   00000080   0328               CMP      R0,#+3
   \   00000082   04D1               BNE.N    ??USBD_DataInStage_5
    274                    {
    275                      pdev->dev.class_cb->EP0_TxSent(pdev); 
   \   00000084   2000               MOVS     R0,R4
   \   00000086   D4F8E015           LDR      R1,[R4, #+1504]
   \   0000008A   C968               LDR      R1,[R1, #+12]
   \   0000008C   8847               BLX      R1
    276                    }          
    277                    USBD_CtlReceiveStatus(pdev);
   \                     ??USBD_DataInStage_5:
   \   0000008E   2000               MOVS     R0,R4
   \   00000090   ........           BL       USBD_CtlReceiveStatus
   \   00000094   0EE0               B.N      ??USBD_DataInStage_1
    278                  }
    279                }
    280              }
    281            }
    282            else if((pdev->dev.class_cb->DataIn != NULL)&& 
    283                    (pdev->dev.device_status == USB_OTG_CONFIGURED))
   \                     ??USBD_DataInStage_0:
   \   00000096   D4F8E005           LDR      R0,[R4, #+1504]
   \   0000009A   4069               LDR      R0,[R0, #+20]
   \   0000009C   0028               CMP      R0,#+0
   \   0000009E   09D0               BEQ.N    ??USBD_DataInStage_1
   \   000000A0   94F81201           LDRB     R0,[R4, #+274]
   \   000000A4   0328               CMP      R0,#+3
   \   000000A6   05D1               BNE.N    ??USBD_DataInStage_1
    284            {
    285              pdev->dev.class_cb->DataIn(pdev, epnum); 
   \   000000A8   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000AA   2000               MOVS     R0,R4
   \   000000AC   D4F8E025           LDR      R2,[R4, #+1504]
   \   000000B0   5269               LDR      R2,[R2, #+20]
   \   000000B2   9047               BLX      R2
    286            }  
    287            return USBD_OK;
   \                     ??USBD_DataInStage_1:
   \   000000B4   0020               MOVS     R0,#+0
   \   000000B6   32BD               POP      {R1,R4,R5,PC}    ;; return
    288          }
    289          
    290          /**
    291          * @brief  USBD_Reset 
    292          *         Handle Reset event
    293          * @param  pdev: device instance
    294          * @retval status
    295          */
    296          

   \                                 In section .text, align 2, keep-with-next
    297          static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
    298          {
   \                     USBD_Reset:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    299            /* Open EP0 OUT */
    300            DCD_EP_Open(pdev,
    301                        0x00,
    302                        USB_OTG_MAX_EP0_SIZE,
    303                        EP_TYPE_CTRL);
   \   00000004   0023               MOVS     R3,#+0
   \   00000006   4022               MOVS     R2,#+64
   \   00000008   0021               MOVS     R1,#+0
   \   0000000A   2000               MOVS     R0,R4
   \   0000000C   ........           BL       DCD_EP_Open
    304            
    305            /* Open EP0 IN */
    306            DCD_EP_Open(pdev,
    307                        0x80,
    308                        USB_OTG_MAX_EP0_SIZE,
    309                        EP_TYPE_CTRL);
   \   00000010   0023               MOVS     R3,#+0
   \   00000012   4022               MOVS     R2,#+64
   \   00000014   8021               MOVS     R1,#+128
   \   00000016   2000               MOVS     R0,R4
   \   00000018   ........           BL       DCD_EP_Open
    310            
    311            /* Upon Reset call usr call back */
    312            pdev->dev.device_status = USB_OTG_DEFAULT;
   \   0000001C   0120               MOVS     R0,#+1
   \   0000001E   84F81201           STRB     R0,[R4, #+274]
    313            pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
   \   00000022   A078               LDRB     R0,[R4, #+2]
   \   00000024   D4F8E415           LDR      R1,[R4, #+1508]
   \   00000028   4968               LDR      R1,[R1, #+4]
   \   0000002A   8847               BLX      R1
    314            
    315            return USBD_OK;
   \   0000002C   0020               MOVS     R0,#+0
   \   0000002E   10BD               POP      {R4,PC}          ;; return
    316          }
    317          
    318          /**
    319          * @brief  USBD_Resume 
    320          *         Handle Resume event
    321          * @param  pdev: device instance
    322          * @retval status
    323          */
    324          

   \                                 In section .text, align 2, keep-with-next
    325          static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
    326          {
   \                     USBD_Resume:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    327            /* Upon Resume call usr call back */
    328            pdev->dev.usr_cb->DeviceResumed(); 
   \   00000004   D4F8E405           LDR      R0,[R4, #+1508]
   \   00000008   0069               LDR      R0,[R0, #+16]
   \   0000000A   8047               BLX      R0
    329            pdev->dev.device_status = USB_OTG_ADDRESSED;  
   \   0000000C   0220               MOVS     R0,#+2
   \   0000000E   84F81201           STRB     R0,[R4, #+274]
    330            return USBD_OK;
   \   00000012   0020               MOVS     R0,#+0
   \   00000014   10BD               POP      {R4,PC}          ;; return
    331          }
    332          
    333          
    334          /**
    335          * @brief  USBD_Suspend 
    336          *         Handle Suspend event
    337          * @param  pdev: device instance
    338          * @retval status
    339          */
    340          

   \                                 In section .text, align 2, keep-with-next
    341          static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
    342          {
   \                     USBD_Suspend:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    343            /* Upon Resume call usr call back */
    344            pdev->dev.usr_cb->DeviceSuspended(); 
   \   00000004   D4F8E405           LDR      R0,[R4, #+1508]
   \   00000008   C068               LDR      R0,[R0, #+12]
   \   0000000A   8047               BLX      R0
    345            pdev->dev.class_cb->DeInit(pdev, 0);
   \   0000000C   0021               MOVS     R1,#+0
   \   0000000E   2000               MOVS     R0,R4
   \   00000010   D4F8E025           LDR      R2,[R4, #+1504]
   \   00000014   5268               LDR      R2,[R2, #+4]
   \   00000016   9047               BLX      R2
    346            return USBD_OK;
   \   00000018   0020               MOVS     R0,#+0
   \   0000001A   10BD               POP      {R4,PC}          ;; return
    347          }
    348          
    349          
    350          /**
    351          * @brief  USBD_SOF 
    352          *         Handle SOF event
    353          * @param  pdev: device instance
    354          * @retval status
    355          */
    356          

   \                                 In section .text, align 2, keep-with-next
    357          static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
    358          {
   \                     USBD_SOF:
   \   00000000   80B5               PUSH     {R7,LR}
    359            if(pdev->dev.class_cb->SOF)
   \   00000002   D0F8E015           LDR      R1,[R0, #+1504]
   \   00000006   C969               LDR      R1,[R1, #+28]
   \   00000008   0029               CMP      R1,#+0
   \   0000000A   03D0               BEQ.N    ??USBD_SOF_0
    360            {
    361              pdev->dev.class_cb->SOF(pdev); 
   \   0000000C   D0F8E015           LDR      R1,[R0, #+1504]
   \   00000010   C969               LDR      R1,[R1, #+28]
   \   00000012   8847               BLX      R1
    362            }
    363            return USBD_OK;
   \                     ??USBD_SOF_0:
   \   00000014   0020               MOVS     R0,#+0
   \   00000016   02BD               POP      {R1,PC}          ;; return
    364          }
    365          /**
    366          * @brief  USBD_SetCfg 
    367          *        Configure device and start the interface
    368          * @param  pdev: device instance
    369          * @param  cfgidx: configuration index
    370          * @retval status
    371          */
    372          

   \                                 In section .text, align 2, keep-with-next
    373          USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
    374          {
   \                     USBD_SetCfg:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    375            pdev->dev.class_cb->Init(pdev, cfgidx); 
   \   00000004   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   2000               MOVS     R0,R4
   \   00000008   D4F8E025           LDR      R2,[R4, #+1504]
   \   0000000C   1268               LDR      R2,[R2, #+0]
   \   0000000E   9047               BLX      R2
    376            
    377            /* Upon set config call usr call back */
    378            pdev->dev.usr_cb->DeviceConfigured();
   \   00000010   D4F8E405           LDR      R0,[R4, #+1508]
   \   00000014   8068               LDR      R0,[R0, #+8]
   \   00000016   8047               BLX      R0
    379            return USBD_OK; 
   \   00000018   0020               MOVS     R0,#+0
   \   0000001A   10BD               POP      {R4,PC}          ;; return
    380          }
    381          
    382          /**
    383          * @brief  USBD_ClrCfg 
    384          *         Clear current configuration
    385          * @param  pdev: device instance
    386          * @param  cfgidx: configuration index
    387          * @retval status: USBD_Status
    388          */

   \                                 In section .text, align 2, keep-with-next
    389          USBD_Status USBD_ClrCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
    390          {
   \                     USBD_ClrCfg:
   \   00000000   80B5               PUSH     {R7,LR}
    391            pdev->dev.class_cb->DeInit(pdev, cfgidx);   
   \   00000002   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   D0F8E025           LDR      R2,[R0, #+1504]
   \   00000008   5268               LDR      R2,[R2, #+4]
   \   0000000A   9047               BLX      R2
    392            return USBD_OK;
   \   0000000C   0020               MOVS     R0,#+0
   \   0000000E   02BD               POP      {R1,PC}          ;; return
    393          }
    394          
    395          /**
    396            * @}
    397            */ 
    398          
    399          
    400          /**
    401            * @}
    402            */ 
    403          
    404          
    405          /**
    406            * @}
    407            */ 
    408          
    409          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
    410          

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     USBD_ClrCfg            8
     USBD_DataInStage      16
     USBD_DataOutStage      8
     USBD_DeInit            0
     USBD_Init             24
     USBD_Reset             8
     USBD_Resume            8
     USBD_SOF               8
     USBD_SetCfg            8
     USBD_SetupStage       16
     USBD_Suspend           8


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     USBD_DCD_INT_cb     28
     USBD_DCD_INT_fops    4
     USBD_Init           56
     USBD_DeInit          4
     USBD_SetupStage     82
     USBD_DataOutStage  148
     USBD_DataInStage   184
     USBD_Reset          48
     USBD_Resume         22
     USBD_Suspend        28
     USBD_SOF            24
     USBD_SetCfg         28
     USBD_ClrCfg         16

 
  32 bytes in section .data
 640 bytes in section .text
 
 640 bytes of CODE memory
  32 bytes of DATA memory

Errors: none
Warnings: none
