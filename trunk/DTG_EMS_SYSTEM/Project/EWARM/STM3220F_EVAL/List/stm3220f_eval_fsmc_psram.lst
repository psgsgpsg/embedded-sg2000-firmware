###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     09/May/2011  20:41:44 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4 #
#                    \STM32F2xx_StdPeriph_Lib_V0.0.4\Utilities\STM32_EVAL\STM #
#                    3220F_EVAL\stm3220f_eval_fsmc_psram.c                    #
#    Command line =  "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Utilities\STM32_EVAL\ST #
#                    M3220F_EVAL\stm3220f_eval_fsmc_psram.c" -D               #
#                    USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM3220F_EVAL   #
#                    -lC "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V #
#                    0.0.4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_S #
#                    tdPeriph_Template\EWARM\STM3220F_EVAL\List\" -lA         #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\STM3220F_EVAL\List\" -o              #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\STM3220F_EVAL\Obj\" --no_cse         #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Full.h" -I "D:\¹¬ÀÛ¾÷\[        #
#                    NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_S #
#                    tdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template #
#                    \EWARM\..\" -I "D:\¹¬ÀÛ¾÷\[ NewDTG                       #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    ..\..\..\Libraries\CMSIS\CM3\CoreSupport\" -I            #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\..\..\..\Libraries\CMSIS\CM3\DeviceS #
#                    upport\ST\STM32F2xx\" -I "D:\¹¬ÀÛ¾÷\[ NewDTG             #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    ..\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\" -I   #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\..\..\..\Utilities\STM32_EVAL\" -I   #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\..\..\..\Utilities\STM32_EVAL\Common #
#                    \" -I "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib #
#                    _V0.0.4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx #
#                    _StdPeriph_Template\EWARM\..\..\..\Utilities\STM32_EVAL\ #
#                    STM3220F_EVAL\" -Ol --use_c++_inline                     #
#    List file    =  D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4 #
#                    \STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPer #
#                    iph_Template\EWARM\STM3220F_EVAL\List\stm3220f_eval_fsmc #
#                    _psram.lst                                               #
#    Object file  =  D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4 #
#                    \STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPer #
#                    iph_Template\EWARM\STM3220F_EVAL\Obj\stm3220f_eval_fsmc_ #
#                    psram.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPeriph_Lib_V0.0.4\Utilities\STM32_EVAL\STM3220F_EVAL\stm3220f_eval_fsmc_psram.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm3220f_eval_fsmc_psram.c
      4            * @author  MCD Application Team
      5            * @version V4.X.0RC13
      6            * @date    13-January-2011
      7            * @brief   This file provides a set of functions needed to drive the 
      8            *          MT45V256KW16 PSRAM memory mounted on STM3220F-EVAL board RevA.
      9            ******************************************************************************
     10            * @attention
     11            *
     12            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     13            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     14            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     15            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     16            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     17            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     18            *
     19            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     20            ******************************************************************************  
     21            */ 
     22          
     23          /* Includes ------------------------------------------------------------------*/
     24          #include "stm3220f_eval_fsmc_psram.h"
     25          
     26          /** @addtogroup Utilities
     27            * @{
     28            */
     29            
     30          /** @addtogroup STM32_EVAL
     31            * @{
     32            */ 
     33          
     34          /** @addtogroup STM3220F_EVAL
     35            * @{
     36            */
     37            
     38          /** @addtogroup STM3220F_EVAL_FSMC_PSRAM
     39            * @brief      This file provides a set of functions needed to drive the 
     40            *             MT45V256KW16 PSRAM memory mounted on STM3220F-EVAL board.
     41            * @{
     42            */ 
     43          
     44          /** @defgroup STM3220F_EVAL_FSMC_PSRAM_Private_Types
     45            * @{
     46            */ 
     47          /**
     48            * @}
     49            */ 
     50          
     51          
     52          /** @defgroup STM3220F_EVAL_FSMC_PSRAM_Private_Defines
     53            * @{
     54            */ 
     55          /** 
     56            * @brief  FSMC Bank 1 NOR/SRAM3  
     57            */
     58          #define Bank1_SRAM2_ADDR  ((uint32_t)0x64000000)    
     59          /**
     60            * @}
     61            */ 
     62          
     63          
     64          /** @defgroup STM3220F_EVAL_FSMC_PSRAM_Private_Macros
     65            * @{
     66            */
     67          /**
     68            * @}
     69            */ 
     70            
     71          
     72          /** @defgroup STM3220F_EVAL_FSMC_PSRAM_Private_Variables
     73            * @{
     74            */ 
     75          /**
     76            * @}
     77            */ 
     78          
     79          
     80          /** @defgroup STM3220F_EVAL_FSMC_PSRAM_Private_Function_Prototypes
     81            * @{
     82            */ 
     83          /**
     84            * @}
     85            */ 
     86          
     87          
     88          /** @defgroup STM3220F_EVAL_FSMC_PSRAM_Private_Functions
     89            * @{
     90            */ 
     91          
     92          /**
     93            * @brief  Configures the FSMC and GPIOs to interface with the PSRAM memory.
     94            *         This function must be called before any write/read operation
     95            *         on the PSRAM.
     96            * @param  None 
     97            * @retval None
     98            */

   \                                 In section .text, align 2, keep-with-next
     99          void PSRAM_Init(void)
    100          {
   \                     PSRAM_Init:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   99B0               SUB      SP,SP,#+100
    101            FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
    102            FSMC_NORSRAMTimingInitTypeDef  p;
    103            GPIO_InitTypeDef GPIO_InitStructure; 
    104            
    105            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOG | RCC_AHB1Periph_GPIOE |
    106                                   RCC_AHB1Periph_GPIOF, ENABLE);
   \   00000004   0121               MOVS     R1,#+1
   \   00000006   7820               MOVS     R0,#+120
   \   00000008   ........           BL       RCC_AHB1PeriphClockCmd
    107          
    108            RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE); 
   \   0000000C   0121               MOVS     R1,#+1
   \   0000000E   0120               MOVS     R0,#+1
   \   00000010   ........           BL       RCC_AHB3PeriphClockCmd
    109            
    110          /*-- GPIO Configuration ------------------------------------------------------*/
    111            /* PSRAM Data lines configuration */
    112            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
    113                                          GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15;
   \   00000014   4CF20370           MOVW     R0,#+50947
   \   00000018   0090               STR      R0,[SP, #+0]
    114            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   0000001A   0220               MOVS     R0,#+2
   \   0000001C   8DF80400           STRB     R0,[SP, #+4]
    115            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000020   0220               MOVS     R0,#+2
   \   00000022   8DF80500           STRB     R0,[SP, #+5]
    116            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000026   0020               MOVS     R0,#+0
   \   00000028   8DF80600           STRB     R0,[SP, #+6]
    117            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
   \   0000002C   0020               MOVS     R0,#+0
   \   0000002E   8DF80700           STRB     R0,[SP, #+7]
    118          
    119            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   00000032   00A9               ADD      R1,SP,#+0
   \   00000034   ....               LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   00000036   ........           BL       GPIO_Init
    120           
    121            GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FSMC);
   \   0000003A   0C22               MOVS     R2,#+12
   \   0000003C   0021               MOVS     R1,#+0
   \   0000003E   ....               LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   00000040   ........           BL       GPIO_PinAFConfig
    122            GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FSMC);
   \   00000044   0C22               MOVS     R2,#+12
   \   00000046   0121               MOVS     R1,#+1
   \   00000048   ....               LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   0000004A   ........           BL       GPIO_PinAFConfig
    123            GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FSMC);
   \   0000004E   0C22               MOVS     R2,#+12
   \   00000050   0821               MOVS     R1,#+8
   \   00000052   ....               LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   00000054   ........           BL       GPIO_PinAFConfig
    124            GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FSMC);
   \   00000058   0C22               MOVS     R2,#+12
   \   0000005A   0921               MOVS     R1,#+9
   \   0000005C   ....               LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   0000005E   ........           BL       GPIO_PinAFConfig
    125            GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
   \   00000062   0C22               MOVS     R2,#+12
   \   00000064   0A21               MOVS     R1,#+10
   \   00000066   ....               LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   00000068   ........           BL       GPIO_PinAFConfig
    126            GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC);
   \   0000006C   0C22               MOVS     R2,#+12
   \   0000006E   0E21               MOVS     R1,#+14
   \   00000070   ....               LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   00000072   ........           BL       GPIO_PinAFConfig
    127            GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC);
   \   00000076   0C22               MOVS     R2,#+12
   \   00000078   0F21               MOVS     R1,#+15
   \   0000007A   ....               LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   0000007C   ........           BL       GPIO_PinAFConfig
    128          
    129          
    130            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
    131                                          GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
    132                                          GPIO_Pin_15;
   \   00000080   4FF68070           MOVW     R0,#+65408
   \   00000084   0090               STR      R0,[SP, #+0]
    133          
    134            GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   00000086   00A9               ADD      R1,SP,#+0
   \   00000088   ....               LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   0000008A   ........           BL       GPIO_Init
    135          
    136            GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FSMC);
   \   0000008E   0C22               MOVS     R2,#+12
   \   00000090   0721               MOVS     R1,#+7
   \   00000092   ....               LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   00000094   ........           BL       GPIO_PinAFConfig
    137            GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FSMC);
   \   00000098   0C22               MOVS     R2,#+12
   \   0000009A   0821               MOVS     R1,#+8
   \   0000009C   ....               LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   0000009E   ........           BL       GPIO_PinAFConfig
    138            GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FSMC);
   \   000000A2   0C22               MOVS     R2,#+12
   \   000000A4   0921               MOVS     R1,#+9
   \   000000A6   ....               LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   000000A8   ........           BL       GPIO_PinAFConfig
    139            GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FSMC);
   \   000000AC   0C22               MOVS     R2,#+12
   \   000000AE   0A21               MOVS     R1,#+10
   \   000000B0   ....               LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   000000B2   ........           BL       GPIO_PinAFConfig
    140            GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FSMC);
   \   000000B6   0C22               MOVS     R2,#+12
   \   000000B8   0B21               MOVS     R1,#+11
   \   000000BA   ....               LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   000000BC   ........           BL       GPIO_PinAFConfig
    141            GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FSMC);
   \   000000C0   0C22               MOVS     R2,#+12
   \   000000C2   0C21               MOVS     R1,#+12
   \   000000C4   ....               LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   000000C6   ........           BL       GPIO_PinAFConfig
    142            GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FSMC);
   \   000000CA   0C22               MOVS     R2,#+12
   \   000000CC   0D21               MOVS     R1,#+13
   \   000000CE   ....               LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   000000D0   ........           BL       GPIO_PinAFConfig
    143            GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FSMC);
   \   000000D4   0C22               MOVS     R2,#+12
   \   000000D6   0E21               MOVS     R1,#+14
   \   000000D8   ....               LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   000000DA   ........           BL       GPIO_PinAFConfig
    144            GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FSMC);
   \   000000DE   0C22               MOVS     R2,#+12
   \   000000E0   0F21               MOVS     R1,#+15
   \   000000E2   ....               LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   000000E4   ........           BL       GPIO_PinAFConfig
    145          
    146            /* PSRAM Address lines configuration */
    147            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
    148                                          GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_12 | GPIO_Pin_13 | 
    149                                          GPIO_Pin_14 | GPIO_Pin_15;
   \   000000E8   4FF23F00           MOVW     R0,#+61503
   \   000000EC   0090               STR      R0,[SP, #+0]
    150            GPIO_Init(GPIOF, &GPIO_InitStructure);
   \   000000EE   00A9               ADD      R1,SP,#+0
   \   000000F0   ....               LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   000000F2   ........           BL       GPIO_Init
    151            GPIO_PinAFConfig(GPIOF,GPIO_PinSource0, GPIO_AF_FSMC);
   \   000000F6   0C22               MOVS     R2,#+12
   \   000000F8   0021               MOVS     R1,#+0
   \   000000FA   ....               LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   000000FC   ........           BL       GPIO_PinAFConfig
    152            GPIO_PinAFConfig(GPIOF,GPIO_PinSource1, GPIO_AF_FSMC);
   \   00000100   0C22               MOVS     R2,#+12
   \   00000102   0121               MOVS     R1,#+1
   \   00000104   ....               LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   00000106   ........           BL       GPIO_PinAFConfig
    153            GPIO_PinAFConfig(GPIOF,GPIO_PinSource2, GPIO_AF_FSMC);
   \   0000010A   0C22               MOVS     R2,#+12
   \   0000010C   0221               MOVS     R1,#+2
   \   0000010E   ....               LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   00000110   ........           BL       GPIO_PinAFConfig
    154            GPIO_PinAFConfig(GPIOF,GPIO_PinSource3, GPIO_AF_FSMC);
   \   00000114   0C22               MOVS     R2,#+12
   \   00000116   0321               MOVS     R1,#+3
   \   00000118   ....               LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   0000011A   ........           BL       GPIO_PinAFConfig
    155            GPIO_PinAFConfig(GPIOF,GPIO_PinSource4, GPIO_AF_FSMC);
   \   0000011E   0C22               MOVS     R2,#+12
   \   00000120   0421               MOVS     R1,#+4
   \   00000122   ....               LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   00000124   ........           BL       GPIO_PinAFConfig
    156            GPIO_PinAFConfig(GPIOF,GPIO_PinSource5, GPIO_AF_FSMC);
   \   00000128   0C22               MOVS     R2,#+12
   \   0000012A   0521               MOVS     R1,#+5
   \   0000012C   ....               LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   0000012E   ........           BL       GPIO_PinAFConfig
    157            GPIO_PinAFConfig(GPIOF,GPIO_PinSource12, GPIO_AF_FSMC);
   \   00000132   0C22               MOVS     R2,#+12
   \   00000134   0C21               MOVS     R1,#+12
   \   00000136   ....               LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   00000138   ........           BL       GPIO_PinAFConfig
    158            GPIO_PinAFConfig(GPIOF,GPIO_PinSource13, GPIO_AF_FSMC);
   \   0000013C   0C22               MOVS     R2,#+12
   \   0000013E   0D21               MOVS     R1,#+13
   \   00000140   ....               LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   00000142   ........           BL       GPIO_PinAFConfig
    159            GPIO_PinAFConfig(GPIOF,GPIO_PinSource14, GPIO_AF_FSMC);
   \   00000146   0C22               MOVS     R2,#+12
   \   00000148   0E21               MOVS     R1,#+14
   \   0000014A   ....               LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   0000014C   ........           BL       GPIO_PinAFConfig
    160            GPIO_PinAFConfig(GPIOF,GPIO_PinSource15, GPIO_AF_FSMC);
   \   00000150   0C22               MOVS     R2,#+12
   \   00000152   0F21               MOVS     R1,#+15
   \   00000154   ....               LDR.N    R0,??DataTable0_2  ;; 0x40021400
   \   00000156   ........           BL       GPIO_PinAFConfig
    161          
    162          
    163            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
    164                                          GPIO_Pin_4 | GPIO_Pin_5;
   \   0000015A   3F20               MOVS     R0,#+63
   \   0000015C   0090               STR      R0,[SP, #+0]
    165          
    166            GPIO_Init(GPIOG, &GPIO_InitStructure);
   \   0000015E   00A9               ADD      R1,SP,#+0
   \   00000160   ....               LDR.N    R0,??DataTable0_3  ;; 0x40021800
   \   00000162   ........           BL       GPIO_Init
    167          
    168            GPIO_PinAFConfig(GPIOG,GPIO_PinSource0, GPIO_AF_FSMC);
   \   00000166   0C22               MOVS     R2,#+12
   \   00000168   0021               MOVS     R1,#+0
   \   0000016A   ....               LDR.N    R0,??DataTable0_3  ;; 0x40021800
   \   0000016C   ........           BL       GPIO_PinAFConfig
    169            GPIO_PinAFConfig(GPIOG,GPIO_PinSource1, GPIO_AF_FSMC);
   \   00000170   0C22               MOVS     R2,#+12
   \   00000172   0121               MOVS     R1,#+1
   \   00000174   ....               LDR.N    R0,??DataTable0_3  ;; 0x40021800
   \   00000176   ........           BL       GPIO_PinAFConfig
    170            GPIO_PinAFConfig(GPIOG,GPIO_PinSource2, GPIO_AF_FSMC);
   \   0000017A   0C22               MOVS     R2,#+12
   \   0000017C   0221               MOVS     R1,#+2
   \   0000017E   ....               LDR.N    R0,??DataTable0_3  ;; 0x40021800
   \   00000180   ........           BL       GPIO_PinAFConfig
    171            GPIO_PinAFConfig(GPIOG,GPIO_PinSource3, GPIO_AF_FSMC);
   \   00000184   0C22               MOVS     R2,#+12
   \   00000186   0321               MOVS     R1,#+3
   \   00000188   ....               LDR.N    R0,??DataTable0_3  ;; 0x40021800
   \   0000018A   ........           BL       GPIO_PinAFConfig
    172            GPIO_PinAFConfig(GPIOG,GPIO_PinSource4, GPIO_AF_FSMC);
   \   0000018E   0C22               MOVS     R2,#+12
   \   00000190   0421               MOVS     R1,#+4
   \   00000192   ....               LDR.N    R0,??DataTable0_3  ;; 0x40021800
   \   00000194   ........           BL       GPIO_PinAFConfig
    173            GPIO_PinAFConfig(GPIOG,GPIO_PinSource5, GPIO_AF_FSMC);
   \   00000198   0C22               MOVS     R2,#+12
   \   0000019A   0521               MOVS     R1,#+5
   \   0000019C   ....               LDR.N    R0,??DataTable0_3  ;; 0x40021800
   \   0000019E   ........           BL       GPIO_PinAFConfig
    174          
    175            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13; 
   \   000001A2   4FF46050           MOV      R0,#+14336
   \   000001A6   0090               STR      R0,[SP, #+0]
    176          
    177            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   000001A8   00A9               ADD      R1,SP,#+0
   \   000001AA   ....               LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   000001AC   ........           BL       GPIO_Init
    178          
    179            GPIO_PinAFConfig(GPIOD,GPIO_PinSource11, GPIO_AF_FSMC);
   \   000001B0   0C22               MOVS     R2,#+12
   \   000001B2   0B21               MOVS     R1,#+11
   \   000001B4   ....               LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   000001B6   ........           BL       GPIO_PinAFConfig
    180            GPIO_PinAFConfig(GPIOD,GPIO_PinSource12, GPIO_AF_FSMC);
   \   000001BA   0C22               MOVS     R2,#+12
   \   000001BC   0C21               MOVS     R1,#+12
   \   000001BE   ....               LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   000001C0   ........           BL       GPIO_PinAFConfig
    181            GPIO_PinAFConfig(GPIOD,GPIO_PinSource13, GPIO_AF_FSMC);
   \   000001C4   0C22               MOVS     R2,#+12
   \   000001C6   0D21               MOVS     R1,#+13
   \   000001C8   ....               LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   000001CA   ........           BL       GPIO_PinAFConfig
    182          
    183            /* NOE and NWE configuration */  
    184            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 |GPIO_Pin_5;
   \   000001CE   3020               MOVS     R0,#+48
   \   000001D0   0090               STR      R0,[SP, #+0]
    185          
    186            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   000001D2   00A9               ADD      R1,SP,#+0
   \   000001D4   ....               LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   000001D6   ........           BL       GPIO_Init
    187            GPIO_PinAFConfig(GPIOD,GPIO_PinSource4, GPIO_AF_FSMC);
   \   000001DA   0C22               MOVS     R2,#+12
   \   000001DC   0421               MOVS     R1,#+4
   \   000001DE   ....               LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   000001E0   ........           BL       GPIO_PinAFConfig
    188            GPIO_PinAFConfig(GPIOD,GPIO_PinSource5, GPIO_AF_FSMC);
   \   000001E4   0C22               MOVS     R2,#+12
   \   000001E6   0521               MOVS     R1,#+5
   \   000001E8   ....               LDR.N    R0,??DataTable0  ;; 0x40020c00
   \   000001EA   ........           BL       GPIO_PinAFConfig
    189          
    190            /* NE2 configuration */
    191            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; 
   \   000001EE   4FF40070           MOV      R0,#+512
   \   000001F2   0090               STR      R0,[SP, #+0]
    192          
    193            GPIO_Init(GPIOG, &GPIO_InitStructure);
   \   000001F4   00A9               ADD      R1,SP,#+0
   \   000001F6   ....               LDR.N    R0,??DataTable0_3  ;; 0x40021800
   \   000001F8   ........           BL       GPIO_Init
    194            GPIO_PinAFConfig(GPIOG, GPIO_PinSource9, GPIO_AF_FSMC);
   \   000001FC   0C22               MOVS     R2,#+12
   \   000001FE   0921               MOVS     R1,#+9
   \   00000200   ....               LDR.N    R0,??DataTable0_3  ;; 0x40021800
   \   00000202   ........           BL       GPIO_PinAFConfig
    195          
    196            /* NBL0, NBL1 configuration */
    197            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; 
   \   00000206   0320               MOVS     R0,#+3
   \   00000208   0090               STR      R0,[SP, #+0]
    198            GPIO_Init(GPIOE, &GPIO_InitStructure); 
   \   0000020A   00A9               ADD      R1,SP,#+0
   \   0000020C   ....               LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   0000020E   ........           BL       GPIO_Init
    199          
    200            GPIO_PinAFConfig(GPIOE,GPIO_PinSource0, GPIO_AF_FSMC);
   \   00000212   0C22               MOVS     R2,#+12
   \   00000214   0021               MOVS     R1,#+0
   \   00000216   ....               LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   00000218   ........           BL       GPIO_PinAFConfig
    201            GPIO_PinAFConfig(GPIOE,GPIO_PinSource1, GPIO_AF_FSMC);
   \   0000021C   0C22               MOVS     R2,#+12
   \   0000021E   0121               MOVS     R1,#+1
   \   00000220   ....               LDR.N    R0,??DataTable0_1  ;; 0x40021000
   \   00000222   ........           BL       GPIO_PinAFConfig
    202          
    203          /*-- FSMC Configuration ------------------------------------------------------*/
    204            p.FSMC_AddressSetupTime = 0x2;
   \   00000226   0220               MOVS     R0,#+2
   \   00000228   0290               STR      R0,[SP, #+8]
    205            p.FSMC_AddressHoldTime = 0;
   \   0000022A   0020               MOVS     R0,#+0
   \   0000022C   0390               STR      R0,[SP, #+12]
    206            p.FSMC_DataSetupTime = 0xB;
   \   0000022E   0B20               MOVS     R0,#+11
   \   00000230   0490               STR      R0,[SP, #+16]
    207            p.FSMC_BusTurnAroundDuration = 1;
   \   00000232   0120               MOVS     R0,#+1
   \   00000234   0590               STR      R0,[SP, #+20]
    208            p.FSMC_CLKDivision = 0;
   \   00000236   0020               MOVS     R0,#+0
   \   00000238   0690               STR      R0,[SP, #+24]
    209            p.FSMC_DataLatency = 0;
   \   0000023A   0020               MOVS     R0,#+0
   \   0000023C   0790               STR      R0,[SP, #+28]
    210            p.FSMC_AccessMode = FSMC_AccessMode_A;
   \   0000023E   0020               MOVS     R0,#+0
   \   00000240   0890               STR      R0,[SP, #+32]
    211          
    212            FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM2;
   \   00000242   0220               MOVS     R0,#+2
   \   00000244   0990               STR      R0,[SP, #+36]
    213            FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
   \   00000246   0020               MOVS     R0,#+0
   \   00000248   0A90               STR      R0,[SP, #+40]
    214            FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_PSRAM;
   \   0000024A   0420               MOVS     R0,#+4
   \   0000024C   0B90               STR      R0,[SP, #+44]
    215            FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
   \   0000024E   1020               MOVS     R0,#+16
   \   00000250   0C90               STR      R0,[SP, #+48]
    216            FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
   \   00000252   0020               MOVS     R0,#+0
   \   00000254   0D90               STR      R0,[SP, #+52]
    217            FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;  
   \   00000256   0020               MOVS     R0,#+0
   \   00000258   0E90               STR      R0,[SP, #+56]
    218            FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
   \   0000025A   0020               MOVS     R0,#+0
   \   0000025C   0F90               STR      R0,[SP, #+60]
    219            FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
   \   0000025E   0020               MOVS     R0,#+0
   \   00000260   1090               STR      R0,[SP, #+64]
    220            FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
   \   00000262   0020               MOVS     R0,#+0
   \   00000264   1190               STR      R0,[SP, #+68]
    221            FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
   \   00000266   4FF48050           MOV      R0,#+4096
   \   0000026A   1290               STR      R0,[SP, #+72]
    222            FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
   \   0000026C   0020               MOVS     R0,#+0
   \   0000026E   1390               STR      R0,[SP, #+76]
    223            FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
   \   00000270   0020               MOVS     R0,#+0
   \   00000272   1490               STR      R0,[SP, #+80]
    224            FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
   \   00000274   0020               MOVS     R0,#+0
   \   00000276   1590               STR      R0,[SP, #+84]
    225            FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
   \   00000278   02A8               ADD      R0,SP,#+8
   \   0000027A   1690               STR      R0,[SP, #+88]
    226            FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
   \   0000027C   02A8               ADD      R0,SP,#+8
   \   0000027E   1790               STR      R0,[SP, #+92]
    227          
    228            FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure); 
   \   00000280   09A8               ADD      R0,SP,#+36
   \   00000282   ........           BL       FSMC_NORSRAMInit
    229          
    230            /*!< Enable FSMC Bank1_SRAM Bank */
    231            FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM2, ENABLE); 
   \   00000286   0121               MOVS     R1,#+1
   \   00000288   0220               MOVS     R0,#+2
   \   0000028A   ........           BL       FSMC_NORSRAMCmd
    232          }
   \   0000028E   19B0               ADD      SP,SP,#+100
   \   00000290   00BD               POP      {PC}             ;; return
    233          
    234          /**
    235            * @brief  Writes a Half-word buffer to the FSMC PSRAM memory. 
    236            * @param  pBuffer : pointer to buffer. 
    237            * @param  WriteAddr : PSRAM memory internal address from which the data will be 
    238            *         written.
    239            * @param  NumHalfwordToWrite : number of half-words to write. 
    240            * @retval None
    241            */

   \                                 In section .text, align 2, keep-with-next
    242          void PSRAM_WriteBuffer(uint16_t* pBuffer, uint32_t WriteAddr, uint32_t NumHalfwordToWrite)
    243          {
   \                     PSRAM_WriteBuffer:
   \   00000000   10B4               PUSH     {R4}
   \   00000002   06E0               B.N      ??PSRAM_WriteBuffer_0
    244            for(; NumHalfwordToWrite != 0; NumHalfwordToWrite--) /* while there is data to write */
    245            {
    246              /* Transfer data to the memory */
    247              *(uint16_t *) (Bank1_SRAM2_ADDR + WriteAddr) = *pBuffer++;
   \                     ??PSRAM_WriteBuffer_1:
   \   00000004   11F1C843           ADDS     R3,R1,#+1677721600
   \   00000008   0488               LDRH     R4,[R0, #+0]
   \   0000000A   1C80               STRH     R4,[R3, #+0]
   \   0000000C   801C               ADDS     R0,R0,#+2
    248              
    249              /* Increment the address*/  
    250              WriteAddr += 2;
   \   0000000E   891C               ADDS     R1,R1,#+2
    251            } 
   \   00000010   521E               SUBS     R2,R2,#+1
   \                     ??PSRAM_WriteBuffer_0:
   \   00000012   002A               CMP      R2,#+0
   \   00000014   F6D1               BNE.N    ??PSRAM_WriteBuffer_1
    252          }
   \   00000016   10BC               POP      {R4}
   \   00000018   7047               BX       LR               ;; return
    253          
    254          /**
    255            * @brief  Reads a block of data from the FSMC PSRAM memory.
    256            * @param  pBuffer : pointer to the buffer that receives the data read from the 
    257            *         PSRAM memory.
    258            * @param  ReadAddr : PSRAM memory internal address to read from.
    259            * @param  NumHalfwordToRead : number of half-words to read.
    260            * @retval None
    261            */

   \                                 In section .text, align 2, keep-with-next
    262          void PSRAM_ReadBuffer(uint16_t* pBuffer, uint32_t ReadAddr, uint32_t NumHalfwordToRead)
    263          {
   \                     PSRAM_ReadBuffer:
   \   00000000   06E0               B.N      ??PSRAM_ReadBuffer_0
    264            for(; NumHalfwordToRead != 0; NumHalfwordToRead--) /* while there is data to read */
    265            {
    266              /* Read a half-word from the memory */
    267              *pBuffer++ = *(__IO uint16_t*) (Bank1_SRAM2_ADDR + ReadAddr);
   \                     ??PSRAM_ReadBuffer_1:
   \   00000002   11F1C843           ADDS     R3,R1,#+1677721600
   \   00000006   1B88               LDRH     R3,[R3, #+0]
   \   00000008   0380               STRH     R3,[R0, #+0]
   \   0000000A   801C               ADDS     R0,R0,#+2
    268          
    269              /* Increment the address*/  
    270              ReadAddr += 2;
   \   0000000C   891C               ADDS     R1,R1,#+2
    271            } 
   \   0000000E   521E               SUBS     R2,R2,#+1
   \                     ??PSRAM_ReadBuffer_0:
   \   00000010   002A               CMP      R2,#+0
   \   00000012   F6D1               BNE.N    ??PSRAM_ReadBuffer_1
    272          }
   \   00000014   7047               BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   000C0240           DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   00100240           DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   00140240           DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   00180240           DC32     0x40021800
    273          
    274          /**
    275            * @}
    276            */
    277          
    278          /**
    279            * @}
    280            */
    281          
    282          /**
    283            * @}
    284            */
    285          
    286          /**
    287            * @}
    288            */
    289          
    290          /**
    291            * @}
    292            */  
    293          
    294          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     PSRAM_Init           104
     PSRAM_ReadBuffer       0
     PSRAM_WriteBuffer      4


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     PSRAM_Init         658
     PSRAM_WriteBuffer   26
     PSRAM_ReadBuffer    22
     ??DataTable0         4
     ??DataTable0_1       4
     ??DataTable0_2       4
     ??DataTable0_3       4

 
 722 bytes in section .text
 
 722 bytes of CODE memory

Errors: none
Warnings: none
