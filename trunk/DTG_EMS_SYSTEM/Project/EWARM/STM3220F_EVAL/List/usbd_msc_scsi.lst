###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     16/May/2011  15:08:17 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4 #
#                    \STM32F2xx_StdPeriph_Lib_V0.0.4\Libraries\STM32_USB_Devi #
#                    ce_Library\Class\msc\src\usbd_msc_scsi.c                 #
#    Command line =  "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Libraries\STM32_USB_Dev #
#                    ice_Library\Class\msc\src\usbd_msc_scsi.c" -D            #
#                    USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM3220F_EVAL   #
#                    -D USE_USB_OTG_FS -D USE_ULPI_PHY -lC "D:\¹¬ÀÛ¾÷\[       #
#                    NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_S #
#                    tdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template #
#                    \EWARM\STM3220F_EVAL\List\" -lA "D:\¹¬ÀÛ¾÷\[ NewDTG      #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    STM3220F_EVAL\List\" -o "D:\¹¬ÀÛ¾÷\[ NewDTG              #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    STM3220F_EVAL\Obj\" --no_cse --no_unroll --no_inline     #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I "D:\¹¬ÀÛ¾÷\[ NewDTG                              #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    ..\" -I "D:\¹¬ÀÛ¾÷\[ NewDTG                              #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    ..\..\..\Libraries\CMSIS\CM3\CoreSupport\" -I            #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\..\..\..\Libraries\CMSIS\CM3\DeviceS #
#                    upport\ST\STM32F2xx\" -I "D:\¹¬ÀÛ¾÷\[ NewDTG             #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    ..\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\" -I   #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\..\..\..\Utilities\STM32_EVAL\" -I   #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\..\..\..\Utilities\STM32_EVAL\Common #
#                    \" -I "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib #
#                    _V0.0.4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx #
#                    _StdPeriph_Template\EWARM\..\..\..\Utilities\STM32_EVAL\ #
#                    STM3220F_EVAL\" -I "D:\¹¬ÀÛ¾÷\[ NewDTG                   #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    ..\..\..\Libraries\STM32_USB_OTG_Driver\inc\" -I         #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\..\..\..\Libraries\STM32_USB_Device_ #
#                    Library\Core\inc\" -I "D:\¹¬ÀÛ¾÷\[ NewDTG                #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    ..\..\..\Libraries\STM32_USB_Device_Library\Class\msc\in #
#                    c\" -Ol --use_c++_inline                                 #
#    List file    =  D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4 #
#                    \STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPer #
#                    iph_Template\EWARM\STM3220F_EVAL\List\usbd_msc_scsi.lst  #
#    Object file  =  D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4 #
#                    \STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPer #
#                    iph_Template\EWARM\STM3220F_EVAL\Obj\usbd_msc_scsi.o     #
#                                                                             #
#                                                                             #
###############################################################################

D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPeriph_Lib_V0.0.4\Libraries\STM32_USB_Device_Library\Class\msc\src\usbd_msc_scsi.c
      1          /**
      2            ******************************************************************************
      3            * @file    usbd_msc_scsi.c
      4            * @author  MCD Application Team
      5            * @version V0.0.1
      6            * @date    11/12/2010
      7            * @brief   This file provides all the USBD SCSI layer functions.
      8            ******************************************************************************
      9            * @copy
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h2>
     19            */ 
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "usbd_msc_bot.h"
     23          #include "usbd_msc_scsi.h"
     24          #include "usbd_msc_mem.h"
     25          #include "usbd_msc_data.h"
     26          
     27          
     28          
     29          /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
     30            * @{
     31            */
     32          
     33          
     34          /** @defgroup MSC_SCSI 
     35            * @brief Mass storage SCSI layer module
     36            * @{
     37            */ 
     38          
     39          /** @defgroup MSC_SCSI_Private_TypesDefinitions
     40            * @{
     41            */ 
     42          /**
     43            * @}
     44            */ 
     45          
     46          
     47          /** @defgroup MSC_SCSI_Private_Defines
     48            * @{
     49            */ 
     50          
     51          /**
     52            * @}
     53            */ 
     54          
     55          
     56          /** @defgroup MSC_SCSI_Private_Macros
     57            * @{
     58            */ 
     59          /**
     60            * @}
     61            */ 
     62          
     63          
     64          /** @defgroup MSC_SCSI_Private_Variables
     65            * @{
     66            */ 
     67          

   \                                 In section .bss, align 4
     68          SCSI_Sense_TypeDef     SCSI_Sense [SENSE_LIST_DEEPTH];
   \                     SCSI_Sense:
   \   00000000                      DS8 32

   \                                 In section .bss, align 1
     69          uint8_t   SCSI_Sense_Head;
   \                     SCSI_Sense_Head:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     70          uint8_t   SCSI_Sense_Tail;
   \                     SCSI_Sense_Tail:
   \   00000000                      DS8 1
     71          

   \                                 In section .bss, align 4
     72          uint32_t  SCSI_blk_size;
   \                     SCSI_blk_size:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     73          uint32_t  SCSI_blk_nbr;
   \                     SCSI_blk_nbr:
   \   00000000                      DS8 4
     74          

   \                                 In section .bss, align 4
     75          uint32_t  SCSI_blk_addr;
   \                     SCSI_blk_addr:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     76          uint32_t  SCSI_blk_len;
   \                     SCSI_blk_len:
   \   00000000                      DS8 4
     77          

   \                                 In section .bss, align 4
     78          USB_OTG_CORE_HANDLE  *cdev;
   \                     cdev:
   \   00000000                      DS8 4
     79          /**
     80            * @}
     81            */ 
     82          
     83          
     84          /** @defgroup MSC_SCSI_Private_FunctionPrototypes
     85            * @{
     86            */ 
     87          static int8_t SCSI_TestUnitReady(uint8_t lun, uint8_t *params);
     88          static int8_t SCSI_Inquiry(uint8_t lun, uint8_t *params);
     89          static int8_t SCSI_ReadFormatCapacity(uint8_t lun, uint8_t *params);
     90          static int8_t SCSI_ReadCapacity10(uint8_t lun, uint8_t *params);
     91          static int8_t SCSI_RequestSense (uint8_t lun, uint8_t *params);
     92          static int8_t SCSI_StartStopUnit(uint8_t lun, uint8_t *params);
     93          static int8_t SCSI_ModeSense6 (uint8_t lun, uint8_t *params);
     94          static int8_t SCSI_ModeSense10 (uint8_t lun, uint8_t *params);
     95          static int8_t SCSI_Write10(uint8_t lun , uint8_t *params);
     96          static int8_t SCSI_Read10(uint8_t lun , uint8_t *params);
     97          static int8_t SCSI_Verify10(uint8_t lun, uint8_t *params);
     98          static int8_t SCSI_CheckAddressRange (uint8_t lun , 
     99                                                uint32_t blk_offset , 
    100                                                uint16_t blk_nbr);
    101          static int8_t SCSI_ProcessRead (uint8_t lun);
    102          
    103          static int8_t SCSI_ProcessWrite (uint8_t lun);
    104          /**
    105            * @}
    106            */ 
    107          
    108          
    109          /** @defgroup MSC_SCSI_Private_Functions
    110            * @{
    111            */ 
    112          
    113          
    114          /**
    115          * @brief  SCSI_ProcessCmd
    116          *         Process SCSI commands
    117          * @param  pdev: device instance
    118          * @param  lun: Logical unit number
    119          * @param  params: Command parameters
    120          * @retval status
    121          */

   \                                 In section .text, align 2, keep-with-next
    122          int8_t SCSI_ProcessCmd(USB_OTG_CORE_HANDLE  *pdev,
    123                                     uint8_t lun, 
    124                                     uint8_t *params)
    125          {
   \                     SCSI_ProcessCmd:
   \   00000000   80B5               PUSH     {R7,LR}
   \   00000002   0300               MOVS     R3,R0
   \   00000004   0800               MOVS     R0,R1
   \   00000006   1100               MOVS     R1,R2
    126            cdev = pdev;
   \   00000008   ........           LDR.W    R2,??DataTable15
   \   0000000C   1360               STR      R3,[R2, #+0]
    127            
    128            switch (params[0])
   \   0000000E   0A78               LDRB     R2,[R1, #+0]
   \   00000010   002A               CMP      R2,#+0
   \   00000012   16D0               BEQ.N    ??SCSI_ProcessCmd_0
   \   00000014   032A               CMP      R2,#+3
   \   00000016   18D0               BEQ.N    ??SCSI_ProcessCmd_1
   \   00000018   122A               CMP      R2,#+18
   \   0000001A   1AD0               BEQ.N    ??SCSI_ProcessCmd_2
   \   0000001C   1A2A               CMP      R2,#+26
   \   0000001E   24D0               BEQ.N    ??SCSI_ProcessCmd_3
   \   00000020   1B2A               CMP      R2,#+27
   \   00000022   1AD0               BEQ.N    ??SCSI_ProcessCmd_4
   \   00000024   1E2A               CMP      R2,#+30
   \   00000026   1CD0               BEQ.N    ??SCSI_ProcessCmd_5
   \   00000028   232A               CMP      R2,#+35
   \   0000002A   26D0               BEQ.N    ??SCSI_ProcessCmd_6
   \   0000002C   252A               CMP      R2,#+37
   \   0000002E   28D0               BEQ.N    ??SCSI_ProcessCmd_7
   \   00000030   282A               CMP      R2,#+40
   \   00000032   2AD0               BEQ.N    ??SCSI_ProcessCmd_8
   \   00000034   2A2A               CMP      R2,#+42
   \   00000036   2CD0               BEQ.N    ??SCSI_ProcessCmd_9
   \   00000038   2F2A               CMP      R2,#+47
   \   0000003A   2ED0               BEQ.N    ??SCSI_ProcessCmd_10
   \   0000003C   5A2A               CMP      R2,#+90
   \   0000003E   18D0               BEQ.N    ??SCSI_ProcessCmd_11
   \   00000040   2FE0               B.N      ??SCSI_ProcessCmd_12
    129            {
    130            case SCSI_TEST_UNIT_READY:
    131              return SCSI_TestUnitReady(lun, params);
   \                     ??SCSI_ProcessCmd_0:
   \   00000042   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   ........           BL       SCSI_TestUnitReady
   \   00000048   32E0               B.N      ??SCSI_ProcessCmd_13
    132              
    133            case SCSI_REQUEST_SENSE:
    134              return SCSI_RequestSense (lun, params);
   \                     ??SCSI_ProcessCmd_1:
   \   0000004A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   ........           BL       SCSI_RequestSense
   \   00000050   2EE0               B.N      ??SCSI_ProcessCmd_13
    135            case SCSI_INQUIRY:
    136              return SCSI_Inquiry(lun, params);
   \                     ??SCSI_ProcessCmd_2:
   \   00000052   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   ........           BL       SCSI_Inquiry
   \   00000058   2AE0               B.N      ??SCSI_ProcessCmd_13
    137              
    138            case SCSI_START_STOP_UNIT:
    139              return SCSI_StartStopUnit(lun, params);
   \                     ??SCSI_ProcessCmd_4:
   \   0000005A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005C   ........           BL       SCSI_StartStopUnit
   \   00000060   26E0               B.N      ??SCSI_ProcessCmd_13
    140              
    141            case SCSI_ALLOW_MEDIUM_REMOVAL:
    142              return SCSI_StartStopUnit(lun, params);
   \                     ??SCSI_ProcessCmd_5:
   \   00000062   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   ........           BL       SCSI_StartStopUnit
   \   00000068   22E0               B.N      ??SCSI_ProcessCmd_13
    143              
    144            case SCSI_MODE_SENSE6:
    145              return SCSI_ModeSense6 (lun, params);
   \                     ??SCSI_ProcessCmd_3:
   \   0000006A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006C   ........           BL       SCSI_ModeSense6
   \   00000070   1EE0               B.N      ??SCSI_ProcessCmd_13
    146              
    147            case SCSI_MODE_SENSE10:
    148              return SCSI_ModeSense10 (lun, params);
   \                     ??SCSI_ProcessCmd_11:
   \   00000072   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000074   ........           BL       SCSI_ModeSense10
   \   00000078   1AE0               B.N      ??SCSI_ProcessCmd_13
    149              
    150            case SCSI_READ_FORMAT_CAPACITIES:
    151              return SCSI_ReadFormatCapacity(lun, params);
   \                     ??SCSI_ProcessCmd_6:
   \   0000007A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007C   ........           BL       SCSI_ReadFormatCapacity
   \   00000080   16E0               B.N      ??SCSI_ProcessCmd_13
    152              
    153            case SCSI_READ_CAPACITY10:
    154              return SCSI_ReadCapacity10(lun, params);
   \                     ??SCSI_ProcessCmd_7:
   \   00000082   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000084   ........           BL       SCSI_ReadCapacity10
   \   00000088   12E0               B.N      ??SCSI_ProcessCmd_13
    155              
    156            case SCSI_READ10:
    157              return SCSI_Read10(lun, params); 
   \                     ??SCSI_ProcessCmd_8:
   \   0000008A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008C   ........           BL       SCSI_Read10
   \   00000090   0EE0               B.N      ??SCSI_ProcessCmd_13
    158              
    159            case SCSI_WRITE10:
    160              return SCSI_Write10(lun, params);
   \                     ??SCSI_ProcessCmd_9:
   \   00000092   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000094   ........           BL       SCSI_Write10
   \   00000098   0AE0               B.N      ??SCSI_ProcessCmd_13
    161              
    162            case SCSI_VERIFY10:
    163              return SCSI_Verify10(lun, params);
   \                     ??SCSI_ProcessCmd_10:
   \   0000009A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009C   ........           BL       SCSI_Verify10
   \   000000A0   06E0               B.N      ??SCSI_ProcessCmd_13
    164              
    165            default:
    166              SCSI_SenseCode(lun,
    167                             ILLEGAL_REQUEST, 
    168                             INVALID_CDB);    
   \                     ??SCSI_ProcessCmd_12:
   \   000000A2   2022               MOVS     R2,#+32
   \   000000A4   0521               MOVS     R1,#+5
   \   000000A6   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A8   ........           BL       SCSI_SenseCode
    169              return -1;
   \   000000AC   5FF0FF30           MOVS     R0,#-1
   \                     ??SCSI_ProcessCmd_13:
   \   000000B0   02BD               POP      {R1,PC}          ;; return
    170            }
    171          }
    172          
    173          
    174          /**
    175          * @brief  SCSI_TestUnitReady
    176          *         Process SCSI Test Unit Ready Command
    177          * @param  lun: Logical unit number
    178          * @param  params: Command parameters
    179          * @retval status
    180          */

   \                                 In section .text, align 2, keep-with-next
    181          static int8_t SCSI_TestUnitReady(uint8_t lun, uint8_t *params)
    182          {
   \                     SCSI_TestUnitReady:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    183            
    184            /* case 9 : Hi > D0 */
    185            if (MSC_BOT_cbw.dDataLength != 0)
   \   00000004   ........           LDR.W    R0,??DataTable15_1
   \   00000008   8068               LDR      R0,[R0, #+8]
   \   0000000A   0028               CMP      R0,#+0
   \   0000000C   09D0               BEQ.N    ??SCSI_TestUnitReady_0
    186            {
    187              SCSI_SenseCode(MSC_BOT_cbw.bLUN, 
    188                             ILLEGAL_REQUEST, 
    189                             INVALID_CDB);
   \   0000000E   2022               MOVS     R2,#+32
   \   00000010   0521               MOVS     R1,#+5
   \   00000012   ........           LDR.W    R0,??DataTable15_1
   \   00000016   407B               LDRB     R0,[R0, #+13]
   \   00000018   ........           BL       SCSI_SenseCode
    190              return -1;
   \   0000001C   5FF0FF30           MOVS     R0,#-1
   \   00000020   16E0               B.N      ??SCSI_TestUnitReady_1
    191            }  
    192            
    193            if(USBD_STORAGE_fops->IsReady(lun) !=0 )
   \                     ??SCSI_TestUnitReady_0:
   \   00000022   2000               MOVS     R0,R4
   \   00000024   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   ........           LDR.W    R1,??DataTable15_2
   \   0000002A   0968               LDR      R1,[R1, #+0]
   \   0000002C   8968               LDR      R1,[R1, #+8]
   \   0000002E   8847               BLX      R1
   \   00000030   0028               CMP      R0,#+0
   \   00000032   08D0               BEQ.N    ??SCSI_TestUnitReady_2
    194            {
    195              SCSI_SenseCode(lun,
    196                             NOT_READY, 
    197                             MEDIUM_NOT_PRESENT);
   \   00000034   3A22               MOVS     R2,#+58
   \   00000036   0221               MOVS     R1,#+2
   \   00000038   2000               MOVS     R0,R4
   \   0000003A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   ........           BL       SCSI_SenseCode
    198              return -1;
   \   00000040   5FF0FF30           MOVS     R0,#-1
   \   00000044   04E0               B.N      ??SCSI_TestUnitReady_1
    199            } 
    200            MSC_BOT_DataLen = 0;
   \                     ??SCSI_TestUnitReady_2:
   \   00000046   ........           LDR.W    R0,??DataTable15_3
   \   0000004A   0021               MOVS     R1,#+0
   \   0000004C   0180               STRH     R1,[R0, #+0]
    201            return 0;
   \   0000004E   0020               MOVS     R0,#+0
   \                     ??SCSI_TestUnitReady_1:
   \   00000050   10BD               POP      {R4,PC}          ;; return
    202          }
    203          
    204          /**
    205          * @brief  SCSI_Inquiry
    206          *         Process Inquiry command
    207          * @param  lun: Logical unit number
    208          * @param  params: Command parameters
    209          * @retval status
    210          */

   \                                 In section .text, align 2, keep-with-next
    211          static int8_t  SCSI_Inquiry(uint8_t lun, uint8_t *params)
    212          {
    213            uint8_t* pPage;
    214            uint16_t len;
    215            
    216            if (params[1] & 0x01)/*Evpd is set*/
   \                     SCSI_Inquiry:
   \   00000000   4A78               LDRB     R2,[R1, #+1]
   \   00000002   D207               LSLS     R2,R2,#+31
   \   00000004   03D5               BPL.N    ??SCSI_Inquiry_0
    217            {
    218              pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
   \   00000006   ........           LDR.W    R0,??DataTable15_4
    219              len = LENGTH_INQUIRY_PAGE00;
   \   0000000A   0722               MOVS     R2,#+7
   \   0000000C   0FE0               B.N      ??SCSI_Inquiry_1
    220            }
    221            else
    222            {
    223              
    224              pPage = (uint8_t *)&USBD_STORAGE_fops->pInquiry[lun * USBD_STD_INQUIRY_LENGTH];
   \                     ??SCSI_Inquiry_0:
   \   0000000E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   2422               MOVS     R2,#+36
   \   00000012   ........           LDR.W    R3,??DataTable15_2
   \   00000016   1B68               LDR      R3,[R3, #+0]
   \   00000018   DB69               LDR      R3,[R3, #+28]
   \   0000001A   02FB0030           MLA      R0,R2,R0,R3
    225              len = pPage[4] + 5;
   \   0000001E   0279               LDRB     R2,[R0, #+4]
   \   00000020   521D               ADDS     R2,R2,#+5
    226              
    227              if (params[4] <= len)
   \   00000022   0B79               LDRB     R3,[R1, #+4]
   \   00000024   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000026   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000028   9A42               CMP      R2,R3
   \   0000002A   00D3               BCC.N    ??SCSI_Inquiry_1
    228              {
    229                len = params[4];
   \   0000002C   0A79               LDRB     R2,[R1, #+4]
    230              }
    231            }
    232            MSC_BOT_DataLen = len;
   \                     ??SCSI_Inquiry_1:
   \   0000002E   ........           LDR.W    R1,??DataTable15_3
   \   00000032   0A80               STRH     R2,[R1, #+0]
   \   00000034   06E0               B.N      ??SCSI_Inquiry_2
    233            
    234            while (len) 
    235            {
    236              len--;
   \                     ??SCSI_Inquiry_3:
   \   00000036   521E               SUBS     R2,R2,#+1
    237              MSC_BOT_Data[len] = pPage[len];
   \   00000038   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000003A   115C               LDRB     R1,[R2, R0]
   \   0000003C   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000003E   ........           LDR.W    R3,??DataTable15_5
   \   00000042   D154               STRB     R1,[R2, R3]
    238            }
   \                     ??SCSI_Inquiry_2:
   \   00000044   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000046   002A               CMP      R2,#+0
   \   00000048   F5D1               BNE.N    ??SCSI_Inquiry_3
    239            return 0;
   \   0000004A   0020               MOVS     R0,#+0
   \   0000004C   7047               BX       LR               ;; return
    240          }
    241          
    242          /**
    243          * @brief  SCSI_ReadCapacity10
    244          *         Process Read Capacity 10 command
    245          * @param  lun: Logical unit number
    246          * @param  params: Command parameters
    247          * @retval status
    248          */

   \                                 In section .text, align 2, keep-with-next
    249          static int8_t SCSI_ReadCapacity10(uint8_t lun, uint8_t *params)
    250          {
   \                     SCSI_ReadCapacity10:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    251            
    252            if(USBD_STORAGE_fops->GetCapacity(lun, &SCSI_blk_nbr, &SCSI_blk_size) != 0)
   \   00000004   ........           LDR.W    R2,??DataTable15_6
   \   00000008   ........           LDR.W    R1,??DataTable15_7
   \   0000000C   2000               MOVS     R0,R4
   \   0000000E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   ........           LDR.W    R3,??DataTable15_2
   \   00000014   1B68               LDR      R3,[R3, #+0]
   \   00000016   5B68               LDR      R3,[R3, #+4]
   \   00000018   9847               BLX      R3
   \   0000001A   0028               CMP      R0,#+0
   \   0000001C   08D0               BEQ.N    ??SCSI_ReadCapacity10_0
    253            {
    254              SCSI_SenseCode(lun,
    255                             NOT_READY, 
    256                             MEDIUM_NOT_PRESENT);
   \   0000001E   3A22               MOVS     R2,#+58
   \   00000020   0221               MOVS     R1,#+2
   \   00000022   2000               MOVS     R0,R4
   \   00000024   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   ........           BL       SCSI_SenseCode
    257              return -1;
   \   0000002A   5FF0FF30           MOVS     R0,#-1
   \   0000002E   3EE0               B.N      ??SCSI_ReadCapacity10_1
    258            } 
    259            else
    260            {
    261              
    262              MSC_BOT_Data[0] = (uint8_t)(SCSI_blk_nbr - 1 >> 24);
   \                     ??SCSI_ReadCapacity10_0:
   \   00000030   ........           LDR.W    R0,??DataTable15_7
   \   00000034   0068               LDR      R0,[R0, #+0]
   \   00000036   401E               SUBS     R0,R0,#+1
   \   00000038   000E               LSRS     R0,R0,#+24
   \   0000003A   ........           LDR.W    R1,??DataTable15_5
   \   0000003E   0870               STRB     R0,[R1, #+0]
    263              MSC_BOT_Data[1] = (uint8_t)(SCSI_blk_nbr - 1 >> 16);
   \   00000040   ........           LDR.W    R0,??DataTable15_7
   \   00000044   0068               LDR      R0,[R0, #+0]
   \   00000046   401E               SUBS     R0,R0,#+1
   \   00000048   000C               LSRS     R0,R0,#+16
   \   0000004A   ........           LDR.W    R1,??DataTable15_5
   \   0000004E   4870               STRB     R0,[R1, #+1]
    264              MSC_BOT_Data[2] = (uint8_t)(SCSI_blk_nbr - 1 >>  8);
   \   00000050   ........           LDR.W    R0,??DataTable15_7
   \   00000054   0068               LDR      R0,[R0, #+0]
   \   00000056   401E               SUBS     R0,R0,#+1
   \   00000058   000A               LSRS     R0,R0,#+8
   \   0000005A   ........           LDR.W    R1,??DataTable15_5
   \   0000005E   8870               STRB     R0,[R1, #+2]
    265              MSC_BOT_Data[3] = (uint8_t)(SCSI_blk_nbr - 1);
   \   00000060   ........           LDR.W    R0,??DataTable15_7
   \   00000064   0068               LDR      R0,[R0, #+0]
   \   00000066   401E               SUBS     R0,R0,#+1
   \   00000068   ........           LDR.W    R1,??DataTable15_5
   \   0000006C   C870               STRB     R0,[R1, #+3]
    266              
    267              MSC_BOT_Data[4] = (uint8_t)(SCSI_blk_size >>  24);
   \   0000006E   ........           LDR.W    R0,??DataTable15_6
   \   00000072   0068               LDR      R0,[R0, #+0]
   \   00000074   000E               LSRS     R0,R0,#+24
   \   00000076   ........           LDR.W    R1,??DataTable15_5
   \   0000007A   0871               STRB     R0,[R1, #+4]
    268              MSC_BOT_Data[5] = (uint8_t)(SCSI_blk_size >>  16);
   \   0000007C   ........           LDR.W    R0,??DataTable15_6
   \   00000080   0068               LDR      R0,[R0, #+0]
   \   00000082   000C               LSRS     R0,R0,#+16
   \   00000084   ........           LDR.W    R1,??DataTable15_5
   \   00000088   4871               STRB     R0,[R1, #+5]
    269              MSC_BOT_Data[6] = (uint8_t)(SCSI_blk_size >>  8);
   \   0000008A   ........           LDR.W    R0,??DataTable15_6
   \   0000008E   0068               LDR      R0,[R0, #+0]
   \   00000090   000A               LSRS     R0,R0,#+8
   \   00000092   ........           LDR.W    R1,??DataTable15_5
   \   00000096   8871               STRB     R0,[R1, #+6]
    270              MSC_BOT_Data[7] = (uint8_t)(SCSI_blk_size);
   \   00000098   ........           LDR.W    R0,??DataTable15_5
   \   0000009C   ........           LDR.W    R1,??DataTable15_6
   \   000000A0   0968               LDR      R1,[R1, #+0]
   \   000000A2   C171               STRB     R1,[R0, #+7]
    271              
    272              MSC_BOT_DataLen = 8;
   \   000000A4   ........           LDR.W    R0,??DataTable15_3
   \   000000A8   0821               MOVS     R1,#+8
   \   000000AA   0180               STRH     R1,[R0, #+0]
    273              return 0;
   \   000000AC   0020               MOVS     R0,#+0
   \                     ??SCSI_ReadCapacity10_1:
   \   000000AE   10BD               POP      {R4,PC}          ;; return
    274            }
    275          }
    276          /**
    277          * @brief  SCSI_ReadFormatCapacity
    278          *         Process Read Format Capacity command
    279          * @param  lun: Logical unit number
    280          * @param  params: Command parameters
    281          * @retval status
    282          */

   \                                 In section .text, align 2, keep-with-next
    283          static int8_t SCSI_ReadFormatCapacity(uint8_t lun, uint8_t *params)
    284          {
   \                     SCSI_ReadFormatCapacity:
   \   00000000   1CB5               PUSH     {R2-R4,LR}
   \   00000002   0400               MOVS     R4,R0
    285            
    286            uint32_t blk_size;
    287            uint32_t blk_nbr;
    288            uint16_t i;
    289            
    290            for(i=0 ; i < 12 ; i++) 
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   05E0               B.N      ??SCSI_ReadFormatCapacity_0
    291            {
    292              MSC_BOT_Data[i] = 0;
   \                     ??SCSI_ReadFormatCapacity_1:
   \   00000008   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000A   ........           LDR.W    R1,??DataTable15_5
   \   0000000E   0022               MOVS     R2,#+0
   \   00000010   4254               STRB     R2,[R0, R1]
    293            }
   \   00000012   401C               ADDS     R0,R0,#+1
   \                     ??SCSI_ReadFormatCapacity_0:
   \   00000014   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000016   0C28               CMP      R0,#+12
   \   00000018   F6D3               BCC.N    ??SCSI_ReadFormatCapacity_1
    294            
    295            if(USBD_STORAGE_fops->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
   \   0000001A   01AA               ADD      R2,SP,#+4
   \   0000001C   00A9               ADD      R1,SP,#+0
   \   0000001E   2000               MOVS     R0,R4
   \   00000020   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   ........           LDR.W    R3,??DataTable15_2
   \   00000026   1B68               LDR      R3,[R3, #+0]
   \   00000028   5B68               LDR      R3,[R3, #+4]
   \   0000002A   9847               BLX      R3
   \   0000002C   0028               CMP      R0,#+0
   \   0000002E   08D0               BEQ.N    ??SCSI_ReadFormatCapacity_2
    296            {
    297              SCSI_SenseCode(lun,
    298                             NOT_READY, 
    299                             MEDIUM_NOT_PRESENT);
   \   00000030   3A22               MOVS     R2,#+58
   \   00000032   0221               MOVS     R1,#+2
   \   00000034   2000               MOVS     R0,R4
   \   00000036   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   ........           BL       SCSI_SenseCode
    300              return -1;
   \   0000003C   5FF0FF30           MOVS     R0,#-1
   \   00000040   31E0               B.N      ??SCSI_ReadFormatCapacity_3
    301            } 
    302            else
    303            {
    304              MSC_BOT_Data[3] = 0x08;
   \                     ??SCSI_ReadFormatCapacity_2:
   \   00000042   ........           LDR.W    R0,??DataTable15_5
   \   00000046   0821               MOVS     R1,#+8
   \   00000048   C170               STRB     R1,[R0, #+3]
    305              MSC_BOT_Data[4] = (uint8_t)(blk_nbr - 1 >> 24);
   \   0000004A   0098               LDR      R0,[SP, #+0]
   \   0000004C   401E               SUBS     R0,R0,#+1
   \   0000004E   000E               LSRS     R0,R0,#+24
   \   00000050   ........           LDR.W    R1,??DataTable15_5
   \   00000054   0871               STRB     R0,[R1, #+4]
    306              MSC_BOT_Data[5] = (uint8_t)(blk_nbr - 1 >> 16);
   \   00000056   0098               LDR      R0,[SP, #+0]
   \   00000058   401E               SUBS     R0,R0,#+1
   \   0000005A   000C               LSRS     R0,R0,#+16
   \   0000005C   ........           LDR.W    R1,??DataTable15_5
   \   00000060   4871               STRB     R0,[R1, #+5]
    307              MSC_BOT_Data[6] = (uint8_t)(blk_nbr - 1 >>  8);
   \   00000062   0098               LDR      R0,[SP, #+0]
   \   00000064   401E               SUBS     R0,R0,#+1
   \   00000066   000A               LSRS     R0,R0,#+8
   \   00000068   ........           LDR.W    R1,??DataTable15_5
   \   0000006C   8871               STRB     R0,[R1, #+6]
    308              MSC_BOT_Data[7] = (uint8_t)(blk_nbr - 1);
   \   0000006E   0098               LDR      R0,[SP, #+0]
   \   00000070   401E               SUBS     R0,R0,#+1
   \   00000072   ........           LDR.W    R1,??DataTable15_5
   \   00000076   C871               STRB     R0,[R1, #+7]
    309              
    310              MSC_BOT_Data[8] = 0x02;
   \   00000078   ........           LDR.W    R0,??DataTable15_5
   \   0000007C   0221               MOVS     R1,#+2
   \   0000007E   0172               STRB     R1,[R0, #+8]
    311              MSC_BOT_Data[9] = (uint8_t)(blk_size >>  16);
   \   00000080   0198               LDR      R0,[SP, #+4]
   \   00000082   000C               LSRS     R0,R0,#+16
   \   00000084   ........           LDR.W    R1,??DataTable15_5
   \   00000088   4872               STRB     R0,[R1, #+9]
    312              MSC_BOT_Data[10] = (uint8_t)(blk_size >>  8);
   \   0000008A   0198               LDR      R0,[SP, #+4]
   \   0000008C   000A               LSRS     R0,R0,#+8
   \   0000008E   ........           LDR.W    R1,??DataTable15_5
   \   00000092   8872               STRB     R0,[R1, #+10]
    313              MSC_BOT_Data[11] = (uint8_t)(blk_size);
   \   00000094   ........           LDR.W    R0,??DataTable15_5
   \   00000098   0199               LDR      R1,[SP, #+4]
   \   0000009A   C172               STRB     R1,[R0, #+11]
    314              
    315              MSC_BOT_DataLen = 12;
   \   0000009C   ........           LDR.W    R0,??DataTable15_3
   \   000000A0   0C21               MOVS     R1,#+12
   \   000000A2   0180               STRH     R1,[R0, #+0]
    316              return 0;
   \   000000A4   0020               MOVS     R0,#+0
   \                     ??SCSI_ReadFormatCapacity_3:
   \   000000A6   16BD               POP      {R1,R2,R4,PC}    ;; return
    317            }
    318          }
    319          /**
    320          * @brief  SCSI_ModeSense6
    321          *         Process Mode Sense6 command
    322          * @param  lun: Logical unit number
    323          * @param  params: Command parameters
    324          * @retval status
    325          */

   \                                 In section .text, align 2, keep-with-next
    326          static int8_t SCSI_ModeSense6 (uint8_t lun, uint8_t *params)
    327          {
    328            
    329            uint16_t len = 8 ;
   \                     SCSI_ModeSense6:
   \   00000000   0820               MOVS     R0,#+8
    330            MSC_BOT_DataLen = len;
   \   00000002   ........           LDR.W    R1,??DataTable15_3
   \   00000006   0880               STRH     R0,[R1, #+0]
   \   00000008   08E0               B.N      ??SCSI_ModeSense6_0
    331            
    332            while (len) 
    333            {
    334              len--;
   \                     ??SCSI_ModeSense6_1:
   \   0000000A   401E               SUBS     R0,R0,#+1
    335              MSC_BOT_Data[len] = MSC_Mode_Sense6_data[len];
   \   0000000C   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000E   ........           LDR.W    R1,??DataTable15_5
   \   00000012   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000014   ........           LDR.W    R2,??DataTable15_8
   \   00000018   825C               LDRB     R2,[R0, R2]
   \   0000001A   4254               STRB     R2,[R0, R1]
    336            }
   \                     ??SCSI_ModeSense6_0:
   \   0000001C   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001E   0028               CMP      R0,#+0
   \   00000020   F3D1               BNE.N    ??SCSI_ModeSense6_1
    337            return 0;
   \   00000022   0020               MOVS     R0,#+0
   \   00000024   7047               BX       LR               ;; return
    338          }
    339          
    340          /**
    341          * @brief  SCSI_ModeSense10
    342          *         Process Mode Sense10 command
    343          * @param  lun: Logical unit number
    344          * @param  params: Command parameters
    345          * @retval status
    346          */

   \                                 In section .text, align 2, keep-with-next
    347          static int8_t SCSI_ModeSense10 (uint8_t lun, uint8_t *params)
    348          {
    349           uint16_t len = 8;
   \                     SCSI_ModeSense10:
   \   00000000   0820               MOVS     R0,#+8
    350          
    351           MSC_BOT_DataLen = len;
   \   00000002   ........           LDR.W    R1,??DataTable15_3
   \   00000006   0880               STRH     R0,[R1, #+0]
   \   00000008   08E0               B.N      ??SCSI_ModeSense10_0
    352          
    353           while (len) 
    354            {
    355              len--;
   \                     ??SCSI_ModeSense10_1:
   \   0000000A   401E               SUBS     R0,R0,#+1
    356              MSC_BOT_Data[len] = MSC_Mode_Sense10_data[len];
   \   0000000C   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000E   ........           LDR.W    R1,??DataTable15_5
   \   00000012   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000014   ........           LDR.W    R2,??DataTable15_9
   \   00000018   825C               LDRB     R2,[R0, R2]
   \   0000001A   4254               STRB     R2,[R0, R1]
    357            }
   \                     ??SCSI_ModeSense10_0:
   \   0000001C   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001E   0028               CMP      R0,#+0
   \   00000020   F3D1               BNE.N    ??SCSI_ModeSense10_1
    358            return 0;
   \   00000022   0020               MOVS     R0,#+0
   \   00000024   7047               BX       LR               ;; return
    359          }
    360          
    361          /**
    362          * @brief  SCSI_RequestSense
    363          *         Process Request Sense command
    364          * @param  lun: Logical unit number
    365          * @param  params: Command parameters
    366          * @retval status
    367          */
    368          

   \                                 In section .text, align 2, keep-with-next
    369          static int8_t SCSI_RequestSense (uint8_t lun, uint8_t *params)
    370          {
    371            uint8_t i;
    372            
    373            for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
   \                     SCSI_RequestSense:
   \   00000000   0020               MOVS     R0,#+0
   \   00000002   05E0               B.N      ??SCSI_RequestSense_0
    374            {
    375              MSC_BOT_Data[i] = 0;
   \                     ??SCSI_RequestSense_1:
   \   00000004   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   ........           LDR.W    R2,??DataTable15_5
   \   0000000A   0023               MOVS     R3,#+0
   \   0000000C   8354               STRB     R3,[R0, R2]
    376            }
   \   0000000E   401C               ADDS     R0,R0,#+1
   \                     ??SCSI_RequestSense_0:
   \   00000010   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   1228               CMP      R0,#+18
   \   00000014   F6D3               BCC.N    ??SCSI_RequestSense_1
    377            
    378            MSC_BOT_Data[0]	= 0x70;		
   \   00000016   ........           LDR.W    R0,??DataTable15_5
   \   0000001A   7022               MOVS     R2,#+112
   \   0000001C   0270               STRB     R2,[R0, #+0]
    379            MSC_BOT_Data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
   \   0000001E   ........           LDR.W    R0,??DataTable15_5
   \   00000022   0C22               MOVS     R2,#+12
   \   00000024   C271               STRB     R2,[R0, #+7]
    380            
    381            if((SCSI_Sense_Head != SCSI_Sense_Tail)) {
   \   00000026   ........           LDR.W    R0,??DataTable15_10
   \   0000002A   0078               LDRB     R0,[R0, #+0]
   \   0000002C   ........           LDR.W    R2,??DataTable15_11
   \   00000030   1278               LDRB     R2,[R2, #+0]
   \   00000032   9042               CMP      R0,R2
   \   00000034   2FD0               BEQ.N    ??SCSI_RequestSense_2
    382              
    383              MSC_BOT_Data[2]     = SCSI_Sense[SCSI_Sense_Head].Skey;		
   \   00000036   ........           LDR.W    R0,??DataTable15_10
   \   0000003A   0078               LDRB     R0,[R0, #+0]
   \   0000003C   ........           LDR.W    R2,??DataTable15_12
   \   00000040   12F83000           LDRB     R0,[R2, R0, LSL #+3]
   \   00000044   ........           LDR.W    R2,??DataTable15_5
   \   00000048   9070               STRB     R0,[R2, #+2]
    384              MSC_BOT_Data[12]    = SCSI_Sense[SCSI_Sense_Head].w.b.ASCQ;	
   \   0000004A   ........           LDR.W    R0,??DataTable15_10
   \   0000004E   0078               LDRB     R0,[R0, #+0]
   \   00000050   ........           LDR.W    R2,??DataTable15_12
   \   00000054   12EBC000           ADDS     R0,R2,R0, LSL #+3
   \   00000058   4079               LDRB     R0,[R0, #+5]
   \   0000005A   ........           LDR.W    R2,??DataTable15_5
   \   0000005E   1073               STRB     R0,[R2, #+12]
    385              MSC_BOT_Data[13]    = SCSI_Sense[SCSI_Sense_Head].w.b.ASC;	
   \   00000060   ........           LDR.W    R0,??DataTable15_10
   \   00000064   0078               LDRB     R0,[R0, #+0]
   \   00000066   ........           LDR.W    R2,??DataTable15_12
   \   0000006A   12EBC000           ADDS     R0,R2,R0, LSL #+3
   \   0000006E   0079               LDRB     R0,[R0, #+4]
   \   00000070   ........           LDR.W    R2,??DataTable15_5
   \   00000074   5073               STRB     R0,[R2, #+13]
    386              SCSI_Sense_Head++;
   \   00000076   ........           LDR.W    R0,??DataTable15_10
   \   0000007A   0078               LDRB     R0,[R0, #+0]
   \   0000007C   401C               ADDS     R0,R0,#+1
   \   0000007E   ........           LDR.W    R2,??DataTable15_10
   \   00000082   1070               STRB     R0,[R2, #+0]
    387              
    388              if (SCSI_Sense_Head == SENSE_LIST_DEEPTH)
   \   00000084   ........           LDR.W    R0,??DataTable15_10
   \   00000088   0078               LDRB     R0,[R0, #+0]
   \   0000008A   0428               CMP      R0,#+4
   \   0000008C   03D1               BNE.N    ??SCSI_RequestSense_2
    389              {
    390                SCSI_Sense_Head = 0;
   \   0000008E   ........           LDR.W    R0,??DataTable15_10
   \   00000092   0022               MOVS     R2,#+0
   \   00000094   0270               STRB     R2,[R0, #+0]
    391              }
    392            }
    393            MSC_BOT_DataLen = REQUEST_SENSE_DATA_LEN;  
   \                     ??SCSI_RequestSense_2:
   \   00000096   ........           LDR.W    R0,??DataTable15_3
   \   0000009A   1222               MOVS     R2,#+18
   \   0000009C   0280               STRH     R2,[R0, #+0]
    394            
    395            if (params[4] <= REQUEST_SENSE_DATA_LEN)
   \   0000009E   0879               LDRB     R0,[R1, #+4]
   \   000000A0   1328               CMP      R0,#+19
   \   000000A2   03D2               BCS.N    ??SCSI_RequestSense_3
    396            {
    397              MSC_BOT_DataLen = params[4];
   \   000000A4   0879               LDRB     R0,[R1, #+4]
   \   000000A6   ........           LDR.W    R1,??DataTable15_3
   \   000000AA   0880               STRH     R0,[R1, #+0]
    398            }
    399            return 0;
   \                     ??SCSI_RequestSense_3:
   \   000000AC   0020               MOVS     R0,#+0
   \   000000AE   7047               BX       LR               ;; return
    400          }
    401          
    402          /**
    403          * @brief  SCSI_SenseCode
    404          *         Load the last error code in the error list
    405          * @param  lun: Logical unit number
    406          * @param  sKey: Sense Key
    407          * @param  ASC: Additional Sense Key
    408          * @retval none
    409          
    410          */

   \                                 In section .text, align 2, keep-with-next
    411          void SCSI_SenseCode(uint8_t lun, uint8_t sKey, uint8_t ASC)
    412          {
    413            SCSI_Sense[SCSI_Sense_Tail].Skey  = sKey;
   \                     SCSI_SenseCode:
   \   00000000   ........           LDR.W    R0,??DataTable15_11
   \   00000004   0078               LDRB     R0,[R0, #+0]
   \   00000006   ........           LDR.W    R3,??DataTable15_12
   \   0000000A   03F83010           STRB     R1,[R3, R0, LSL #+3]
    414            SCSI_Sense[SCSI_Sense_Tail].w.ASC = ASC << 8;
   \   0000000E   ........           LDR.W    R0,??DataTable15_11
   \   00000012   0078               LDRB     R0,[R0, #+0]
   \   00000014   ........           LDR.W    R1,??DataTable15_12
   \   00000018   11EBC000           ADDS     R0,R1,R0, LSL #+3
   \   0000001C   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001E   1102               LSLS     R1,R2,#+8
   \   00000020   4160               STR      R1,[R0, #+4]
    415            SCSI_Sense_Tail++;
   \   00000022   ........           LDR.W    R0,??DataTable15_11
   \   00000026   0078               LDRB     R0,[R0, #+0]
   \   00000028   401C               ADDS     R0,R0,#+1
   \   0000002A   ........           LDR.W    R1,??DataTable15_11
   \   0000002E   0870               STRB     R0,[R1, #+0]
    416            if (SCSI_Sense_Tail == SENSE_LIST_DEEPTH)
   \   00000030   ........           LDR.W    R0,??DataTable15_11
   \   00000034   0078               LDRB     R0,[R0, #+0]
   \   00000036   0428               CMP      R0,#+4
   \   00000038   03D1               BNE.N    ??SCSI_SenseCode_0
    417            {
    418              SCSI_Sense_Tail = 0;
   \   0000003A   ........           LDR.W    R0,??DataTable15_11
   \   0000003E   0021               MOVS     R1,#+0
   \   00000040   0170               STRB     R1,[R0, #+0]
    419            }
    420          }
   \                     ??SCSI_SenseCode_0:
   \   00000042   7047               BX       LR               ;; return
    421          /**
    422          * @brief  SCSI_StartStopUnit
    423          *         Process Start Stop Unit command
    424          * @param  lun: Logical unit number
    425          * @param  params: Command parameters
    426          * @retval status
    427          */

   \                                 In section .text, align 2, keep-with-next
    428          static int8_t SCSI_StartStopUnit(uint8_t lun, uint8_t *params)
    429          {
    430            MSC_BOT_DataLen = 0;
   \                     SCSI_StartStopUnit:
   \   00000000   ........           LDR.W    R0,??DataTable15_3
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   0180               STRH     R1,[R0, #+0]
    431            return 0;
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   7047               BX       LR               ;; return
    432          }
    433          
    434          /**
    435          * @brief  SCSI_Read10
    436          *         Process Read10 command
    437          * @param  lun: Logical unit number
    438          * @param  params: Command parameters
    439          * @retval status
    440          */

   \                                 In section .text, align 2, keep-with-next
    441          static int8_t SCSI_Read10(uint8_t lun , uint8_t *params)
    442          {
   \                     SCSI_Read10:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
    443            if(MSC_BOT_State == BOT_IDLE)  /* Idle */
   \   00000006   ........           LDR.W    R0,??DataTable15_13
   \   0000000A   0078               LDRB     R0,[R0, #+0]
   \   0000000C   0028               CMP      R0,#+0
   \   0000000E   6AD1               BNE.N    ??SCSI_Read10_0
    444            {
    445              
    446              /* case 10 : Ho <> Di */
    447              
    448              if ((MSC_BOT_cbw.bmFlags & 0x80) != 0x80)
   \   00000010   ........           LDR.W    R0,??DataTable15_1
   \   00000014   007B               LDRB     R0,[R0, #+12]
   \   00000016   0006               LSLS     R0,R0,#+24
   \   00000018   09D4               BMI.N    ??SCSI_Read10_1
    449              {
    450                SCSI_SenseCode(MSC_BOT_cbw.bLUN, 
    451                               ILLEGAL_REQUEST, 
    452                               INVALID_CDB);
   \   0000001A   2022               MOVS     R2,#+32
   \   0000001C   0521               MOVS     R1,#+5
   \   0000001E   ........           LDR.W    R0,??DataTable15_1
   \   00000022   407B               LDRB     R0,[R0, #+13]
   \   00000024   ........           BL       SCSI_SenseCode
    453                return -1;
   \   00000028   5FF0FF30           MOVS     R0,#-1
   \   0000002C   63E0               B.N      ??SCSI_Read10_2
    454              }    
    455              
    456              if(USBD_STORAGE_fops->IsReady(lun) !=0 )
   \                     ??SCSI_Read10_1:
   \   0000002E   2000               MOVS     R0,R4
   \   00000030   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   ........           LDR.W    R1,??DataTable15_2
   \   00000036   0968               LDR      R1,[R1, #+0]
   \   00000038   8968               LDR      R1,[R1, #+8]
   \   0000003A   8847               BLX      R1
   \   0000003C   0028               CMP      R0,#+0
   \   0000003E   08D0               BEQ.N    ??SCSI_Read10_3
    457              {
    458                SCSI_SenseCode(lun,
    459                               NOT_READY, 
    460                               MEDIUM_NOT_PRESENT);
   \   00000040   3A22               MOVS     R2,#+58
   \   00000042   0221               MOVS     R1,#+2
   \   00000044   2000               MOVS     R0,R4
   \   00000046   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   ........           BL       SCSI_SenseCode
    461                return -1;
   \   0000004C   5FF0FF30           MOVS     R0,#-1
   \   00000050   51E0               B.N      ??SCSI_Read10_2
    462              } 
    463              
    464              SCSI_blk_addr = (params[2] << 24) | \
    465                (params[3] << 16) | \
    466                  (params[4] <<  8) | \
    467                    params[5];
   \                     ??SCSI_Read10_3:
   \   00000052   A878               LDRB     R0,[R5, #+2]
   \   00000054   E978               LDRB     R1,[R5, #+3]
   \   00000056   0904               LSLS     R1,R1,#+16
   \   00000058   51EA0060           ORRS     R0,R1,R0, LSL #+24
   \   0000005C   2979               LDRB     R1,[R5, #+4]
   \   0000005E   50EA0120           ORRS     R0,R0,R1, LSL #+8
   \   00000062   6979               LDRB     R1,[R5, #+5]
   \   00000064   0843               ORRS     R0,R1,R0
   \   00000066   ........           LDR.W    R1,??DataTable15_14
   \   0000006A   0860               STR      R0,[R1, #+0]
    468              
    469              SCSI_blk_len =  (params[7] <<  8) | \
    470                params[8];  
   \   0000006C   E879               LDRB     R0,[R5, #+7]
   \   0000006E   297A               LDRB     R1,[R5, #+8]
   \   00000070   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   00000074   ........           LDR.W    R1,??DataTable15_15
   \   00000078   0860               STR      R0,[R1, #+0]
    471              
    472              
    473              
    474              if( SCSI_CheckAddressRange(lun, SCSI_blk_addr, SCSI_blk_len) < 0)
   \   0000007A   ........           LDR.W    R0,??DataTable15_15
   \   0000007E   0268               LDR      R2,[R0, #+0]
   \   00000080   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000082   ........           LDR.W    R0,??DataTable15_14
   \   00000086   0168               LDR      R1,[R0, #+0]
   \   00000088   2000               MOVS     R0,R4
   \   0000008A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008C   ........           BL       SCSI_CheckAddressRange
   \   00000090   0028               CMP      R0,#+0
   \   00000092   02D5               BPL.N    ??SCSI_Read10_4
    475              {
    476                return -1; /* error */
   \   00000094   5FF0FF30           MOVS     R0,#-1
   \   00000098   2DE0               B.N      ??SCSI_Read10_2
    477              }
    478              
    479              MSC_BOT_State = BOT_DATA_IN;
   \                     ??SCSI_Read10_4:
   \   0000009A   ........           LDR.W    R0,??DataTable15_13
   \   0000009E   0221               MOVS     R1,#+2
   \   000000A0   0170               STRB     R1,[R0, #+0]
    480              SCSI_blk_addr *= SCSI_blk_size;
   \   000000A2   ........           LDR.W    R0,??DataTable15_14
   \   000000A6   0068               LDR      R0,[R0, #+0]
   \   000000A8   ........           LDR.W    R1,??DataTable15_6
   \   000000AC   0968               LDR      R1,[R1, #+0]
   \   000000AE   4843               MULS     R0,R1,R0
   \   000000B0   ........           LDR.W    R1,??DataTable15_14
   \   000000B4   0860               STR      R0,[R1, #+0]
    481              SCSI_blk_len  *= SCSI_blk_size;
   \   000000B6   ........           LDR.W    R0,??DataTable15_15
   \   000000BA   0068               LDR      R0,[R0, #+0]
   \   000000BC   ....               LDR.N    R1,??DataTable15_6
   \   000000BE   0968               LDR      R1,[R1, #+0]
   \   000000C0   4843               MULS     R0,R1,R0
   \   000000C2   ........           LDR.W    R1,??DataTable15_15
   \   000000C6   0860               STR      R0,[R1, #+0]
    482              
    483              /* cases 4,5 : Hi <> Dn */
    484              if (MSC_BOT_cbw.dDataLength != SCSI_blk_len)
   \   000000C8   ....               LDR.N    R0,??DataTable15_1
   \   000000CA   8068               LDR      R0,[R0, #+8]
   \   000000CC   ....               LDR.N    R1,??DataTable15_15
   \   000000CE   0968               LDR      R1,[R1, #+0]
   \   000000D0   8842               CMP      R0,R1
   \   000000D2   08D0               BEQ.N    ??SCSI_Read10_0
    485              {
    486                SCSI_SenseCode(MSC_BOT_cbw.bLUN, 
    487                               ILLEGAL_REQUEST, 
    488                               INVALID_CDB);
   \   000000D4   2022               MOVS     R2,#+32
   \   000000D6   0521               MOVS     R1,#+5
   \   000000D8   ....               LDR.N    R0,??DataTable15_1
   \   000000DA   407B               LDRB     R0,[R0, #+13]
   \   000000DC   ........           BL       SCSI_SenseCode
    489                return -1;
   \   000000E0   5FF0FF30           MOVS     R0,#-1
   \   000000E4   07E0               B.N      ??SCSI_Read10_2
    490              }
    491            }
    492            MSC_BOT_DataLen = MSC_MEDIA_PACKET;  
   \                     ??SCSI_Read10_0:
   \   000000E6   ....               LDR.N    R0,??DataTable15_3
   \   000000E8   4FF48051           MOV      R1,#+4096
   \   000000EC   0180               STRH     R1,[R0, #+0]
    493            
    494            return SCSI_ProcessRead(lun);
   \   000000EE   2000               MOVS     R0,R4
   \   000000F0   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F2   ........           BL       SCSI_ProcessRead
   \                     ??SCSI_Read10_2:
   \   000000F6   32BD               POP      {R1,R4,R5,PC}    ;; return
    495          }
    496          
    497          /**
    498          * @brief  SCSI_Write10
    499          *         Process Write10 command
    500          * @param  lun: Logical unit number
    501          * @param  params: Command parameters
    502          * @retval status
    503          */
    504          

   \                                 In section .text, align 2, keep-with-next
    505          static int8_t SCSI_Write10 (uint8_t lun , uint8_t *params)
    506          {
   \                     SCSI_Write10:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
    507            if (MSC_BOT_State == BOT_IDLE) /* Idle */
   \   00000006   ....               LDR.N    R0,??DataTable15_13
   \   00000008   0078               LDRB     R0,[R0, #+0]
   \   0000000A   0028               CMP      R0,#+0
   \   0000000C   40F08280           BNE.W    ??SCSI_Write10_0
    508            {
    509              
    510              /* case 8 : Hi <> Do */
    511              
    512              if ((MSC_BOT_cbw.bmFlags & 0x80) == 0x80)
   \   00000010   ....               LDR.N    R0,??DataTable15_1
   \   00000012   007B               LDRB     R0,[R0, #+12]
   \   00000014   0006               LSLS     R0,R0,#+24
   \   00000016   08D5               BPL.N    ??SCSI_Write10_1
    513              {
    514                SCSI_SenseCode(MSC_BOT_cbw.bLUN, 
    515                               ILLEGAL_REQUEST, 
    516                               INVALID_CDB);
   \   00000018   2022               MOVS     R2,#+32
   \   0000001A   0521               MOVS     R1,#+5
   \   0000001C   ....               LDR.N    R0,??DataTable15_1
   \   0000001E   407B               LDRB     R0,[R0, #+13]
   \   00000020   ........           BL       SCSI_SenseCode
    517                return -1;
   \   00000024   5FF0FF30           MOVS     R0,#-1
   \   00000028   78E0               B.N      ??SCSI_Write10_2
    518              }
    519              
    520              /* Check whether Media is ready */
    521              if(USBD_STORAGE_fops->IsReady(lun) !=0 )
   \                     ??SCSI_Write10_1:
   \   0000002A   2000               MOVS     R0,R4
   \   0000002C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   ....               LDR.N    R1,??DataTable15_2
   \   00000030   0968               LDR      R1,[R1, #+0]
   \   00000032   8968               LDR      R1,[R1, #+8]
   \   00000034   8847               BLX      R1
   \   00000036   0028               CMP      R0,#+0
   \   00000038   08D0               BEQ.N    ??SCSI_Write10_3
    522              {
    523                SCSI_SenseCode(lun,
    524                               NOT_READY, 
    525                               MEDIUM_NOT_PRESENT);
   \   0000003A   3A22               MOVS     R2,#+58
   \   0000003C   0221               MOVS     R1,#+2
   \   0000003E   2000               MOVS     R0,R4
   \   00000040   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000042   ........           BL       SCSI_SenseCode
    526                return -1;
   \   00000046   5FF0FF30           MOVS     R0,#-1
   \   0000004A   67E0               B.N      ??SCSI_Write10_2
    527              } 
    528              
    529              /* Check If media is write-protected */
    530              if(USBD_STORAGE_fops->IsWriteProtected(lun) !=0 )
   \                     ??SCSI_Write10_3:
   \   0000004C   2000               MOVS     R0,R4
   \   0000004E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   ....               LDR.N    R1,??DataTable15_2
   \   00000052   0968               LDR      R1,[R1, #+0]
   \   00000054   C968               LDR      R1,[R1, #+12]
   \   00000056   8847               BLX      R1
   \   00000058   0028               CMP      R0,#+0
   \   0000005A   08D0               BEQ.N    ??SCSI_Write10_4
    531              {
    532                SCSI_SenseCode(lun,
    533                               NOT_READY, 
    534                               WRITE_PROTECTED);
   \   0000005C   2722               MOVS     R2,#+39
   \   0000005E   0221               MOVS     R1,#+2
   \   00000060   2000               MOVS     R0,R4
   \   00000062   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   ........           BL       SCSI_SenseCode
    535                return -1;
   \   00000068   5FF0FF30           MOVS     R0,#-1
   \   0000006C   56E0               B.N      ??SCSI_Write10_2
    536              } 
    537              
    538              
    539              SCSI_blk_addr = (params[2] << 24) | \
    540                (params[3] << 16) | \
    541                  (params[4] <<  8) | \
    542                    params[5];
   \                     ??SCSI_Write10_4:
   \   0000006E   A878               LDRB     R0,[R5, #+2]
   \   00000070   E978               LDRB     R1,[R5, #+3]
   \   00000072   0904               LSLS     R1,R1,#+16
   \   00000074   51EA0060           ORRS     R0,R1,R0, LSL #+24
   \   00000078   2979               LDRB     R1,[R5, #+4]
   \   0000007A   50EA0120           ORRS     R0,R0,R1, LSL #+8
   \   0000007E   6979               LDRB     R1,[R5, #+5]
   \   00000080   0843               ORRS     R0,R1,R0
   \   00000082   ....               LDR.N    R1,??DataTable15_14
   \   00000084   0860               STR      R0,[R1, #+0]
    543              SCSI_blk_len = (params[7] <<  8) | \
    544                params[8];  
   \   00000086   E879               LDRB     R0,[R5, #+7]
   \   00000088   297A               LDRB     R1,[R5, #+8]
   \   0000008A   51EA0020           ORRS     R0,R1,R0, LSL #+8
   \   0000008E   ....               LDR.N    R1,??DataTable15_15
   \   00000090   0860               STR      R0,[R1, #+0]
    545              
    546              /* check if LBA address is in the right range */
    547              if(SCSI_CheckAddressRange(lun, SCSI_blk_addr, SCSI_blk_len) < 0)
   \   00000092   ....               LDR.N    R0,??DataTable15_15
   \   00000094   0268               LDR      R2,[R0, #+0]
   \   00000096   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000098   ....               LDR.N    R0,??DataTable15_14
   \   0000009A   0168               LDR      R1,[R0, #+0]
   \   0000009C   2000               MOVS     R0,R4
   \   0000009E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A0   ........           BL       SCSI_CheckAddressRange
   \   000000A4   0028               CMP      R0,#+0
   \   000000A6   02D5               BPL.N    ??SCSI_Write10_5
    548              {
    549                return -1; /* error */      
   \   000000A8   5FF0FF30           MOVS     R0,#-1
   \   000000AC   36E0               B.N      ??SCSI_Write10_2
    550              }
    551              
    552              SCSI_blk_addr *= SCSI_blk_size;
   \                     ??SCSI_Write10_5:
   \   000000AE   ....               LDR.N    R0,??DataTable15_14
   \   000000B0   0068               LDR      R0,[R0, #+0]
   \   000000B2   ....               LDR.N    R1,??DataTable15_6
   \   000000B4   0968               LDR      R1,[R1, #+0]
   \   000000B6   4843               MULS     R0,R1,R0
   \   000000B8   ....               LDR.N    R1,??DataTable15_14
   \   000000BA   0860               STR      R0,[R1, #+0]
    553              SCSI_blk_len  *= SCSI_blk_size;
   \   000000BC   ....               LDR.N    R0,??DataTable15_15
   \   000000BE   0068               LDR      R0,[R0, #+0]
   \   000000C0   ....               LDR.N    R1,??DataTable15_6
   \   000000C2   0968               LDR      R1,[R1, #+0]
   \   000000C4   4843               MULS     R0,R1,R0
   \   000000C6   ....               LDR.N    R1,??DataTable15_15
   \   000000C8   0860               STR      R0,[R1, #+0]
    554              
    555              /* cases 3,11,13 : Hn,Ho <> D0 */
    556              if (MSC_BOT_cbw.dDataLength != SCSI_blk_len)
   \   000000CA   ....               LDR.N    R0,??DataTable15_1
   \   000000CC   8068               LDR      R0,[R0, #+8]
   \   000000CE   ....               LDR.N    R1,??DataTable15_15
   \   000000D0   0968               LDR      R1,[R1, #+0]
   \   000000D2   8842               CMP      R0,R1
   \   000000D4   08D0               BEQ.N    ??SCSI_Write10_6
    557              {
    558                SCSI_SenseCode(MSC_BOT_cbw.bLUN, 
    559                               ILLEGAL_REQUEST, 
    560                               INVALID_CDB);
   \   000000D6   2022               MOVS     R2,#+32
   \   000000D8   0521               MOVS     R1,#+5
   \   000000DA   ....               LDR.N    R0,??DataTable15_1
   \   000000DC   407B               LDRB     R0,[R0, #+13]
   \   000000DE   ........           BL       SCSI_SenseCode
    561                return -1;
   \   000000E2   5FF0FF30           MOVS     R0,#-1
   \   000000E6   19E0               B.N      ??SCSI_Write10_2
    562              }
    563              
    564              /* Prepare EP to receive first data packet */
    565              MSC_BOT_State = BOT_DATA_OUT;  
   \                     ??SCSI_Write10_6:
   \   000000E8   ....               LDR.N    R0,??DataTable15_13
   \   000000EA   0121               MOVS     R1,#+1
   \   000000EC   0170               STRB     R1,[R0, #+0]
    566              DCD_EP_PrepareRx (cdev,
    567                                MSC_OUT_EP,
    568                                MSC_BOT_Data, 
    569                                MIN (SCSI_blk_len, MSC_MEDIA_PACKET));  
   \   000000EE   ....               LDR.N    R0,??DataTable15_15
   \   000000F0   0068               LDR      R0,[R0, #+0]
   \   000000F2   B0F5805F           CMP      R0,#+4096
   \   000000F6   02D2               BCS.N    ??SCSI_Write10_7
   \   000000F8   ....               LDR.N    R0,??DataTable15_15
   \   000000FA   0368               LDR      R3,[R0, #+0]
   \   000000FC   01E0               B.N      ??SCSI_Write10_8
   \                     ??SCSI_Write10_7:
   \   000000FE   4FF48053           MOV      R3,#+4096
   \                     ??SCSI_Write10_8:
   \   00000102   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000104   ....               LDR.N    R2,??DataTable15_5
   \   00000106   0121               MOVS     R1,#+1
   \   00000108   ....               LDR.N    R0,??DataTable15
   \   0000010A   0068               LDR      R0,[R0, #+0]
   \   0000010C   ........           BL       DCD_EP_PrepareRx
    570            }
    571            else /* Write Process ongoing */
    572            {
    573              return SCSI_ProcessWrite(lun);
    574            }
    575            return 0;
   \   00000110   0020               MOVS     R0,#+0
   \   00000112   03E0               B.N      ??SCSI_Write10_2
   \                     ??SCSI_Write10_0:
   \   00000114   2000               MOVS     R0,R4
   \   00000116   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000118   ........           BL       SCSI_ProcessWrite
   \                     ??SCSI_Write10_2:
   \   0000011C   32BD               POP      {R1,R4,R5,PC}    ;; return
    576          }
    577          
    578          
    579          /**
    580          * @brief  SCSI_Verify10
    581          *         Process Verify10 command
    582          * @param  lun: Logical unit number
    583          * @param  params: Command parameters
    584          * @retval status
    585          */
    586          

   \                                 In section .text, align 2, keep-with-next
    587          static int8_t SCSI_Verify10(uint8_t lun , uint8_t *params){
   \                     SCSI_Verify10:
   \   00000000   80B5               PUSH     {R7,LR}
    588            if ((params[1]& 0x02) == 0x02) 
   \   00000002   4978               LDRB     R1,[R1, #+1]
   \   00000004   8907               LSLS     R1,R1,#+30
   \   00000006   07D5               BPL.N    ??SCSI_Verify10_0
    589            {
    590              SCSI_SenseCode (lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
   \   00000008   2422               MOVS     R2,#+36
   \   0000000A   0521               MOVS     R1,#+5
   \   0000000C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   ........           BL       SCSI_SenseCode
    591              return -1; /* Error, Verify Mode Not supported*/
   \   00000012   5FF0FF30           MOVS     R0,#-1
   \   00000016   10E0               B.N      ??SCSI_Verify10_1
    592            }
    593            
    594            if(SCSI_CheckAddressRange(lun, SCSI_blk_addr, SCSI_blk_len) < 0)
   \                     ??SCSI_Verify10_0:
   \   00000018   ....               LDR.N    R1,??DataTable15_15
   \   0000001A   0A68               LDR      R2,[R1, #+0]
   \   0000001C   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001E   ....               LDR.N    R1,??DataTable15_14
   \   00000020   0968               LDR      R1,[R1, #+0]
   \   00000022   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   ........           BL       SCSI_CheckAddressRange
   \   00000028   0028               CMP      R0,#+0
   \   0000002A   02D5               BPL.N    ??SCSI_Verify10_2
    595            {
    596              return -1; /* error */      
   \   0000002C   5FF0FF30           MOVS     R0,#-1
   \   00000030   03E0               B.N      ??SCSI_Verify10_1
    597            }
    598            MSC_BOT_DataLen = 0;
   \                     ??SCSI_Verify10_2:
   \   00000032   ....               LDR.N    R0,??DataTable15_3
   \   00000034   0021               MOVS     R1,#+0
   \   00000036   0180               STRH     R1,[R0, #+0]
    599            return 0;
   \   00000038   0020               MOVS     R0,#+0
   \                     ??SCSI_Verify10_1:
   \   0000003A   02BD               POP      {R1,PC}          ;; return
    600          }
    601          
    602          /**
    603          * @brief  SCSI_CheckAddressRange
    604          *         Check address range
    605          * @param  lun: Logical unit number
    606          * @param  blk_offset: first block address
    607          * @param  blk_nbr: number of block to be processed
    608          * @retval status
    609          */

   \                                 In section .text, align 2, keep-with-next
    610          static int8_t SCSI_CheckAddressRange (uint8_t lun , uint32_t blk_offset , uint16_t blk_nbr)
    611          {
   \                     SCSI_CheckAddressRange:
   \   00000000   80B5               PUSH     {R7,LR}
    612            
    613            if ((blk_offset + blk_nbr) > SCSI_blk_nbr )
   \   00000002   ....               LDR.N    R3,??DataTable15_7
   \   00000004   1B68               LDR      R3,[R3, #+0]
   \   00000006   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000008   5118               ADDS     R1,R2,R1
   \   0000000A   8B42               CMP      R3,R1
   \   0000000C   07D2               BCS.N    ??SCSI_CheckAddressRange_0
    614            {
    615              SCSI_SenseCode(lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
   \   0000000E   2122               MOVS     R2,#+33
   \   00000010   0521               MOVS     R1,#+5
   \   00000012   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   ........           BL       SCSI_SenseCode
    616              return -1;
   \   00000018   5FF0FF30           MOVS     R0,#-1
   \   0000001C   00E0               B.N      ??SCSI_CheckAddressRange_1
    617            }
    618            return 0;
   \                     ??SCSI_CheckAddressRange_0:
   \   0000001E   0020               MOVS     R0,#+0
   \                     ??SCSI_CheckAddressRange_1:
   \   00000020   02BD               POP      {R1,PC}          ;; return
    619          }
    620          
    621          /**
    622          * @brief  SCSI_ProcessRead
    623          *         Handle Read Process
    624          * @param  lun: Logical unit number
    625          * @retval status
    626          */

   \                                 In section .text, align 2, keep-with-next
    627          static int8_t SCSI_ProcessRead (uint8_t lun)
    628          {
   \                     SCSI_ProcessRead:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
    629            uint32_t len;
    630            
    631            len = MIN(SCSI_blk_len , MSC_MEDIA_PACKET); 
   \   00000004   ....               LDR.N    R0,??DataTable15_15
   \   00000006   0068               LDR      R0,[R0, #+0]
   \   00000008   B0F5805F           CMP      R0,#+4096
   \   0000000C   02D2               BCS.N    ??SCSI_ProcessRead_0
   \   0000000E   ....               LDR.N    R0,??DataTable15_15
   \   00000010   0568               LDR      R5,[R0, #+0]
   \   00000012   01E0               B.N      ??SCSI_ProcessRead_1
   \                     ??SCSI_ProcessRead_0:
   \   00000014   4FF48055           MOV      R5,#+4096
    632            
    633            if( USBD_STORAGE_fops->Read(lun ,
    634                                        MSC_BOT_Data, 
    635                                        SCSI_blk_addr / SCSI_blk_size, 
    636                                        len / SCSI_blk_size) < 0)
   \                     ??SCSI_ProcessRead_1:
   \   00000018   ....               LDR.N    R0,??DataTable15_6
   \   0000001A   0068               LDR      R0,[R0, #+0]
   \   0000001C   B5FBF0F3           UDIV     R3,R5,R0
   \   00000020   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000022   ....               LDR.N    R0,??DataTable15_14
   \   00000024   0068               LDR      R0,[R0, #+0]
   \   00000026   ....               LDR.N    R1,??DataTable15_6
   \   00000028   0968               LDR      R1,[R1, #+0]
   \   0000002A   B0FBF1F2           UDIV     R2,R0,R1
   \   0000002E   ....               LDR.N    R1,??DataTable15_5
   \   00000030   2000               MOVS     R0,R4
   \   00000032   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   ....               LDR.N    R6,??DataTable15_2
   \   00000036   3668               LDR      R6,[R6, #+0]
   \   00000038   3669               LDR      R6,[R6, #+16]
   \   0000003A   B047               BLX      R6
   \   0000003C   0028               CMP      R0,#+0
   \   0000003E   08D5               BPL.N    ??SCSI_ProcessRead_2
    637            {
    638              
    639              SCSI_SenseCode(lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
   \   00000040   1122               MOVS     R2,#+17
   \   00000042   0421               MOVS     R1,#+4
   \   00000044   2000               MOVS     R0,R4
   \   00000046   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   ........           BL       SCSI_SenseCode
    640              return -1; 
   \   0000004C   5FF0FF30           MOVS     R0,#-1
   \   00000050   1DE0               B.N      ??SCSI_ProcessRead_3
    641            }
    642            
    643            
    644            DCD_EP_Tx (cdev, 
    645                       MSC_IN_EP,
    646                       MSC_BOT_Data,
    647                       len);
   \                     ??SCSI_ProcessRead_2:
   \   00000052   2B00               MOVS     R3,R5
   \   00000054   ....               LDR.N    R2,??DataTable15_5
   \   00000056   8121               MOVS     R1,#+129
   \   00000058   ....               LDR.N    R0,??DataTable15
   \   0000005A   0068               LDR      R0,[R0, #+0]
   \   0000005C   ........           BL       DCD_EP_Tx
    648            
    649            
    650            SCSI_blk_addr   += len; 
   \   00000060   ....               LDR.N    R0,??DataTable15_14
   \   00000062   0068               LDR      R0,[R0, #+0]
   \   00000064   2818               ADDS     R0,R5,R0
   \   00000066   ....               LDR.N    R1,??DataTable15_14
   \   00000068   0860               STR      R0,[R1, #+0]
    651            SCSI_blk_len    -= len;  
   \   0000006A   ....               LDR.N    R0,??DataTable15_15
   \   0000006C   0068               LDR      R0,[R0, #+0]
   \   0000006E   401B               SUBS     R0,R0,R5
   \   00000070   ....               LDR.N    R1,??DataTable15_15
   \   00000072   0860               STR      R0,[R1, #+0]
    652            
    653            /* case 6 : Hi = Di */
    654            MSC_BOT_csw.dDataResidue -= len;
   \   00000074   ....               LDR.N    R0,??DataTable15_16
   \   00000076   8068               LDR      R0,[R0, #+8]
   \   00000078   401B               SUBS     R0,R0,R5
   \   0000007A   ....               LDR.N    R1,??DataTable15_16
   \   0000007C   8860               STR      R0,[R1, #+8]
    655            
    656            if (SCSI_blk_len == 0)
   \   0000007E   ....               LDR.N    R0,??DataTable15_15
   \   00000080   0068               LDR      R0,[R0, #+0]
   \   00000082   0028               CMP      R0,#+0
   \   00000084   02D1               BNE.N    ??SCSI_ProcessRead_4
    657            {
    658              MSC_BOT_State = BOT_LAST_DATA_IN;
   \   00000086   ....               LDR.N    R0,??DataTable15_13
   \   00000088   0321               MOVS     R1,#+3
   \   0000008A   0170               STRB     R1,[R0, #+0]
    659            }
    660            return 0;
   \                     ??SCSI_ProcessRead_4:
   \   0000008C   0020               MOVS     R0,#+0
   \                     ??SCSI_ProcessRead_3:
   \   0000008E   70BD               POP      {R4-R6,PC}       ;; return
    661          }
    662          
    663          /**
    664          * @brief  SCSI_ProcessWrite
    665          *         Handle Write Process
    666          * @param  lun: Logical unit number
    667          * @retval status
    668          */
    669          

   \                                 In section .text, align 2, keep-with-next
    670          static int8_t SCSI_ProcessWrite (uint8_t lun)
    671          {
   \                     SCSI_ProcessWrite:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
    672            uint32_t len;
    673            
    674            len = MIN(SCSI_blk_len , MSC_MEDIA_PACKET); 
   \   00000004   ....               LDR.N    R0,??DataTable15_15
   \   00000006   0068               LDR      R0,[R0, #+0]
   \   00000008   B0F5805F           CMP      R0,#+4096
   \   0000000C   02D2               BCS.N    ??SCSI_ProcessWrite_0
   \   0000000E   ....               LDR.N    R0,??DataTable15_15
   \   00000010   0568               LDR      R5,[R0, #+0]
   \   00000012   01E0               B.N      ??SCSI_ProcessWrite_1
   \                     ??SCSI_ProcessWrite_0:
   \   00000014   4FF48055           MOV      R5,#+4096
    675            
    676            if(USBD_STORAGE_fops->Write(lun ,
    677                                        MSC_BOT_Data, 
    678                                        SCSI_blk_addr / SCSI_blk_size, 
    679                                        len / SCSI_blk_size) < 0)
   \                     ??SCSI_ProcessWrite_1:
   \   00000018   ....               LDR.N    R0,??DataTable15_6
   \   0000001A   0068               LDR      R0,[R0, #+0]
   \   0000001C   B5FBF0F3           UDIV     R3,R5,R0
   \   00000020   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000022   ....               LDR.N    R0,??DataTable15_14
   \   00000024   0068               LDR      R0,[R0, #+0]
   \   00000026   ....               LDR.N    R1,??DataTable15_6
   \   00000028   0968               LDR      R1,[R1, #+0]
   \   0000002A   B0FBF1F2           UDIV     R2,R0,R1
   \   0000002E   ....               LDR.N    R1,??DataTable15_5
   \   00000030   2000               MOVS     R0,R4
   \   00000032   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   ....               LDR.N    R6,??DataTable15_2
   \   00000036   3668               LDR      R6,[R6, #+0]
   \   00000038   7669               LDR      R6,[R6, #+20]
   \   0000003A   B047               BLX      R6
   \   0000003C   0028               CMP      R0,#+0
   \   0000003E   08D5               BPL.N    ??SCSI_ProcessWrite_2
    680            {
    681              SCSI_SenseCode(lun, HARDWARE_ERROR, WRITE_FAULT);     
   \   00000040   0322               MOVS     R2,#+3
   \   00000042   0421               MOVS     R1,#+4
   \   00000044   2000               MOVS     R0,R4
   \   00000046   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   ........           BL       SCSI_SenseCode
    682              return -1; 
   \   0000004C   5FF0FF30           MOVS     R0,#-1
   \   00000050   2AE0               B.N      ??SCSI_ProcessWrite_3
    683            }
    684            
    685            
    686            SCSI_blk_addr  += len; 
   \                     ??SCSI_ProcessWrite_2:
   \   00000052   ....               LDR.N    R0,??DataTable15_14
   \   00000054   0068               LDR      R0,[R0, #+0]
   \   00000056   2818               ADDS     R0,R5,R0
   \   00000058   ....               LDR.N    R1,??DataTable15_14
   \   0000005A   0860               STR      R0,[R1, #+0]
    687            SCSI_blk_len   -= len; 
   \   0000005C   ....               LDR.N    R0,??DataTable15_15
   \   0000005E   0068               LDR      R0,[R0, #+0]
   \   00000060   401B               SUBS     R0,R0,R5
   \   00000062   ....               LDR.N    R1,??DataTable15_15
   \   00000064   0860               STR      R0,[R1, #+0]
    688            
    689            /* case 12 : Ho = Do */
    690            MSC_BOT_csw.dDataResidue -= len;
   \   00000066   ....               LDR.N    R0,??DataTable15_16
   \   00000068   8068               LDR      R0,[R0, #+8]
   \   0000006A   401B               SUBS     R0,R0,R5
   \   0000006C   ....               LDR.N    R1,??DataTable15_16
   \   0000006E   8860               STR      R0,[R1, #+8]
    691            
    692            if (SCSI_blk_len == 0)
   \   00000070   ....               LDR.N    R0,??DataTable15_15
   \   00000072   0068               LDR      R0,[R0, #+0]
   \   00000074   0028               CMP      R0,#+0
   \   00000076   05D1               BNE.N    ??SCSI_ProcessWrite_4
    693            {
    694              MSC_BOT_SendCSW (cdev, CSW_CMD_PASSED);
   \   00000078   0021               MOVS     R1,#+0
   \   0000007A   ....               LDR.N    R0,??DataTable15
   \   0000007C   0068               LDR      R0,[R0, #+0]
   \   0000007E   ........           BL       MSC_BOT_SendCSW
   \   00000082   10E0               B.N      ??SCSI_ProcessWrite_5
    695            }
    696            else
    697            {
    698              /* Prapare EP to Receive next packet */
    699              DCD_EP_PrepareRx (cdev,
    700                                MSC_OUT_EP,
    701                                MSC_BOT_Data, 
    702                                MIN (SCSI_blk_len, MSC_MEDIA_PACKET)); 
   \                     ??SCSI_ProcessWrite_4:
   \   00000084   ....               LDR.N    R0,??DataTable15_15
   \   00000086   0068               LDR      R0,[R0, #+0]
   \   00000088   B0F5805F           CMP      R0,#+4096
   \   0000008C   02D2               BCS.N    ??SCSI_ProcessWrite_6
   \   0000008E   ....               LDR.N    R0,??DataTable15_15
   \   00000090   0368               LDR      R3,[R0, #+0]
   \   00000092   01E0               B.N      ??SCSI_ProcessWrite_7
   \                     ??SCSI_ProcessWrite_6:
   \   00000094   4FF48053           MOV      R3,#+4096
   \                     ??SCSI_ProcessWrite_7:
   \   00000098   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000009A   ....               LDR.N    R2,??DataTable15_5
   \   0000009C   0121               MOVS     R1,#+1
   \   0000009E   ....               LDR.N    R0,??DataTable15
   \   000000A0   0068               LDR      R0,[R0, #+0]
   \   000000A2   ........           BL       DCD_EP_PrepareRx
    703            }
    704            
    705            return 0;
   \                     ??SCSI_ProcessWrite_5:
   \   000000A6   0020               MOVS     R0,#+0
   \                     ??SCSI_ProcessWrite_3:
   \   000000A8   70BD               POP      {R4-R6,PC}       ;; return
    706          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     cdev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   ........           DC32     MSC_BOT_cbw

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   ........           DC32     USBD_STORAGE_fops

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \   00000000   ........           DC32     MSC_BOT_DataLen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_4:
   \   00000000   ........           DC32     MSC_Page00_Inquiry_Data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_5:
   \   00000000   ........           DC32     MSC_BOT_Data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_6:
   \   00000000   ........           DC32     SCSI_blk_size

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_7:
   \   00000000   ........           DC32     SCSI_blk_nbr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_8:
   \   00000000   ........           DC32     MSC_Mode_Sense6_data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_9:
   \   00000000   ........           DC32     MSC_Mode_Sense10_data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_10:
   \   00000000   ........           DC32     SCSI_Sense_Head

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_11:
   \   00000000   ........           DC32     SCSI_Sense_Tail

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_12:
   \   00000000   ........           DC32     SCSI_Sense

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_13:
   \   00000000   ........           DC32     MSC_BOT_State

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_14:
   \   00000000   ........           DC32     SCSI_blk_addr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_15:
   \   00000000   ........           DC32     SCSI_blk_len

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_16:
   \   00000000   ........           DC32     MSC_BOT_csw
    707          /**
    708            * @}
    709            */ 
    710          
    711          
    712          /**
    713            * @}
    714            */ 
    715          
    716          
    717          /**
    718            * @}
    719            */ 
    720          
    721          /******************* (C) COPYRIGHT 2010 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     SCSI_CheckAddressRange       8
     SCSI_Inquiry                 0
     SCSI_ModeSense10             0
     SCSI_ModeSense6              0
     SCSI_ProcessCmd              8
     SCSI_ProcessRead            16
     SCSI_ProcessWrite           16
     SCSI_Read10                 16
     SCSI_ReadCapacity10          8
     SCSI_ReadFormatCapacity     16
     SCSI_RequestSense            0
     SCSI_SenseCode               0
     SCSI_StartStopUnit           0
     SCSI_TestUnitReady           8
     SCSI_Verify10                8
     SCSI_Write10                16


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     SCSI_Sense                32
     SCSI_Sense_Head            1
     SCSI_Sense_Tail            1
     SCSI_blk_size              4
     SCSI_blk_nbr               4
     SCSI_blk_addr              4
     SCSI_blk_len               4
     cdev                       4
     SCSI_ProcessCmd          178
     SCSI_TestUnitReady        82
     SCSI_Inquiry              78
     SCSI_ReadCapacity10      176
     SCSI_ReadFormatCapacity  168
     SCSI_ModeSense6           38
     SCSI_ModeSense10          38
     SCSI_RequestSense        176
     SCSI_SenseCode            68
     SCSI_StartStopUnit        12
     SCSI_Read10              248
     SCSI_Write10             286
     SCSI_Verify10             60
     SCSI_CheckAddressRange    34
     SCSI_ProcessRead         144
     SCSI_ProcessWrite        170
     ??DataTable15              4
     ??DataTable15_1            4
     ??DataTable15_2            4
     ??DataTable15_3            4
     ??DataTable15_4            4
     ??DataTable15_5            4
     ??DataTable15_6            4
     ??DataTable15_7            4
     ??DataTable15_8            4
     ??DataTable15_9            4
     ??DataTable15_10           4
     ??DataTable15_11           4
     ??DataTable15_12           4
     ??DataTable15_13           4
     ??DataTable15_14           4
     ??DataTable15_15           4
     ??DataTable15_16           4

 
    54 bytes in section .bss
 2 024 bytes in section .text
 
 2 024 bytes of CODE memory
    54 bytes of DATA memory

Errors: none
Warnings: none
