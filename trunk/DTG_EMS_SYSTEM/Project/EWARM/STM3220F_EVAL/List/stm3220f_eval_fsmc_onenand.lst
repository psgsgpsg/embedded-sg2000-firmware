###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     09/May/2011  20:41:47 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4 #
#                    \STM32F2xx_StdPeriph_Lib_V0.0.4\Utilities\STM32_EVAL\STM #
#                    3220F_EVAL\stm3220f_eval_fsmc_onenand.c                  #
#    Command line =  "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Utilities\STM32_EVAL\ST #
#                    M3220F_EVAL\stm3220f_eval_fsmc_onenand.c" -D             #
#                    USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM3220F_EVAL   #
#                    -lC "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V #
#                    0.0.4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_S #
#                    tdPeriph_Template\EWARM\STM3220F_EVAL\List\" -lA         #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\STM3220F_EVAL\List\" -o              #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\STM3220F_EVAL\Obj\" --no_cse         #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Full.h" -I "D:\¹¬ÀÛ¾÷\[        #
#                    NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_S #
#                    tdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template #
#                    \EWARM\..\" -I "D:\¹¬ÀÛ¾÷\[ NewDTG                       #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    ..\..\..\Libraries\CMSIS\CM3\CoreSupport\" -I            #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\..\..\..\Libraries\CMSIS\CM3\DeviceS #
#                    upport\ST\STM32F2xx\" -I "D:\¹¬ÀÛ¾÷\[ NewDTG             #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    ..\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\" -I   #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\..\..\..\Utilities\STM32_EVAL\" -I   #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\..\..\..\Utilities\STM32_EVAL\Common #
#                    \" -I "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib #
#                    _V0.0.4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx #
#                    _StdPeriph_Template\EWARM\..\..\..\Utilities\STM32_EVAL\ #
#                    STM3220F_EVAL\" -Ol --use_c++_inline                     #
#    List file    =  D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4 #
#                    \STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPer #
#                    iph_Template\EWARM\STM3220F_EVAL\List\stm3220f_eval_fsmc #
#                    _onenand.lst                                             #
#    Object file  =  D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4 #
#                    \STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPer #
#                    iph_Template\EWARM\STM3220F_EVAL\Obj\stm3220f_eval_fsmc_ #
#                    onenand.o                                                #
#                                                                             #
#                                                                             #
###############################################################################

D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPeriph_Lib_V0.0.4\Utilities\STM32_EVAL\STM3220F_EVAL\stm3220f_eval_fsmc_onenand.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm3220f_eval_fsmc_onenand.c
      4            * @author  MCD Application Team
      5            * @version V4.X.0RC13
      6            * @date    13-January-2011
      7            * @brief   This file provides a set of functions needed to drive the
      8            *          KFG1216U2A/B-DIB6 OneNAND memory mounted on STM3220F-EVAL board RevA.
      9            ******************************************************************************
     10            * @attention
     11            *
     12            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     13            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     14            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     15            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     16            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     17            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     18            *
     19            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     20            ******************************************************************************  
     21            */ 
     22          
     23          /* Includes ------------------------------------------------------------------*/
     24          #include "stm3220f_eval_fsmc_onenand.h"
     25          
     26          /** @addtogroup Utilities
     27            * @{
     28            */
     29            
     30          /** @addtogroup STM32_EVAL
     31            * @{
     32            */ 
     33          
     34          /** @addtogroup STM3220F_EVAL
     35            * @{
     36            */
     37            
     38          /** @addtogroup STM3220F_EVAL_FSMC_ONENAND
     39            * @brief      This file provides a set of functions needed to drive the
     40            *             KFG1216x2A-xxB5 OneNAND memory mounted on STM3220F-EVAL board.
     41            * @{
     42            */ 
     43          
     44          /** @defgroup STM3220F_EVAL_FSMC_ONENAND_Private_Types
     45            * @{
     46            */ 
     47          /**
     48            * @}
     49            */ 
     50          
     51          
     52          /** @defgroup STM3220F_EVAL_FSMC_ONENAND_Private_Defines
     53            * @{
     54            */ 
     55          #define BANK1_ONENAND1_ADDR           ((uint32_t)0x60000000)
     56          #define ONENAND_BOOTPARTITION_ADDR    ((uint32_t)BANK1_ONENAND1_ADDR)
     57          
     58           
     59          /**
     60            * @}
     61            */ 
     62          
     63          /** @defgroup STM3220F_EVAL_FSMC_ONENAND_Private_Macros
     64            * @{
     65            */
     66          #define OneNAND_WRITE(Address, Data)  (*(__IO uint16_t *)(Address) = (Data))
     67            
     68          /**
     69            * @}
     70            */ 
     71            
     72          
     73          /** @defgroup STM3220F_EVAL_FSMC_ONENAND_Private_Variables
     74            * @{
     75            */ 
     76          /**
     77            * @}
     78            */ 
     79          
     80          
     81          /** @defgroup STM3220F_EVAL_FSMC_ONENAND_Private_Function_Prototypes
     82            * @{
     83            */ 
     84          /**
     85            * @}
     86            */ 
     87          
     88          
     89          /** @defgroup STM3220F_EVAL_FSMC_ONENAND_Private_Functions
     90            * @{
     91            */ 
     92          
     93          /**
     94            * @brief  Configures the FSMC and GPIOs to interface with the OneNAND memory.
     95            *         This function must be called before any write/read operation on the 
     96            *         OneNAND.
     97            * @param  None
     98            * @retval None
     99            */

   \                                 In section .text, align 2, keep-with-next
    100          void OneNAND_Init(void)
    101          {
   \                     OneNAND_Init:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   99B0               SUB      SP,SP,#+100
    102            FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
    103            FSMC_NORSRAMTimingInitTypeDef  p;
    104            GPIO_InitTypeDef GPIO_InitStructure;
    105          
    106            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOG | RCC_AHB1Periph_GPIOE |
    107                                   RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOB, ENABLE);
   \   00000004   0121               MOVS     R1,#+1
   \   00000006   7A20               MOVS     R0,#+122
   \   00000008   ........           BL       RCC_AHB1PeriphClockCmd
    108          
    109            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   \   0000000C   0121               MOVS     R1,#+1
   \   0000000E   4FF48040           MOV      R0,#+16384
   \   00000012   ........           BL       RCC_APB2PeriphClockCmd
    110          
    111            RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE); 
   \   00000016   0121               MOVS     R1,#+1
   \   00000018   0120               MOVS     R0,#+1
   \   0000001A   ........           BL       RCC_AHB3PeriphClockCmd
    112            
    113          /*-- GPIO Configuration ------------------------------------------------------*/
    114            /* OneNAND Data lines configuration */
    115            GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC);
   \   0000001E   0C22               MOVS     R2,#+12
   \   00000020   0E21               MOVS     R1,#+14
   \   00000022   ........           LDR.W    R0,??DataTable8  ;; 0x40020c00
   \   00000026   ........           BL       GPIO_PinAFConfig
    116            GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC);
   \   0000002A   0C22               MOVS     R2,#+12
   \   0000002C   0F21               MOVS     R1,#+15
   \   0000002E   ........           LDR.W    R0,??DataTable8  ;; 0x40020c00
   \   00000032   ........           BL       GPIO_PinAFConfig
    117            GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FSMC);
   \   00000036   0C22               MOVS     R2,#+12
   \   00000038   0021               MOVS     R1,#+0
   \   0000003A   ........           LDR.W    R0,??DataTable8  ;; 0x40020c00
   \   0000003E   ........           BL       GPIO_PinAFConfig
    118            GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FSMC);
   \   00000042   0C22               MOVS     R2,#+12
   \   00000044   0121               MOVS     R1,#+1
   \   00000046   ........           LDR.W    R0,??DataTable8  ;; 0x40020c00
   \   0000004A   ........           BL       GPIO_PinAFConfig
    119            GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FSMC);
   \   0000004E   0C22               MOVS     R2,#+12
   \   00000050   0821               MOVS     R1,#+8
   \   00000052   ........           LDR.W    R0,??DataTable8  ;; 0x40020c00
   \   00000056   ........           BL       GPIO_PinAFConfig
    120            GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FSMC);
   \   0000005A   0C22               MOVS     R2,#+12
   \   0000005C   0921               MOVS     R1,#+9
   \   0000005E   ........           LDR.W    R0,??DataTable8  ;; 0x40020c00
   \   00000062   ........           BL       GPIO_PinAFConfig
    121            GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
   \   00000066   0C22               MOVS     R2,#+12
   \   00000068   0A21               MOVS     R1,#+10
   \   0000006A   ........           LDR.W    R0,??DataTable8  ;; 0x40020c00
   \   0000006E   ........           BL       GPIO_PinAFConfig
    122          
    123            GPIO_PinAFConfig(GPIOE, GPIO_PinSource7, GPIO_AF_FSMC);
   \   00000072   0C22               MOVS     R2,#+12
   \   00000074   0721               MOVS     R1,#+7
   \   00000076   ........           LDR.W    R0,??DataTable8_1  ;; 0x40021000
   \   0000007A   ........           BL       GPIO_PinAFConfig
    124            GPIO_PinAFConfig(GPIOE, GPIO_PinSource8, GPIO_AF_FSMC); 
   \   0000007E   0C22               MOVS     R2,#+12
   \   00000080   0821               MOVS     R1,#+8
   \   00000082   ........           LDR.W    R0,??DataTable8_1  ;; 0x40021000
   \   00000086   ........           BL       GPIO_PinAFConfig
    125            GPIO_PinAFConfig(GPIOE, GPIO_PinSource9, GPIO_AF_FSMC);
   \   0000008A   0C22               MOVS     R2,#+12
   \   0000008C   0921               MOVS     R1,#+9
   \   0000008E   ........           LDR.W    R0,??DataTable8_1  ;; 0x40021000
   \   00000092   ........           BL       GPIO_PinAFConfig
    126            GPIO_PinAFConfig(GPIOE, GPIO_PinSource10, GPIO_AF_FSMC);
   \   00000096   0C22               MOVS     R2,#+12
   \   00000098   0A21               MOVS     R1,#+10
   \   0000009A   ........           LDR.W    R0,??DataTable8_1  ;; 0x40021000
   \   0000009E   ........           BL       GPIO_PinAFConfig
    127            GPIO_PinAFConfig(GPIOE, GPIO_PinSource11, GPIO_AF_FSMC);
   \   000000A2   0C22               MOVS     R2,#+12
   \   000000A4   0B21               MOVS     R1,#+11
   \   000000A6   ........           LDR.W    R0,??DataTable8_1  ;; 0x40021000
   \   000000AA   ........           BL       GPIO_PinAFConfig
    128            GPIO_PinAFConfig(GPIOE, GPIO_PinSource12, GPIO_AF_FSMC);
   \   000000AE   0C22               MOVS     R2,#+12
   \   000000B0   0C21               MOVS     R1,#+12
   \   000000B2   ........           LDR.W    R0,??DataTable8_1  ;; 0x40021000
   \   000000B6   ........           BL       GPIO_PinAFConfig
    129            GPIO_PinAFConfig(GPIOE, GPIO_PinSource13, GPIO_AF_FSMC);
   \   000000BA   0C22               MOVS     R2,#+12
   \   000000BC   0D21               MOVS     R1,#+13
   \   000000BE   ........           LDR.W    R0,??DataTable8_1  ;; 0x40021000
   \   000000C2   ........           BL       GPIO_PinAFConfig
    130            GPIO_PinAFConfig(GPIOE, GPIO_PinSource14, GPIO_AF_FSMC);
   \   000000C6   0C22               MOVS     R2,#+12
   \   000000C8   0E21               MOVS     R1,#+14
   \   000000CA   ........           LDR.W    R0,??DataTable8_1  ;; 0x40021000
   \   000000CE   ........           BL       GPIO_PinAFConfig
    131            GPIO_PinAFConfig(GPIOE, GPIO_PinSource15, GPIO_AF_FSMC);
   \   000000D2   0C22               MOVS     R2,#+12
   \   000000D4   0F21               MOVS     R1,#+15
   \   000000D6   ........           LDR.W    R0,??DataTable8_1  ;; 0x40021000
   \   000000DA   ........           BL       GPIO_PinAFConfig
    132          
    133          
    134            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
    135                                          GPIO_Pin_14 | GPIO_Pin_15 |GPIO_Pin_10;
   \   000000DE   4CF20370           MOVW     R0,#+50947
   \   000000E2   0090               STR      R0,[SP, #+0]
    136            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   000000E4   0220               MOVS     R0,#+2
   \   000000E6   8DF80400           STRB     R0,[SP, #+4]
    137            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   \   000000EA   0320               MOVS     R0,#+3
   \   000000EC   8DF80500           STRB     R0,[SP, #+5]
    138            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   000000F0   0020               MOVS     R0,#+0
   \   000000F2   8DF80600           STRB     R0,[SP, #+6]
    139            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
   \   000000F6   0120               MOVS     R0,#+1
   \   000000F8   8DF80700           STRB     R0,[SP, #+7]
    140          
    141            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   000000FC   00A9               ADD      R1,SP,#+0
   \   000000FE   ........           LDR.W    R0,??DataTable8  ;; 0x40020c00
   \   00000102   ........           BL       GPIO_Init
    142           
    143            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
    144                                          GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |GPIO_Pin_15;
   \   00000106   4FF68070           MOVW     R0,#+65408
   \   0000010A   0090               STR      R0,[SP, #+0]
    145          
    146            GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   0000010C   00A9               ADD      R1,SP,#+0
   \   0000010E   ........           LDR.W    R0,??DataTable8_1  ;; 0x40021000
   \   00000112   ........           BL       GPIO_Init
    147          
    148            /* OneNAND Address lines configuration */
    149            GPIO_PinAFConfig(GPIOF,GPIO_PinSource0, GPIO_AF_FSMC);
   \   00000116   0C22               MOVS     R2,#+12
   \   00000118   0021               MOVS     R1,#+0
   \   0000011A   ........           LDR.W    R0,??DataTable8_2  ;; 0x40021400
   \   0000011E   ........           BL       GPIO_PinAFConfig
    150            GPIO_PinAFConfig(GPIOF,GPIO_PinSource1, GPIO_AF_FSMC);
   \   00000122   0C22               MOVS     R2,#+12
   \   00000124   0121               MOVS     R1,#+1
   \   00000126   ........           LDR.W    R0,??DataTable8_2  ;; 0x40021400
   \   0000012A   ........           BL       GPIO_PinAFConfig
    151            GPIO_PinAFConfig(GPIOF,GPIO_PinSource2, GPIO_AF_FSMC);
   \   0000012E   0C22               MOVS     R2,#+12
   \   00000130   0221               MOVS     R1,#+2
   \   00000132   ........           LDR.W    R0,??DataTable8_2  ;; 0x40021400
   \   00000136   ........           BL       GPIO_PinAFConfig
    152            GPIO_PinAFConfig(GPIOF,GPIO_PinSource3, GPIO_AF_FSMC);
   \   0000013A   0C22               MOVS     R2,#+12
   \   0000013C   0321               MOVS     R1,#+3
   \   0000013E   ........           LDR.W    R0,??DataTable8_2  ;; 0x40021400
   \   00000142   ........           BL       GPIO_PinAFConfig
    153            GPIO_PinAFConfig(GPIOF,GPIO_PinSource4, GPIO_AF_FSMC);
   \   00000146   0C22               MOVS     R2,#+12
   \   00000148   0421               MOVS     R1,#+4
   \   0000014A   ........           LDR.W    R0,??DataTable8_2  ;; 0x40021400
   \   0000014E   ........           BL       GPIO_PinAFConfig
    154            GPIO_PinAFConfig(GPIOF,GPIO_PinSource5, GPIO_AF_FSMC);
   \   00000152   0C22               MOVS     R2,#+12
   \   00000154   0521               MOVS     R1,#+5
   \   00000156   ........           LDR.W    R0,??DataTable8_2  ;; 0x40021400
   \   0000015A   ........           BL       GPIO_PinAFConfig
    155          
    156            GPIO_PinAFConfig(GPIOF,GPIO_PinSource12, GPIO_AF_FSMC);
   \   0000015E   0C22               MOVS     R2,#+12
   \   00000160   0C21               MOVS     R1,#+12
   \   00000162   ........           LDR.W    R0,??DataTable8_2  ;; 0x40021400
   \   00000166   ........           BL       GPIO_PinAFConfig
    157            GPIO_PinAFConfig(GPIOF,GPIO_PinSource13, GPIO_AF_FSMC);
   \   0000016A   0C22               MOVS     R2,#+12
   \   0000016C   0D21               MOVS     R1,#+13
   \   0000016E   ........           LDR.W    R0,??DataTable8_2  ;; 0x40021400
   \   00000172   ........           BL       GPIO_PinAFConfig
    158            GPIO_PinAFConfig(GPIOF,GPIO_PinSource14, GPIO_AF_FSMC);
   \   00000176   0C22               MOVS     R2,#+12
   \   00000178   0E21               MOVS     R1,#+14
   \   0000017A   ........           LDR.W    R0,??DataTable8_2  ;; 0x40021400
   \   0000017E   ........           BL       GPIO_PinAFConfig
    159            GPIO_PinAFConfig(GPIOF,GPIO_PinSource15, GPIO_AF_FSMC);
   \   00000182   0C22               MOVS     R2,#+12
   \   00000184   0F21               MOVS     R1,#+15
   \   00000186   ........           LDR.W    R0,??DataTable8_2  ;; 0x40021400
   \   0000018A   ........           BL       GPIO_PinAFConfig
    160          
    161            GPIO_PinAFConfig(GPIOG,GPIO_PinSource0, GPIO_AF_FSMC);
   \   0000018E   0C22               MOVS     R2,#+12
   \   00000190   0021               MOVS     R1,#+0
   \   00000192   ........           LDR.W    R0,??DataTable8_3  ;; 0x40021800
   \   00000196   ........           BL       GPIO_PinAFConfig
    162            GPIO_PinAFConfig(GPIOG,GPIO_PinSource1, GPIO_AF_FSMC);
   \   0000019A   0C22               MOVS     R2,#+12
   \   0000019C   0121               MOVS     R1,#+1
   \   0000019E   ........           LDR.W    R0,??DataTable8_3  ;; 0x40021800
   \   000001A2   ........           BL       GPIO_PinAFConfig
    163            GPIO_PinAFConfig(GPIOG,GPIO_PinSource2, GPIO_AF_FSMC);
   \   000001A6   0C22               MOVS     R2,#+12
   \   000001A8   0221               MOVS     R1,#+2
   \   000001AA   ........           LDR.W    R0,??DataTable8_3  ;; 0x40021800
   \   000001AE   ........           BL       GPIO_PinAFConfig
    164            GPIO_PinAFConfig(GPIOG,GPIO_PinSource3, GPIO_AF_FSMC);
   \   000001B2   0C22               MOVS     R2,#+12
   \   000001B4   0321               MOVS     R1,#+3
   \   000001B6   ........           LDR.W    R0,??DataTable8_3  ;; 0x40021800
   \   000001BA   ........           BL       GPIO_PinAFConfig
    165            GPIO_PinAFConfig(GPIOG,GPIO_PinSource4, GPIO_AF_FSMC);
   \   000001BE   0C22               MOVS     R2,#+12
   \   000001C0   0421               MOVS     R1,#+4
   \   000001C2   ........           LDR.W    R0,??DataTable8_3  ;; 0x40021800
   \   000001C6   ........           BL       GPIO_PinAFConfig
    166            GPIO_PinAFConfig(GPIOG,GPIO_PinSource5, GPIO_AF_FSMC);
   \   000001CA   0C22               MOVS     R2,#+12
   \   000001CC   0521               MOVS     R1,#+5
   \   000001CE   ........           LDR.W    R0,??DataTable8_3  ;; 0x40021800
   \   000001D2   ........           BL       GPIO_PinAFConfig
    167          
    168            GPIO_PinAFConfig(GPIOD,GPIO_PinSource11, GPIO_AF_FSMC);
   \   000001D6   0C22               MOVS     R2,#+12
   \   000001D8   0B21               MOVS     R1,#+11
   \   000001DA   ........           LDR.W    R0,??DataTable8  ;; 0x40020c00
   \   000001DE   ........           BL       GPIO_PinAFConfig
    169            GPIO_PinAFConfig(GPIOD,GPIO_PinSource12, GPIO_AF_FSMC);
   \   000001E2   0C22               MOVS     R2,#+12
   \   000001E4   0C21               MOVS     R1,#+12
   \   000001E6   ........           LDR.W    R0,??DataTable8  ;; 0x40020c00
   \   000001EA   ........           BL       GPIO_PinAFConfig
    170            GPIO_PinAFConfig(GPIOD,GPIO_PinSource13, GPIO_AF_FSMC);
   \   000001EE   0C22               MOVS     R2,#+12
   \   000001F0   0D21               MOVS     R1,#+13
   \   000001F2   ........           LDR.W    R0,??DataTable8  ;; 0x40020c00
   \   000001F6   ........           BL       GPIO_PinAFConfig
    171          
    172            GPIO_PinAFConfig(GPIOE,GPIO_PinSource3, GPIO_AF_FSMC);
   \   000001FA   0C22               MOVS     R2,#+12
   \   000001FC   0321               MOVS     R1,#+3
   \   000001FE   ........           LDR.W    R0,??DataTable8_1  ;; 0x40021000
   \   00000202   ........           BL       GPIO_PinAFConfig
    173            GPIO_PinAFConfig(GPIOE,GPIO_PinSource4, GPIO_AF_FSMC);
   \   00000206   0C22               MOVS     R2,#+12
   \   00000208   0421               MOVS     R1,#+4
   \   0000020A   ........           LDR.W    R0,??DataTable8_1  ;; 0x40021000
   \   0000020E   ........           BL       GPIO_PinAFConfig
    174            GPIO_PinAFConfig(GPIOE,GPIO_PinSource5, GPIO_AF_FSMC);
   \   00000212   0C22               MOVS     R2,#+12
   \   00000214   0521               MOVS     R1,#+5
   \   00000216   ........           LDR.W    R0,??DataTable8_1  ;; 0x40021000
   \   0000021A   ........           BL       GPIO_PinAFConfig
    175            GPIO_PinAFConfig(GPIOE,GPIO_PinSource6, GPIO_AF_FSMC);
   \   0000021E   0C22               MOVS     R2,#+12
   \   00000220   0621               MOVS     R1,#+6
   \   00000222   ........           LDR.W    R0,??DataTable8_1  ;; 0x40021000
   \   00000226   ........           BL       GPIO_PinAFConfig
    176            GPIO_PinAFConfig(GPIOE,GPIO_PinSource2, GPIO_AF_FSMC);
   \   0000022A   0C22               MOVS     R2,#+12
   \   0000022C   0221               MOVS     R1,#+2
   \   0000022E   ........           LDR.W    R0,??DataTable8_1  ;; 0x40021000
   \   00000232   ........           BL       GPIO_PinAFConfig
    177          
    178            GPIO_PinAFConfig(GPIOG,GPIO_PinSource13, GPIO_AF_FSMC);
   \   00000236   0C22               MOVS     R2,#+12
   \   00000238   0D21               MOVS     R1,#+13
   \   0000023A   ........           LDR.W    R0,??DataTable8_3  ;; 0x40021800
   \   0000023E   ........           BL       GPIO_PinAFConfig
    179            GPIO_PinAFConfig(GPIOG,GPIO_PinSource14, GPIO_AF_FSMC);
   \   00000242   0C22               MOVS     R2,#+12
   \   00000244   0E21               MOVS     R1,#+14
   \   00000246   ........           LDR.W    R0,??DataTable8_3  ;; 0x40021800
   \   0000024A   ........           BL       GPIO_PinAFConfig
    180          
    181            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
    182                                          GPIO_Pin_4 | GPIO_Pin_5 |GPIO_Pin_12 | GPIO_Pin_13 |
    183                                          GPIO_Pin_14 | GPIO_Pin_15;
   \   0000024E   4FF23F00           MOVW     R0,#+61503
   \   00000252   0090               STR      R0,[SP, #+0]
    184          
    185            GPIO_Init(GPIOF, &GPIO_InitStructure);
   \   00000254   00A9               ADD      R1,SP,#+0
   \   00000256   ........           LDR.W    R0,??DataTable8_2  ;; 0x40021400
   \   0000025A   ........           BL       GPIO_Init
    186          
    187            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
    188                                          GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_13 |	GPIO_Pin_14;
   \   0000025E   46F23F00           MOVW     R0,#+24639
   \   00000262   0090               STR      R0,[SP, #+0]
    189          
    190            GPIO_Init(GPIOG, &GPIO_InitStructure);
   \   00000264   00A9               ADD      R1,SP,#+0
   \   00000266   ........           LDR.W    R0,??DataTable8_3  ;; 0x40021800
   \   0000026A   ........           BL       GPIO_Init
    191          
    192            
    193            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13; 
   \   0000026E   4FF46050           MOV      R0,#+14336
   \   00000272   0090               STR      R0,[SP, #+0]
    194          
    195            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   00000274   00A9               ADD      R1,SP,#+0
   \   00000276   ....               LDR.N    R0,??DataTable8  ;; 0x40020c00
   \   00000278   ........           BL       GPIO_Init
    196          
    197            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4| GPIO_Pin_5 | GPIO_Pin_6; 
   \   0000027C   7C20               MOVS     R0,#+124
   \   0000027E   0090               STR      R0,[SP, #+0]
    198          
    199            GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   00000280   00A9               ADD      R1,SP,#+0
   \   00000282   ....               LDR.N    R0,??DataTable8_1  ;; 0x40021000
   \   00000284   ........           BL       GPIO_Init
    200          
    201          
    202            /* NOE, NWE and CLK configuration */  
    203            GPIO_PinAFConfig(GPIOD,GPIO_PinSource3, GPIO_AF_FSMC);
   \   00000288   0C22               MOVS     R2,#+12
   \   0000028A   0321               MOVS     R1,#+3
   \   0000028C   ....               LDR.N    R0,??DataTable8  ;; 0x40020c00
   \   0000028E   ........           BL       GPIO_PinAFConfig
    204            GPIO_PinAFConfig(GPIOD,GPIO_PinSource4, GPIO_AF_FSMC);
   \   00000292   0C22               MOVS     R2,#+12
   \   00000294   0421               MOVS     R1,#+4
   \   00000296   ....               LDR.N    R0,??DataTable8  ;; 0x40020c00
   \   00000298   ........           BL       GPIO_PinAFConfig
    205            GPIO_PinAFConfig(GPIOD,GPIO_PinSource5, GPIO_AF_FSMC);
   \   0000029C   0C22               MOVS     R2,#+12
   \   0000029E   0521               MOVS     R1,#+5
   \   000002A0   ....               LDR.N    R0,??DataTable8  ;; 0x40020c00
   \   000002A2   ........           BL       GPIO_PinAFConfig
    206          
    207            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 |GPIO_Pin_5 | GPIO_Pin_3;
   \   000002A6   3820               MOVS     R0,#+56
   \   000002A8   0090               STR      R0,[SP, #+0]
    208          
    209            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   000002AA   00A9               ADD      R1,SP,#+0
   \   000002AC   ....               LDR.N    R0,??DataTable8  ;; 0x40020c00
   \   000002AE   ........           BL       GPIO_Init
    210          
    211          
    212            /* NE1 configuration */
    213            GPIO_PinAFConfig(GPIOD, GPIO_PinSource7, GPIO_AF_FSMC);
   \   000002B2   0C22               MOVS     R2,#+12
   \   000002B4   0721               MOVS     R1,#+7
   \   000002B6   ....               LDR.N    R0,??DataTable8  ;; 0x40020c00
   \   000002B8   ........           BL       GPIO_PinAFConfig
    214            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7; 
   \   000002BC   8020               MOVS     R0,#+128
   \   000002BE   0090               STR      R0,[SP, #+0]
    215          
    216            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   000002C0   00A9               ADD      R1,SP,#+0
   \   000002C2   ....               LDR.N    R0,??DataTable8  ;; 0x40020c00
   \   000002C4   ........           BL       GPIO_Init
    217          
    218            /* NL configuration */
    219            GPIO_PinAFConfig(GPIOB,GPIO_PinSource7, GPIO_AF_FSMC);
   \   000002C8   0C22               MOVS     R2,#+12
   \   000002CA   0721               MOVS     R1,#+7
   \   000002CC   ....               LDR.N    R0,??DataTable8_4  ;; 0x40020400
   \   000002CE   ........           BL       GPIO_PinAFConfig
    220          
    221            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7; 
   \   000002D2   8020               MOVS     R0,#+128
   \   000002D4   0090               STR      R0,[SP, #+0]
    222            GPIO_Init(GPIOB, &GPIO_InitStructure);
   \   000002D6   00A9               ADD      R1,SP,#+0
   \   000002D8   ....               LDR.N    R0,??DataTable8_4  ;; 0x40020400
   \   000002DA   ........           BL       GPIO_Init
    223          
    224            /* NWAIT Configuration */
    225            GPIO_PinAFConfig(GPIOD,GPIO_PinSource6, GPIO_AF_FSMC);
   \   000002DE   0C22               MOVS     R2,#+12
   \   000002E0   0621               MOVS     R1,#+6
   \   000002E2   ....               LDR.N    R0,??DataTable8  ;; 0x40020c00
   \   000002E4   ........           BL       GPIO_PinAFConfig
    226              
    227            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6; 
   \   000002E8   4020               MOVS     R0,#+64
   \   000002EA   0090               STR      R0,[SP, #+0]
    228            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   000002EC   00A9               ADD      R1,SP,#+0
   \   000002EE   ....               LDR.N    R0,??DataTable8  ;; 0x40020c00
   \   000002F0   ........           BL       GPIO_Init
    229          
    230            /*-- FSMC Configuration ----------------------------------------------------*/
    231            p.FSMC_AddressSetupTime = 0x03;
   \   000002F4   0320               MOVS     R0,#+3
   \   000002F6   0290               STR      R0,[SP, #+8]
    232            p.FSMC_AddressHoldTime = 0x00;
   \   000002F8   0020               MOVS     R0,#+0
   \   000002FA   0390               STR      R0,[SP, #+12]
    233            p.FSMC_DataSetupTime = 0x0C;
   \   000002FC   0C20               MOVS     R0,#+12
   \   000002FE   0490               STR      R0,[SP, #+16]
    234            p.FSMC_BusTurnAroundDuration = 0x01;
   \   00000300   0120               MOVS     R0,#+1
   \   00000302   0590               STR      R0,[SP, #+20]
    235            p.FSMC_CLKDivision = 0x2;
   \   00000304   0220               MOVS     R0,#+2
   \   00000306   0690               STR      R0,[SP, #+24]
    236            p.FSMC_DataLatency = 0x00;
   \   00000308   0020               MOVS     R0,#+0
   \   0000030A   0790               STR      R0,[SP, #+28]
    237            p.FSMC_AccessMode = FSMC_AccessMode_B;
   \   0000030C   5FF08050           MOVS     R0,#+268435456
   \   00000310   0890               STR      R0,[SP, #+32]
    238          
    239            FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM1;
   \   00000312   0020               MOVS     R0,#+0
   \   00000314   0990               STR      R0,[SP, #+36]
    240            FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
   \   00000316   0020               MOVS     R0,#+0
   \   00000318   0A90               STR      R0,[SP, #+40]
    241            FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_NOR;
   \   0000031A   0820               MOVS     R0,#+8
   \   0000031C   0B90               STR      R0,[SP, #+44]
    242            FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
   \   0000031E   1020               MOVS     R0,#+16
   \   00000320   0C90               STR      R0,[SP, #+48]
    243            FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Enable;
   \   00000322   4FF48070           MOV      R0,#+256
   \   00000326   0D90               STR      R0,[SP, #+52]
    244            FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;	
   \   00000328   0020               MOVS     R0,#+0
   \   0000032A   0E90               STR      R0,[SP, #+56]
    245            FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
   \   0000032C   0020               MOVS     R0,#+0
   \   0000032E   0F90               STR      R0,[SP, #+60]
    246            FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
   \   00000330   0020               MOVS     R0,#+0
   \   00000332   1090               STR      R0,[SP, #+64]
    247            FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
   \   00000334   0020               MOVS     R0,#+0
   \   00000336   1190               STR      R0,[SP, #+68]
    248            FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
   \   00000338   4FF48050           MOV      R0,#+4096
   \   0000033C   1290               STR      R0,[SP, #+72]
    249            FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
   \   0000033E   0020               MOVS     R0,#+0
   \   00000340   1390               STR      R0,[SP, #+76]
    250            FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
   \   00000342   0020               MOVS     R0,#+0
   \   00000344   1490               STR      R0,[SP, #+80]
    251            FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
   \   00000346   0020               MOVS     R0,#+0
   \   00000348   1590               STR      R0,[SP, #+84]
    252            FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
   \   0000034A   02A8               ADD      R0,SP,#+8
   \   0000034C   1690               STR      R0,[SP, #+88]
    253            FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
   \   0000034E   02A8               ADD      R0,SP,#+8
   \   00000350   1790               STR      R0,[SP, #+92]
    254          
    255            FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);
   \   00000352   09A8               ADD      R0,SP,#+36
   \   00000354   ........           BL       FSMC_NORSRAMInit
    256            FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM1, ENABLE);
   \   00000358   0121               MOVS     R1,#+1
   \   0000035A   0020               MOVS     R0,#+0
   \   0000035C   ........           BL       FSMC_NORSRAMCmd
    257          }
   \   00000360   19B0               ADD      SP,SP,#+100
   \   00000362   00BD               POP      {PC}             ;; return
    258          
    259          /**
    260            * @brief  Resets the OneNAND memory.
    261            * @param  None
    262            * @retval None
    263            */

   \                                 In section .text, align 2, keep-with-next
    264          void OneNAND_Reset(void)
    265          {
    266            OneNAND_WRITE(ONENAND_BOOTPARTITION_ADDR, OneNAND_CMD_RESET);
   \                     OneNAND_Reset:
   \   00000000   5FF0C040           MOVS     R0,#+1610612736
   \   00000004   F021               MOVS     R1,#+240
   \   00000006   0180               STRH     R1,[R0, #+0]
    267          }
   \   00000008   7047               BX       LR               ;; return
    268          
    269          /**
    270            * @brief  Reads OneNAND memory's Manufacturer and Device Code.
    271            * @param  OneNAND_ID: pointer to a OneNAND_IDTypeDef structure which will hold
    272            *         the Manufacturer and Device Code.  
    273            * @retval None
    274            */

   \                                 In section .text, align 2, keep-with-next
    275          void OneNAND_ReadID(OneNAND_IDTypeDef* OneNAND_ID)
    276          {
    277            uint16_t status = 0x0;
   \                     OneNAND_ReadID:
   \   00000000   0021               MOVS     R1,#+0
    278            
    279            /* Wait till no ongoing operation */
    280            status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_CONTROLSTATUS);
   \   00000002   ....               LDR.N    R2,??DataTable8_5  ;; 0x6001e480
   \   00000004   1288               LDRH     R2,[R2, #+0]
   \   00000006   1100               MOVS     R1,R2
   \   00000008   01E0               B.N      ??OneNAND_ReadID_0
    281            
    282            while((status & 0x8000) == 0x8000)
    283            {
    284              status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_CONTROLSTATUS);
   \                     ??OneNAND_ReadID_1:
   \   0000000A   ....               LDR.N    R1,??DataTable8_5  ;; 0x6001e480
   \   0000000C   0988               LDRH     R1,[R1, #+0]
    285            }
   \                     ??OneNAND_ReadID_0:
   \   0000000E   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   0904               LSLS     R1,R1,#+16
   \   00000012   FAD4               BMI.N    ??OneNAND_ReadID_1
    286            
    287            /* Read ID data */
    288            OneNAND_ID->Manufacturer_ID = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_MANUFACTERID);
   \   00000014   ....               LDR.N    R1,??DataTable8_6  ;; 0x6001e000
   \   00000016   0988               LDRH     R1,[R1, #+0]
   \   00000018   0180               STRH     R1,[R0, #+0]
    289            OneNAND_ID->Device_ID = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_DEVICEID);
   \   0000001A   ....               LDR.N    R1,??DataTable8_7  ;; 0x6001e002
   \   0000001C   0988               LDRH     R1,[R1, #+0]
   \   0000001E   4180               STRH     R1,[R0, #+2]
    290          
    291            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_SYSTEMCONFIGURATION) = 0x40E0;
   \   00000020   ....               LDR.N    R0,??DataTable8_8  ;; 0x6001e442
   \   00000022   44F2E001           MOVW     R1,#+16608
   \   00000026   0180               STRH     R1,[R0, #+0]
    292          }
   \   00000028   7047               BX       LR               ;; return
    293          
    294          /**
    295            * @brief  Unlocks the specified OneNAND memory block (128Kb).
    296            * @param  BlockNumber: specifies the block number to be erased. This parameter
    297            *         should be between 0 and 511.
    298            * @retval OneNAND memory Interrupt Status.
    299            */

   \                                 In section .text, align 2, keep-with-next
    300          uint16_t OneNAND_UnlockBlock(uint32_t BlockNumber)
    301          {
    302            uint16_t  status = 0;
   \                     OneNAND_UnlockBlock:
   \   00000000   0021               MOVS     R1,#+0
    303            
    304            /* Wait till no ongoing operation */
    305            status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_CONTROLSTATUS);
   \   00000002   ....               LDR.N    R2,??DataTable8_5  ;; 0x6001e480
   \   00000004   1288               LDRH     R2,[R2, #+0]
   \   00000006   1100               MOVS     R1,R2
   \   00000008   01E0               B.N      ??OneNAND_UnlockBlock_0
    306            
    307            while((status & 0x8000) == 0x8000)
    308            {
    309              status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_CONTROLSTATUS);
   \                     ??OneNAND_UnlockBlock_1:
   \   0000000A   ....               LDR.N    R1,??DataTable8_5  ;; 0x6001e480
   \   0000000C   0988               LDRH     R1,[R1, #+0]
    310            }
   \                     ??OneNAND_UnlockBlock_0:
   \   0000000E   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   0904               LSLS     R1,R1,#+16
   \   00000012   FAD4               BMI.N    ??OneNAND_UnlockBlock_1
    311            
    312            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_STARTBLOCKADDRESS) = BlockNumber;
   \   00000014   ....               LDR.N    R1,??DataTable8_9  ;; 0x6001e498
   \   00000016   0880               STRH     R0,[R1, #+0]
    313            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_INTERRUPT) = 0x0000;
   \   00000018   ....               LDR.N    R0,??DataTable8_10  ;; 0x6001e482
   \   0000001A   0021               MOVS     R1,#+0
   \   0000001C   0180               STRH     R1,[R0, #+0]
    314            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_COMMAND) = OneNAND_CMD_UNLOCK;
   \   0000001E   ....               LDR.N    R0,??DataTable8_11  ;; 0x6001e440
   \   00000020   2321               MOVS     R1,#+35
   \   00000022   0180               STRH     R1,[R0, #+0]
    315          
    316            /* Wait till the command is completed */
    317            status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_INTERRUPT);
   \   00000024   ....               LDR.N    R0,??DataTable8_10  ;; 0x6001e482
   \   00000026   0188               LDRH     R1,[R0, #+0]
   \   00000028   01E0               B.N      ??OneNAND_UnlockBlock_2
    318          
    319            while((status & 0x8000) != 0x8000)
    320            {
    321              status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_INTERRUPT);
   \                     ??OneNAND_UnlockBlock_3:
   \   0000002A   ....               LDR.N    R0,??DataTable8_10  ;; 0x6001e482
   \   0000002C   0188               LDRH     R1,[R0, #+0]
    322            }
   \                     ??OneNAND_UnlockBlock_2:
   \   0000002E   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000030   0804               LSLS     R0,R1,#+16
   \   00000032   FAD5               BPL.N    ??OneNAND_UnlockBlock_3
    323          
    324            /* Get the Controller Status */
    325            status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_CONTROLSTATUS);
   \   00000034   ....               LDR.N    R0,??DataTable8_5  ;; 0x6001e480
   \   00000036   0188               LDRH     R1,[R0, #+0]
    326            
    327            return (status);
   \   00000038   0800               MOVS     R0,R1
   \   0000003A   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003C   7047               BX       LR               ;; return
    328          }
    329          
    330          /**
    331            * @brief  Erases the specified OneNAND memory block (128Kb).
    332            * @param  BlockNumber: specifies the block number to be erased. This parameter
    333            *         should be between 0 and 511.
    334            * @retval OneNAND memory Interrupt Status.
    335            */

   \                                 In section .text, align 2, keep-with-next
    336          uint16_t OneNAND_EraseBlock(uint32_t BlockNumber)
    337          {
    338            uint16_t status = 0x0;
   \                     OneNAND_EraseBlock:
   \   00000000   0021               MOVS     R1,#+0
    339            
    340            /* Wait till no ongoing operation */
    341            status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_CONTROLSTATUS);
   \   00000002   ....               LDR.N    R2,??DataTable8_5  ;; 0x6001e480
   \   00000004   1288               LDRH     R2,[R2, #+0]
   \   00000006   1100               MOVS     R1,R2
   \   00000008   01E0               B.N      ??OneNAND_EraseBlock_0
    342            
    343            while((status & 0x8000) == 0x8000)
    344            {
    345              status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_CONTROLSTATUS);
   \                     ??OneNAND_EraseBlock_1:
   \   0000000A   ....               LDR.N    R1,??DataTable8_5  ;; 0x6001e480
   \   0000000C   0988               LDRH     R1,[R1, #+0]
    346            }
   \                     ??OneNAND_EraseBlock_0:
   \   0000000E   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   0904               LSLS     R1,R1,#+16
   \   00000012   FAD4               BMI.N    ??OneNAND_EraseBlock_1
    347          
    348            /* Erase operation */
    349            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_STARTADDRESS1) = BlockNumber;
   \   00000014   ....               LDR.N    R1,??DataTable8_12  ;; 0x6001e200
   \   00000016   0880               STRH     R0,[R1, #+0]
    350            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_INTERRUPT) = 0x0000;
   \   00000018   ....               LDR.N    R0,??DataTable8_10  ;; 0x6001e482
   \   0000001A   0021               MOVS     R1,#+0
   \   0000001C   0180               STRH     R1,[R0, #+0]
    351            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_COMMAND) = OneNAND_CMD_ERASE;
   \   0000001E   ....               LDR.N    R0,??DataTable8_11  ;; 0x6001e440
   \   00000020   9421               MOVS     R1,#+148
   \   00000022   0180               STRH     R1,[R0, #+0]
    352          
    353            /* Wait till no error is generated */
    354            status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_CONTROLSTATUS);
   \   00000024   ....               LDR.N    R0,??DataTable8_5  ;; 0x6001e480
   \   00000026   0188               LDRH     R1,[R0, #+0]
   \   00000028   01E0               B.N      ??OneNAND_EraseBlock_2
    355            
    356            while((status & 0x0400) == 0x0400)
    357            {
    358              status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_CONTROLSTATUS);
   \                     ??OneNAND_EraseBlock_3:
   \   0000002A   ....               LDR.N    R0,??DataTable8_5  ;; 0x6001e480
   \   0000002C   0188               LDRH     R1,[R0, #+0]
    359            }
   \                     ??OneNAND_EraseBlock_2:
   \   0000002E   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000030   4805               LSLS     R0,R1,#+21
   \   00000032   FAD4               BMI.N    ??OneNAND_EraseBlock_3
    360            
    361            /* Wait till the command is completed */
    362            status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_INTERRUPT);
   \   00000034   ....               LDR.N    R0,??DataTable8_10  ;; 0x6001e482
   \   00000036   0188               LDRH     R1,[R0, #+0]
   \   00000038   01E0               B.N      ??OneNAND_EraseBlock_4
    363          
    364            while((status & 0x8000) != 0x8000)
    365            {
    366              status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_INTERRUPT);
   \                     ??OneNAND_EraseBlock_5:
   \   0000003A   ....               LDR.N    R0,??DataTable8_10  ;; 0x6001e482
   \   0000003C   0188               LDRH     R1,[R0, #+0]
    367            }
   \                     ??OneNAND_EraseBlock_4:
   \   0000003E   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000040   0804               LSLS     R0,R1,#+16
   \   00000042   FAD5               BPL.N    ??OneNAND_EraseBlock_5
    368          
    369            /* Get the Controller Status */
    370            status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_CONTROLSTATUS);
   \   00000044   ....               LDR.N    R0,??DataTable8_5  ;; 0x6001e480
   \   00000046   0188               LDRH     R1,[R0, #+0]
    371            
    372            return (status);
   \   00000048   0800               MOVS     R0,R1
   \   0000004A   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004C   7047               BX       LR               ;; return
    373          }
    374          
    375          /**
    376            * @brief  Writes a Half-word buffer to the OneNAND memory. 
    377            * @param  pBuffer: pointer to buffer. 
    378            * @param  WriteAddr: OneNAND memory internal address from which the data will be 
    379            *         written.
    380            * @param  NumHalfwordToWrite: number of half-words to write. 
    381            * @retval OneNAND memory Controller Status.
    382            */

   \                                 In section .text, align 2, keep-with-next
    383          uint16_t OneNAND_WriteBuffer(uint16_t* pBuffer, OneNAND_ADDRESS Address, uint32_t NumHalfwordToWrite)
    384          {
   \                     OneNAND_WriteBuffer:
   \   00000000   12B4               PUSH     {R1,R4}
    385            uint32_t datacounter = 0;
   \   00000002   0023               MOVS     R3,#+0
    386            uint16_t status = 0;
   \   00000004   0021               MOVS     R1,#+0
    387          
    388            /* Load the buffer to be written into the DATA RAM0*/ 
    389            for(datacounter = 0; datacounter < NumHalfwordToWrite; datacounter++)
   \   00000006   0024               MOVS     R4,#+0
   \   00000008   2300               MOVS     R3,R4
   \   0000000A   05E0               B.N      ??OneNAND_WriteBuffer_0
    390            {
    391              *(__IO uint16_t *)((BANK1_ONENAND1_ADDR + OneNAND_DATA_RAM_0_0_ADD) + (2*datacounter)) = pBuffer[datacounter];
   \                     ??OneNAND_WriteBuffer_1:
   \   0000000C   30F81310           LDRH     R1,[R0, R3, LSL #+1]
   \   00000010   ....               LDR.N    R4,??DataTable8_13  ;; 0x60000400
   \   00000012   24F81310           STRH     R1,[R4, R3, LSL #+1]
    392            } 
   \   00000016   5B1C               ADDS     R3,R3,#+1
   \                     ??OneNAND_WriteBuffer_0:
   \   00000018   9342               CMP      R3,R2
   \   0000001A   F7D3               BCC.N    ??OneNAND_WriteBuffer_1
    393          
    394            /* Write operation from DATA RAM0 to NAND address*/ 
    395            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_STARTADDRESS1) = Address.Block; /* NAND Flash block address*/
   \   0000001C   ....               LDR.N    R0,??DataTable8_12  ;; 0x6001e200
   \   0000001E   BDF80010           LDRH     R1,[SP, #+0]
   \   00000022   0180               STRH     R1,[R0, #+0]
    396            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_STARTADDRESINT8_T) = (uint16_t)(Address.Page << 2);  /* NAND Flash start page address */
   \   00000024   BDF80200           LDRH     R0,[SP, #+2]
   \   00000028   8000               LSLS     R0,R0,#+2
   \   0000002A   ....               LDR.N    R1,??DataTable8_14  ;; 0x6001e20e
   \   0000002C   0880               STRH     R0,[R1, #+0]
    397            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_STARTBUFFER) = OneNAND_DATA_RAM_0_0_REG;/* BufferRAM Sector Count (BSC) and BufferRAM Sector Address (BSA).*/
   \   0000002E   ....               LDR.N    R0,??DataTable8_15  ;; 0x6001e400
   \   00000030   4FF40061           MOV      R1,#+2048
   \   00000034   0180               STRH     R1,[R0, #+0]
    398            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_INTERRUPT) = 0x0000;
   \   00000036   ....               LDR.N    R0,??DataTable8_10  ;; 0x6001e482
   \   00000038   0021               MOVS     R1,#+0
   \   0000003A   0180               STRH     R1,[R0, #+0]
    399            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_COMMAND) = OneNAND_CMD_PROGRAM; /* Command */ 
   \   0000003C   ....               LDR.N    R0,??DataTable8_11  ;; 0x6001e440
   \   0000003E   8021               MOVS     R1,#+128
   \   00000040   0180               STRH     R1,[R0, #+0]
    400          
    401            /* Wait till the command is completed */
    402            status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_INTERRUPT);
   \   00000042   ....               LDR.N    R0,??DataTable8_10  ;; 0x6001e482
   \   00000044   0188               LDRH     R1,[R0, #+0]
   \   00000046   01E0               B.N      ??OneNAND_WriteBuffer_2
    403          
    404            while((status & 0x8000) != 0x8000)
    405            {
    406              status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_INTERRUPT);
   \                     ??OneNAND_WriteBuffer_3:
   \   00000048   ....               LDR.N    R0,??DataTable8_10  ;; 0x6001e482
   \   0000004A   0188               LDRH     R1,[R0, #+0]
    407            }
   \                     ??OneNAND_WriteBuffer_2:
   \   0000004C   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000004E   0804               LSLS     R0,R1,#+16
   \   00000050   FAD5               BPL.N    ??OneNAND_WriteBuffer_3
    408          
    409            /* Wait till the write interrupt is set */
    410            status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_INTERRUPT);
   \   00000052   ....               LDR.N    R0,??DataTable8_10  ;; 0x6001e482
   \   00000054   0188               LDRH     R1,[R0, #+0]
   \   00000056   01E0               B.N      ??OneNAND_WriteBuffer_4
    411          
    412            while((status & 0x40) != 0x40)
    413            {
    414              status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_INTERRUPT);
   \                     ??OneNAND_WriteBuffer_5:
   \   00000058   ....               LDR.N    R0,??DataTable8_10  ;; 0x6001e482
   \   0000005A   0188               LDRH     R1,[R0, #+0]
    415            }
   \                     ??OneNAND_WriteBuffer_4:
   \   0000005C   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000005E   4806               LSLS     R0,R1,#+25
   \   00000060   FAD5               BPL.N    ??OneNAND_WriteBuffer_5
    416          
    417            /* Get the Controller Status */
    418            status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_CONTROLSTATUS);
   \   00000062   ....               LDR.N    R0,??DataTable8_5  ;; 0x6001e480
   \   00000064   0188               LDRH     R1,[R0, #+0]
    419            
    420            return (status);
   \   00000066   0800               MOVS     R0,R1
   \   00000068   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000006A   12BC               POP      {R1,R4}
   \   0000006C   7047               BX       LR               ;; return
    421          }
    422          
    423          /**
    424            * @brief  Reads a block of data from the OneNAND memory using asynchronous mode.
    425            * @param  pBuffer: pointer to the buffer that receives the data read from the 
    426            *         OneNAND memory.
    427            * @param  ReadAddr: OneNAND memory internal address to read from.
    428            * @param  NumHalfwordToRead: number of half-words to read.
    429            * @retval None
    430            */

   \                                 In section .text, align 2, keep-with-next
    431          void OneNAND_AsynchronousRead(uint16_t* pBuffer, OneNAND_ADDRESS Address, uint32_t NumHalfwordToRead)
    432          {
   \                     OneNAND_AsynchronousRead:
   \   00000000   32B4               PUSH     {R1,R4,R5}
    433            uint16_t datatmp = 0x0, index = 0;
   \   00000002   0024               MOVS     R4,#+0
   \   00000004   0021               MOVS     R1,#+0
    434            uint16_t status = 0;
   \   00000006   0023               MOVS     R3,#+0
    435          
    436            datatmp = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_SYSTEMCONFIGURATION); 
   \   00000008   ....               LDR.N    R5,??DataTable8_8  ;; 0x6001e442
   \   0000000A   2D88               LDRH     R5,[R5, #+0]
   \   0000000C   2C00               MOVS     R4,R5
    437          
    438            /* Set the asynchronous read mode */
    439            OneNAND_WRITE(BANK1_ONENAND1_ADDR + OneNAND_REG_SYSTEMCONFIGURATION, (datatmp& 0x7FFF));
   \   0000000E   6404               LSLS     R4,R4,#+17
   \   00000010   640C               LSRS     R4,R4,#+17
   \   00000012   ....               LDR.N    R5,??DataTable8_8  ;; 0x6001e442
   \   00000014   2C80               STRH     R4,[R5, #+0]
    440          
    441            /* Load data from the read address to the DATA RAM 1 setor 1 */
    442            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_STARTADDRESS1) = Address.Block; /* NAND Flash block address*/
   \   00000016   ....               LDR.N    R4,??DataTable8_12  ;; 0x6001e200
   \   00000018   BDF80050           LDRH     R5,[SP, #+0]
   \   0000001C   2580               STRH     R5,[R4, #+0]
    443            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_STARTADDRESINT8_T) = (uint16_t)(Address.Page << 2);
   \   0000001E   BDF80240           LDRH     R4,[SP, #+2]
   \   00000022   A400               LSLS     R4,R4,#+2
   \   00000024   ....               LDR.N    R5,??DataTable8_14  ;; 0x6001e20e
   \   00000026   2C80               STRH     R4,[R5, #+0]
    444            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_STARTBUFFER) = OneNAND_DATA_RAM_1_0_REG;
   \   00000028   ....               LDR.N    R4,??DataTable8_15  ;; 0x6001e400
   \   0000002A   4FF44065           MOV      R5,#+3072
   \   0000002E   2580               STRH     R5,[R4, #+0]
    445            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_INTERRUPT) = 0x0000;
   \   00000030   ....               LDR.N    R4,??DataTable8_10  ;; 0x6001e482
   \   00000032   0025               MOVS     R5,#+0
   \   00000034   2580               STRH     R5,[R4, #+0]
    446            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_COMMAND) = OneNAND_CMD_LOAD; /* Command */
   \   00000036   ....               LDR.N    R4,??DataTable8_11  ;; 0x6001e440
   \   00000038   0025               MOVS     R5,#+0
   \   0000003A   2580               STRH     R5,[R4, #+0]
    447          
    448            /* Wait till the command is completed */
    449            status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_INTERRUPT);
   \   0000003C   ....               LDR.N    R4,??DataTable8_10  ;; 0x6001e482
   \   0000003E   2488               LDRH     R4,[R4, #+0]
   \   00000040   2300               MOVS     R3,R4
   \   00000042   01E0               B.N      ??OneNAND_AsynchronousRead_0
    450          
    451            while((status & 0x8000) != 0x8000)
    452            {
    453              status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_INTERRUPT);
   \                     ??OneNAND_AsynchronousRead_1:
   \   00000044   ....               LDR.N    R3,??DataTable8_10  ;; 0x6001e482
   \   00000046   1B88               LDRH     R3,[R3, #+0]
    454            }
   \                     ??OneNAND_AsynchronousRead_0:
   \   00000048   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000004A   1B04               LSLS     R3,R3,#+16
   \   0000004C   FAD5               BPL.N    ??OneNAND_AsynchronousRead_1
    455          
    456            /* Read Controller status */
    457            status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_CONTROLSTATUS);
   \   0000004E   ....               LDR.N    R3,??DataTable8_5  ;; 0x6001e480
   \   00000050   1B88               LDRH     R3,[R3, #+0]
   \   00000052   07E0               B.N      ??OneNAND_AsynchronousRead_2
    458          
    459            /* Read data */
    460            for(; NumHalfwordToRead != 0x00; NumHalfwordToRead--) /* While there is data to read */
    461            {
    462              /* Read a Halfword from the memory */
    463              *pBuffer++ = *(__IO uint16_t *)((BANK1_ONENAND1_ADDR + OneNAND_DATA_RAM_1_0_ADD)+ 2*index);
   \                     ??OneNAND_AsynchronousRead_3:
   \   00000054   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000056   ....               LDR.N    R3,??DataTable8_16  ;; 0x60000c00
   \   00000058   33F81130           LDRH     R3,[R3, R1, LSL #+1]
   \   0000005C   0380               STRH     R3,[R0, #+0]
   \   0000005E   801C               ADDS     R0,R0,#+2
    464              index++;
   \   00000060   491C               ADDS     R1,R1,#+1
    465            } 
   \   00000062   521E               SUBS     R2,R2,#+1
   \                     ??OneNAND_AsynchronousRead_2:
   \   00000064   002A               CMP      R2,#+0
   \   00000066   F5D1               BNE.N    ??OneNAND_AsynchronousRead_3
    466          }
   \   00000068   31BC               POP      {R0,R4,R5}
   \   0000006A   7047               BX       LR               ;; return
    467          
    468          /**
    469            * @brief  Reads a block of data from the OneNAND memory using synchronous mode.
    470            * @param  pBuffer: pointer to the buffer that receives the data read from the 
    471            *         OneNAND memory.
    472            * @param  ReadAddr: OneNAND memory internal address to read from.
    473            * @param  NumHalfwordToRead: number of half-words to read.
    474            * @retval None
    475            */

   \                                 In section .text, align 2, keep-with-next
    476          void OneNAND_SynchronousRead(uint16_t* pBuffer, OneNAND_ADDRESS Address, uint32_t NumHalfwordToRead)
    477          {
   \                     OneNAND_SynchronousRead:
   \   00000000   32B4               PUSH     {R1,R4,R5}
    478            uint16_t index = 0;
   \   00000002   0021               MOVS     R1,#+0
    479            uint16_t status = 0;
   \   00000004   0023               MOVS     R3,#+0
    480          
    481            /* Set the asynchronous read mode */
    482            OneNAND_WRITE(BANK1_ONENAND1_ADDR + OneNAND_REG_SYSTEMCONFIGURATION, 0xB4C0);
   \   00000006   ....               LDR.N    R4,??DataTable8_8  ;; 0x6001e442
   \   00000008   4BF2C045           MOVW     R5,#+46272
   \   0000000C   2580               STRH     R5,[R4, #+0]
    483            
    484          
    485            /* Load data from the read address to the DATA RAM 1 setor 1 */
    486            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_STARTADDRESS1) = Address.Block; /* NAND Flash block address*/
   \   0000000E   ....               LDR.N    R4,??DataTable8_12  ;; 0x6001e200
   \   00000010   BDF80050           LDRH     R5,[SP, #+0]
   \   00000014   2580               STRH     R5,[R4, #+0]
    487            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_STARTADDRESINT8_T) = (uint16_t)(Address.Page << 2);
   \   00000016   BDF80240           LDRH     R4,[SP, #+2]
   \   0000001A   A400               LSLS     R4,R4,#+2
   \   0000001C   ....               LDR.N    R5,??DataTable8_14  ;; 0x6001e20e
   \   0000001E   2C80               STRH     R4,[R5, #+0]
    488            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_STARTBUFFER) = OneNAND_DATA_RAM_1_0_REG;
   \   00000020   ....               LDR.N    R4,??DataTable8_15  ;; 0x6001e400
   \   00000022   4FF44065           MOV      R5,#+3072
   \   00000026   2580               STRH     R5,[R4, #+0]
    489            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_INTERRUPT) = 0x0000;
   \   00000028   ....               LDR.N    R4,??DataTable8_10  ;; 0x6001e482
   \   0000002A   0025               MOVS     R5,#+0
   \   0000002C   2580               STRH     R5,[R4, #+0]
    490            *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_COMMAND) = OneNAND_CMD_LOAD; /* Command */
   \   0000002E   ....               LDR.N    R4,??DataTable8_11  ;; 0x6001e440
   \   00000030   0025               MOVS     R5,#+0
   \   00000032   2580               STRH     R5,[R4, #+0]
    491          
    492            /* Wait till the command is completed */
    493            status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_INTERRUPT);
   \   00000034   ....               LDR.N    R4,??DataTable8_10  ;; 0x6001e482
   \   00000036   2488               LDRH     R4,[R4, #+0]
   \   00000038   2300               MOVS     R3,R4
   \   0000003A   01E0               B.N      ??OneNAND_SynchronousRead_0
    494          
    495            while((status & 0x8000) != 0x8000)
    496            {
    497              status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_INTERRUPT);
   \                     ??OneNAND_SynchronousRead_1:
   \   0000003C   ....               LDR.N    R3,??DataTable8_10  ;; 0x6001e482
   \   0000003E   1B88               LDRH     R3,[R3, #+0]
    498            }
   \                     ??OneNAND_SynchronousRead_0:
   \   00000040   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000042   1B04               LSLS     R3,R3,#+16
   \   00000044   FAD5               BPL.N    ??OneNAND_SynchronousRead_1
    499          
    500            /* Read Controller status */
    501            status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_CONTROLSTATUS);
   \   00000046   ....               LDR.N    R3,??DataTable8_5  ;; 0x6001e480
   \   00000048   1B88               LDRH     R3,[R3, #+0]
   \   0000004A   07E0               B.N      ??OneNAND_SynchronousRead_2
    502          
    503            /* Read data */
    504            for(; NumHalfwordToRead != 0x00; NumHalfwordToRead--) /* While there is data to read */
    505            {
    506             *pBuffer++ = *(__IO uint16_t *)((BANK1_ONENAND1_ADDR + OneNAND_DATA_RAM_1_0_ADD + 2*index));
   \                     ??OneNAND_SynchronousRead_3:
   \   0000004C   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000004E   ....               LDR.N    R3,??DataTable8_16  ;; 0x60000c00
   \   00000050   33F81130           LDRH     R3,[R3, R1, LSL #+1]
   \   00000054   0380               STRH     R3,[R0, #+0]
   \   00000056   801C               ADDS     R0,R0,#+2
    507              index++;
   \   00000058   491C               ADDS     R1,R1,#+1
    508            }
   \   0000005A   521E               SUBS     R2,R2,#+1
   \                     ??OneNAND_SynchronousRead_2:
   \   0000005C   002A               CMP      R2,#+0
   \   0000005E   F5D1               BNE.N    ??OneNAND_SynchronousRead_3
    509          }
   \   00000060   31BC               POP      {R0,R4,R5}
   \   00000062   7047               BX       LR               ;; return
    510          
    511          /**
    512            * @brief  Reads the OneNAND memory Interrupt status. 
    513            * @param  None
    514            * @retval OneNAND memory Interrupt Status.
    515            */

   \                                 In section .text, align 2, keep-with-next
    516          uint16_t OneNAND_ReadStatus(void)
    517          {
   \                     OneNAND_ReadStatus:
   \   00000000   81B0               SUB      SP,SP,#+4
    518            __IO uint16_t status = 0x0;
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   ADF80000           STRH     R0,[SP, #+0]
    519          
    520            /* Read Status */
    521            return (status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_INTERRUPT));
   \   00000008   ....               LDR.N    R0,??DataTable8_10  ;; 0x6001e482
   \   0000000A   0088               LDRH     R0,[R0, #+0]
   \   0000000C   ADF80000           STRH     R0,[SP, #+0]
   \   00000010   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   01B0               ADD      SP,SP,#+4
   \   00000014   7047               BX       LR               ;; return
    522          }
    523          
    524          /**
    525            * @brief  Reads the OneNAND Controller status. 
    526            * @param  None
    527            * @retval OneNAND Controller Status.
    528            */

   \                                 In section .text, align 2, keep-with-next
    529          uint16_t OneNAND_ReadControllerStatus(void)
    530          {
   \                     OneNAND_ReadControllerStatus:
   \   00000000   81B0               SUB      SP,SP,#+4
    531            __IO uint16_t status = 0x0;
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   ADF80000           STRH     R0,[SP, #+0]
    532          
    533            /* Read Controller Status */
    534            return (status = *(__IO uint16_t *)(BANK1_ONENAND1_ADDR + OneNAND_REG_CONTROLSTATUS));
   \   00000008   ....               LDR.N    R0,??DataTable8_5  ;; 0x6001e480
   \   0000000A   0088               LDRH     R0,[R0, #+0]
   \   0000000C   ADF80000           STRH     R0,[SP, #+0]
   \   00000010   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   01B0               ADD      SP,SP,#+4
   \   00000014   7047               BX       LR               ;; return
    535          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   000C0240           DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   00100240           DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   00140240           DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   00180240           DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   00040240           DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   80E40160           DC32     0x6001e480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   00E00160           DC32     0x6001e000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   02E00160           DC32     0x6001e002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   42E40160           DC32     0x6001e442

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   98E40160           DC32     0x6001e498

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   82E40160           DC32     0x6001e482

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   40E40160           DC32     0x6001e440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   00E20160           DC32     0x6001e200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   00040060           DC32     0x60000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   0EE20160           DC32     0x6001e20e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   00E40160           DC32     0x6001e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   000C0060           DC32     0x60000c00
    536          
    537          /**
    538            * @}
    539            */
    540          
    541          /**
    542            * @}
    543            */
    544          
    545          /**
    546            * @}
    547            */
    548          
    549          /**
    550            * @}
    551            */
    552          
    553          /**
    554            * @}
    555            */  
    556          
    557          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function                     .cstack
     --------                     -------
     OneNAND_AsynchronousRead         12
     OneNAND_EraseBlock                0
     OneNAND_Init                    104
     OneNAND_ReadControllerStatus      4
     OneNAND_ReadID                    0
     OneNAND_ReadStatus                4
     OneNAND_Reset                     0
     OneNAND_SynchronousRead          12
     OneNAND_UnlockBlock               0
     OneNAND_WriteBuffer               8


   Section sizes:

     Function/Label               Bytes
     --------------               -----
     OneNAND_Init                  868
     OneNAND_Reset                  10
     OneNAND_ReadID                 42
     OneNAND_UnlockBlock            62
     OneNAND_EraseBlock             78
     OneNAND_WriteBuffer           110
     OneNAND_AsynchronousRead      108
     OneNAND_SynchronousRead       100
     OneNAND_ReadStatus             22
     OneNAND_ReadControllerStatus   22
     ??DataTable8                    4
     ??DataTable8_1                  4
     ??DataTable8_2                  4
     ??DataTable8_3                  4
     ??DataTable8_4                  4
     ??DataTable8_5                  4
     ??DataTable8_6                  4
     ??DataTable8_7                  4
     ??DataTable8_8                  4
     ??DataTable8_9                  4
     ??DataTable8_10                 4
     ??DataTable8_11                 4
     ??DataTable8_12                 4
     ??DataTable8_13                 4
     ??DataTable8_14                 4
     ??DataTable8_15                 4
     ??DataTable8_16                 4

 
 1 490 bytes in section .text
 
 1 490 bytes of CODE memory

Errors: none
Warnings: none
