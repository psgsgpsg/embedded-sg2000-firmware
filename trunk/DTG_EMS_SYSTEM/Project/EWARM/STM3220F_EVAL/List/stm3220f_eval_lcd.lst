###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     09/May/2011  20:41:45 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4 #
#                    \STM32F2xx_StdPeriph_Lib_V0.0.4\Utilities\STM32_EVAL\STM #
#                    3220F_EVAL\stm3220f_eval_lcd.c                           #
#    Command line =  "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Utilities\STM32_EVAL\ST #
#                    M3220F_EVAL\stm3220f_eval_lcd.c" -D                      #
#                    USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM3220F_EVAL   #
#                    -lC "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V #
#                    0.0.4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_S #
#                    tdPeriph_Template\EWARM\STM3220F_EVAL\List\" -lA         #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\STM3220F_EVAL\List\" -o              #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\STM3220F_EVAL\Obj\" --no_cse         #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.0\arm\INC\c\DLib_Config_Full.h" -I "D:\¹¬ÀÛ¾÷\[        #
#                    NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_S #
#                    tdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template #
#                    \EWARM\..\" -I "D:\¹¬ÀÛ¾÷\[ NewDTG                       #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    ..\..\..\Libraries\CMSIS\CM3\CoreSupport\" -I            #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\..\..\..\Libraries\CMSIS\CM3\DeviceS #
#                    upport\ST\STM32F2xx\" -I "D:\¹¬ÀÛ¾÷\[ NewDTG             #
#                    ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPerip #
#                    h_Lib_V0.0.4\Project\STM32F2xx_StdPeriph_Template\EWARM\ #
#                    ..\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\" -I   #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\..\..\..\Utilities\STM32_EVAL\" -I   #
#                    "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0. #
#                    4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPe #
#                    riph_Template\EWARM\..\..\..\Utilities\STM32_EVAL\Common #
#                    \" -I "D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib #
#                    _V0.0.4\STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx #
#                    _StdPeriph_Template\EWARM\..\..\..\Utilities\STM32_EVAL\ #
#                    STM3220F_EVAL\" -Ol --use_c++_inline                     #
#    List file    =  D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4 #
#                    \STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPer #
#                    iph_Template\EWARM\STM3220F_EVAL\List\stm3220f_eval_lcd. #
#                    lst                                                      #
#    Object file  =  D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4 #
#                    \STM32F2xx_StdPeriph_Lib_V0.0.4\Project\STM32F2xx_StdPer #
#                    iph_Template\EWARM\STM3220F_EVAL\Obj\stm3220f_eval_lcd.o #
#                                                                             #
#                                                                             #
###############################################################################

D:\¹¬ÀÛ¾÷\[ NewDTG ]\ÀÚ·á\STM32F2xx_StdPeriph_Lib_V0.0.4\STM32F2xx_StdPeriph_Lib_V0.0.4\Utilities\STM32_EVAL\STM3220F_EVAL\stm3220f_eval_lcd.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm3220f_eval_lcd.c
      4            * @author  MCD Application Team
      5            * @version V4.X.0RC13
      6            * @date    13-January-2011
      7            * @brief   This file includes the LCD driver for AM-240320L8TNQW00H (LCD_ILI9320)
      8            *          and AM240320D5TOQW01H (LCD_ILI9325) Liquid Crystal Display Modules
      9            *          of STM3220F_EVAL board.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     15            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     16            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     17            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     18            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19            *
     20            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21            ******************************************************************************  
     22            */ 
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "stm3220f_eval_lcd.h"
     26          #include "../Common/fonts.c"

   \                                 In section .text, align 4, keep-with-next
   \   __absolute unsigned short const ASCII16x24_Table[2280]
   \                     ASCII16x24_Table:
   \   00000000                      ; Initializer data, 4560 bytes
   \   00000000   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000014   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000028   000000000000       DC16 0, 0, 0, 0, 0, 384, 384, 384, 384, 384
   \              000000008001
   \              800180018001
   \              8001        
   \   0000003C   800180018001       DC16 384, 384, 384, 384, 384, 384, 384, 384, 0, 0
   \              800180018001
   \              800180010000
   \              0000        
   \   00000050   800180010000       DC16 384, 384, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000064   CC00CC00CC00       DC16 204, 204, 204, 204, 204, 204, 0, 0, 0, 0
   \              CC00CC00CC00
   \              000000000000
   \              0000        
   \   00000078   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   0000008C   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 3168, 3168
   \              000000000000
   \              00000000600C
   \              600C        
   \   000000A0   600C30063006       DC16 3168, 1584, 1584, 8190, 8190, 1584, 1848, 792, 8190, 8190
   \              FE1FFE1F3006
   \              38071803FE1F
   \              FE1F        
   \   000000B4   180318038C01       DC16 792, 792, 396, 396, 396, 0, 0, 128, 992, 4088
   \              8C018C010000
   \              00008000E003
   \              F80F        
   \   000000C8   9C0E8C1C8C18       DC16 3740, 7308, 6284, 140, 152, 504, 2016, 3712, 7296, 6284
   \              8C009800F801
   \              E007800E801C
   \              8C18        
   \   000000DC   8C189C18B80C       DC16 6284, 6300, 3256, 4080, 992, 128, 128, 0, 0, 0
   \              F00FE0038000
   \              800000000000
   \              0000        
   \   000000F0   000000000000       DC16 0, 0, 0, 6158, 3099, 3089, 1553, 1553, 785, 785
   \              0E181B0C110C
   \              110611061103
   \              1103        
   \   00000104   9B018E01C038       DC16 411, 398, 14528, 27840, 17504, 17504, 17456, 17456, 17432, 27672
   \              C06C60446044
   \              304430441844
   \              186C        
   \   00000118   0C3800000000       DC16 14348, 0, 0, 0, 0, 480, 1008, 1848, 1560, 1560
   \              00000000E001
   \              F00338071806
   \              1806        
   \   0000012C   3003F001F000       DC16 816, 496, 240, 248, 12700, 13070, 7686, 7174, 7174, 16134
   \              F8009C310E33
   \              061E061C061C
   \              063F        
   \   00000140   FC73F0210000       DC16 29692, 8688, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000154   0C000C000C00       DC16 12, 12, 12, 12, 12, 12, 0, 0, 0, 0
   \              0C000C000C00
   \              000000000000
   \              0000        
   \   00000168   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   0000017C   000000000000       DC16 0, 0, 0, 512, 768, 384, 192, 192, 96, 96
   \              000200038001
   \              C000C0006000
   \              6000        
   \   00000190   300030003000       DC16 48, 48, 48, 48, 48, 48, 48, 48, 96, 96
   \              300030003000
   \              300030006000
   \              6000        
   \   000001A4   C000C0008001       DC16 192, 192, 384, 768, 512, 0, 0, 32, 96, 192
   \              000300020000
   \              000020006000
   \              C000        
   \   000001B8   800180010003       DC16 384, 384, 768, 768, 1536, 1536, 1536, 1536, 1536, 1536
   \              000300060006
   \              000600060006
   \              0006        
   \   000001CC   000600060003       DC16 1536, 1536, 768, 768, 384, 384, 192, 96, 32, 0
   \              000380018001
   \              C00060002000
   \              0000        
   \   000001E0   000000000000       DC16 0, 0, 0, 0, 0, 0, 192, 192, 1752, 2040
   \              000000000000
   \              C000C000D806
   \              F807        
   \   000001F4   E00130033807       DC16 480, 816, 1848, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000208   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   0000021C   800180018001       DC16 384, 384, 384, 384, 384, 16380, 16380, 384, 384, 384
   \              80018001FC3F
   \              FC3F80018001
   \              8001        
   \   00000230   800180010000       DC16 384, 384, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000244   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000258   000000000000       DC16 0, 0, 0, 0, 0, 384, 384, 256, 256, 128
   \              000000008001
   \              800100010001
   \              8000        
   \   0000026C   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000280   000000000000       DC16 0, 0, 0, 0, 2016, 2016, 0, 0, 0, 0
   \              0000E007E007
   \              000000000000
   \              0000        
   \   00000294   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   000002A8   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   000002BC   000000000000       DC16 0, 0, 0, 192, 192, 0, 0, 0, 0, 0
   \              C000C0000000
   \              000000000000
   \              0000        
   \   000002D0   0000000C000C       DC16 0, 3072, 3072, 1536, 1536, 1536, 768, 768, 768, 896
   \              000600060006
   \              000300030003
   \              8003        
   \   000002E4   800180018001       DC16 384, 384, 384, 192, 192, 192, 96, 96, 0, 0
   \              C000C000C000
   \              600060000000
   \              0000        
   \   000002F8   000000000000       DC16 0, 0, 0, 0, 0, 992, 2032, 3640, 3096, 6156
   \              00000000E003
   \              F007380E180C
   \              0C18        
   \   0000030C   0C180C180C18       DC16 6156, 6156, 6156, 6156, 6156, 6156, 6156, 6156, 3096, 3640
   \              0C180C180C18
   \              0C180C18180C
   \              380E        
   \   00000320   F007E0030000       DC16 2032, 992, 0, 0, 0, 0, 0, 0, 0, 256
   \              000000000000
   \              000000000000
   \              0001        
   \   00000334   8001C001F001       DC16 384, 448, 496, 408, 392, 384, 384, 384, 384, 384
   \              980188018001
   \              800180018001
   \              8001        
   \   00000348   800180018001       DC16 384, 384, 384, 384, 384, 384, 0, 0, 0, 0
   \              800180018001
   \              000000000000
   \              0000        
   \   0000035C   000000000000       DC16 0, 0, 0, 992, 4088, 3096, 6156, 6156, 6144, 6144
   \              E003F80F180C
   \              0C180C180018
   \              0018        
   \   00000370   000C00060003       DC16 3072, 1536, 768, 384, 192, 96, 48, 24, 8188, 8188
   \              8001C0006000
   \              30001800FC1F
   \              FC1F        
   \   00000384   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 480, 2040, 3608
   \              000000000000
   \              0000E001F807
   \              180E        
   \   00000398   0C0C0C0C000C       DC16 3084, 3084, 3072, 1536, 960, 1984, 3072, 6144, 6144, 6156
   \              0006C003C007
   \              000C00180018
   \              0C18        
   \   000003AC   0C18180CF807       DC16 6156, 3096, 2040, 992, 0, 0, 0, 0, 0, 0
   \              E00300000000
   \              000000000000
   \              0000        
   \   000003C0   0000000C000E       DC16 0, 3072, 3584, 3840, 3840, 3456, 3264, 3168, 3168, 3120
   \              000F000F800D
   \              C00C600C600C
   \              300C        
   \   000003D4   180C0C0CFC3F       DC16 3096, 3084, 16380, 16380, 3072, 3072, 3072, 3072, 0, 0
   \              FC3F000C000C
   \              000C000C0000
   \              0000        
   \   000003E8   000000000000       DC16 0, 0, 0, 0, 0, 4088, 4088, 24, 24, 12
   \              00000000F80F
   \              F80F18001800
   \              0C00        
   \   000003FC   EC03FC071C0E       DC16 1004, 2044, 3612, 7168, 6144, 6144, 6144, 6156, 3100, 3608
   \              001C00180018
   \              00180C181C0C
   \              180E        
   \   00000410   F807E0030000       DC16 2040, 992, 0, 0, 0, 0, 0, 0, 0, 1984
   \              000000000000
   \              000000000000
   \              C007        
   \   00000424   F00F381C1818       DC16 4080, 7224, 6168, 24, 12, 972, 4076, 3644, 7196, 6156
   \              18000C00CC03
   \              EC0F3C0E1C1C
   \              0C18        
   \   00000438   0C180C18181C       DC16 6156, 6156, 7192, 3640, 2032, 992, 0, 0, 0, 0
   \              380EF007E003
   \              000000000000
   \              0000        
   \   0000044C   000000000000       DC16 0, 0, 0, 8188, 8188, 3072, 1536, 1536, 768, 896
   \              FC1FFC1F000C
   \              000600060003
   \              8003        
   \   00000460   8001C001C000       DC16 384, 448, 192, 224, 96, 96, 112, 48, 48, 48
   \              E00060006000
   \              700030003000
   \              3000        
   \   00000474   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 992, 2032, 3640
   \              000000000000
   \              0000E003F007
   \              380E        
   \   00000488   180C180C180C       DC16 3096, 3096, 3096, 1592, 2032, 2032, 3096, 6156, 6156, 6156
   \              3806F007F007
   \              180C0C180C18
   \              0C18        
   \   0000049C   0C18380CF80F       DC16 6156, 3128, 4088, 992, 0, 0, 0, 0, 0, 0
   \              E00300000000
   \              000000000000
   \              0000        
   \   000004B0   0000E003F007       DC16 0, 992, 2032, 3640, 3100, 6156, 6156, 6156, 7196, 7736
   \              380E1C0C0C18
   \              0C180C181C1C
   \              381E        
   \   000004C4   F81BE0190018       DC16 7160, 6624, 6144, 3072, 3072, 3612, 2040, 496, 0, 0
   \              000C000C1C0E
   \              F807F0010000
   \              0000        
   \   000004D8   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   000004EC   800180010000       DC16 384, 384, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000500   800180010000       DC16 384, 384, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000514   000000000000       DC16 0, 0, 0, 0, 384, 384, 0, 0, 0, 0
   \              000080018001
   \              000000000000
   \              0000        
   \   00000528   000000000000       DC16 0, 0, 0, 0, 384, 384, 256, 256, 128, 0
   \              000080018001
   \              000100018000
   \              0000        
   \   0000053C   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000550   0010001C800F       DC16 4096, 7168, 3968, 992, 248, 24, 248, 992, 3968, 7168
   \              E003F8001800
   \              F800E003800F
   \              001C        
   \   00000564   001000000000       DC16 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000578   000000000000       DC16 0, 0, 0, 0, 8184, 0, 0, 0, 8184, 0
   \              0000F81F0000
   \              00000000F81F
   \              0000        
   \   0000058C   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   000005A0   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 8, 56
   \              000000000000
   \              000000000800
   \              3800        
   \   000005B4   F001C007001F       DC16 496, 1984, 7936, 6144, 7936, 1984, 496, 56, 8, 0
   \              0018001FC007
   \              F00138000800
   \              0000        
   \   000005C8   000000000000       DC16 0, 0, 0, 0, 0, 992, 4088, 3096, 6156, 6156
   \              00000000E003
   \              F80F180C0C18
   \              0C18        
   \   000005DC   0018000C0006       DC16 6144, 3072, 1536, 768, 384, 192, 192, 192, 0, 0
   \              00038001C000
   \              C000C0000000
   \              0000        
   \   000005F0   C000C0000000       DC16 192, 192, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000604   E00718180420       DC16 2016, 6168, 8196, 10690, 18978, 17425, 17417, 17417, 17417, 8713
   \              C229224A1144
   \              094409440944
   \              0922        
   \   00000618   1113E20C0240       DC16 4881, 3298, 16386, 8196, 6168, 2016, 0, 0, 0, 0
   \              04201818E007
   \              000000000000
   \              0000        
   \   0000062C   000000000000       DC16 0, 0, 0, 896, 896, 1728, 1728, 1728, 3168, 3168
   \              80038003C006
   \              C006C006600C
   \              600C        
   \   00000640   301830183018       DC16 6192, 6192, 6192, 16376, 16376, 28700, 24588, 24588, 49158, 49158
   \              F83FF83F1C70
   \              0C600C6006C0
   \              06C0        
   \   00000654   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 1020, 4092, 3084
   \              000000000000
   \              0000FC03FC0F
   \              0C0C        
   \   00000668   0C180C180C18       DC16 6156, 6156, 6156, 3084, 2044, 4092, 6156, 12300, 12300, 12300
   \              0C0CFC07FC0F
   \              0C180C300C30
   \              0C30        
   \   0000067C   0C300C18FC1F       DC16 12300, 6156, 8188, 2044, 0, 0, 0, 0, 0, 0
   \              FC0700000000
   \              000000000000
   \              0000        
   \   00000690   0000C007F01F       DC16 0, 1984, 8176, 14392, 12316, 28684, 24582, 6, 6, 6
   \              38381C300C70
   \              066006000600
   \              0600        
   \   000006A4   060006000600       DC16 6, 6, 6, 24582, 28684, 12316, 8176, 2016, 0, 0
   \              06600C701C30
   \              F01FE0070000
   \              0000        
   \   000006B8   000000000000       DC16 0, 0, 0, 0, 0, 1022, 4094, 3590, 6150, 6150
   \              00000000FE03
   \              FE0F060E0618
   \              0618        
   \   000006CC   063006300630       DC16 12294, 12294, 12294, 12294, 12294, 12294, 12294, 6150, 6150, 3590
   \              063006300630
   \              063006180618
   \              060E        
   \   000006E0   FE0FFE030000       DC16 4094, 1022, 0, 0, 0, 0, 0, 0, 0, 16380
   \              000000000000
   \              000000000000
   \              FC3F        
   \   000006F4   FC3F0C000C00       DC16 16380, 12, 12, 12, 12, 12, 8188, 8188, 12, 12
   \              0C000C000C00
   \              FC1FFC1F0C00
   \              0C00        
   \   00000708   0C000C000C00       DC16 12, 12, 12, 12, 16380, 16380, 0, 0, 0, 0
   \              0C00FC3FFC3F
   \              000000000000
   \              0000        
   \   0000071C   000000000000       DC16 0, 0, 0, 16376, 16376, 24, 24, 24, 24, 24
   \              F83FF83F1800
   \              180018001800
   \              1800        
   \   00000730   F81FF81F1800       DC16 8184, 8184, 24, 24, 24, 24, 24, 24, 24, 24
   \              180018001800
   \              180018001800
   \              1800        
   \   00000744   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 4064, 16376, 30780
   \              000000000000
   \              0000E00FF83F
   \              3C78        
   \   00000758   0E6006E007C0       DC16 24590, 57350, 49159, 3, 3, 65027, 65027, 49155, 49159, 49158
   \              0300030003FE
   \              03FE03C007C0
   \              06C0        
   \   0000076C   0EC03CF0F83F       DC16 49166, 61500, 16376, 4064, 0, 0, 0, 0, 0, 0
   \              E00F00000000
   \              000000000000
   \              0000        
   \   00000780   00000C300C30       DC16 0, 12300, 12300, 12300, 12300, 12300, 12300, 12300, 16380, 16380
   \              0C300C300C30
   \              0C300C30FC3F
   \              FC3F        
   \   00000794   0C300C300C30       DC16 12300, 12300, 12300, 12300, 12300, 12300, 12300, 12300, 0, 0
   \              0C300C300C30
   \              0C300C300000
   \              0000        
   \   000007A8   000000000000       DC16 0, 0, 0, 0, 0, 384, 384, 384, 384, 384
   \              000000008001
   \              800180018001
   \              8001        
   \   000007BC   800180018001       DC16 384, 384, 384, 384, 384, 384, 384, 384, 384, 384
   \              800180018001
   \              800180018001
   \              8001        
   \   000007D0   800180010000       DC16 384, 384, 0, 0, 0, 0, 0, 0, 0, 1536
   \              000000000000
   \              000000000000
   \              0006        
   \   000007E4   000600060006       DC16 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536
   \              000600060006
   \              000600060006
   \              0006        
   \   000007F8   000618061806       DC16 1536, 1560, 1560, 1848, 1008, 480, 0, 0, 0, 0
   \              3807F003E001
   \              000000000000
   \              0000        
   \   0000080C   000000000000       DC16 0, 0, 0, 12294, 6150, 3078, 1542, 774, 390, 198
   \              06300618060C
   \              060606038601
   \              C600        
   \   00000820   66007600DE00       DC16 102, 118, 222, 398, 774, 1542, 3078, 6150, 12294, 24582
   \              8E0106030606
   \              060C06180630
   \              0660        
   \   00000834   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 24, 24, 24
   \              000000000000
   \              000018001800
   \              1800        
   \   00000848   180018001800       DC16 24, 24, 24, 24, 24, 24, 24, 24, 24, 24
   \              180018001800
   \              180018001800
   \              1800        
   \   0000085C   18001800F81F       DC16 24, 24, 8184, 8184, 0, 0, 0, 0, 0, 0
   \              F81F00000000
   \              000000000000
   \              0000        
   \   00000870   00000EE01EF0       DC16 0, 57358, 61470, 61470, 61470, 55350, 55350, 55350, 55350, 52326
   \              1EF01EF036D8
   \              36D836D836D8
   \              66CC        
   \   00000884   66CC66CCC6C6       DC16 52326, 52326, 50886, 50886, 50886, 50886, 50054, 50054, 0, 0
   \              C6C6C6C6C6C6
   \              86C386C30000
   \              0000        
   \   00000898   000000000000       DC16 0, 0, 0, 0, 0, 12300, 12316, 12348, 12348, 12396
   \              000000000C30
   \              1C303C303C30
   \              6C30        
   \   000008AC   6C30CC30CC30       DC16 12396, 12492, 12492, 12684, 13068, 13068, 13836, 13836, 15372, 15372
   \              8C310C330C33
   \              0C360C360C3C
   \              0C3C        
   \   000008C0   0C380C300000       DC16 14348, 12300, 0, 0, 0, 0, 0, 0, 0, 2016
   \              000000000000
   \              000000000000
   \              E007        
   \   000008D4   F81F1C380E70       DC16 8184, 14364, 28686, 24582, 49155, 49155, 49155, 49155, 49155, 49155
   \              066003C003C0
   \              03C003C003C0
   \              03C0        
   \   000008E8   03C006600E70       DC16 49155, 24582, 28686, 14364, 8184, 2016, 0, 0, 0, 0
   \              1C38F81FE007
   \              000000000000
   \              0000        
   \   000008FC   000000000000       DC16 0, 0, 0, 4092, 8188, 14348, 12300, 12300, 12300, 12300
   \              FC0FFC1F0C38
   \              0C300C300C30
   \              0C30        
   \   00000910   0C18FC1FFC07       DC16 6156, 8188, 2044, 12, 12, 12, 12, 12, 12, 12
   \              0C000C000C00
   \              0C000C000C00
   \              0C00        
   \   00000924   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 2016, 8184, 14364
   \              000000000000
   \              0000E007F81F
   \              1C38        
   \   00000938   0E70066003E0       DC16 28686, 24582, 57347, 49155, 49155, 49155, 49155, 49155, 57351, 25350
   \              03C003C003C0
   \              03C003C007E0
   \              0663        
   \   0000094C   0E3F1C3CF83F       DC16 16142, 15388, 16376, 63456, 49152, 0, 0, 0, 0, 0
   \              E0F700C00000
   \              000000000000
   \              0000        
   \   00000960   0000FE0FFE1F       DC16 0, 4094, 8190, 14342, 12294, 12294, 12294, 14342, 8190, 2046
   \              063806300630
   \              06300638FE1F
   \              FE07        
   \   00000974   06030606060C       DC16 774, 1542, 3078, 6150, 6150, 12294, 12294, 24582, 0, 0
   \              061806180630
   \              063006600000
   \              0000        
   \   00000988   000000000000       DC16 0, 0, 0, 0, 0, 992, 4088, 3100, 6156, 6156
   \              00000000E003
   \              F80F1C0C0C18
   \              0C18        
   \   0000099C   0C001C00F803       DC16 12, 28, 1016, 4064, 7680, 14336, 12294, 12294, 12302, 7196
   \              E00F001E0038
   \              063006300E30
   \              1C1C        
   \   000009B0   F80FE0070000       DC16 4088, 2016, 0, 0, 0, 0, 0, 0, 0, 32766
   \              000000000000
   \              000000000000
   \              FE7F        
   \   000009C4   FE7F80018001       DC16 32766, 384, 384, 384, 384, 384, 384, 384, 384, 384
   \              800180018001
   \              800180018001
   \              8001        
   \   000009D8   800180018001       DC16 384, 384, 384, 384, 384, 384, 0, 0, 0, 0
   \              800180018001
   \              000000000000
   \              0000        
   \   000009EC   000000000000       DC16 0, 0, 0, 12300, 12300, 12300, 12300, 12300, 12300, 12300
   \              0C300C300C30
   \              0C300C300C30
   \              0C30        
   \   00000A00   0C300C300C30       DC16 12300, 12300, 12300, 12300, 12300, 12300, 12300, 6168, 8184, 2016
   \              0C300C300C30
   \              0C301818F81F
   \              E007        
   \   00000A14   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 24579, 12294, 12294
   \              000000000000
   \              000003600630
   \              0630        
   \   00000A28   06300C180C18       DC16 12294, 6156, 6156, 6156, 3096, 3096, 3640, 1584, 1584, 1904
   \              0C18180C180C
   \              380E30063006
   \              7007        
   \   00000A3C   60036003C001       DC16 864, 864, 448, 448, 0, 0, 0, 0, 0, 0
   \              C00100000000
   \              000000000000
   \              0000        
   \   00000A50   00000360C361       DC16 0, 24579, 25027, 25027, 25027, 13158, 13158, 13158, 13158, 13158
   \              C361C3616633
   \              663366336633
   \              6633        
   \   00000A64   66336C1B6C1B       DC16 13158, 7020, 7020, 7020, 6700, 7740, 3640, 3640, 0, 0
   \              6C1B2C1A3C1E
   \              380E380E0000
   \              0000        
   \   00000A78   000000000000       DC16 0, 0, 0, 0, 0, 57359, 28684, 12312, 6192, 3184
   \              000000000FE0
   \              0C7018303018
   \              700C        
   \   00000A8C   600EC0078003       DC16 3680, 1984, 896, 896, 960, 1760, 3184, 7216, 6168, 12300
   \              8003C003E006
   \              700C301C1818
   \              0C30        
   \   00000AA0   0E6007E00000       DC16 24590, 57351, 0, 0, 0, 0, 0, 0, 0, 49155
   \              000000000000
   \              000000000000
   \              03C0        
   \   00000AB4   06600C301C38       DC16 24582, 12300, 14364, 6200, 3120, 1632, 2016, 960, 384, 384
   \              3818300C6006
   \              E007C0038001
   \              8001        
   \   00000AC8   800180018001       DC16 384, 384, 384, 384, 384, 384, 0, 0, 0, 0
   \              800180018001
   \              000000000000
   \              0000        
   \   00000ADC   000000000000       DC16 0, 0, 0, 32764, 32764, 24576, 12288, 6144, 3072, 1536
   \              FC7FFC7F0060
   \              00300018000C
   \              0006        
   \   00000AF0   00038001C000       DC16 768, 384, 192, 96, 48, 24, 12, 6, 32766, 32766
   \              600030001800
   \              0C000600FE7F
   \              FE7F        
   \   00000B04   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 992, 992, 96
   \              000000000000
   \              0000E003E003
   \              6000        
   \   00000B18   600060006000       DC16 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
   \              600060006000
   \              600060006000
   \              6000        
   \   00000B2C   600060006000       DC16 96, 96, 96, 96, 96, 96, 96, 992, 992, 0
   \              600060006000
   \              6000E003E003
   \              0000        
   \   00000B40   000030003000       DC16 0, 48, 48, 96, 96, 96, 192, 192, 192, 448
   \              600060006000
   \              C000C000C000
   \              C001        
   \   00000B54   800180018001       DC16 384, 384, 384, 768, 768, 768, 1536, 1536, 0, 0
   \              000300030003
   \              000600060000
   \              0000        
   \   00000B68   000000000000       DC16 0, 0, 0, 0, 0, 992, 992, 768, 768, 768
   \              00000000E003
   \              E00300030003
   \              0003        
   \   00000B7C   000300030003       DC16 768, 768, 768, 768, 768, 768, 768, 768, 768, 768
   \              000300030003
   \              000300030003
   \              0003        
   \   00000B90   000300030003       DC16 768, 768, 768, 768, 768, 992, 992, 0, 0, 0
   \              00030003E003
   \              E00300000000
   \              0000        
   \   00000BA4   C001C0016003       DC16 448, 448, 864, 864, 864, 1584, 1584, 3096, 3096, 0
   \              600360033006
   \              3006180C180C
   \              0000        
   \   00000BB8   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000BCC   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000BE0   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 65535
   \              000000000000
   \              000000000000
   \              FFFF        
   \   00000BF4   FFFF00000000       DC16 65535, 0, 0, 0, 0, 0, 0, 12, 12, 12
   \              000000000000
   \              00000C000C00
   \              0C00        
   \   00000C08   0C000C000C00       DC16 12, 12, 12, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000C1C   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000C30   000000000000       DC16 0, 0, 0, 0, 0, 0, 1008, 2040, 3100, 3084
   \              000000000000
   \              F003F8071C0C
   \              0C0C        
   \   00000C44   000FF00FF80C       DC16 3840, 4080, 3320, 3084, 3084, 3868, 4088, 6384, 0, 0
   \              0C0C0C0C1C0F
   \              F80FF0180000
   \              0000        
   \   00000C58   000000000000       DC16 0, 0, 0, 0, 0, 24, 24, 24, 24, 24
   \              000000001800
   \              180018001800
   \              1800        
   \   00000C6C   D803F80F380C       DC16 984, 4088, 3128, 6168, 6168, 6168, 6168, 6168, 6168, 3128
   \              181818181818
   \              181818181818
   \              380C        
   \   00000C80   F80FD8030000       DC16 4088, 984, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000C94   000000000000       DC16 0, 0, 0, 0, 960, 2032, 3632, 3096, 24, 24
   \              0000C003F007
   \              300E180C1800
   \              1800        
   \   00000CA8   18001800180C       DC16 24, 24, 3096, 3632, 2032, 960, 0, 0, 0, 0
   \              300EF007C003
   \              000000000000
   \              0000        
   \   00000CBC   000000000000       DC16 0, 0, 0, 6144, 6144, 6144, 6144, 6144, 7104, 8176
   \              001800180018
   \              00180018C01B
   \              F01F        
   \   00000CD0   301C18181818       DC16 7216, 6168, 6168, 6168, 6168, 6168, 6168, 7216, 8176, 7104
   \              181818181818
   \              1818301CF01F
   \              C01B        
   \   00000CE4   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000CF8   00000000C003       DC16 0, 0, 960, 4080, 3120, 6168, 8184, 8184, 24, 24
   \              F00F300C1818
   \              F81FF81F1800
   \              1800        
   \   00000D0C   3818301CF00F       DC16 6200, 7216, 4080, 1984, 0, 0, 0, 0, 0, 0
   \              C00700000000
   \              000000000000
   \              0000        
   \   00000D20   0000800FC00F       DC16 0, 3968, 4032, 192, 192, 192, 2032, 2032, 192, 192
   \              C000C000C000
   \              F007F007C000
   \              C000        
   \   00000D34   C000C000C000       DC16 192, 192, 192, 192, 192, 192, 192, 192, 0, 0
   \              C000C000C000
   \              C000C0000000
   \              0000        
   \   00000D48   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000D5C   E00DF80F180E       DC16 3552, 4088, 3608, 3084, 3084, 3084, 3084, 3084, 3084, 3608
   \              0C0C0C0C0C0C
   \              0C0C0C0C0C0C
   \              180E        
   \   00000D70   F80FE00D000C       DC16 4088, 3552, 3072, 3084, 1564, 2040, 496, 0, 0, 24
   \              0C0C1C06F807
   \              F00100000000
   \              1800        
   \   00000D84   180018001800       DC16 24, 24, 24, 24, 2008, 4088, 7224, 6168, 6168, 6168
   \              1800D807F80F
   \              381C18181818
   \              1818        
   \   00000D98   181818181818       DC16 6168, 6168, 6168, 6168, 6168, 6168, 0, 0, 0, 0
   \              181818181818
   \              000000000000
   \              0000        
   \   00000DAC   000000000000       DC16 0, 0, 0, 192, 192, 0, 0, 0, 192, 192
   \              C000C0000000
   \              00000000C000
   \              C000        
   \   00000DC0   C000C000C000       DC16 192, 192, 192, 192, 192, 192, 192, 192, 192, 192
   \              C000C000C000
   \              C000C000C000
   \              C000        
   \   00000DD4   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 192, 192, 0
   \              000000000000
   \              0000C000C000
   \              0000        
   \   00000DE8   00000000C000       DC16 0, 0, 192, 192, 192, 192, 192, 192, 192, 192
   \              C000C000C000
   \              C000C000C000
   \              C000        
   \   00000DFC   C000C000C000       DC16 192, 192, 192, 192, 192, 192, 192, 248, 120, 0
   \              C000C000C000
   \              C000F8007800
   \              0000        
   \   00000E10   00000C000C00       DC16 0, 12, 12, 12, 12, 12, 3084, 1548, 780, 396
   \              0C000C000C00
   \              0C0C0C060C03
   \              8C01        
   \   00000E24   CC006C00FC00       DC16 204, 108, 252, 412, 908, 780, 1548, 3084, 0, 0
   \              9C018C030C03
   \              0C060C0C0000
   \              0000        
   \   00000E38   000000000000       DC16 0, 0, 0, 0, 0, 192, 192, 192, 192, 192
   \              00000000C000
   \              C000C000C000
   \              C000        
   \   00000E4C   C000C000C000       DC16 192, 192, 192, 192, 192, 192, 192, 192, 192, 192
   \              C000C000C000
   \              C000C000C000
   \              C000        
   \   00000E60   C000C0000000       DC16 192, 192, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000E74   000000000000       DC16 0, 0, 0, 0, 15484, 32511, 58311, 49539, 49539, 49539
   \              00007C3CFF7E
   \              C7E383C183C1
   \              83C1        
   \   00000E88   83C183C183C1       DC16 49539, 49539, 49539, 49539, 49539, 49539, 0, 0, 0, 0
   \              83C183C183C1
   \              000000000000
   \              0000        
   \   00000E9C   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 1944, 4088
   \              000000000000
   \              000000009807
   \              F80F        
   \   00000EB0   381C18181818       DC16 7224, 6168, 6168, 6168, 6168, 6168, 6168, 6168, 6168, 6168
   \              181818181818
   \              181818181818
   \              1818        
   \   00000EC4   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000ED8   00000000C003       DC16 0, 0, 960, 4080, 3120, 6168, 6168, 6168, 6168, 6168
   \              F00F300C1818
   \              181818181818
   \              1818        
   \   00000EEC   1818300CF00F       DC16 6168, 3120, 4080, 960, 0, 0, 0, 0, 0, 0
   \              C00300000000
   \              000000000000
   \              0000        
   \   00000F00   000000000000       DC16 0, 0, 0, 0, 0, 0, 984, 4088, 3128, 6168
   \              000000000000
   \              D803F80F380C
   \              1818        
   \   00000F14   181818181818       DC16 6168, 6168, 6168, 6168, 6168, 3128, 4088, 984, 24, 24
   \              18181818380C
   \              F80FD8031800
   \              1800        
   \   00000F28   180018001800       DC16 24, 24, 24, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000F3C   C01BF01F301C       DC16 7104, 8176, 7216, 6168, 6168, 6168, 6168, 6168, 6168, 7216
   \              181818181818
   \              181818181818
   \              301C        
   \   00000F50   F01FC01B0018       DC16 8176, 7104, 6144, 6144, 6144, 6144, 6144, 0, 0, 0
   \              001800180018
   \              001800000000
   \              0000        
   \   00000F64   000000000000       DC16 0, 0, 0, 0, 1968, 1008, 112, 48, 48, 48
   \              0000B007F003
   \              700030003000
   \              3000        
   \   00000F78   300030003000       DC16 48, 48, 48, 48, 48, 48, 0, 0, 0, 0
   \              300030003000
   \              000000000000
   \              0000        
   \   00000F8C   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 992, 1008
   \              000000000000
   \              00000000E003
   \              F003        
   \   00000FA0   380E180C3800       DC16 3640, 3096, 56, 1008, 1984, 3072, 3096, 3640, 2032, 992
   \              F003C007000C
   \              180C380EF007
   \              E003        
   \   00000FB4   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 128, 192
   \              000000000000
   \              000000008000
   \              C000        
   \   00000FC8   C000C000F007       DC16 192, 192, 2032, 2032, 192, 192, 192, 192, 192, 192
   \              F007C000C000
   \              C000C000C000
   \              C000        
   \   00000FDC   C000C000C007       DC16 192, 192, 1984, 1920, 0, 0, 0, 0, 0, 0
   \              800700000000
   \              000000000000
   \              0000        
   \   00000FF0   000000000000       DC16 0, 0, 0, 0, 0, 0, 6168, 6168, 6168, 6168
   \              000000000000
   \              181818181818
   \              1818        
   \   00001004   181818181818       DC16 6168, 6168, 6168, 6168, 6168, 7224, 8176, 6624, 0, 0
   \              18181818381C
   \              F01FE0190000
   \              0000        
   \   00001018   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   0000102C   0C18180C180C       DC16 6156, 3096, 3096, 3096, 1584, 1584, 1584, 864, 864, 864
   \              180C30063006
   \              300660036003
   \              6003        
   \   00001040   C001C0010000       DC16 448, 448, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00001054   000000000000       DC16 0, 0, 0, 0, 16833, 16833, 25027, 25443, 25443, 25443
   \              0000C141C141
   \              C36163636363
   \              6363        
   \   00001068   363636363636       DC16 13878, 13878, 13878, 7196, 7196, 7196, 0, 0, 0, 0
   \              1C1C1C1C1C1C
   \              000000000000
   \              0000        
   \   0000107C   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 14364, 7224
   \              000000000000
   \              000000001C38
   \              381C        
   \   00001090   300C60066003       DC16 3120, 1632, 864, 864, 864, 864, 1632, 3120, 7224, 14364
   \              600360036003
   \              6006300C381C
   \              1C38        
   \   000010A4   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   000010B8   000000001830       DC16 0, 0, 12312, 6192, 6192, 6256, 3168, 3168, 3296, 1728
   \              301830187018
   \              600C600CE00C
   \              C006        
   \   000010CC   C00680038003       DC16 1728, 896, 896, 896, 384, 384, 448, 240, 112, 0
   \              800380018001
   \              C001F0007000
   \              0000        
   \   000010E0   000000000000       DC16 0, 0, 0, 0, 0, 0, 8188, 8188, 3072, 1536
   \              000000000000
   \              FC1FFC1F000C
   \              0006        
   \   000010F4   00038001C000       DC16 768, 384, 192, 96, 48, 24, 8188, 8188, 0, 0
   \              600030001800
   \              FC1FFC1F0000
   \              0000        
   \   00001108   000000000000       DC16 0, 0, 0, 0, 0, 768, 384, 192, 192, 192
   \              000000000003
   \              8001C000C000
   \              C000        
   \   0000111C   C000C000C000       DC16 192, 192, 192, 96, 96, 48, 96, 64, 192, 192
   \              600060003000
   \              60004000C000
   \              C000        
   \   00001130   C000C000C000       DC16 192, 192, 192, 192, 384, 768, 0, 0, 0, 384
   \              C00080010003
   \              000000000000
   \              8001        
   \   00001144   800180018001       DC16 384, 384, 384, 384, 384, 384, 384, 384, 384, 384
   \              800180018001
   \              800180018001
   \              8001        
   \   00001158   800180018001       DC16 384, 384, 384, 384, 384, 384, 384, 384, 384, 384
   \              800180018001
   \              800180018001
   \              8001        
   \   0000116C   800100000000       DC16 384, 0, 0, 96, 192, 448, 384, 384, 384, 384
   \              6000C000C001
   \              800180018001
   \              8001        
   \   00001180   800100030003       DC16 384, 768, 768, 1536, 768, 256, 384, 384, 384, 384
   \              000600030001
   \              800180018001
   \              8001        
   \   00001194   80018001C000       DC16 384, 384, 192, 96, 0, 0, 0, 0, 0, 0
   \              600000000000
   \              000000000000
   \              0000        
   \   000011A8   000000000000       DC16 0, 0, 0, 0, 4336, 8184, 3848, 0, 0, 0
   \              0000F010F81F
   \              080F00000000
   \              0000        
   \   000011BC   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        

   \                                 In section .text, align 4, keep-with-next
   \   __absolute unsigned short const ASCII12x12_Table[1152]
   \                     ASCII12x12_Table:
   \   00000000                      ; Initializer data, 2304 bytes
   \   00000000   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000014   000000000000       DC16 0, 0, 0, 8192, 8192, 8192, 8192, 8192, 8192, 8192
   \              002000200020
   \              002000200020
   \              0020        
   \   00000028   000000200000       DC16 0, 8192, 0, 0, 0, 20480, 20480, 20480, 0, 0
   \              000000000050
   \              005000500000
   \              0000        
   \   0000003C   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 2304, 2304, 4608
   \              000000000000
   \              000000090009
   \              0012        
   \   00000050   007F0012007F       DC16 32512, 4608, 32512, 4608, 9216, 9216, 0, 0, 4096, 14336
   \              001200240024
   \              000000000010
   \              0038        
   \   00000064   005400500050       DC16 21504, 20480, 20480, 14336, 5120, 21504, 21504, 14336, 4096, 0
   \              003800140054
   \              005400380010
   \              0000        
   \   00000078   000080300049       DC16 0, 12416, 18688, 18688, 18944, 12992, 1312, 2336, 2336, 4288
   \              0049004AC032
   \              200520092009
   \              C010        
   \   0000008C   000000000000       DC16 0, 0, 0, 3072, 4608, 4608, 5120, 6144, 9472, 8960
   \              000C00120012
   \              001400180025
   \              0023        
   \   000000A0   0023801D0000       DC16 8960, 7552, 0, 0, 0, 16384, 16384, 16384, 0, 0
   \              000000000040
   \              004000400000
   \              0000        
   \   000000B4   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 2048, 4096, 4096
   \              000000000000
   \              000000080010
   \              0010        
   \   000000C8   002000200020       DC16 8192, 8192, 8192, 8192, 8192, 8192, 4096, 4096, 0, 16384
   \              002000200020
   \              001000100000
   \              0040        
   \   000000DC   002000200010       DC16 8192, 8192, 4096, 4096, 4096, 4096, 4096, 4096, 8192, 8192
   \              001000100010
   \              001000100020
   \              0020        
   \   000000F0   000000200070       DC16 0, 8192, 28672, 8192, 20480, 0, 0, 0, 0, 0
   \              002000500000
   \              000000000000
   \              0000        
   \   00000104   000000000000       DC16 0, 0, 0, 0, 0, 2048, 2048, 32512, 2048, 2048
   \              000000000008
   \              0008007F0008
   \              0008        
   \   00000118   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   0000012C   000000000000       DC16 0, 0, 0, 8192, 8192, 16384, 0, 0, 0, 0
   \              002000200040
   \              000000000000
   \              0000        
   \   00000140   000000000070       DC16 0, 0, 28672, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000154   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 8192, 0, 0
   \              000000000000
   \              000000200000
   \              0000        
   \   00000168   000000100010       DC16 0, 4096, 4096, 4096, 8192, 8192, 8192, 8192, 16384, 16384
   \              001000200020
   \              002000200040
   \              0040        
   \   0000017C   000000000000       DC16 0, 0, 0, 4096, 10240, 17408, 17408, 17408, 17408, 17408
   \              001000280044
   \              004400440044
   \              0044        
   \   00000190   002800100000       DC16 10240, 4096, 0, 0, 0, 4096, 12288, 20480, 4096, 4096
   \              000000000010
   \              003000500010
   \              0010        
   \   000001A4   001000100010       DC16 4096, 4096, 4096, 4096, 0, 0, 0, 12288, 18432, 17408
   \              001000000000
   \              000000300048
   \              0044        
   \   000001B8   000400080010       DC16 1024, 2048, 4096, 8192, 16384, 31744, 0, 0, 0, 12288
   \              00200040007C
   \              000000000000
   \              0030        
   \   000001CC   004800040008       DC16 18432, 1024, 2048, 4096, 2048, 17408, 18432, 12288, 0, 0
   \              001000080044
   \              004800300000
   \              0000        
   \   000001E0   000000080018       DC16 0, 2048, 6144, 6144, 10240, 10240, 18432, 31744, 2048, 2048
   \              001800280028
   \              0048007C0008
   \              0008        
   \   000001F4   000000000000       DC16 0, 0, 0, 15360, 8192, 16384, 28672, 18432, 1024, 17408
   \              003C00200040
   \              007000480004
   \              0044        
   \   00000208   004800300000       DC16 18432, 12288, 0, 0, 0, 6144, 9216, 16384, 20480, 26624
   \              000000000018
   \              002400400050
   \              0068        
   \   0000021C   004400440028       DC16 17408, 17408, 10240, 4096, 0, 0, 0, 31744, 1024, 2048
   \              001000000000
   \              0000007C0004
   \              0008        
   \   00000230   001000100010       DC16 4096, 4096, 4096, 8192, 8192, 8192, 0, 0, 0, 4096
   \              002000200020
   \              000000000000
   \              0010        
   \   00000244   002800440028       DC16 10240, 17408, 10240, 4096, 10240, 17408, 10240, 4096, 0, 0
   \              001000280044
   \              002800100000
   \              0000        
   \   00000258   000000100028       DC16 0, 4096, 10240, 17408, 17408, 11264, 5120, 1024, 18432, 12288
   \              00440044002C
   \              001400040048
   \              0030        
   \   0000026C   000000000000       DC16 0, 0, 0, 0, 0, 8192, 0, 0, 0, 0
   \              000000000020
   \              000000000000
   \              0000        
   \   00000280   000000200000       DC16 0, 8192, 0, 0, 0, 0, 0, 8192, 0, 0
   \              000000000000
   \              000000200000
   \              0000        
   \   00000294   000000000000       DC16 0, 0, 0, 8192, 8192, 16384, 0, 0, 1024, 2048
   \              002000200040
   \              000000000004
   \              0008        
   \   000002A8   003000400030       DC16 12288, 16384, 12288, 2048, 1024, 0, 0, 0, 0, 0
   \              000800040000
   \              000000000000
   \              0000        
   \   000002BC   0000007C0000       DC16 0, 31744, 0, 0, 31744, 0, 0, 0, 0, 0
   \              0000007C0000
   \              000000000000
   \              0000        
   \   000002D0   000000000040       DC16 0, 0, 16384, 8192, 6144, 1024, 6144, 8192, 16384, 0
   \              002000180004
   \              001800200040
   \              0000        
   \   000002E4   000000000000       DC16 0, 0, 0, 14336, 25600, 17408, 1024, 2048, 4096, 4096
   \              003800640044
   \              000400080010
   \              0010        
   \   000002F8   000000100000       DC16 0, 4096, 0, 0, 0, 3968, 4160, 11936, 20896, 20768
   \              00000000800F
   \              4010A02EA051
   \              2051        
   \   0000030C   205120512053       DC16 20768, 20768, 21280, 19904, 8224, 4160, 0, 2048, 5120, 5120
   \              C04D20204010
   \              000000080014
   \              0014        
   \   00000320   00140022003E       DC16 5120, 8704, 15872, 8704, 16640, 16640, 0, 0, 0, 15360
   \              002200410041
   \              000000000000
   \              003C        
   \   00000334   002200220022       DC16 8704, 8704, 8704, 15360, 8704, 8704, 8704, 15360, 0, 0
   \              003C00220022
   \              0022003C0000
   \              0000        
   \   00000348   0000000E0011       DC16 0, 3584, 4352, 8448, 8192, 8192, 8192, 8448, 4352, 3584
   \              002100200020
   \              002000210011
   \              000E        
   \   0000035C   000000000000       DC16 0, 0, 0, 15360, 8704, 8448, 8448, 8448, 8448, 8448
   \              003C00220021
   \              002100210021
   \              0021        
   \   00000370   0022003C0000       DC16 8704, 15360, 0, 0, 0, 15872, 8192, 8192, 8192, 15872
   \              00000000003E
   \              002000200020
   \              003E        
   \   00000384   002000200020       DC16 8192, 8192, 8192, 15872, 0, 0, 0, 15872, 8192, 8192
   \              003E00000000
   \              0000003E0020
   \              0020        
   \   00000398   0020003C0020       DC16 8192, 15360, 8192, 8192, 8192, 8192, 0, 0, 0, 3584
   \              002000200020
   \              000000000000
   \              000E        
   \   000003AC   001100210020       DC16 4352, 8448, 8192, 9984, 8448, 8448, 4352, 3584, 0, 0
   \              002700210021
   \              0011000E0000
   \              0000        
   \   000003C0   000000210021       DC16 0, 8448, 8448, 8448, 8448, 16128, 8448, 8448, 8448, 8448
   \              00210021003F
   \              002100210021
   \              0021        
   \   000003D4   000000000000       DC16 0, 0, 0, 8192, 8192, 8192, 8192, 8192, 8192, 8192
   \              002000200020
   \              002000200020
   \              0020        
   \   000003E8   002000200000       DC16 8192, 8192, 0, 0, 0, 2048, 2048, 2048, 2048, 2048
   \              000000000008
   \              000800080008
   \              0008        
   \   000003FC   000800480048       DC16 2048, 18432, 18432, 12288, 0, 0, 0, 8704, 9216, 10240
   \              003000000000
   \              000000220024
   \              0028        
   \   00000410   002800380028       DC16 10240, 14336, 10240, 9216, 9216, 8704, 0, 0, 0, 8192
   \              002400240022
   \              000000000000
   \              0020        
   \   00000424   002000200020       DC16 8192, 8192, 8192, 8192, 8192, 8192, 8192, 15872, 0, 0
   \              002000200020
   \              0020003E0000
   \              0000        
   \   00000438   000080208031       DC16 0, 8320, 12672, 12672, 12672, 10880, 10880, 10880, 10880, 9344
   \              80318031802A
   \              802A802A802A
   \              8024        
   \   0000044C   000000000000       DC16 0, 0, 0, 8448, 12544, 12544, 10496, 10496, 9472, 8960
   \              002100310031
   \              002900290025
   \              0023        
   \   00000460   002300210000       DC16 8960, 8448, 0, 0, 0, 3072, 4608, 8448, 8448, 8448
   \              00000000000C
   \              001200210021
   \              0021        
   \   00000474   002100210012       DC16 8448, 8448, 4608, 3072, 0, 0, 0, 15360, 8704, 8704
   \              000C00000000
   \              0000003C0022
   \              0022        
   \   00000488   0022003C0020       DC16 8704, 15360, 8192, 8192, 8192, 8192, 0, 0, 0, 3072
   \              002000200020
   \              000000000000
   \              000C        
   \   0000049C   001200210021       DC16 4608, 8448, 8448, 8448, 8448, 8448, 5632, 3328, 256, 0
   \              002100210021
   \              0016000D0001
   \              0000        
   \   000004B0   0000003E0021       DC16 0, 15872, 8448, 8448, 8448, 15872, 9216, 8704, 8448, 8320
   \              00210021003E
   \              002400220021
   \              8020        
   \   000004C4   000000000000       DC16 0, 0, 0, 7168, 8704, 8704, 8192, 7168, 512, 8704
   \              001C00220022
   \              0020001C0002
   \              0022        
   \   000004D8   0022001C0000       DC16 8704, 7168, 0, 0, 0, 15872, 2048, 2048, 2048, 2048
   \              00000000003E
   \              000800080008
   \              0008        
   \   000004EC   000800080008       DC16 2048, 2048, 2048, 2048, 0, 0, 0, 8448, 8448, 8448
   \              000800000000
   \              000000210021
   \              0021        
   \   00000500   002100210021       DC16 8448, 8448, 8448, 8448, 4608, 3072, 0, 0, 0, 16640
   \              00210012000C
   \              000000000000
   \              0041        
   \   00000514   004100220022       DC16 16640, 8704, 8704, 8704, 5120, 5120, 5120, 2048, 0, 0
   \              002200140014
   \              001400080000
   \              0000        
   \   00000528   00004044404A       DC16 0, 17472, 19008, 10816, 10880, 10880, 10880, 10880, 10880, 4352
   \              402A802A802A
   \              802A802A802A
   \              0011        
   \   0000053C   000000000000       DC16 0, 0, 0, 16640, 8704, 5120, 5120, 2048, 5120, 5120
   \              004100220014
   \              001400080014
   \              0014        
   \   00000550   002200410000       DC16 8704, 16640, 0, 0, 0, 16640, 8704, 8704, 5120, 2048
   \              000000000041
   \              002200220014
   \              0008        
   \   00000564   000800080008       DC16 2048, 2048, 2048, 2048, 0, 0, 0, 32256, 512, 1024
   \              000800000000
   \              0000007E0002
   \              0004        
   \   00000578   000800100010       DC16 2048, 4096, 4096, 8192, 16384, 32256, 0, 0, 0, 12288
   \              00200040007E
   \              000000000000
   \              0030        
   \   0000058C   002000200020       DC16 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192
   \              002000200020
   \              002000200020
   \              0020        
   \   000005A0   000000400040       DC16 0, 16384, 16384, 8192, 8192, 8192, 8192, 8192, 4096, 4096
   \              002000200020
   \              002000200010
   \              0010        
   \   000005B4   000000000000       DC16 0, 0, 0, 24576, 8192, 8192, 8192, 8192, 8192, 8192
   \              006000200020
   \              002000200020
   \              0020        
   \   000005C8   002000200020       DC16 8192, 8192, 8192, 8192, 0, 4096, 10240, 10240, 10240, 17408
   \              002000000010
   \              002800280028
   \              0044        
   \   000005DC   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   000005F0   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 32256, 16384, 8192
   \              000000000000
   \              0000007E0040
   \              0020        
   \   00000604   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000618   000000000000       DC16 0, 0, 0, 14336, 17408, 1024, 15360, 17408, 17408, 15360
   \              003800440004
   \              003C00440044
   \              003C        
   \   0000062C   000000000000       DC16 0, 0, 0, 16384, 16384, 22528, 25600, 17408, 17408, 17408
   \              004000400058
   \              006400440044
   \              0044        
   \   00000640   006400580000       DC16 25600, 22528, 0, 0, 0, 0, 0, 12288, 18432, 16384
   \              000000000000
   \              000000300048
   \              0040        
   \   00000654   004000400048       DC16 16384, 16384, 18432, 12288, 0, 0, 0, 1024, 1024, 13312
   \              003000000000
   \              000000040004
   \              0034        
   \   00000668   004C00440044       DC16 19456, 17408, 17408, 17408, 19456, 13312, 0, 0, 0, 0
   \              0044004C0034
   \              000000000000
   \              0000        
   \   0000067C   000000380044       DC16 0, 14336, 17408, 17408, 31744, 16384, 17408, 14336, 0, 0
   \              0044007C0040
   \              004400380000
   \              0000        
   \   00000690   000000600040       DC16 0, 24576, 16384, 57344, 16384, 16384, 16384, 16384, 16384, 16384
   \              00E000400040
   \              004000400040
   \              0040        
   \   000006A4   000000000000       DC16 0, 0, 0, 0, 0, 13312, 19456, 17408, 17408, 17408
   \              000000000034
   \              004C00440044
   \              0044        
   \   000006B8   004C00340004       DC16 19456, 13312, 1024, 17408, 0, 16384, 16384, 22528, 25600, 17408
   \              004400000040
   \              004000580064
   \              0044        
   \   000006CC   004400440044       DC16 17408, 17408, 17408, 17408, 0, 0, 0, 16384, 0, 16384
   \              004400000000
   \              000000400000
   \              0040        
   \   000006E0   004000400040       DC16 16384, 16384, 16384, 16384, 16384, 16384, 0, 0, 0, 16384
   \              004000400040
   \              000000000000
   \              0040        
   \   000006F4   000000400040       DC16 0, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384
   \              004000400040
   \              004000400040
   \              0040        
   \   00000708   000000400040       DC16 0, 16384, 16384, 18432, 20480, 24576, 20480, 20480, 18432, 18432
   \              004800500060
   \              005000500048
   \              0048        
   \   0000071C   000000000000       DC16 0, 0, 0, 16384, 16384, 16384, 16384, 16384, 16384, 16384
   \              004000400040
   \              004000400040
   \              0040        
   \   00000730   004000400000       DC16 16384, 16384, 0, 0, 0, 0, 0, 20992, 27904, 18688
   \              000000000000
   \              00000052006D
   \              0049        
   \   00000744   004900490049       DC16 18688, 18688, 18688, 18688, 0, 0, 0, 0, 0, 22528
   \              004900000000
   \              000000000000
   \              0058        
   \   00000758   006400440044       DC16 25600, 17408, 17408, 17408, 17408, 17408, 0, 0, 0, 0
   \              004400440044
   \              000000000000
   \              0000        
   \   0000076C   000000380044       DC16 0, 14336, 17408, 17408, 17408, 17408, 17408, 14336, 0, 0
   \              004400440044
   \              004400380000
   \              0000        
   \   00000780   000000000000       DC16 0, 0, 0, 22528, 25600, 17408, 17408, 17408, 25600, 22528
   \              005800640044
   \              004400440064
   \              0058        
   \   00000794   004000400000       DC16 16384, 16384, 0, 0, 0, 13312, 19456, 17408, 17408, 17408
   \              000000000034
   \              004C00440044
   \              0044        
   \   000007A8   004C00340004       DC16 19456, 13312, 1024, 1024, 0, 0, 0, 20480, 24576, 16384
   \              000400000000
   \              000000500060
   \              0040        
   \   000007BC   004000400040       DC16 16384, 16384, 16384, 16384, 0, 0, 0, 0, 0, 12288
   \              004000000000
   \              000000000000
   \              0030        
   \   000007D0   004800400030       DC16 18432, 16384, 12288, 2048, 18432, 12288, 0, 0, 0, 16384
   \              000800480030
   \              000000000000
   \              0040        
   \   000007E4   004000E00040       DC16 16384, 57344, 16384, 16384, 16384, 16384, 16384, 24576, 0, 0
   \              004000400040
   \              004000600000
   \              0000        
   \   000007F8   000000000000       DC16 0, 0, 0, 17408, 17408, 17408, 17408, 17408, 19456, 13312
   \              004400440044
   \              00440044004C
   \              0034        
   \   0000080C   000000000000       DC16 0, 0, 0, 0, 0, 17408, 17408, 10240, 10240, 10240
   \              000000000044
   \              004400280028
   \              0028        
   \   00000820   002800100000       DC16 10240, 4096, 0, 0, 0, 0, 0, 18688, 18688, 21760
   \              000000000000
   \              000000490049
   \              0055        
   \   00000834   005500550055       DC16 21760, 21760, 21760, 8704, 0, 0, 0, 0, 0, 17408
   \              002200000000
   \              000000000000
   \              0044        
   \   00000848   002800280010       DC16 10240, 10240, 4096, 10240, 10240, 17408, 0, 0, 0, 0
   \              002800280044
   \              000000000000
   \              0000        
   \   0000085C   000000440044       DC16 0, 17408, 17408, 10240, 10240, 10240, 4096, 4096, 4096, 4096
   \              002800280028
   \              001000100010
   \              0010        
   \   00000870   000000000000       DC16 0, 0, 0, 30720, 2048, 4096, 8192, 8192, 16384, 30720
   \              007800080010
   \              002000200040
   \              0078        
   \   00000884   000000000000       DC16 0, 0, 0, 4096, 8192, 8192, 8192, 8192, 16384, 8192
   \              001000200020
   \              002000200040
   \              0020        
   \   00000898   002000200020       DC16 8192, 8192, 8192, 8192, 0, 8192, 8192, 8192, 8192, 8192
   \              002000000020
   \              002000200020
   \              0020        
   \   000008AC   002000200020       DC16 8192, 8192, 8192, 8192, 8192, 8192, 0, 16384, 8192, 8192
   \              002000200020
   \              000000400020
   \              0020        
   \   000008C0   002000200010       DC16 8192, 8192, 4096, 8192, 8192, 8192, 8192, 8192, 0, 0
   \              002000200020
   \              002000200000
   \              0000        
   \   000008D4   000000000074       DC16 0, 0, 29696, 22528, 0, 0, 0, 0, 0, 0
   \              005800000000
   \              000000000000
   \              0000        
   \   000008E8   000000000070       DC16 0, 0, 28672, 20480, 20480, 20480, 20480, 20480, 20480, 28672
   \              005000500050
   \              005000500050
   \              0070        
   \   000008FC   00000000           DC16 0, 0

   \                                 In section .text, align 4, keep-with-next
   \   __absolute unsigned short const ASCII8x12_Table[1152]
   \                     ASCII8x12_Table:
   \   00000000                      ; Initializer data, 2304 bytes
   \   00000000   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000014   000000000000       DC16 0, 0, 0, 0, 0, 16, 16, 16, 16, 16
   \              000000001000
   \              100010001000
   \              1000        
   \   00000028   100000001000       DC16 16, 0, 16, 0, 0, 0, 0, 40, 40, 40
   \              000000000000
   \              000028002800
   \              2800        
   \   0000003C   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 20
   \              000000000000
   \              000000000000
   \              1400        
   \   00000050   14003E001400       DC16 20, 62, 20, 40, 124, 40, 40, 0, 0, 0
   \              28007C002800
   \              280000000000
   \              0000        
   \   00000064   100038005400       DC16 16, 56, 84, 80, 56, 20, 20, 84, 56, 16
   \              500038001400
   \              140054003800
   \              1000        
   \   00000078   000000000000       DC16 0, 0, 0, 68, 168, 168, 80, 20, 26, 42
   \              4400A800A800
   \              500014001A00
   \              2A00        
   \   0000008C   240000000000       DC16 36, 0, 0, 0, 0, 32, 80, 80, 32, 232
   \              000000002000
   \              500050002000
   \              E800        
   \   000000A0   980098006000       DC16 152, 152, 96, 0, 0, 0, 0, 128, 128, 128
   \              000000000000
   \              000080008000
   \              8000        
   \   000000B4   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 64
   \              000000000000
   \              000000000000
   \              4000        
   \   000000C8   800080008000       DC16 128, 128, 128, 128, 128, 128, 128, 128, 0, 0
   \              800080008000
   \              800080000000
   \              0000        
   \   000000DC   000080004000       DC16 0, 128, 64, 64, 64, 64, 64, 64, 64, 64
   \              400040004000
   \              400040004000
   \              4000        
   \   000000F0   000000000000       DC16 0, 0, 0, 64, 224, 64, 160, 0, 0, 0
   \              4000E0004000
   \              A00000000000
   \              0000        
   \   00000104   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 32, 32, 248
   \              000000000000
   \              000020002000
   \              F800        
   \   00000118   200020000000       DC16 32, 32, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   0000012C   000000000000       DC16 0, 0, 0, 0, 64, 64, 0, 0, 0, 0
   \              000040004000
   \              000000000000
   \              0000        
   \   00000140   000000000000       DC16 0, 0, 0, 0, 192, 0, 0, 0, 0, 0
   \              0000C0000000
   \              000000000000
   \              0000        
   \   00000154   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 64, 0
   \              000000000000
   \              000000004000
   \              0000        
   \   00000168   000000000000       DC16 0, 0, 0, 32, 32, 32, 64, 64, 128, 128
   \              200020002000
   \              400040008000
   \              8000        
   \   0000017C   800000000000       DC16 128, 0, 0, 0, 0, 96, 144, 144, 144, 144
   \              000000006000
   \              900090009000
   \              9000        
   \   00000190   900090006000       DC16 144, 144, 96, 0, 0, 0, 0, 32, 96, 160
   \              000000000000
   \              000020006000
   \              A000        
   \   000001A4   200020002000       DC16 32, 32, 32, 32, 32, 0, 0, 0, 0, 96
   \              200020000000
   \              000000000000
   \              6000        
   \   000001B8   900010001000       DC16 144, 16, 16, 32, 64, 128, 240, 0, 0, 0
   \              200040008000
   \              F00000000000
   \              0000        
   \   000001CC   000060009000       DC16 0, 96, 144, 16, 96, 16, 16, 144, 96, 0
   \              100060001000
   \              100090006000
   \              0000        
   \   000001E0   000000000000       DC16 0, 0, 0, 16, 48, 80, 80, 144, 248, 16
   \              100030005000
   \              50009000F800
   \              1000        
   \   000001F4   100000000000       DC16 16, 0, 0, 0, 0, 112, 64, 128, 224, 16
   \              000000007000
   \              40008000E000
   \              1000        
   \   00000208   100090006000       DC16 16, 144, 96, 0, 0, 0, 0, 96, 144, 128
   \              000000000000
   \              000060009000
   \              8000        
   \   0000021C   A000D0009000       DC16 160, 208, 144, 144, 96, 0, 0, 0, 0, 240
   \              900060000000
   \              000000000000
   \              F000        
   \   00000230   100020002000       DC16 16, 32, 32, 32, 64, 64, 64, 0, 0, 0
   \              200040004000
   \              400000000000
   \              0000        
   \   00000244   000060009000       DC16 0, 96, 144, 144, 96, 144, 144, 144, 96, 0
   \              900060009000
   \              900090006000
   \              0000        
   \   00000258   000000000000       DC16 0, 0, 0, 96, 144, 144, 176, 80, 16, 144
   \              600090009000
   \              B00050001000
   \              9000        
   \   0000026C   600000000000       DC16 96, 0, 0, 0, 0, 0, 0, 64, 0, 0
   \              000000000000
   \              000040000000
   \              0000        
   \   00000280   000000004000       DC16 0, 0, 64, 0, 0, 0, 0, 0, 0, 64
   \              000000000000
   \              000000000000
   \              4000        
   \   00000294   000000000000       DC16 0, 0, 0, 0, 64, 64, 0, 0, 0, 0
   \              000040004000
   \              000000000000
   \              0000        
   \   000002A8   000010006000       DC16 0, 16, 96, 128, 96, 16, 0, 0, 0, 0
   \              800060001000
   \              000000000000
   \              0000        
   \   000002BC   000000000000       DC16 0, 0, 0, 0, 240, 0, 240, 0, 0, 0
   \              0000F0000000
   \              F00000000000
   \              0000        
   \   000002D0   000000000000       DC16 0, 0, 0, 0, 0, 128, 96, 16, 96, 128
   \              000000008000
   \              600010006000
   \              8000        
   \   000002E4   000000000000       DC16 0, 0, 0, 0, 0, 96, 144, 16, 32, 64
   \              000000006000
   \              900010002000
   \              4000        
   \   000002F8   400000004000       DC16 64, 0, 64, 0, 0, 0, 0, 28, 34, 91
   \              000000000000
   \              00001C002200
   \              5B00        
   \   0000030C   A500A500A500       DC16 165, 165, 165, 165, 158, 65, 0, 0, 0, 32
   \              A5009E004100
   \              000000000000
   \              2000        
   \   00000320   500050005000       DC16 80, 80, 80, 80, 112, 136, 136, 0, 0, 0
   \              500070008800
   \              880000000000
   \              0000        
   \   00000334   0000F0008800       DC16 0, 240, 136, 136, 240, 136, 136, 136, 240, 0
   \              8800F0008800
   \              88008800F000
   \              0000        
   \   00000348   000000000000       DC16 0, 0, 0, 56, 68, 132, 128, 128, 132, 68
   \              380044008400
   \              800080008400
   \              4400        
   \   0000035C   380000000000       DC16 56, 0, 0, 0, 0, 224, 144, 136, 136, 136
   \              00000000E000
   \              900088008800
   \              8800        
   \   00000370   88009000E000       DC16 136, 144, 224, 0, 0, 0, 0, 248, 128, 128
   \              000000000000
   \              0000F8008000
   \              8000        
   \   00000384   F80080008000       DC16 248, 128, 128, 128, 248, 0, 0, 0, 0, 120
   \              8000F8000000
   \              000000000000
   \              7800        
   \   00000398   400040007000       DC16 64, 64, 112, 64, 64, 64, 64, 0, 0, 0
   \              400040004000
   \              400000000000
   \              0000        
   \   000003AC   000038004400       DC16 0, 56, 68, 132, 128, 156, 132, 68, 56, 0
   \              840080009C00
   \              840044003800
   \              0000        
   \   000003C0   000000000000       DC16 0, 0, 0, 136, 136, 136, 248, 136, 136, 136
   \              880088008800
   \              F80088008800
   \              8800        
   \   000003D4   880000000000       DC16 136, 0, 0, 0, 0, 128, 128, 128, 128, 128
   \              000000008000
   \              800080008000
   \              8000        
   \   000003E8   800080008000       DC16 128, 128, 128, 0, 0, 0, 0, 16, 16, 16
   \              000000000000
   \              000010001000
   \              1000        
   \   000003FC   100010009000       DC16 16, 16, 144, 144, 96, 0, 0, 0, 0, 136
   \              900060000000
   \              000000000000
   \              8800        
   \   00000410   9000A000E000       DC16 144, 160, 224, 160, 144, 144, 136, 0, 0, 0
   \              A00090009000
   \              880000000000
   \              0000        
   \   00000424   000080008000       DC16 0, 128, 128, 128, 128, 128, 128, 128, 240, 0
   \              800080008000
   \              80008000F000
   \              0000        
   \   00000438   000000000000       DC16 0, 0, 0, 130, 198, 198, 170, 170, 170, 170
   \              8200C600C600
   \              AA00AA00AA00
   \              AA00        
   \   0000044C   920000000000       DC16 146, 0, 0, 0, 0, 132, 196, 164, 164, 148
   \              000000008400
   \              C400A400A400
   \              9400        
   \   00000460   94008C008400       DC16 148, 140, 132, 0, 0, 0, 0, 48, 72, 132
   \              000000000000
   \              000030004800
   \              8400        
   \   00000474   840084008400       DC16 132, 132, 132, 72, 48, 0, 0, 0, 0, 240
   \              480030000000
   \              000000000000
   \              F000        
   \   00000488   880088008800       DC16 136, 136, 136, 240, 128, 128, 128, 0, 0, 0
   \              F00080008000
   \              800000000000
   \              0000        
   \   0000049C   000030004800       DC16 0, 48, 72, 132, 132, 132, 132, 88, 52, 4
   \              840084008400
   \              840058003400
   \              0400        
   \   000004B0   000000000000       DC16 0, 0, 0, 120, 68, 68, 120, 80, 72, 68
   \              780044004400
   \              780050004800
   \              4400        
   \   000004C4   420000000000       DC16 66, 0, 0, 0, 0, 112, 136, 128, 112, 8
   \              000000007000
   \              880080007000
   \              0800        
   \   000004D8   880088007000       DC16 136, 136, 112, 0, 0, 0, 0, 248, 32, 32
   \              000000000000
   \              0000F8002000
   \              2000        
   \   000004EC   200020002000       DC16 32, 32, 32, 32, 32, 0, 0, 0, 0, 132
   \              200020000000
   \              000000000000
   \              8400        
   \   00000500   840084008400       DC16 132, 132, 132, 132, 132, 72, 48, 0, 0, 0
   \              840084004800
   \              300000000000
   \              0000        
   \   00000514   000088008800       DC16 0, 136, 136, 80, 80, 80, 80, 80, 32, 0
   \              500050005000
   \              500050002000
   \              0000        
   \   00000528   000000000000       DC16 0, 0, 0, 146, 170, 170, 170, 170, 170, 170
   \              9200AA00AA00
   \              AA00AA00AA00
   \              AA00        
   \   0000053C   440000000000       DC16 68, 0, 0, 0, 0, 132, 72, 72, 48, 48
   \              000000008400
   \              480048003000
   \              3000        
   \   00000550   480048008400       DC16 72, 72, 132, 0, 0, 0, 0, 136, 80, 80
   \              000000000000
   \              000088005000
   \              5000        
   \   00000564   200020002000       DC16 32, 32, 32, 32, 32, 0, 0, 0, 0, 248
   \              200020000000
   \              000000000000
   \              F800        
   \   00000578   080010002000       DC16 8, 16, 32, 32, 64, 128, 248, 0, 0, 0
   \              200040008000
   \              F80000000000
   \              0000        
   \   0000058C   0000C0008000       DC16 0, 192, 128, 128, 128, 128, 128, 128, 128, 128
   \              800080008000
   \              800080008000
   \              8000        
   \   000005A0   000000000000       DC16 0, 0, 0, 128, 128, 64, 64, 64, 64, 32
   \              800080004000
   \              400040004000
   \              2000        
   \   000005B4   200000000000       DC16 32, 0, 0, 0, 0, 192, 64, 64, 64, 64
   \              00000000C000
   \              400040004000
   \              4000        
   \   000005C8   400040004000       DC16 64, 64, 64, 64, 0, 0, 0, 64, 160, 160
   \              400000000000
   \              00004000A000
   \              A000        
   \   000005DC   A00000000000       DC16 160, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   000005F0   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
   \              000000000000
   \              0000F8000000
   \              0000        
   \   00000604   000080004000       DC16 0, 128, 64, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000618   000000000000       DC16 0, 0, 0, 0, 0, 224, 16, 112, 144, 144
   \              00000000E000
   \              100070009000
   \              9000        
   \   0000062C   700000000000       DC16 112, 0, 0, 0, 0, 128, 128, 160, 208, 144
   \              000000008000
   \              8000A000D000
   \              9000        
   \   00000640   9000D000A000       DC16 144, 208, 160, 0, 0, 0, 0, 0, 0, 96
   \              000000000000
   \              000000000000
   \              6000        
   \   00000654   900080008000       DC16 144, 128, 128, 144, 96, 0, 0, 0, 0, 16
   \              900060000000
   \              000000000000
   \              1000        
   \   00000668   10005000B000       DC16 16, 80, 176, 144, 144, 176, 80, 0, 0, 0
   \              90009000B000
   \              500000000000
   \              0000        
   \   0000067C   000000000000       DC16 0, 0, 0, 96, 144, 240, 128, 144, 96, 0
   \              60009000F000
   \              800090006000
   \              0000        
   \   00000690   000000000000       DC16 0, 0, 0, 192, 128, 192, 128, 128, 128, 128
   \              C0008000C000
   \              800080008000
   \              8000        
   \   000006A4   800000000000       DC16 128, 0, 0, 0, 0, 0, 0, 80, 176, 144
   \              000000000000
   \              00005000B000
   \              9000        
   \   000006B8   9000B0005000       DC16 144, 176, 80, 16, 0, 0, 0, 128, 128, 160
   \              100000000000
   \              000080008000
   \              A000        
   \   000006CC   D00090009000       DC16 208, 144, 144, 144, 144, 0, 0, 0, 0, 128
   \              900090000000
   \              000000000000
   \              8000        
   \   000006E0   000080008000       DC16 0, 128, 128, 128, 128, 128, 128, 0, 0, 0
   \              800080008000
   \              800000000000
   \              0000        
   \   000006F4   000080000000       DC16 0, 128, 0, 128, 128, 128, 128, 128, 128, 128
   \              800080008000
   \              800080008000
   \              8000        
   \   00000708   000000000000       DC16 0, 0, 0, 128, 128, 144, 160, 192, 160, 144
   \              800080009000
   \              A000C000A000
   \              9000        
   \   0000071C   900000000000       DC16 144, 0, 0, 0, 0, 128, 128, 128, 128, 128
   \              000000008000
   \              800080008000
   \              8000        
   \   00000730   800080008000       DC16 128, 128, 128, 0, 0, 0, 0, 0, 0, 166
   \              000000000000
   \              000000000000
   \              A600        
   \   00000744   DA0092009200       DC16 218, 146, 146, 146, 146, 0, 0, 0, 0, 0
   \              920092000000
   \              000000000000
   \              0000        
   \   00000758   0000A000D000       DC16 0, 160, 208, 144, 144, 144, 144, 0, 0, 0
   \              900090009000
   \              900000000000
   \              0000        
   \   0000076C   000000000000       DC16 0, 0, 0, 96, 144, 144, 144, 144, 96, 0
   \              600090009000
   \              900090006000
   \              0000        
   \   00000780   000000000000       DC16 0, 0, 0, 0, 0, 160, 208, 144, 144, 208
   \              00000000A000
   \              D00090009000
   \              D000        
   \   00000794   A00080000000       DC16 160, 128, 0, 0, 0, 0, 0, 80, 176, 144
   \              000000000000
   \              00005000B000
   \              9000        
   \   000007A8   9000B0005000       DC16 144, 176, 80, 16, 0, 0, 0, 0, 0, 160
   \              100000000000
   \              000000000000
   \              A000        
   \   000007BC   C00080008000       DC16 192, 128, 128, 128, 128, 0, 0, 0, 0, 0
   \              800080000000
   \              000000000000
   \              0000        
   \   000007D0   0000E0009000       DC16 0, 224, 144, 64, 32, 144, 96, 0, 0, 0
   \              400020009000
   \              600000000000
   \              0000        
   \   000007E4   000080008000       DC16 0, 128, 128, 192, 128, 128, 128, 128, 192, 0
   \              C00080008000
   \              80008000C000
   \              0000        
   \   000007F8   000000000000       DC16 0, 0, 0, 0, 0, 144, 144, 144, 144, 176
   \              000000009000
   \              900090009000
   \              B000        
   \   0000080C   500000000000       DC16 80, 0, 0, 0, 0, 0, 0, 136, 136, 80
   \              000000000000
   \              000088008800
   \              5000        
   \   00000820   500050002000       DC16 80, 80, 32, 0, 0, 0, 0, 0, 0, 146
   \              000000000000
   \              000000000000
   \              9200        
   \   00000834   AA00AA00AA00       DC16 170, 170, 170, 170, 68, 0, 0, 0, 0, 0
   \              AA0044000000
   \              000000000000
   \              0000        
   \   00000848   000088005000       DC16 0, 136, 80, 32, 32, 80, 136, 0, 0, 0
   \              200020005000
   \              880000000000
   \              0000        
   \   0000085C   000000000000       DC16 0, 0, 0, 136, 80, 80, 80, 32, 32, 32
   \              880050005000
   \              500020002000
   \              2000        
   \   00000870   000000000000       DC16 0, 0, 0, 0, 0, 240, 16, 32, 64, 128
   \              00000000F000
   \              100020004000
   \              8000        
   \   00000884   F00000000000       DC16 240, 0, 0, 0, 0, 192, 128, 128, 128, 0
   \              00000000C000
   \              800080008000
   \              0000        
   \   00000898   800080008000       DC16 128, 128, 128, 128, 0, 0, 0, 128, 128, 128
   \              800000000000
   \              000080008000
   \              8000        
   \   000008AC   800080008000       DC16 128, 128, 128, 128, 128, 128, 0, 0, 0, 192
   \              800080008000
   \              000000000000
   \              C000        
   \   000008C0   400040004000       DC16 64, 64, 64, 32, 64, 64, 64, 64, 0, 0
   \              200040004000
   \              400040000000
   \              0000        
   \   000008D4   000000000000       DC16 0, 0, 0, 0, 232, 176, 0, 0, 0, 0
   \              0000E800B000
   \              000000000000
   \              0000        
   \   000008E8   000000000000       DC16 0, 0, 0, 0, 224, 160, 160, 160, 160, 160
   \              0000E000A000
   \              A000A000A000
   \              A000        
   \   000008FC   E0000000           DC16 224, 0

   \                                 In section .text, align 4, keep-with-next
   \   __absolute unsigned short const ASCII8x8_Table[768]
   \                     ASCII8x8_Table:
   \   00000000                      ; Initializer data, 1536 bytes
   \   00000000   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 64, 64
   \              000000000000
   \              000000004000
   \              4000        
   \   00000014   400040004000       DC16 64, 64, 64, 64, 0, 64, 160, 160, 160, 0
   \              400000004000
   \              A000A000A000
   \              0000        
   \   00000028   000000000000       DC16 0, 0, 0, 0, 0, 36, 36, 254, 72, 252
   \              000000002400
   \              2400FE004800
   \              FC00        
   \   0000003C   480048003800       DC16 72, 72, 56, 84, 80, 56, 20, 20, 84, 56
   \              540050003800
   \              140014005400
   \              3800        
   \   00000050   4400A800A800       DC16 68, 168, 168, 80, 20, 26, 42, 36, 16, 40
   \              500014001A00
   \              2A0024001000
   \              2800        
   \   00000064   280010007400       DC16 40, 16, 116, 76, 76, 48, 16, 16, 16, 0
   \              4C004C003000
   \              100010001000
   \              0000        
   \   00000078   000000000000       DC16 0, 0, 0, 0, 8, 16, 16, 16, 16, 16
   \              000008001000
   \              100010001000
   \              1000        
   \   0000008C   100008001000       DC16 16, 8, 16, 8, 8, 8, 8, 8, 8, 16
   \              080008000800
   \              080008000800
   \              1000        
   \   000000A0   000000002400       DC16 0, 0, 36, 24, 60, 24, 36, 0, 0, 0
   \              18003C001800
   \              240000000000
   \              0000        
   \   000000B4   100010007C00       DC16 16, 16, 124, 16, 16, 0, 0, 0, 0, 0
   \              100010000000
   \              000000000000
   \              0000        
   \   000000C8   000008000800       DC16 0, 8, 8, 16, 0, 0, 0, 0, 60, 0
   \              100000000000
   \              000000003C00
   \              0000        
   \   000000DC   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 24, 24
   \              000000000000
   \              000000001800
   \              1800        
   \   000000F0   080008000800       DC16 8, 8, 8, 16, 16, 32, 32, 32, 24, 36
   \              100010002000
   \              200020001800
   \              2400        
   \   00000104   240024002400       DC16 36, 36, 36, 36, 36, 24, 8, 24, 40, 8
   \              240024001800
   \              080018002800
   \              0800        
   \   00000118   080008000800       DC16 8, 8, 8, 8, 56, 68, 0, 4, 8, 16
   \              080038004400
   \              000004000800
   \              1000        
   \   0000012C   20007C001800       DC16 32, 124, 24, 36, 4, 24, 4, 4, 36, 24
   \              240004001800
   \              040004002400
   \              1800        
   \   00000140   04000C001400       DC16 4, 12, 20, 36, 68, 126, 4, 4, 60, 32
   \              240044007E00
   \              040004003C00
   \              2000        
   \   00000154   200038000400       DC16 32, 56, 4, 4, 36, 24, 24, 36, 32, 56
   \              040024001800
   \              180024002000
   \              3800        
   \   00000168   240024002400       DC16 36, 36, 36, 24, 60, 4, 8, 8, 8, 16
   \              18003C000400
   \              080008000800
   \              1000        
   \   0000017C   100010001800       DC16 16, 16, 24, 36, 36, 24, 36, 36, 36, 24
   \              240024001800
   \              240024002400
   \              1800        
   \   00000190   180024002400       DC16 24, 36, 36, 36, 28, 4, 36, 24, 0, 0
   \              24001C000400
   \              240018000000
   \              0000        
   \   000001A4   100000000000       DC16 16, 0, 0, 16, 0, 0, 0, 0, 8, 0
   \              100000000000
   \              000000000800
   \              0000        
   \   000001B8   000008001000       DC16 0, 8, 16, 0, 0, 0, 4, 24, 32, 24
   \              000000000000
   \              040018002000
   \              1800        
   \   000001CC   040000000000       DC16 4, 0, 0, 0, 0, 60, 0, 60, 0, 0
   \              000000003C00
   \              00003C000000
   \              0000        
   \   000001E0   000000002000       DC16 0, 0, 32, 24, 4, 24, 32, 0, 24, 36
   \              180004001800
   \              200000001800
   \              2400        
   \   000001F4   040008001000       DC16 4, 8, 16, 16, 0, 16, 60, 66, 153, 165
   \              100000001000
   \              3C0042009900
   \              A500        
   \   00000208   A5009D004200       DC16 165, 157, 66, 56, 56, 68, 68, 68, 124, 68
   \              380038004400
   \              440044007C00
   \              4400        
   \   0000021C   440044007800       DC16 68, 68, 120, 68, 68, 120, 68, 68, 68, 120
   \              440044007800
   \              440044004400
   \              7800        
   \   00000230   1C0022004200       DC16 28, 34, 66, 64, 64, 66, 34, 28, 112, 72
   \              400040004200
   \              22001C007000
   \              4800        
   \   00000244   440044004400       DC16 68, 68, 68, 68, 72, 112, 124, 64, 64, 124
   \              440048007000
   \              7C0040004000
   \              7C00        
   \   00000258   400040004000       DC16 64, 64, 64, 124, 60, 32, 32, 56, 32, 32
   \              7C003C002000
   \              200038002000
   \              2000        
   \   0000026C   200020001C00       DC16 32, 32, 28, 34, 66, 64, 78, 66, 34, 28
   \              220042004000
   \              4E0042002200
   \              1C00        
   \   00000280   440044004400       DC16 68, 68, 68, 124, 68, 68, 68, 68, 16, 16
   \              7C0044004400
   \              440044001000
   \              1000        
   \   00000294   100010001000       DC16 16, 16, 16, 16, 16, 16, 4, 4, 4, 4
   \              100010001000
   \              040004000400
   \              0400        
   \   000002A8   040024002400       DC16 4, 36, 36, 24, 68, 72, 80, 112, 80, 72
   \              180044004800
   \              500070005000
   \              4800        
   \   000002BC   480044002000       DC16 72, 68, 32, 32, 32, 32, 32, 32, 32, 60
   \              200020002000
   \              200020002000
   \              3C00        
   \   000002D0   8200C600C600       DC16 130, 198, 198, 170, 170, 170, 170, 146, 66, 98
   \              AA00AA00AA00
   \              AA0092004200
   \              6200        
   \   000002E4   520052004A00       DC16 82, 82, 74, 74, 70, 66, 24, 36, 66, 66
   \              4A0046004200
   \              180024004200
   \              4200        
   \   000002F8   420042002400       DC16 66, 66, 36, 24, 120, 68, 68, 68, 120, 64
   \              180078004400
   \              440044007800
   \              4000        
   \   0000030C   400040001800       DC16 64, 64, 24, 36, 66, 66, 66, 66, 44, 26
   \              240042004200
   \              420042002C00
   \              1A00        
   \   00000320   780044004400       DC16 120, 68, 68, 120, 80, 72, 68, 66, 56, 68
   \              780050004800
   \              440042003800
   \              4400        
   \   00000334   400038000400       DC16 64, 56, 4, 68, 68, 56, 124, 16, 16, 16
   \              440044003800
   \              7C0010001000
   \              1000        
   \   00000348   100010001000       DC16 16, 16, 16, 16, 66, 66, 66, 66, 66, 66
   \              100042004200
   \              420042004200
   \              4200        
   \   0000035C   240018004400       DC16 36, 24, 68, 68, 40, 40, 40, 40, 40, 16
   \              440028002800
   \              280028002800
   \              1000        
   \   00000370   9200AA00AA00       DC16 146, 170, 170, 170, 170, 170, 170, 68, 66, 36
   \              AA00AA00AA00
   \              AA0044004200
   \              2400        
   \   00000384   240018001800       DC16 36, 24, 24, 36, 36, 66, 68, 40, 40, 16
   \              240024004200
   \              440028002800
   \              1000        
   \   00000398   100010001000       DC16 16, 16, 16, 16, 124, 4, 8, 16, 16, 32
   \              10007C000400
   \              080010001000
   \              2000        
   \   000003AC   40007C001C00       DC16 64, 124, 28, 16, 16, 16, 16, 16, 16, 28
   \              100010001000
   \              100010001000
   \              1C00        
   \   000003C0   100010000800       DC16 16, 16, 8, 8, 8, 8, 4, 4, 28, 4
   \              080008000800
   \              040004001C00
   \              0400        
   \   000003D4   040004000400       DC16 4, 4, 4, 4, 4, 28, 16, 40, 68, 0
   \              040004001C00
   \              100028004400
   \              0000        
   \   000003E8   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   000003FC   000000002000       DC16 0, 0, 32, 16, 16, 0, 0, 0, 0, 0
   \              100010000000
   \              000000000000
   \              0000        
   \   00000410   000000001800       DC16 0, 0, 24, 4, 28, 36, 36, 28, 32, 32
   \              04001C002400
   \              24001C002000
   \              2000        
   \   00000424   280034002400       DC16 40, 52, 36, 36, 52, 40, 0, 0, 24, 36
   \              240034002800
   \              000000001800
   \              2400        
   \   00000438   200020002400       DC16 32, 32, 36, 24, 4, 4, 20, 44, 36, 36
   \              180004000400
   \              14002C002400
   \              2400        
   \   0000044C   2C0014000000       DC16 44, 20, 0, 0, 24, 36, 60, 32, 36, 24
   \              000018002400
   \              3C0020002400
   \              1800        
   \   00000460   000018001000       DC16 0, 24, 16, 16, 24, 16, 16, 16, 0, 24
   \              100018001000
   \              100010000000
   \              1800        
   \   00000474   240024001800       DC16 36, 36, 24, 4, 36, 24, 32, 32, 40, 52
   \              040024001800
   \              200020002800
   \              3400        
   \   00000488   240024002400       DC16 36, 36, 36, 36, 16, 0, 16, 16, 16, 16
   \              240010000000
   \              100010001000
   \              1000        
   \   0000049C   100010000800       DC16 16, 16, 8, 0, 8, 8, 8, 8, 40, 16
   \              000008000800
   \              080008002800
   \              1000        
   \   000004B0   200020002400       DC16 32, 32, 36, 40, 48, 40, 36, 36, 16, 16
   \              280030002800
   \              240024001000
   \              1000        
   \   000004C4   100010001000       DC16 16, 16, 16, 16, 16, 16, 0, 0, 166, 218
   \              100010001000
   \              00000000A600
   \              DA00        
   \   000004D8   920092009200       DC16 146, 146, 146, 146, 0, 0, 40, 52, 36, 36
   \              920000000000
   \              280034002400
   \              2400        
   \   000004EC   240024000000       DC16 36, 36, 0, 0, 24, 36, 36, 36, 36, 24
   \              000018002400
   \              240024002400
   \              1800        
   \   00000500   000028003400       DC16 0, 40, 52, 36, 56, 32, 32, 32, 0, 20
   \              240038002000
   \              200020000000
   \              1400        
   \   00000514   2C0024001C00       DC16 44, 36, 28, 4, 4, 4, 0, 0, 44, 48
   \              040004000400
   \              000000002C00
   \              3000        
   \   00000528   200020002000       DC16 32, 32, 32, 32, 0, 0, 24, 36, 16, 8
   \              200000000000
   \              180024001000
   \              0800        
   \   0000053C   240018000000       DC16 36, 24, 0, 16, 56, 16, 16, 16, 16, 24
   \              100038001000
   \              100010001000
   \              1800        
   \   00000550   000000002400       DC16 0, 0, 36, 36, 36, 36, 44, 20, 0, 0
   \              240024002400
   \              2C0014000000
   \              0000        
   \   00000564   440044002800       DC16 68, 68, 40, 40, 40, 16, 0, 0, 146, 170
   \              280028001000
   \              000000009200
   \              AA00        
   \   00000578   AA00AA00AA00       DC16 170, 170, 170, 68, 0, 0, 68, 40, 16, 16
   \              440000000000
   \              440028001000
   \              1000        
   \   0000058C   280044000000       DC16 40, 68, 0, 40, 40, 40, 16, 16, 16, 16
   \              280028002800
   \              100010001000
   \              1000        
   \   000005A0   000000003C00       DC16 0, 0, 60, 4, 8, 16, 32, 60, 0, 8
   \              040008001000
   \              20003C000000
   \              0800        
   \   000005B4   100010002000       DC16 16, 16, 32, 16, 16, 8, 16, 16, 16, 16
   \              100010000800
   \              100010001000
   \              1000        
   \   000005C8   100010001000       DC16 16, 16, 16, 16, 0, 16, 8, 8, 4, 8
   \              100000001000
   \              080008000400
   \              0800        
   \   000005DC   080010000000       DC16 8, 16, 0, 0, 0, 96, 146, 12, 0, 0
   \              000000006000
   \              92000C000000
   \              0000        
   \   000005F0   FF00FF00FF00       DC16 255, 255, 255, 255, 255, 255, 255, 255
   \              FF00FF00FF00
   \              FF00FF00    

   \                                 In section .data, align 4
   \   __absolute sFONT Font16x24
   \                     Font16x24:
   \   00000000   ........           DC32 ASCII16x24_Table
   \   00000004   10001800           DC16 16, 24

   \                                 In section .data, align 4
   \   __absolute sFONT Font12x12
   \                     Font12x12:
   \   00000000   ........           DC32 ASCII12x12_Table
   \   00000004   0C000C00           DC16 12, 12

   \                                 In section .data, align 4
   \   __absolute sFONT Font8x12
   \                     Font8x12:
   \   00000000   ........           DC32 ASCII8x12_Table
   \   00000004   08000C00           DC16 8, 12

   \                                 In section .data, align 4
   \   __absolute sFONT Font8x8
   \                     Font8x8:
   \   00000000   ........           DC32 ASCII8x8_Table
   \   00000004   08000800           DC16 8, 8
     27          
     28          /** @addtogroup Utilities
     29            * @{
     30            */ 
     31          
     32          /** @addtogroup STM32_EVAL
     33            * @{
     34            */ 
     35          
     36          /** @addtogroup STM3220F_EVAL
     37            * @{
     38            */
     39              
     40          /** @defgroup STM3220F_EVAL_LCD 
     41            * @brief This file includes the LCD driver for AM-240320L8TNQW00H (LCD_ILI9320)
     42            *        and AM240320D5TOQW01H (LCD_ILI9325) Liquid Crystal Display Modules
     43            *        of STM3220F_EVAL board.
     44            * @{
     45            */ 
     46          
     47          /** @defgroup STM3220F_EVAL_LCD_Private_TypesDefinitions
     48            * @{
     49            */ 
     50          typedef struct
     51          {
     52            __IO uint16_t LCD_REG;
     53            __IO uint16_t LCD_RAM;
     54          } LCD_TypeDef;
     55          /**
     56            * @}
     57            */ 
     58          
     59          
     60          /** @defgroup STM3220F_EVAL_LCD_Private_Defines
     61            * @{
     62            */
     63          /* Note: LCD /CS is NE3 - Bank 3 of NOR/SRAM Bank 1~4 */
     64          #define LCD_BASE           ((uint32_t)(0x60000000 | 0x08000000))
     65          #define LCD                ((LCD_TypeDef *) LCD_BASE)
     66          #define MAX_POLY_CORNERS   200
     67          #define POLY_Y(Z)          ((int32_t)((Points + Z)->X))
     68          #define POLY_X(Z)          ((int32_t)((Points + Z)->Y))
     69          /**
     70            * @}
     71            */ 
     72          
     73          /** @defgroup STM3220F_EVAL_LCD_Private_Macros
     74            * @{
     75            */
     76          #define ABS(X)  ((X) > 0 ? (X) : -(X))     
     77          /**
     78            * @}
     79            */ 
     80              
     81          /** @defgroup STM3220F_EVAL_LCD_Private_Variables
     82            * @{
     83            */ 

   \                                 In section .bss, align 4
     84          static sFONT *LCD_Currentfonts;
   \                     LCD_Currentfonts:
   \   00000000                      DS8 4
     85          
     86            /* Global variables to set the written text color */

   \                                 In section .bss, align 2
     87          static __IO uint16_t TextColor = 0x0000, BackColor = 0xFFFF;
   \                     TextColor:
   \   00000000                      DS8 2

   \                                 In section .data, align 2
   \                     BackColor:
   \   00000000   FFFF               DC16 65535
     88            
     89          /**
     90            * @}
     91            */ 
     92          
     93          
     94          /** @defgroup STM3220F_EVAL_LCD_Private_FunctionPrototypes
     95            * @{
     96            */ 
     97          #ifndef USE_Delay
     98          static void delay(__IO uint32_t nCount);
     99          #endif /* USE_Delay*/
    100          static void PutPixel(int16_t x, int16_t y);
    101          static void LCD_PolyLineRelativeClosed(pPoint Points, uint16_t PointCount, uint16_t Closed);
    102          
    103          
    104          /**
    105            * @}
    106            */ 
    107          
    108          
    109          /** @defgroup STM3220F_EVAL_LCD_Private_Functions
    110            * @{
    111            */ 
    112          
    113          /**
    114            * @brief  DeInitializes the LCD.
    115            * @param  None
    116            * @retval None
    117            */

   \                                 In section .text, align 2, keep-with-next
    118          void LCD_DeInit(void)
    119          { 
   \                     LCD_DeInit:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   83B0               SUB      SP,SP,#+12
    120            GPIO_InitTypeDef GPIO_InitStructure;
    121          
    122            /*!< LCD Display Off */
    123            LCD_DisplayOff();
   \   00000004   ........           BL       LCD_DisplayOff
    124          
    125            /* BANK 3 (of NOR/SRAM Bank 1~4) is disabled */
    126            FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE);
   \   00000008   0121               MOVS     R1,#+1
   \   0000000A   0420               MOVS     R0,#+4
   \   0000000C   ........           BL       FSMC_NORSRAMCmd
    127            
    128            /*!< LCD_SPI DeInit */
    129            FSMC_NORSRAMDeInit(FSMC_Bank1_NORSRAM3);
   \   00000010   0420               MOVS     R0,#+4
   \   00000012   ........           BL       FSMC_NORSRAMDeInit
    130             
    131          /*-- GPIO Configuration ------------------------------------------------------*/
    132            /* SRAM Data lines configuration */
    133            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
    134                                          GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15;
   \   00000016   4CF20370           MOVW     R0,#+50947
   \   0000001A   0090               STR      R0,[SP, #+0]
    135            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
   \   0000001C   0020               MOVS     R0,#+0
   \   0000001E   8DF80400           STRB     R0,[SP, #+4]
    136            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
   \   00000022   0020               MOVS     R0,#+0
   \   00000024   8DF80700           STRB     R0,[SP, #+7]
    137            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   00000028   00A9               ADD      R1,SP,#+0
   \   0000002A   ........           LDR.W    R0,??DataTable21  ;; 0x40020c00
   \   0000002E   ........           BL       GPIO_Init
    138           
    139            GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_MCO);
   \   00000032   0022               MOVS     R2,#+0
   \   00000034   0021               MOVS     R1,#+0
   \   00000036   ........           LDR.W    R0,??DataTable21  ;; 0x40020c00
   \   0000003A   ........           BL       GPIO_PinAFConfig
    140            GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_MCO);
   \   0000003E   0022               MOVS     R2,#+0
   \   00000040   0121               MOVS     R1,#+1
   \   00000042   ........           LDR.W    R0,??DataTable21  ;; 0x40020c00
   \   00000046   ........           BL       GPIO_PinAFConfig
    141            GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_MCO);
   \   0000004A   0022               MOVS     R2,#+0
   \   0000004C   0821               MOVS     R1,#+8
   \   0000004E   ........           LDR.W    R0,??DataTable21  ;; 0x40020c00
   \   00000052   ........           BL       GPIO_PinAFConfig
    142            GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_MCO);
   \   00000056   0022               MOVS     R2,#+0
   \   00000058   0921               MOVS     R1,#+9
   \   0000005A   ........           LDR.W    R0,??DataTable21  ;; 0x40020c00
   \   0000005E   ........           BL       GPIO_PinAFConfig
    143            GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_MCO);
   \   00000062   0022               MOVS     R2,#+0
   \   00000064   0A21               MOVS     R1,#+10
   \   00000066   ........           LDR.W    R0,??DataTable21  ;; 0x40020c00
   \   0000006A   ........           BL       GPIO_PinAFConfig
    144            GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_MCO);
   \   0000006E   0022               MOVS     R2,#+0
   \   00000070   0E21               MOVS     R1,#+14
   \   00000072   ........           LDR.W    R0,??DataTable21  ;; 0x40020c00
   \   00000076   ........           BL       GPIO_PinAFConfig
    145            GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_MCO);
   \   0000007A   0022               MOVS     R2,#+0
   \   0000007C   0F21               MOVS     R1,#+15
   \   0000007E   ........           LDR.W    R0,??DataTable21  ;; 0x40020c00
   \   00000082   ........           BL       GPIO_PinAFConfig
    146          
    147          
    148            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
    149                                          GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
    150                                          GPIO_Pin_15;
   \   00000086   4FF68070           MOVW     R0,#+65408
   \   0000008A   0090               STR      R0,[SP, #+0]
    151          
    152            GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   0000008C   00A9               ADD      R1,SP,#+0
   \   0000008E   ........           LDR.W    R0,??DataTable21_1  ;; 0x40021000
   \   00000092   ........           BL       GPIO_Init
    153          
    154            GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_MCO);
   \   00000096   0022               MOVS     R2,#+0
   \   00000098   0721               MOVS     R1,#+7
   \   0000009A   ........           LDR.W    R0,??DataTable21_1  ;; 0x40021000
   \   0000009E   ........           BL       GPIO_PinAFConfig
    155            GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_MCO);
   \   000000A2   0022               MOVS     R2,#+0
   \   000000A4   0821               MOVS     R1,#+8
   \   000000A6   ........           LDR.W    R0,??DataTable21_1  ;; 0x40021000
   \   000000AA   ........           BL       GPIO_PinAFConfig
    156            GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_MCO);
   \   000000AE   0022               MOVS     R2,#+0
   \   000000B0   0921               MOVS     R1,#+9
   \   000000B2   ........           LDR.W    R0,??DataTable21_1  ;; 0x40021000
   \   000000B6   ........           BL       GPIO_PinAFConfig
    157            GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_MCO);
   \   000000BA   0022               MOVS     R2,#+0
   \   000000BC   0A21               MOVS     R1,#+10
   \   000000BE   ........           LDR.W    R0,??DataTable21_1  ;; 0x40021000
   \   000000C2   ........           BL       GPIO_PinAFConfig
    158            GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_MCO);
   \   000000C6   0022               MOVS     R2,#+0
   \   000000C8   0B21               MOVS     R1,#+11
   \   000000CA   ........           LDR.W    R0,??DataTable21_1  ;; 0x40021000
   \   000000CE   ........           BL       GPIO_PinAFConfig
    159            GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_MCO);
   \   000000D2   0022               MOVS     R2,#+0
   \   000000D4   0C21               MOVS     R1,#+12
   \   000000D6   ........           LDR.W    R0,??DataTable21_1  ;; 0x40021000
   \   000000DA   ........           BL       GPIO_PinAFConfig
    160            GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_MCO);
   \   000000DE   0022               MOVS     R2,#+0
   \   000000E0   0D21               MOVS     R1,#+13
   \   000000E2   ........           LDR.W    R0,??DataTable21_1  ;; 0x40021000
   \   000000E6   ........           BL       GPIO_PinAFConfig
    161            GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_MCO);
   \   000000EA   0022               MOVS     R2,#+0
   \   000000EC   0E21               MOVS     R1,#+14
   \   000000EE   ........           LDR.W    R0,??DataTable21_1  ;; 0x40021000
   \   000000F2   ........           BL       GPIO_PinAFConfig
    162            GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_MCO);
   \   000000F6   0022               MOVS     R2,#+0
   \   000000F8   0F21               MOVS     R1,#+15
   \   000000FA   ........           LDR.W    R0,??DataTable21_1  ;; 0x40021000
   \   000000FE   ........           BL       GPIO_PinAFConfig
    163          
    164            /* SRAM Address lines configuration */
    165            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
    166                                          GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_12 | GPIO_Pin_13 | 
    167                                          GPIO_Pin_14 | GPIO_Pin_15;
   \   00000102   4FF23F00           MOVW     R0,#+61503
   \   00000106   0090               STR      R0,[SP, #+0]
    168            GPIO_Init(GPIOF, &GPIO_InitStructure);
   \   00000108   00A9               ADD      R1,SP,#+0
   \   0000010A   ........           LDR.W    R0,??DataTable21_2  ;; 0x40021400
   \   0000010E   ........           BL       GPIO_Init
    169            GPIO_PinAFConfig(GPIOF,GPIO_PinSource0, GPIO_AF_MCO);
   \   00000112   0022               MOVS     R2,#+0
   \   00000114   0021               MOVS     R1,#+0
   \   00000116   ........           LDR.W    R0,??DataTable21_2  ;; 0x40021400
   \   0000011A   ........           BL       GPIO_PinAFConfig
    170            GPIO_PinAFConfig(GPIOF,GPIO_PinSource1, GPIO_AF_MCO);
   \   0000011E   0022               MOVS     R2,#+0
   \   00000120   0121               MOVS     R1,#+1
   \   00000122   ........           LDR.W    R0,??DataTable21_2  ;; 0x40021400
   \   00000126   ........           BL       GPIO_PinAFConfig
    171            GPIO_PinAFConfig(GPIOF,GPIO_PinSource2, GPIO_AF_MCO);
   \   0000012A   0022               MOVS     R2,#+0
   \   0000012C   0221               MOVS     R1,#+2
   \   0000012E   ........           LDR.W    R0,??DataTable21_2  ;; 0x40021400
   \   00000132   ........           BL       GPIO_PinAFConfig
    172            GPIO_PinAFConfig(GPIOF,GPIO_PinSource3, GPIO_AF_MCO);
   \   00000136   0022               MOVS     R2,#+0
   \   00000138   0321               MOVS     R1,#+3
   \   0000013A   ........           LDR.W    R0,??DataTable21_2  ;; 0x40021400
   \   0000013E   ........           BL       GPIO_PinAFConfig
    173            GPIO_PinAFConfig(GPIOF,GPIO_PinSource4, GPIO_AF_MCO);
   \   00000142   0022               MOVS     R2,#+0
   \   00000144   0421               MOVS     R1,#+4
   \   00000146   ........           LDR.W    R0,??DataTable21_2  ;; 0x40021400
   \   0000014A   ........           BL       GPIO_PinAFConfig
    174            GPIO_PinAFConfig(GPIOF,GPIO_PinSource5, GPIO_AF_MCO);
   \   0000014E   0022               MOVS     R2,#+0
   \   00000150   0521               MOVS     R1,#+5
   \   00000152   ........           LDR.W    R0,??DataTable21_2  ;; 0x40021400
   \   00000156   ........           BL       GPIO_PinAFConfig
    175            GPIO_PinAFConfig(GPIOF,GPIO_PinSource12, GPIO_AF_MCO);
   \   0000015A   0022               MOVS     R2,#+0
   \   0000015C   0C21               MOVS     R1,#+12
   \   0000015E   ........           LDR.W    R0,??DataTable21_2  ;; 0x40021400
   \   00000162   ........           BL       GPIO_PinAFConfig
    176            GPIO_PinAFConfig(GPIOF,GPIO_PinSource13, GPIO_AF_MCO);
   \   00000166   0022               MOVS     R2,#+0
   \   00000168   0D21               MOVS     R1,#+13
   \   0000016A   ........           LDR.W    R0,??DataTable21_2  ;; 0x40021400
   \   0000016E   ........           BL       GPIO_PinAFConfig
    177            GPIO_PinAFConfig(GPIOF,GPIO_PinSource14, GPIO_AF_MCO);
   \   00000172   0022               MOVS     R2,#+0
   \   00000174   0E21               MOVS     R1,#+14
   \   00000176   ........           LDR.W    R0,??DataTable21_2  ;; 0x40021400
   \   0000017A   ........           BL       GPIO_PinAFConfig
    178            GPIO_PinAFConfig(GPIOF,GPIO_PinSource15, GPIO_AF_MCO);
   \   0000017E   0022               MOVS     R2,#+0
   \   00000180   0F21               MOVS     R1,#+15
   \   00000182   ........           LDR.W    R0,??DataTable21_2  ;; 0x40021400
   \   00000186   ........           BL       GPIO_PinAFConfig
    179          
    180          
    181            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
    182                                          GPIO_Pin_4 | GPIO_Pin_5;
   \   0000018A   3F20               MOVS     R0,#+63
   \   0000018C   0090               STR      R0,[SP, #+0]
    183          
    184            GPIO_Init(GPIOG, &GPIO_InitStructure);
   \   0000018E   00A9               ADD      R1,SP,#+0
   \   00000190   ........           LDR.W    R0,??DataTable21_3  ;; 0x40021800
   \   00000194   ........           BL       GPIO_Init
    185          
    186            GPIO_PinAFConfig(GPIOG,GPIO_PinSource0, GPIO_AF_MCO);
   \   00000198   0022               MOVS     R2,#+0
   \   0000019A   0021               MOVS     R1,#+0
   \   0000019C   ........           LDR.W    R0,??DataTable21_3  ;; 0x40021800
   \   000001A0   ........           BL       GPIO_PinAFConfig
    187            GPIO_PinAFConfig(GPIOG,GPIO_PinSource1, GPIO_AF_MCO);
   \   000001A4   0022               MOVS     R2,#+0
   \   000001A6   0121               MOVS     R1,#+1
   \   000001A8   ........           LDR.W    R0,??DataTable21_3  ;; 0x40021800
   \   000001AC   ........           BL       GPIO_PinAFConfig
    188            GPIO_PinAFConfig(GPIOG,GPIO_PinSource2, GPIO_AF_MCO);
   \   000001B0   0022               MOVS     R2,#+0
   \   000001B2   0221               MOVS     R1,#+2
   \   000001B4   ........           LDR.W    R0,??DataTable21_3  ;; 0x40021800
   \   000001B8   ........           BL       GPIO_PinAFConfig
    189            GPIO_PinAFConfig(GPIOG,GPIO_PinSource3, GPIO_AF_MCO);
   \   000001BC   0022               MOVS     R2,#+0
   \   000001BE   0321               MOVS     R1,#+3
   \   000001C0   ........           LDR.W    R0,??DataTable21_3  ;; 0x40021800
   \   000001C4   ........           BL       GPIO_PinAFConfig
    190            GPIO_PinAFConfig(GPIOG,GPIO_PinSource4, GPIO_AF_MCO);
   \   000001C8   0022               MOVS     R2,#+0
   \   000001CA   0421               MOVS     R1,#+4
   \   000001CC   ........           LDR.W    R0,??DataTable21_3  ;; 0x40021800
   \   000001D0   ........           BL       GPIO_PinAFConfig
    191            GPIO_PinAFConfig(GPIOG,GPIO_PinSource5, GPIO_AF_MCO);
   \   000001D4   0022               MOVS     R2,#+0
   \   000001D6   0521               MOVS     R1,#+5
   \   000001D8   ........           LDR.W    R0,??DataTable21_3  ;; 0x40021800
   \   000001DC   ........           BL       GPIO_PinAFConfig
    192          
    193            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13; 
   \   000001E0   4FF46050           MOV      R0,#+14336
   \   000001E4   0090               STR      R0,[SP, #+0]
    194          
    195            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   000001E6   00A9               ADD      R1,SP,#+0
   \   000001E8   ........           LDR.W    R0,??DataTable21  ;; 0x40020c00
   \   000001EC   ........           BL       GPIO_Init
    196          
    197            GPIO_PinAFConfig(GPIOD,GPIO_PinSource11, GPIO_AF_MCO);
   \   000001F0   0022               MOVS     R2,#+0
   \   000001F2   0B21               MOVS     R1,#+11
   \   000001F4   ........           LDR.W    R0,??DataTable21  ;; 0x40020c00
   \   000001F8   ........           BL       GPIO_PinAFConfig
    198            GPIO_PinAFConfig(GPIOD,GPIO_PinSource12, GPIO_AF_MCO);
   \   000001FC   0022               MOVS     R2,#+0
   \   000001FE   0C21               MOVS     R1,#+12
   \   00000200   ........           LDR.W    R0,??DataTable21  ;; 0x40020c00
   \   00000204   ........           BL       GPIO_PinAFConfig
    199            GPIO_PinAFConfig(GPIOD,GPIO_PinSource13, GPIO_AF_MCO);
   \   00000208   0022               MOVS     R2,#+0
   \   0000020A   0D21               MOVS     R1,#+13
   \   0000020C   ........           LDR.W    R0,??DataTable21  ;; 0x40020c00
   \   00000210   ........           BL       GPIO_PinAFConfig
    200          
    201            /* NOE and NWE configuration */  
    202            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 |GPIO_Pin_5;
   \   00000214   3020               MOVS     R0,#+48
   \   00000216   0090               STR      R0,[SP, #+0]
    203          
    204            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   00000218   00A9               ADD      R1,SP,#+0
   \   0000021A   ........           LDR.W    R0,??DataTable21  ;; 0x40020c00
   \   0000021E   ........           BL       GPIO_Init
    205            GPIO_PinAFConfig(GPIOD,GPIO_PinSource4, GPIO_AF_MCO);
   \   00000222   0022               MOVS     R2,#+0
   \   00000224   0421               MOVS     R1,#+4
   \   00000226   ........           LDR.W    R0,??DataTable21  ;; 0x40020c00
   \   0000022A   ........           BL       GPIO_PinAFConfig
    206            GPIO_PinAFConfig(GPIOD,GPIO_PinSource5, GPIO_AF_MCO);
   \   0000022E   0022               MOVS     R2,#+0
   \   00000230   0521               MOVS     R1,#+5
   \   00000232   ........           LDR.W    R0,??DataTable21  ;; 0x40020c00
   \   00000236   ........           BL       GPIO_PinAFConfig
    207          
    208            /* NE3 configuration */
    209            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
   \   0000023A   4FF48060           MOV      R0,#+1024
   \   0000023E   0090               STR      R0,[SP, #+0]
    210          
    211            GPIO_Init(GPIOG, &GPIO_InitStructure);
   \   00000240   00A9               ADD      R1,SP,#+0
   \   00000242   ........           LDR.W    R0,??DataTable21_3  ;; 0x40021800
   \   00000246   ........           BL       GPIO_Init
    212            GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, GPIO_AF_MCO);
   \   0000024A   0022               MOVS     R2,#+0
   \   0000024C   0C21               MOVS     R1,#+12
   \   0000024E   ........           LDR.W    R0,??DataTable21_3  ;; 0x40021800
   \   00000252   ........           BL       GPIO_PinAFConfig
    213          
    214            /* NBL0, NBL1 configuration */
    215            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; 
   \   00000256   0320               MOVS     R0,#+3
   \   00000258   0090               STR      R0,[SP, #+0]
    216            GPIO_Init(GPIOE, &GPIO_InitStructure); 
   \   0000025A   00A9               ADD      R1,SP,#+0
   \   0000025C   ........           LDR.W    R0,??DataTable21_1  ;; 0x40021000
   \   00000260   ........           BL       GPIO_Init
    217          
    218            GPIO_PinAFConfig(GPIOE,GPIO_PinSource0, GPIO_AF_MCO);
   \   00000264   0022               MOVS     R2,#+0
   \   00000266   0021               MOVS     R1,#+0
   \   00000268   ........           LDR.W    R0,??DataTable21_1  ;; 0x40021000
   \   0000026C   ........           BL       GPIO_PinAFConfig
    219            GPIO_PinAFConfig(GPIOE,GPIO_PinSource1, GPIO_AF_MCO);
   \   00000270   0022               MOVS     R2,#+0
   \   00000272   0121               MOVS     R1,#+1
   \   00000274   ........           LDR.W    R0,??DataTable21_1  ;; 0x40021000
   \   00000278   ........           BL       GPIO_PinAFConfig
    220          }
   \   0000027C   07BD               POP      {R0-R2,PC}       ;; return
    221          
    222          /**
    223            * @brief  Initializes the LCD.
    224            * @param  None
    225            * @retval None
    226            */

   \                                 In section .text, align 2, keep-with-next
    227          void STM3220F_LCD_Init(void)
    228          { 
   \                     STM3220F_LCD_Init:
   \   00000000   80B5               PUSH     {R7,LR}
    229            __IO uint32_t lcdid = 0;
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0090               STR      R0,[SP, #+0]
    230            
    231          /* Configure the LCD Control pins --------------------------------------------*/
    232            LCD_CtrlLinesConfig();
   \   00000006   ........           BL       LCD_CtrlLinesConfig
    233          
    234          /* Configure the FSMC Parallel interface -------------------------------------*/
    235            LCD_FSMCConfig();
   \   0000000A   ........           BL       LCD_FSMCConfig
    236          
    237            _delay_(5); /* delay 50 ms */
   \   0000000E   0520               MOVS     R0,#+5
   \   00000010   ........           BL       delay
    238          
    239            /* Read the LCD ID */
    240            lcdid = LCD_ReadReg(0x00);  
   \   00000014   0020               MOVS     R0,#+0
   \   00000016   ........           BL       LCD_ReadReg
   \   0000001A   0090               STR      R0,[SP, #+0]
    241          
    242            /* Check if the LCD is ILI9320 Controller */
    243            if(lcdid == 0x9320)
   \   0000001C   0098               LDR      R0,[SP, #+0]
   \   0000001E   49F22031           MOVW     R1,#+37664
   \   00000022   8842               CMP      R0,R1
   \   00000024   40F0FA80           BNE.W    ??STM3220F_LCD_Init_0
    244            {
    245              /* Start Initial Sequence ------------------------------------------------*/
    246              LCD_WriteReg(LCD_REG_229,0x8000); /* Set the internal vcore voltage */
   \   00000028   4FF40041           MOV      R1,#+32768
   \   0000002C   E520               MOVS     R0,#+229
   \   0000002E   ........           BL       LCD_WriteReg
    247              LCD_WriteReg(LCD_REG_0,  0x0001); /* Start internal OSC. */
   \   00000032   0121               MOVS     R1,#+1
   \   00000034   0020               MOVS     R0,#+0
   \   00000036   ........           BL       LCD_WriteReg
    248              LCD_WriteReg(LCD_REG_1,  0x0100); /* set SS and SM bit */
   \   0000003A   4FF48071           MOV      R1,#+256
   \   0000003E   0120               MOVS     R0,#+1
   \   00000040   ........           BL       LCD_WriteReg
    249              LCD_WriteReg(LCD_REG_2,  0x0700); /* set 1 line inversion */
   \   00000044   4FF4E061           MOV      R1,#+1792
   \   00000048   0220               MOVS     R0,#+2
   \   0000004A   ........           BL       LCD_WriteReg
    250              LCD_WriteReg(LCD_REG_3,  0x1030); /* set GRAM write direction and BGR=1. */
   \   0000004E   41F23001           MOVW     R1,#+4144
   \   00000052   0320               MOVS     R0,#+3
   \   00000054   ........           BL       LCD_WriteReg
    251              LCD_WriteReg(LCD_REG_4,  0x0000); /* Resize register */
   \   00000058   0021               MOVS     R1,#+0
   \   0000005A   0420               MOVS     R0,#+4
   \   0000005C   ........           BL       LCD_WriteReg
    252              LCD_WriteReg(LCD_REG_8,  0x0202); /* set the back porch and front porch */
   \   00000060   40F20221           MOVW     R1,#+514
   \   00000064   0820               MOVS     R0,#+8
   \   00000066   ........           BL       LCD_WriteReg
    253              LCD_WriteReg(LCD_REG_9,  0x0000); /* set non-display area refresh cycle ISC[3:0] */
   \   0000006A   0021               MOVS     R1,#+0
   \   0000006C   0920               MOVS     R0,#+9
   \   0000006E   ........           BL       LCD_WriteReg
    254              LCD_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
   \   00000072   0021               MOVS     R1,#+0
   \   00000074   0A20               MOVS     R0,#+10
   \   00000076   ........           BL       LCD_WriteReg
    255              LCD_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
   \   0000007A   0021               MOVS     R1,#+0
   \   0000007C   0C20               MOVS     R0,#+12
   \   0000007E   ........           BL       LCD_WriteReg
    256              LCD_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
   \   00000082   0021               MOVS     R1,#+0
   \   00000084   0D20               MOVS     R0,#+13
   \   00000086   ........           BL       LCD_WriteReg
    257              LCD_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
   \   0000008A   0021               MOVS     R1,#+0
   \   0000008C   0F20               MOVS     R0,#+15
   \   0000008E   ........           BL       LCD_WriteReg
    258          
    259              /* Power On sequence -----------------------------------------------------*/
    260              LCD_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   00000092   0021               MOVS     R1,#+0
   \   00000094   1020               MOVS     R0,#+16
   \   00000096   ........           BL       LCD_WriteReg
    261              LCD_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   0000009A   0021               MOVS     R1,#+0
   \   0000009C   1120               MOVS     R0,#+17
   \   0000009E   ........           BL       LCD_WriteReg
    262              LCD_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
   \   000000A2   0021               MOVS     R1,#+0
   \   000000A4   1220               MOVS     R0,#+18
   \   000000A6   ........           BL       LCD_WriteReg
    263              LCD_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
   \   000000AA   0021               MOVS     R1,#+0
   \   000000AC   1320               MOVS     R0,#+19
   \   000000AE   ........           BL       LCD_WriteReg
    264              _delay_(20);                 /* Dis-charge capacitor power voltage (200ms) */
   \   000000B2   1420               MOVS     R0,#+20
   \   000000B4   ........           BL       delay
    265              LCD_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   000000B8   41F2B071           MOVW     R1,#+6064
   \   000000BC   1020               MOVS     R0,#+16
   \   000000BE   ........           BL       LCD_WriteReg
    266              LCD_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   000000C2   40F23711           MOVW     R1,#+311
   \   000000C6   1120               MOVS     R0,#+17
   \   000000C8   ........           BL       LCD_WriteReg
    267              _delay_(5);                  /* Delay 50 ms */
   \   000000CC   0520               MOVS     R0,#+5
   \   000000CE   ........           BL       delay
    268              LCD_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
   \   000000D2   40F23911           MOVW     R1,#+313
   \   000000D6   1220               MOVS     R0,#+18
   \   000000D8   ........           BL       LCD_WriteReg
    269              _delay_(5);                  /* Delay 50 ms */
   \   000000DC   0520               MOVS     R0,#+5
   \   000000DE   ........           BL       delay
    270              LCD_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
   \   000000E2   4FF4E851           MOV      R1,#+7424
   \   000000E6   1320               MOVS     R0,#+19
   \   000000E8   ........           BL       LCD_WriteReg
    271              LCD_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
   \   000000EC   1321               MOVS     R1,#+19
   \   000000EE   2920               MOVS     R0,#+41
   \   000000F0   ........           BL       LCD_WriteReg
    272              _delay_(5);                  /* Delay 50 ms */
   \   000000F4   0520               MOVS     R0,#+5
   \   000000F6   ........           BL       delay
    273              LCD_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
   \   000000FA   0021               MOVS     R1,#+0
   \   000000FC   2020               MOVS     R0,#+32
   \   000000FE   ........           BL       LCD_WriteReg
    274              LCD_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
   \   00000102   0021               MOVS     R1,#+0
   \   00000104   2120               MOVS     R0,#+33
   \   00000106   ........           BL       LCD_WriteReg
    275          
    276              /* Adjust the Gamma Curve ------------------------------------------------*/
    277              LCD_WriteReg(LCD_REG_48, 0x0006);
   \   0000010A   0621               MOVS     R1,#+6
   \   0000010C   3020               MOVS     R0,#+48
   \   0000010E   ........           BL       LCD_WriteReg
    278              LCD_WriteReg(LCD_REG_49, 0x0101);
   \   00000112   40F20111           MOVW     R1,#+257
   \   00000116   3120               MOVS     R0,#+49
   \   00000118   ........           BL       LCD_WriteReg
    279              LCD_WriteReg(LCD_REG_50, 0x0003);
   \   0000011C   0321               MOVS     R1,#+3
   \   0000011E   3220               MOVS     R0,#+50
   \   00000120   ........           BL       LCD_WriteReg
    280              LCD_WriteReg(LCD_REG_53, 0x0106);
   \   00000124   4FF48371           MOV      R1,#+262
   \   00000128   3520               MOVS     R0,#+53
   \   0000012A   ........           BL       LCD_WriteReg
    281              LCD_WriteReg(LCD_REG_54, 0x0b02);
   \   0000012E   40F60231           MOVW     R1,#+2818
   \   00000132   3620               MOVS     R0,#+54
   \   00000134   ........           BL       LCD_WriteReg
    282              LCD_WriteReg(LCD_REG_55, 0x0302);
   \   00000138   40F20231           MOVW     R1,#+770
   \   0000013C   3720               MOVS     R0,#+55
   \   0000013E   ........           BL       LCD_WriteReg
    283              LCD_WriteReg(LCD_REG_56, 0x0707);
   \   00000142   40F20771           MOVW     R1,#+1799
   \   00000146   3820               MOVS     R0,#+56
   \   00000148   ........           BL       LCD_WriteReg
    284              LCD_WriteReg(LCD_REG_57, 0x0007);
   \   0000014C   0721               MOVS     R1,#+7
   \   0000014E   3920               MOVS     R0,#+57
   \   00000150   ........           BL       LCD_WriteReg
    285              LCD_WriteReg(LCD_REG_60, 0x0600);
   \   00000154   4FF4C061           MOV      R1,#+1536
   \   00000158   3C20               MOVS     R0,#+60
   \   0000015A   ........           BL       LCD_WriteReg
    286              LCD_WriteReg(LCD_REG_61, 0x020b);
   \   0000015E   40F20B21           MOVW     R1,#+523
   \   00000162   3D20               MOVS     R0,#+61
   \   00000164   ........           BL       LCD_WriteReg
    287            
    288              /* Set GRAM area ---------------------------------------------------------*/
    289              LCD_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
   \   00000168   0021               MOVS     R1,#+0
   \   0000016A   5020               MOVS     R0,#+80
   \   0000016C   ........           BL       LCD_WriteReg
    290              LCD_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
   \   00000170   EF21               MOVS     R1,#+239
   \   00000172   5120               MOVS     R0,#+81
   \   00000174   ........           BL       LCD_WriteReg
    291              LCD_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
   \   00000178   0021               MOVS     R1,#+0
   \   0000017A   5220               MOVS     R0,#+82
   \   0000017C   ........           BL       LCD_WriteReg
    292              LCD_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
   \   00000180   40F23F11           MOVW     R1,#+319
   \   00000184   5320               MOVS     R0,#+83
   \   00000186   ........           BL       LCD_WriteReg
    293              LCD_WriteReg(LCD_REG_96,  0x2700); /* Gate Scan Line */
   \   0000018A   4FF41C51           MOV      R1,#+9984
   \   0000018E   6020               MOVS     R0,#+96
   \   00000190   ........           BL       LCD_WriteReg
    294              LCD_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
   \   00000194   0121               MOVS     R1,#+1
   \   00000196   6120               MOVS     R0,#+97
   \   00000198   ........           BL       LCD_WriteReg
    295              LCD_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
   \   0000019C   0021               MOVS     R1,#+0
   \   0000019E   6A20               MOVS     R0,#+106
   \   000001A0   ........           BL       LCD_WriteReg
    296          
    297              /* Partial Display Control -----------------------------------------------*/
    298              LCD_WriteReg(LCD_REG_128, 0x0000);
   \   000001A4   0021               MOVS     R1,#+0
   \   000001A6   8020               MOVS     R0,#+128
   \   000001A8   ........           BL       LCD_WriteReg
    299              LCD_WriteReg(LCD_REG_129, 0x0000);
   \   000001AC   0021               MOVS     R1,#+0
   \   000001AE   8120               MOVS     R0,#+129
   \   000001B0   ........           BL       LCD_WriteReg
    300              LCD_WriteReg(LCD_REG_130, 0x0000);
   \   000001B4   0021               MOVS     R1,#+0
   \   000001B6   8220               MOVS     R0,#+130
   \   000001B8   ........           BL       LCD_WriteReg
    301              LCD_WriteReg(LCD_REG_131, 0x0000);
   \   000001BC   0021               MOVS     R1,#+0
   \   000001BE   8320               MOVS     R0,#+131
   \   000001C0   ........           BL       LCD_WriteReg
    302              LCD_WriteReg(LCD_REG_132, 0x0000);
   \   000001C4   0021               MOVS     R1,#+0
   \   000001C6   8420               MOVS     R0,#+132
   \   000001C8   ........           BL       LCD_WriteReg
    303              LCD_WriteReg(LCD_REG_133, 0x0000);
   \   000001CC   0021               MOVS     R1,#+0
   \   000001CE   8520               MOVS     R0,#+133
   \   000001D0   ........           BL       LCD_WriteReg
    304          
    305              /* Panel Control ---------------------------------------------------------*/
    306              LCD_WriteReg(LCD_REG_144, 0x0010);
   \   000001D4   1021               MOVS     R1,#+16
   \   000001D6   9020               MOVS     R0,#+144
   \   000001D8   ........           BL       LCD_WriteReg
    307              LCD_WriteReg(LCD_REG_146, 0x0000);
   \   000001DC   0021               MOVS     R1,#+0
   \   000001DE   9220               MOVS     R0,#+146
   \   000001E0   ........           BL       LCD_WriteReg
    308              LCD_WriteReg(LCD_REG_147, 0x0003);
   \   000001E4   0321               MOVS     R1,#+3
   \   000001E6   9320               MOVS     R0,#+147
   \   000001E8   ........           BL       LCD_WriteReg
    309              LCD_WriteReg(LCD_REG_149, 0x0110);
   \   000001EC   4FF48871           MOV      R1,#+272
   \   000001F0   9520               MOVS     R0,#+149
   \   000001F2   ........           BL       LCD_WriteReg
    310              LCD_WriteReg(LCD_REG_151, 0x0000);
   \   000001F6   0021               MOVS     R1,#+0
   \   000001F8   9720               MOVS     R0,#+151
   \   000001FA   ........           BL       LCD_WriteReg
    311              LCD_WriteReg(LCD_REG_152, 0x0000);
   \   000001FE   0021               MOVS     R1,#+0
   \   00000200   9820               MOVS     R0,#+152
   \   00000202   ........           BL       LCD_WriteReg
    312          
    313              /* Set GRAM write direction and BGR = 1 */
    314              /* I/D=01 (Horizontal : increment, Vertical : decrement) */
    315              /* AM=1 (address is updated in vertical writing direction) */
    316              LCD_WriteReg(LCD_REG_3, 0x1018);
   \   00000206   41F21801           MOVW     R1,#+4120
   \   0000020A   0320               MOVS     R0,#+3
   \   0000020C   ........           BL       LCD_WriteReg
    317          
    318              LCD_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */  
   \   00000210   40F27311           MOVW     R1,#+371
   \   00000214   0720               MOVS     R0,#+7
   \   00000216   ........           BL       LCD_WriteReg
   \   0000021A   FAE0               B.N      ??STM3220F_LCD_Init_1
    319            }
    320            else if(lcdid == 0x9325) /* Check if the LCD is ILI9325 Controller */
   \                     ??STM3220F_LCD_Init_0:
   \   0000021C   0098               LDR      R0,[SP, #+0]
   \   0000021E   49F22531           MOVW     R1,#+37669
   \   00000222   8842               CMP      R0,R1
   \   00000224   40F0F580           BNE.W    ??STM3220F_LCD_Init_1
    321            {
    322              /* Start Initial Sequence ------------------------------------------------*/
    323              LCD_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
   \   00000228   0121               MOVS     R1,#+1
   \   0000022A   0020               MOVS     R0,#+0
   \   0000022C   ........           BL       LCD_WriteReg
    324              LCD_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
   \   00000230   4FF48071           MOV      R1,#+256
   \   00000234   0120               MOVS     R0,#+1
   \   00000236   ........           BL       LCD_WriteReg
    325              LCD_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
   \   0000023A   4FF4E061           MOV      R1,#+1792
   \   0000023E   0220               MOVS     R0,#+2
   \   00000240   ........           BL       LCD_WriteReg
    326              LCD_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
   \   00000244   41F21801           MOVW     R1,#+4120
   \   00000248   0320               MOVS     R0,#+3
   \   0000024A   ........           BL       LCD_WriteReg
    327              LCD_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
   \   0000024E   0021               MOVS     R1,#+0
   \   00000250   0420               MOVS     R0,#+4
   \   00000252   ........           BL       LCD_WriteReg
    328              LCD_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
   \   00000256   40F20221           MOVW     R1,#+514
   \   0000025A   0820               MOVS     R0,#+8
   \   0000025C   ........           BL       LCD_WriteReg
    329              LCD_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
   \   00000260   0021               MOVS     R1,#+0
   \   00000262   0920               MOVS     R0,#+9
   \   00000264   ........           BL       LCD_WriteReg
    330              LCD_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
   \   00000268   0021               MOVS     R1,#+0
   \   0000026A   0A20               MOVS     R0,#+10
   \   0000026C   ........           BL       LCD_WriteReg
    331              LCD_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
   \   00000270   0021               MOVS     R1,#+0
   \   00000272   0C20               MOVS     R0,#+12
   \   00000274   ........           BL       LCD_WriteReg
    332              LCD_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
   \   00000278   0021               MOVS     R1,#+0
   \   0000027A   0D20               MOVS     R0,#+13
   \   0000027C   ........           BL       LCD_WriteReg
    333              LCD_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
   \   00000280   0021               MOVS     R1,#+0
   \   00000282   0F20               MOVS     R0,#+15
   \   00000284   ........           BL       LCD_WriteReg
    334          
    335              /* Power On sequence -----------------------------------------------------*/
    336              LCD_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   00000288   0021               MOVS     R1,#+0
   \   0000028A   1020               MOVS     R0,#+16
   \   0000028C   ........           BL       LCD_WriteReg
    337              LCD_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   00000290   0021               MOVS     R1,#+0
   \   00000292   1120               MOVS     R0,#+17
   \   00000294   ........           BL       LCD_WriteReg
    338              LCD_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
   \   00000298   0021               MOVS     R1,#+0
   \   0000029A   1220               MOVS     R0,#+18
   \   0000029C   ........           BL       LCD_WriteReg
    339              LCD_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
   \   000002A0   0021               MOVS     R1,#+0
   \   000002A2   1320               MOVS     R0,#+19
   \   000002A4   ........           BL       LCD_WriteReg
    340              _delay_(20);                      /* Dis-charge capacitor power voltage (200ms) */
   \   000002A8   1420               MOVS     R0,#+20
   \   000002AA   ........           BL       delay
    341              LCD_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   000002AE   41F2B071           MOVW     R1,#+6064
   \   000002B2   1020               MOVS     R0,#+16
   \   000002B4   ........           BL       LCD_WriteReg
    342              LCD_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   000002B8   40F23711           MOVW     R1,#+311
   \   000002BC   1120               MOVS     R0,#+17
   \   000002BE   ........           BL       LCD_WriteReg
    343              _delay_(5);                       /* Delay 50 ms */
   \   000002C2   0520               MOVS     R0,#+5
   \   000002C4   ........           BL       delay
    344              LCD_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
   \   000002C8   40F23911           MOVW     R1,#+313
   \   000002CC   1220               MOVS     R0,#+18
   \   000002CE   ........           BL       LCD_WriteReg
    345              _delay_(5);                       /* Delay 50 ms */
   \   000002D2   0520               MOVS     R0,#+5
   \   000002D4   ........           BL       delay
    346              LCD_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
   \   000002D8   4FF4E851           MOV      R1,#+7424
   \   000002DC   1320               MOVS     R0,#+19
   \   000002DE   ........           BL       LCD_WriteReg
    347              LCD_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
   \   000002E2   1321               MOVS     R1,#+19
   \   000002E4   2920               MOVS     R0,#+41
   \   000002E6   ........           BL       LCD_WriteReg
    348              _delay_(5);                       /* Delay 50 ms */
   \   000002EA   0520               MOVS     R0,#+5
   \   000002EC   ........           BL       delay
    349              LCD_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
   \   000002F0   0021               MOVS     R1,#+0
   \   000002F2   2020               MOVS     R0,#+32
   \   000002F4   ........           BL       LCD_WriteReg
    350              LCD_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
   \   000002F8   0021               MOVS     R1,#+0
   \   000002FA   2120               MOVS     R0,#+33
   \   000002FC   ........           BL       LCD_WriteReg
    351          
    352              /* Adjust the Gamma Curve (ILI9325)---------------------------------------*/
    353              LCD_WriteReg(LCD_REG_48, 0x0007);
   \   00000300   0721               MOVS     R1,#+7
   \   00000302   3020               MOVS     R0,#+48
   \   00000304   ........           BL       LCD_WriteReg
    354              LCD_WriteReg(LCD_REG_49, 0x0302);
   \   00000308   40F20231           MOVW     R1,#+770
   \   0000030C   3120               MOVS     R0,#+49
   \   0000030E   ........           BL       LCD_WriteReg
    355              LCD_WriteReg(LCD_REG_50, 0x0105);
   \   00000312   40F20511           MOVW     R1,#+261
   \   00000316   3220               MOVS     R0,#+50
   \   00000318   ........           BL       LCD_WriteReg
    356              LCD_WriteReg(LCD_REG_53, 0x0206);
   \   0000031C   40F20621           MOVW     R1,#+518
   \   00000320   3520               MOVS     R0,#+53
   \   00000322   ........           BL       LCD_WriteReg
    357              LCD_WriteReg(LCD_REG_54, 0x0808);
   \   00000326   40F60801           MOVW     R1,#+2056
   \   0000032A   3620               MOVS     R0,#+54
   \   0000032C   ........           BL       LCD_WriteReg
    358              LCD_WriteReg(LCD_REG_55, 0x0206);
   \   00000330   40F20621           MOVW     R1,#+518
   \   00000334   3720               MOVS     R0,#+55
   \   00000336   ........           BL       LCD_WriteReg
    359              LCD_WriteReg(LCD_REG_56, 0x0504);
   \   0000033A   40F20451           MOVW     R1,#+1284
   \   0000033E   3820               MOVS     R0,#+56
   \   00000340   ........           BL       LCD_WriteReg
    360              LCD_WriteReg(LCD_REG_57, 0x0007);
   \   00000344   0721               MOVS     R1,#+7
   \   00000346   3920               MOVS     R0,#+57
   \   00000348   ........           BL       LCD_WriteReg
    361              LCD_WriteReg(LCD_REG_60, 0x0105);
   \   0000034C   40F20511           MOVW     R1,#+261
   \   00000350   3C20               MOVS     R0,#+60
   \   00000352   ........           BL       LCD_WriteReg
    362              LCD_WriteReg(LCD_REG_61, 0x0808);
   \   00000356   40F60801           MOVW     R1,#+2056
   \   0000035A   3D20               MOVS     R0,#+61
   \   0000035C   ........           BL       LCD_WriteReg
    363          
    364              /* Set GRAM area ---------------------------------------------------------*/
    365              LCD_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
   \   00000360   0021               MOVS     R1,#+0
   \   00000362   5020               MOVS     R0,#+80
   \   00000364   ........           BL       LCD_WriteReg
    366              LCD_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
   \   00000368   EF21               MOVS     R1,#+239
   \   0000036A   5120               MOVS     R0,#+81
   \   0000036C   ........           BL       LCD_WriteReg
    367              LCD_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
   \   00000370   0021               MOVS     R1,#+0
   \   00000372   5220               MOVS     R0,#+82
   \   00000374   ........           BL       LCD_WriteReg
    368              LCD_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
   \   00000378   40F23F11           MOVW     R1,#+319
   \   0000037C   5320               MOVS     R0,#+83
   \   0000037E   ........           BL       LCD_WriteReg
    369          
    370              LCD_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
   \   00000382   4FF42741           MOV      R1,#+42752
   \   00000386   6020               MOVS     R0,#+96
   \   00000388   ........           BL       LCD_WriteReg
    371              LCD_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
   \   0000038C   0121               MOVS     R1,#+1
   \   0000038E   6120               MOVS     R0,#+97
   \   00000390   ........           BL       LCD_WriteReg
    372              LCD_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
   \   00000394   0021               MOVS     R1,#+0
   \   00000396   6A20               MOVS     R0,#+106
   \   00000398   ........           BL       LCD_WriteReg
    373          
    374              /* Partial Display Control -----------------------------------------------*/
    375              LCD_WriteReg(LCD_REG_128, 0x0000);
   \   0000039C   0021               MOVS     R1,#+0
   \   0000039E   8020               MOVS     R0,#+128
   \   000003A0   ........           BL       LCD_WriteReg
    376              LCD_WriteReg(LCD_REG_129, 0x0000);
   \   000003A4   0021               MOVS     R1,#+0
   \   000003A6   8120               MOVS     R0,#+129
   \   000003A8   ........           BL       LCD_WriteReg
    377              LCD_WriteReg(LCD_REG_130, 0x0000);
   \   000003AC   0021               MOVS     R1,#+0
   \   000003AE   8220               MOVS     R0,#+130
   \   000003B0   ........           BL       LCD_WriteReg
    378              LCD_WriteReg(LCD_REG_131, 0x0000);
   \   000003B4   0021               MOVS     R1,#+0
   \   000003B6   8320               MOVS     R0,#+131
   \   000003B8   ........           BL       LCD_WriteReg
    379              LCD_WriteReg(LCD_REG_132, 0x0000);
   \   000003BC   0021               MOVS     R1,#+0
   \   000003BE   8420               MOVS     R0,#+132
   \   000003C0   ........           BL       LCD_WriteReg
    380              LCD_WriteReg(LCD_REG_133, 0x0000);
   \   000003C4   0021               MOVS     R1,#+0
   \   000003C6   8520               MOVS     R0,#+133
   \   000003C8   ........           BL       LCD_WriteReg
    381          
    382              /* Panel Control ---------------------------------------------------------*/
    383              LCD_WriteReg(LCD_REG_144, 0x0010);
   \   000003CC   1021               MOVS     R1,#+16
   \   000003CE   9020               MOVS     R0,#+144
   \   000003D0   ........           BL       LCD_WriteReg
    384              LCD_WriteReg(LCD_REG_146, 0x0000);
   \   000003D4   0021               MOVS     R1,#+0
   \   000003D6   9220               MOVS     R0,#+146
   \   000003D8   ........           BL       LCD_WriteReg
    385              LCD_WriteReg(LCD_REG_147, 0x0003);
   \   000003DC   0321               MOVS     R1,#+3
   \   000003DE   9320               MOVS     R0,#+147
   \   000003E0   ........           BL       LCD_WriteReg
    386              LCD_WriteReg(LCD_REG_149, 0x0110);
   \   000003E4   4FF48871           MOV      R1,#+272
   \   000003E8   9520               MOVS     R0,#+149
   \   000003EA   ........           BL       LCD_WriteReg
    387              LCD_WriteReg(LCD_REG_151, 0x0000);
   \   000003EE   0021               MOVS     R1,#+0
   \   000003F0   9720               MOVS     R0,#+151
   \   000003F2   ........           BL       LCD_WriteReg
    388              LCD_WriteReg(LCD_REG_152, 0x0000);
   \   000003F6   0021               MOVS     R1,#+0
   \   000003F8   9820               MOVS     R0,#+152
   \   000003FA   ........           BL       LCD_WriteReg
    389          
    390              /* set GRAM write direction and BGR = 1 */
    391              /* I/D=00 (Horizontal : increment, Vertical : decrement) */
    392              /* AM=1 (address is updated in vertical writing direction) */
    393              LCD_WriteReg(LCD_REG_3, 0x1018);
   \   000003FE   41F21801           MOVW     R1,#+4120
   \   00000402   0320               MOVS     R0,#+3
   \   00000404   ........           BL       LCD_WriteReg
    394          
    395              LCD_WriteReg(LCD_REG_7, 0x0133); /* 262K color and display ON */ 
   \   00000408   40F23311           MOVW     R1,#+307
   \   0000040C   0720               MOVS     R0,#+7
   \   0000040E   ........           BL       LCD_WriteReg
    396            }
    397            LCD_SetFont(&LCD_DEFAULT_FONT);
   \                     ??STM3220F_LCD_Init_1:
   \   00000412   ........           LDR.W    R0,??DataTable27
   \   00000416   ........           BL       LCD_SetFont
    398          }
   \   0000041A   01BD               POP      {R0,PC}          ;; return
    399          
    400          /**
    401            * @brief  Sets the LCD Text and Background colors.
    402            * @param  _TextColor: specifies the Text Color.
    403            * @param  _BackColor: specifies the Background Color.
    404            * @retval None
    405            */

   \                                 In section .text, align 2, keep-with-next
    406          void LCD_SetColors(__IO uint16_t _TextColor, __IO uint16_t _BackColor)
    407          {
   \                     LCD_SetColors:
   \   00000000   03B4               PUSH     {R0,R1}
    408            TextColor = _TextColor; 
   \   00000002   ........           LDR.W    R0,??DataTable27_1
   \   00000006   BDF80010           LDRH     R1,[SP, #+0]
   \   0000000A   0180               STRH     R1,[R0, #+0]
    409            BackColor = _BackColor;
   \   0000000C   ........           LDR.W    R0,??DataTable27_2
   \   00000010   BDF80410           LDRH     R1,[SP, #+4]
   \   00000014   0180               STRH     R1,[R0, #+0]
    410          }
   \   00000016   02B0               ADD      SP,SP,#+8
   \   00000018   7047               BX       LR               ;; return
    411          
    412          /**
    413            * @brief  Gets the LCD Text and Background colors.
    414            * @param  _TextColor: pointer to the variable that will contain the Text 
    415                      Color.
    416            * @param  _BackColor: pointer to the variable that will contain the Background 
    417                      Color.
    418            * @retval None
    419            */

   \                                 In section .text, align 2, keep-with-next
    420          void LCD_GetColors(__IO uint16_t *_TextColor, __IO uint16_t *_BackColor)
    421          {
    422            *_TextColor = TextColor; *_BackColor = BackColor;
   \                     LCD_GetColors:
   \   00000000   ........           LDR.W    R2,??DataTable27_1
   \   00000004   1288               LDRH     R2,[R2, #+0]
   \   00000006   0280               STRH     R2,[R0, #+0]
   \   00000008   ........           LDR.W    R0,??DataTable27_2
   \   0000000C   0088               LDRH     R0,[R0, #+0]
   \   0000000E   0880               STRH     R0,[R1, #+0]
    423          }
   \   00000010   7047               BX       LR               ;; return
    424          
    425          /**
    426            * @brief  Sets the Text color.
    427            * @param  Color: specifies the Text color code RGB(5-6-5).
    428            * @retval None
    429            */

   \                                 In section .text, align 2, keep-with-next
    430          void LCD_SetTextColor(__IO uint16_t Color)
    431          {
   \                     LCD_SetTextColor:
   \   00000000   01B4               PUSH     {R0}
    432            TextColor = Color;
   \   00000002   ........           LDR.W    R0,??DataTable27_1
   \   00000006   BDF80010           LDRH     R1,[SP, #+0]
   \   0000000A   0180               STRH     R1,[R0, #+0]
    433          }
   \   0000000C   01B0               ADD      SP,SP,#+4
   \   0000000E   7047               BX       LR               ;; return
    434          
    435          
    436          /**
    437            * @brief  Sets the Background color.
    438            * @param  Color: specifies the Background color code RGB(5-6-5).
    439            * @retval None
    440            */

   \                                 In section .text, align 2, keep-with-next
    441          void LCD_SetBackColor(__IO uint16_t Color)
    442          {
   \                     LCD_SetBackColor:
   \   00000000   01B4               PUSH     {R0}
    443            BackColor = Color;
   \   00000002   ........           LDR.W    R0,??DataTable27_2
   \   00000006   BDF80010           LDRH     R1,[SP, #+0]
   \   0000000A   0180               STRH     R1,[R0, #+0]
    444          }
   \   0000000C   01B0               ADD      SP,SP,#+4
   \   0000000E   7047               BX       LR               ;; return
    445          
    446          /**
    447            * @brief  Sets the Text Font.
    448            * @param  fonts: specifies the font to be used.
    449            * @retval None
    450            */

   \                                 In section .text, align 2, keep-with-next
    451          void LCD_SetFont(sFONT *fonts)
    452          {
    453            LCD_Currentfonts = fonts;
   \                     LCD_SetFont:
   \   00000000   ........           LDR.W    R1,??DataTable27_3
   \   00000004   0860               STR      R0,[R1, #+0]
    454          }
   \   00000006   7047               BX       LR               ;; return
    455          
    456          /**
    457            * @brief  Gets the Text Font.
    458            * @param  None.
    459            * @retval the used font.
    460            */

   \                                 In section .text, align 2, keep-with-next
    461          sFONT *LCD_GetFont(void)
    462          {
    463            return LCD_Currentfonts;
   \                     LCD_GetFont:
   \   00000000   ........           LDR.W    R0,??DataTable27_3
   \   00000004   0068               LDR      R0,[R0, #+0]
   \   00000006   7047               BX       LR               ;; return
    464          }
    465          
    466          /**
    467            * @brief  Clears the selected line.
    468            * @param  Line: the Line to be cleared.
    469            *   This parameter can be one of the following values:
    470            *     @arg Linex: where x can be 0..n
    471            * @retval None
    472            */

   \                                 In section .text, align 2, keep-with-next
    473          void LCD_ClearLine(uint8_t Line)
    474          {
   \                     LCD_ClearLine:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
    475            uint16_t refcolumn = LCD_PIXEL_WIDTH - 1;
   \   00000004   40F23F15           MOVW     R5,#+319
   \   00000008   0BE0               B.N      ??LCD_ClearLine_0
    476            /* Send the string character by character on lCD */
    477            while (((refcolumn + 1)& 0xFFFF) >= LCD_Currentfonts->Width)
    478            {
    479              /* Display one character on LCD */
    480              LCD_DisplayChar(Line, refcolumn, ' ');
   \                     ??LCD_ClearLine_1:
   \   0000000A   2022               MOVS     R2,#+32
   \   0000000C   2900               MOVS     R1,R5
   \   0000000E   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   2000               MOVS     R0,R4
   \   00000012   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   ........           BL       LCD_DisplayChar
    481              /* Decrement the column position by 16 */
    482              refcolumn -= LCD_Currentfonts->Width;
   \   00000018   ........           LDR.W    R0,??DataTable27_3
   \   0000001C   0068               LDR      R0,[R0, #+0]
   \   0000001E   8088               LDRH     R0,[R0, #+4]
   \   00000020   2D1A               SUBS     R5,R5,R0
    483            }
   \                     ??LCD_ClearLine_0:
   \   00000022   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000024   681C               ADDS     R0,R5,#+1
   \   00000026   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000028   ........           LDR.W    R1,??DataTable27_3
   \   0000002C   0968               LDR      R1,[R1, #+0]
   \   0000002E   8988               LDRH     R1,[R1, #+4]
   \   00000030   8842               CMP      R0,R1
   \   00000032   EADA               BGE.N    ??LCD_ClearLine_1
    484          }
   \   00000034   31BD               POP      {R0,R4,R5,PC}    ;; return
    485          
    486          /**
    487            * @brief  Clears the hole LCD.
    488            * @param  Color: the color of the background.
    489            * @retval None
    490            */

   \                                 In section .text, align 2, keep-with-next
    491          void LCD_Clear(uint16_t Color)
    492          {
   \                     LCD_Clear:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
    493            uint32_t index = 0;
   \   00000004   0025               MOVS     R5,#+0
    494            
    495            LCD_SetCursor(0x00, 0x013F); 
   \   00000006   40F23F11           MOVW     R1,#+319
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   ........           BL       LCD_SetCursor
    496            LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
   \   00000010   ........           BL       LCD_WriteRAM_Prepare
    497            for(index = 0; index < 76800; index++)
   \   00000014   0020               MOVS     R0,#+0
   \   00000016   0500               MOVS     R5,R0
   \   00000018   03E0               B.N      ??LCD_Clear_0
    498            {
    499              LCD->LCD_RAM = Color;
   \                     ??LCD_Clear_1:
   \   0000001A   ........           LDR.W    R0,??DataTable28  ;; 0x68000002
   \   0000001E   0480               STRH     R4,[R0, #+0]
    500            }  
   \   00000020   6D1C               ADDS     R5,R5,#+1
   \                     ??LCD_Clear_0:
   \   00000022   B5F5963F           CMP      R5,#+76800
   \   00000026   F8D3               BCC.N    ??LCD_Clear_1
    501          }
   \   00000028   31BD               POP      {R0,R4,R5,PC}    ;; return
    502          
    503          /**
    504            * @brief  Sets the cursor position.
    505            * @param  Xpos: specifies the X position.
    506            * @param  Ypos: specifies the Y position. 
    507            * @retval None
    508            */

   \                                 In section .text, align 2, keep-with-next
    509          void LCD_SetCursor(uint8_t Xpos, uint16_t Ypos)
    510          {
   \                     LCD_SetCursor:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0C00               MOVS     R4,R1
    511            LCD_WriteReg(LCD_REG_32, Xpos);
   \   00000004   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0100               MOVS     R1,R0
   \   00000008   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   2020               MOVS     R0,#+32
   \   0000000C   ........           BL       LCD_WriteReg
    512            LCD_WriteReg(LCD_REG_33, Ypos);
   \   00000010   2100               MOVS     R1,R4
   \   00000012   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   2120               MOVS     R0,#+33
   \   00000016   ........           BL       LCD_WriteReg
    513          }
   \   0000001A   10BD               POP      {R4,PC}          ;; return
    514          
    515          /**
    516            * @brief  Draws a character on LCD.
    517            * @param  Xpos: the Line where to display the character shape.
    518            * @param  Ypos: start column address.
    519            * @param  c: pointer to the character data.
    520            * @retval None
    521            */

   \                                 In section .text, align 2, keep-with-next
    522          void LCD_DrawChar(uint8_t Xpos, uint16_t Ypos, const uint16_t *c)
    523          {
   \                     LCD_DrawChar:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   0C00               MOVS     R4,R1
   \   00000006   1500               MOVS     R5,R2
    524            uint32_t index = 0, i = 0;
   \   00000008   0027               MOVS     R7,#+0
   \   0000000A   5FF00008           MOVS     R8,#+0
    525            uint8_t  Xaddress = 0;
   \   0000000E   0026               MOVS     R6,#+0
    526            Xaddress = Xpos;
   \   00000010   0600               MOVS     R6,R0
    527            
    528            LCD_SetCursor(Xaddress, Ypos);
   \   00000012   2100               MOVS     R1,R4
   \   00000014   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000016   3000               MOVS     R0,R6
   \   00000018   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   ........           BL       LCD_SetCursor
    529            
    530            for(index = 0; index < LCD_Currentfonts->Height; index++)
   \   0000001E   0020               MOVS     R0,#+0
   \   00000020   0700               MOVS     R7,R0
   \   00000022   07E0               B.N      ??LCD_DrawChar_0
    531            {
    532              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    533              for(i = 0; i < LCD_Currentfonts->Width; i++)
    534              {
    535            
    536                if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> i)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
    537                  (((c[index] & (0x1 << i)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
    538          
    539                {
    540                  LCD_WriteRAM(BackColor);
    541                }
    542                else
    543                {
    544                  LCD_WriteRAM(TextColor);
    545                } 
    546              }
    547              Xaddress++;
   \                     ??LCD_DrawChar_1:
   \   00000024   761C               ADDS     R6,R6,#+1
    548              LCD_SetCursor(Xaddress, Ypos);
   \   00000026   2100               MOVS     R1,R4
   \   00000028   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002A   3000               MOVS     R0,R6
   \   0000002C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   ........           BL       LCD_SetCursor
   \   00000032   7F1C               ADDS     R7,R7,#+1
   \                     ??LCD_DrawChar_0:
   \   00000034   ........           LDR.W    R0,??DataTable27_3
   \   00000038   0068               LDR      R0,[R0, #+0]
   \   0000003A   C088               LDRH     R0,[R0, #+6]
   \   0000003C   8742               CMP      R7,R0
   \   0000003E   3BD2               BCS.N    ??LCD_DrawChar_2
   \   00000040   ........           BL       LCD_WriteRAM_Prepare
   \   00000044   5FF00008           MOVS     R8,#+0
   \   00000048   06E0               B.N      ??LCD_DrawChar_3
   \                     ??LCD_DrawChar_4:
   \   0000004A   ........           LDR.W    R0,??DataTable27_1
   \   0000004E   0088               LDRH     R0,[R0, #+0]
   \   00000050   ........           BL       LCD_WriteRAM
   \                     ??LCD_DrawChar_5:
   \   00000054   18F10108           ADDS     R8,R8,#+1
   \                     ??LCD_DrawChar_3:
   \   00000058   ........           LDR.W    R0,??DataTable27_3
   \   0000005C   0068               LDR      R0,[R0, #+0]
   \   0000005E   8088               LDRH     R0,[R0, #+4]
   \   00000060   8045               CMP      R8,R0
   \   00000062   DFD2               BCS.N    ??LCD_DrawChar_1
   \   00000064   35F81700           LDRH     R0,[R5, R7, LSL #+1]
   \   00000068   8021               MOVS     R1,#+128
   \   0000006A   ........           LDR.W    R2,??DataTable27_3
   \   0000006E   1268               LDR      R2,[R2, #+0]
   \   00000070   9288               LDRH     R2,[R2, #+4]
   \   00000072   0C23               MOVS     R3,#+12
   \   00000074   92FBF3F2           SDIV     R2,R2,R3
   \   00000078   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000007A   D200               LSLS     R2,R2,#+3
   \   0000007C   9140               LSLS     R1,R1,R2
   \   0000007E   51FA08F1           ASRS     R1,R1,R8
   \   00000082   0842               TST      R0,R1
   \   00000084   05D1               BNE.N    ??LCD_DrawChar_6
   \   00000086   ........           LDR.W    R0,??DataTable27_3
   \   0000008A   0068               LDR      R0,[R0, #+0]
   \   0000008C   8088               LDRH     R0,[R0, #+4]
   \   0000008E   0D28               CMP      R0,#+13
   \   00000090   0CD3               BCC.N    ??LCD_DrawChar_7
   \                     ??LCD_DrawChar_6:
   \   00000092   35F81700           LDRH     R0,[R5, R7, LSL #+1]
   \   00000096   0121               MOVS     R1,#+1
   \   00000098   11FA08F1           LSLS     R1,R1,R8
   \   0000009C   0842               TST      R0,R1
   \   0000009E   D4D1               BNE.N    ??LCD_DrawChar_4
   \   000000A0   ........           LDR.W    R0,??DataTable27_3
   \   000000A4   0068               LDR      R0,[R0, #+0]
   \   000000A6   8088               LDRH     R0,[R0, #+4]
   \   000000A8   0D28               CMP      R0,#+13
   \   000000AA   CED3               BCC.N    ??LCD_DrawChar_4
   \                     ??LCD_DrawChar_7:
   \   000000AC   ........           LDR.W    R0,??DataTable28_1
   \   000000B0   0088               LDRH     R0,[R0, #+0]
   \   000000B2   ........           BL       LCD_WriteRAM
   \   000000B6   CDE7               B.N      ??LCD_DrawChar_5
    549            }
    550          }
   \                     ??LCD_DrawChar_2:
   \   000000B8   BDE8F081           POP      {R4-R8,PC}       ;; return
    551          
    552          /**
    553            * @brief  Displays one character (16dots width, 24dots height).
    554            * @param  Line: the Line where to display the character shape .
    555            *   This parameter can be one of the following values:
    556            *     @arg Linex: where x can be 0..9
    557            * @param  Column: start column address.
    558            * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
    559            * @retval None
    560            */

   \                                 In section .text, align 2, keep-with-next
    561          void LCD_DisplayChar(uint8_t Line, uint16_t Column, uint8_t Ascii)
    562          {
   \                     LCD_DisplayChar:
   \   00000000   80B5               PUSH     {R7,LR}
    563            Ascii -= 32;
   \   00000002   203A               SUBS     R2,R2,#+32
    564            LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
   \   00000004   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   ........           LDR.W    R3,??DataTable27_3
   \   0000000A   1B68               LDR      R3,[R3, #+0]
   \   0000000C   DB88               LDRH     R3,[R3, #+6]
   \   0000000E   5A43               MULS     R2,R3,R2
   \   00000010   ........           LDR.W    R3,??DataTable27_3
   \   00000014   1B68               LDR      R3,[R3, #+0]
   \   00000016   1B68               LDR      R3,[R3, #+0]
   \   00000018   13EB4202           ADDS     R2,R3,R2, LSL #+1
   \   0000001C   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   ........           BL       LCD_DrawChar
    565          }
   \   00000024   01BD               POP      {R0,PC}          ;; return
    566          
    567          /**
    568            * @brief  Displays a maximum of 20 char on the LCD.
    569            * @param  Line: the Line where to display the character shape .
    570            *   This parameter can be one of the following values:
    571            *     @arg Linex: where x can be 0..9
    572            * @param  *ptr: pointer to string to display on LCD.
    573            * @retval None
    574            */

   \                                 In section .text, align 2, keep-with-next
    575          void LCD_DisplayStringLine(uint8_t Line, uint8_t *ptr)
    576          {
   \                     LCD_DisplayStringLine:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0E00               MOVS     R6,R1
    577            uint16_t refcolumn = LCD_PIXEL_WIDTH - 1;
   \   00000006   40F23F15           MOVW     R5,#+319
   \   0000000A   0CE0               B.N      ??LCD_DisplayStringLine_0
    578          
    579            /* Send the string character by character on lCD */
    580            while ((*ptr != 0) & (((refcolumn + 1) & 0xFFFF) >= LCD_Currentfonts->Width))
    581            {
    582              /* Display one character on LCD */
    583              LCD_DisplayChar(Line, refcolumn, *ptr);
   \                     ??LCD_DisplayStringLine_1:
   \   0000000C   3278               LDRB     R2,[R6, #+0]
   \   0000000E   2900               MOVS     R1,R5
   \   00000010   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000012   2000               MOVS     R0,R4
   \   00000014   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   ........           BL       LCD_DisplayChar
    584              /* Decrement the column position by 16 */
    585              refcolumn -= LCD_Currentfonts->Width;
   \   0000001A   ........           LDR.W    R0,??DataTable27_3
   \   0000001E   0068               LDR      R0,[R0, #+0]
   \   00000020   8088               LDRH     R0,[R0, #+4]
   \   00000022   2D1A               SUBS     R5,R5,R0
    586              /* Point on the next character */
    587              ptr++;
   \   00000024   761C               ADDS     R6,R6,#+1
    588            }
   \                     ??LCD_DisplayStringLine_0:
   \   00000026   3078               LDRB     R0,[R6, #+0]
   \   00000028   0028               CMP      R0,#+0
   \   0000002A   0BD0               BEQ.N    ??LCD_DisplayStringLine_2
   \   0000002C   0120               MOVS     R0,#+1
   \   0000002E   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000030   691C               ADDS     R1,R5,#+1
   \   00000032   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000034   ........           LDR.W    R2,??DataTable27_3
   \   00000038   1268               LDR      R2,[R2, #+0]
   \   0000003A   9288               LDRH     R2,[R2, #+4]
   \   0000003C   9142               CMP      R1,R2
   \   0000003E   01DB               BLT.N    ??LCD_DisplayStringLine_2
   \   00000040   C007               LSLS     R0,R0,#+31
   \   00000042   E3D4               BMI.N    ??LCD_DisplayStringLine_1
    589          }
   \                     ??LCD_DisplayStringLine_2:
   \   00000044   70BD               POP      {R4-R6,PC}       ;; return
    590          
    591          /**
    592            * @brief  Sets a display window
    593            * @param  Xpos: specifies the X buttom left position.
    594            * @param  Ypos: specifies the Y buttom left position.
    595            * @param  Height: display window height.
    596            * @param  Width: display window width.
    597            * @retval None
    598            */

   \                                 In section .text, align 2, keep-with-next
    599          void LCD_SetDisplayWindow(uint8_t Xpos, uint16_t Ypos, uint8_t Height, uint16_t Width)
    600          {
   \                     LCD_SetDisplayWindow:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1E00               MOVS     R6,R3
    601            /* Horizontal GRAM Start Address */
    602            if(Xpos >= Height)
   \   00000008   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000C   9442               CMP      R4,R2
   \   0000000E   08D3               BCC.N    ??LCD_SetDisplayWindow_0
    603            {
    604              LCD_WriteReg(LCD_REG_80, (Xpos - Height + 1));
   \   00000010   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   A01A               SUBS     R0,R4,R2
   \   00000016   411C               ADDS     R1,R0,#+1
   \   00000018   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001A   5020               MOVS     R0,#+80
   \   0000001C   ........           BL       LCD_WriteReg
   \   00000020   03E0               B.N      ??LCD_SetDisplayWindow_1
    605            }
    606            else
    607            {
    608              LCD_WriteReg(LCD_REG_80, 0);
   \                     ??LCD_SetDisplayWindow_0:
   \   00000022   0021               MOVS     R1,#+0
   \   00000024   5020               MOVS     R0,#+80
   \   00000026   ........           BL       LCD_WriteReg
    609            }
    610            /* Horizontal GRAM End Address */
    611            LCD_WriteReg(LCD_REG_81, Xpos);
   \                     ??LCD_SetDisplayWindow_1:
   \   0000002A   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002C   2100               MOVS     R1,R4
   \   0000002E   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000030   5120               MOVS     R0,#+81
   \   00000032   ........           BL       LCD_WriteReg
    612            /* Vertical GRAM Start Address */
    613            if(Ypos >= Width)
   \   00000036   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000038   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000003A   B542               CMP      R5,R6
   \   0000003C   06D3               BCC.N    ??LCD_SetDisplayWindow_2
    614            {
    615              LCD_WriteReg(LCD_REG_82, (Ypos - Width + 1));
   \   0000003E   A81B               SUBS     R0,R5,R6
   \   00000040   411C               ADDS     R1,R0,#+1
   \   00000042   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000044   5220               MOVS     R0,#+82
   \   00000046   ........           BL       LCD_WriteReg
   \   0000004A   03E0               B.N      ??LCD_SetDisplayWindow_3
    616            }  
    617            else
    618            {
    619              LCD_WriteReg(LCD_REG_82, 0);
   \                     ??LCD_SetDisplayWindow_2:
   \   0000004C   0021               MOVS     R1,#+0
   \   0000004E   5220               MOVS     R0,#+82
   \   00000050   ........           BL       LCD_WriteReg
    620            }
    621            /* Vertical GRAM End Address */
    622            LCD_WriteReg(LCD_REG_83, Ypos);
   \                     ??LCD_SetDisplayWindow_3:
   \   00000054   2900               MOVS     R1,R5
   \   00000056   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000058   5320               MOVS     R0,#+83
   \   0000005A   ........           BL       LCD_WriteReg
    623            LCD_SetCursor(Xpos, Ypos);
   \   0000005E   2900               MOVS     R1,R5
   \   00000060   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000062   2000               MOVS     R0,R4
   \   00000064   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   ........           BL       LCD_SetCursor
    624          }
   \   0000006A   70BD               POP      {R4-R6,PC}       ;; return
    625          
    626          /**
    627            * @brief  Disables LCD Window mode.
    628            * @param  None
    629            * @retval None
    630            */

   \                                 In section .text, align 2, keep-with-next
    631          void LCD_WindowModeDisable(void)
    632          {
   \                     LCD_WindowModeDisable:
   \   00000000   80B5               PUSH     {R7,LR}
    633            LCD_SetDisplayWindow(239, 0x13F, 240, 320);
   \   00000002   4FF4A073           MOV      R3,#+320
   \   00000006   F022               MOVS     R2,#+240
   \   00000008   40F23F11           MOVW     R1,#+319
   \   0000000C   EF20               MOVS     R0,#+239
   \   0000000E   ........           BL       LCD_SetDisplayWindow
    634            LCD_WriteReg(LCD_REG_3, 0x1018);    
   \   00000012   41F21801           MOVW     R1,#+4120
   \   00000016   0320               MOVS     R0,#+3
   \   00000018   ........           BL       LCD_WriteReg
    635          }
   \   0000001C   01BD               POP      {R0,PC}          ;; return
    636          
    637          /**
    638            * @brief  Displays a line.
    639            * @param Xpos: specifies the X position.
    640            * @param Ypos: specifies the Y position.
    641            * @param Length: line length.
    642            * @param Direction: line direction.
    643            *   This parameter can be one of the following values: Vertical or Horizontal.
    644            * @retval None
    645            */

   \                                 In section .text, align 2, keep-with-next
    646          void LCD_DrawLine(uint8_t Xpos, uint16_t Ypos, uint16_t Length, uint8_t Direction)
    647          {
   \                     LCD_DrawLine:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0D00               MOVS     R5,R1
   \   00000008   1600               MOVS     R6,R2
   \   0000000A   1F00               MOVS     R7,R3
    648            uint32_t i = 0;
   \   0000000C   5FF00008           MOVS     R8,#+0
    649            
    650            LCD_SetCursor(Xpos, Ypos);
   \   00000010   2900               MOVS     R1,R5
   \   00000012   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   2000               MOVS     R0,R4
   \   00000016   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   ........           BL       LCD_SetCursor
    651            if(Direction == LCD_DIR_HORIZONTAL)
   \   0000001C   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000001E   002F               CMP      R7,#+0
   \   00000020   0ED1               BNE.N    ??LCD_DrawLine_0
    652            {
    653              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
   \   00000022   ........           BL       LCD_WriteRAM_Prepare
    654              for(i = 0; i < Length; i++)
   \   00000026   5FF00008           MOVS     R8,#+0
   \                     ??LCD_DrawLine_1:
   \   0000002A   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000002C   B045               CMP      R8,R6
   \   0000002E   1DD2               BCS.N    ??LCD_DrawLine_2
    655              {
    656                LCD_WriteRAM(TextColor);
   \   00000030   ........           LDR.W    R0,??DataTable27_1
   \   00000034   0088               LDRH     R0,[R0, #+0]
   \   00000036   ........           BL       LCD_WriteRAM
    657              }
   \   0000003A   18F10108           ADDS     R8,R8,#+1
   \   0000003E   F4E7               B.N      ??LCD_DrawLine_1
    658            }
    659            else
    660            {
    661              for(i = 0; i < Length; i++)
   \                     ??LCD_DrawLine_0:
   \   00000040   5FF00008           MOVS     R8,#+0
   \   00000044   0FE0               B.N      ??LCD_DrawLine_3
    662              {
    663                LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
   \                     ??LCD_DrawLine_4:
   \   00000046   ........           BL       LCD_WriteRAM_Prepare
    664                LCD_WriteRAM(TextColor);
   \   0000004A   ........           LDR.W    R0,??DataTable27_1
   \   0000004E   0088               LDRH     R0,[R0, #+0]
   \   00000050   ........           BL       LCD_WriteRAM
    665                Xpos++;
   \   00000054   641C               ADDS     R4,R4,#+1
    666                LCD_SetCursor(Xpos, Ypos);
   \   00000056   2900               MOVS     R1,R5
   \   00000058   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000005A   2000               MOVS     R0,R4
   \   0000005C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   ........           BL       LCD_SetCursor
    667              }
   \   00000062   18F10108           ADDS     R8,R8,#+1
   \                     ??LCD_DrawLine_3:
   \   00000066   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000068   B045               CMP      R8,R6
   \   0000006A   ECD3               BCC.N    ??LCD_DrawLine_4
    668            }
    669          }
   \                     ??LCD_DrawLine_2:
   \   0000006C   BDE8F081           POP      {R4-R8,PC}       ;; return
    670          
    671          /**
    672            * @brief  Displays a rectangle.
    673            * @param  Xpos: specifies the X position.
    674            * @param  Ypos: specifies the Y position.
    675            * @param  Height: display rectangle height.
    676            * @param  Width: display rectangle width.
    677            * @retval None
    678            */

   \                                 In section .text, align 2, keep-with-next
    679          void LCD_DrawRect(uint8_t Xpos, uint16_t Ypos, uint8_t Height, uint16_t Width)
    680          {
   \                     LCD_DrawRect:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
   \   00000008   1F00               MOVS     R7,R3
    681            LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);
   \   0000000A   0023               MOVS     R3,#+0
   \   0000000C   3A00               MOVS     R2,R7
   \   0000000E   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000010   2900               MOVS     R1,R5
   \   00000012   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   2000               MOVS     R0,R4
   \   00000016   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   ........           BL       LCD_DrawLine
    682            LCD_DrawLine((Xpos + Height), Ypos, Width, LCD_DIR_HORIZONTAL);
   \   0000001C   0023               MOVS     R3,#+0
   \   0000001E   3A00               MOVS     R2,R7
   \   00000020   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000022   2900               MOVS     R1,R5
   \   00000024   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000026   3019               ADDS     R0,R6,R4
   \   00000028   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   ........           BL       LCD_DrawLine
    683            
    684            LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_VERTICAL);
   \   0000002E   0123               MOVS     R3,#+1
   \   00000030   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000032   3200               MOVS     R2,R6
   \   00000034   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000036   2900               MOVS     R1,R5
   \   00000038   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000003A   2000               MOVS     R0,R4
   \   0000003C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   ........           BL       LCD_DrawLine
    685            LCD_DrawLine(Xpos, (Ypos - Width + 1), Height, LCD_DIR_VERTICAL);
   \   00000042   0123               MOVS     R3,#+1
   \   00000044   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000046   3200               MOVS     R2,R6
   \   00000048   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000004A   E81B               SUBS     R0,R5,R7
   \   0000004C   411C               ADDS     R1,R0,#+1
   \   0000004E   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000050   2000               MOVS     R0,R4
   \   00000052   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   ........           BL       LCD_DrawLine
    686          }
   \   00000058   F1BD               POP      {R0,R4-R7,PC}    ;; return
    687          
    688          /**
    689            * @brief  Displays a circle.
    690            * @param  Xpos: specifies the X position.
    691            * @param  Ypos: specifies the Y position.
    692            * @param  Radius
    693            * @retval None
    694            */

   \                                 In section .text, align 2, keep-with-next
    695          void LCD_DrawCircle(uint8_t Xpos, uint16_t Ypos, uint16_t Radius)
    696          {
   \                     LCD_DrawCircle:
   \   00000000   2DE9F041           PUSH     {R4-R8,LR}
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0D00               MOVS     R5,R1
   \   00000008   1600               MOVS     R6,R2
    697            int32_t  D;/* Decision Variable */ 
    698            uint32_t  CurX;/* Current X Value */
    699            uint32_t  CurY;/* Current Y Value */ 
    700            
    701            D = 3 - (Radius << 1);
   \   0000000A   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000000C   7000               LSLS     R0,R6,#+1
   \   0000000E   D0F10308           RSBS     R8,R0,#+3
    702            CurX = 0;
   \   00000012   0027               MOVS     R7,#+0
    703            CurY = Radius;
   \   00000014   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000016   06E0               B.N      ??LCD_DrawCircle_0
    704            
    705            while (CurX <= CurY)
    706            {
    707              LCD_SetCursor(Xpos + CurX, Ypos + CurY);
    708              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    709              LCD_WriteRAM(TextColor);
    710              LCD_SetCursor(Xpos + CurX, Ypos - CurY);
    711              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    712              LCD_WriteRAM(TextColor);
    713              LCD_SetCursor(Xpos - CurX, Ypos + CurY);
    714              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    715              LCD_WriteRAM(TextColor);
    716              LCD_SetCursor(Xpos - CurX, Ypos - CurY);
    717              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    718              LCD_WriteRAM(TextColor);
    719              LCD_SetCursor(Xpos + CurY, Ypos + CurX);
    720              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    721              LCD_WriteRAM(TextColor);
    722              LCD_SetCursor(Xpos + CurY, Ypos - CurX);
    723              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    724              LCD_WriteRAM(TextColor);
    725              LCD_SetCursor(Xpos - CurY, Ypos + CurX);
    726              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    727              LCD_WriteRAM(TextColor);
    728              LCD_SetCursor(Xpos - CurY, Ypos - CurX);
    729              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    730              LCD_WriteRAM(TextColor);
    731              if (D < 0)
    732              { 
    733                D += (CurX << 2) + 6;
    734              }
    735              else
    736              {
    737                D += ((CurX - CurY) << 2) + 10;
   \                     ??LCD_DrawCircle_1:
   \   00000018   B81B               SUBS     R0,R7,R6
   \   0000001A   18EB8000           ADDS     R0,R8,R0, LSL #+2
   \   0000001E   10F10A08           ADDS     R8,R0,#+10
    738                CurY--;
   \   00000022   761E               SUBS     R6,R6,#+1
    739              }
    740              CurX++;
   \                     ??LCD_DrawCircle_2:
   \   00000024   7F1C               ADDS     R7,R7,#+1
   \                     ??LCD_DrawCircle_0:
   \   00000026   BE42               CMP      R6,R7
   \   00000028   6FD3               BCC.N    ??LCD_DrawCircle_3
   \   0000002A   7119               ADDS     R1,R6,R5
   \   0000002C   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002E   3819               ADDS     R0,R7,R4
   \   00000030   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   ........           BL       LCD_SetCursor
   \   00000036   ........           BL       LCD_WriteRAM_Prepare
   \   0000003A   ........           LDR.W    R0,??DataTable27_1
   \   0000003E   0088               LDRH     R0,[R0, #+0]
   \   00000040   ........           BL       LCD_WriteRAM
   \   00000044   A91B               SUBS     R1,R5,R6
   \   00000046   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000048   3819               ADDS     R0,R7,R4
   \   0000004A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   ........           BL       LCD_SetCursor
   \   00000050   ........           BL       LCD_WriteRAM_Prepare
   \   00000054   ........           LDR.W    R0,??DataTable27_1
   \   00000058   0088               LDRH     R0,[R0, #+0]
   \   0000005A   ........           BL       LCD_WriteRAM
   \   0000005E   7119               ADDS     R1,R6,R5
   \   00000060   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000062   E01B               SUBS     R0,R4,R7
   \   00000064   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000066   ........           BL       LCD_SetCursor
   \   0000006A   ........           BL       LCD_WriteRAM_Prepare
   \   0000006E   ........           LDR.W    R0,??DataTable27_1
   \   00000072   0088               LDRH     R0,[R0, #+0]
   \   00000074   ........           BL       LCD_WriteRAM
   \   00000078   A91B               SUBS     R1,R5,R6
   \   0000007A   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000007C   E01B               SUBS     R0,R4,R7
   \   0000007E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000080   ........           BL       LCD_SetCursor
   \   00000084   ........           BL       LCD_WriteRAM_Prepare
   \   00000088   ........           LDR.W    R0,??DataTable27_1
   \   0000008C   0088               LDRH     R0,[R0, #+0]
   \   0000008E   ........           BL       LCD_WriteRAM
   \   00000092   7919               ADDS     R1,R7,R5
   \   00000094   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000096   3019               ADDS     R0,R6,R4
   \   00000098   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009A   ........           BL       LCD_SetCursor
   \   0000009E   ........           BL       LCD_WriteRAM_Prepare
   \   000000A2   ........           LDR.W    R0,??DataTable27_1
   \   000000A6   0088               LDRH     R0,[R0, #+0]
   \   000000A8   ........           BL       LCD_WriteRAM
   \   000000AC   E91B               SUBS     R1,R5,R7
   \   000000AE   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000B0   3019               ADDS     R0,R6,R4
   \   000000B2   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B4   ........           BL       LCD_SetCursor
   \   000000B8   ........           BL       LCD_WriteRAM_Prepare
   \   000000BC   ........           LDR.W    R0,??DataTable27_1
   \   000000C0   0088               LDRH     R0,[R0, #+0]
   \   000000C2   ........           BL       LCD_WriteRAM
   \   000000C6   7919               ADDS     R1,R7,R5
   \   000000C8   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000CA   A01B               SUBS     R0,R4,R6
   \   000000CC   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000CE   ........           BL       LCD_SetCursor
   \   000000D2   ........           BL       LCD_WriteRAM_Prepare
   \   000000D6   ........           LDR.W    R0,??DataTable27_1
   \   000000DA   0088               LDRH     R0,[R0, #+0]
   \   000000DC   ........           BL       LCD_WriteRAM
   \   000000E0   E91B               SUBS     R1,R5,R7
   \   000000E2   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000E4   A01B               SUBS     R0,R4,R6
   \   000000E6   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E8   ........           BL       LCD_SetCursor
   \   000000EC   ........           BL       LCD_WriteRAM_Prepare
   \   000000F0   ........           LDR.W    R0,??DataTable27_1
   \   000000F4   0088               LDRH     R0,[R0, #+0]
   \   000000F6   ........           BL       LCD_WriteRAM
   \   000000FA   B8F1000F           CMP      R8,#+0
   \   000000FE   8BD5               BPL.N    ??LCD_DrawCircle_1
   \   00000100   18EB8700           ADDS     R0,R8,R7, LSL #+2
   \   00000104   10F10608           ADDS     R8,R0,#+6
   \   00000108   8CE7               B.N      ??LCD_DrawCircle_2
    741            }
    742          }
   \                     ??LCD_DrawCircle_3:
   \   0000010A   BDE8F081           POP      {R4-R8,PC}       ;; return
    743          
    744          /**
    745            * @brief  Displays a monocolor picture.
    746            * @param  Pict: pointer to the picture array.
    747            * @retval None
    748            */

   \                                 In section .text, align 2, keep-with-next
    749          void LCD_DrawMonoPict(const uint32_t *Pict)
    750          {
   \                     LCD_DrawMonoPict:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
    751            uint32_t index = 0, i = 0;
   \   00000004   0025               MOVS     R5,#+0
   \   00000006   0026               MOVS     R6,#+0
    752            LCD_SetCursor(0, (LCD_PIXEL_WIDTH - 1)); 
   \   00000008   40F23F11           MOVW     R1,#+319
   \   0000000C   0020               MOVS     R0,#+0
   \   0000000E   ........           BL       LCD_SetCursor
    753            LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
   \   00000012   ........           BL       LCD_WriteRAM_Prepare
    754            for(index = 0; index < 2400; index++)
   \   00000016   0020               MOVS     R0,#+0
   \   00000018   0500               MOVS     R5,R0
   \   0000001A   00E0               B.N      ??LCD_DrawMonoPict_0
   \                     ??LCD_DrawMonoPict_1:
   \   0000001C   6D1C               ADDS     R5,R5,#+1
   \                     ??LCD_DrawMonoPict_0:
   \   0000001E   B5F5166F           CMP      R5,#+2400
   \   00000022   15D2               BCS.N    ??LCD_DrawMonoPict_2
    755            {
    756              for(i = 0; i < 32; i++)
   \   00000024   0026               MOVS     R6,#+0
   \   00000026   05E0               B.N      ??LCD_DrawMonoPict_3
    757              {
    758                if((Pict[index] & (1 << i)) == 0x00)
    759                {
    760                  LCD_WriteRAM(BackColor);
    761                }
    762                else
    763                {
    764                  LCD_WriteRAM(TextColor);
   \                     ??LCD_DrawMonoPict_4:
   \   00000028   ........           LDR.W    R0,??DataTable27_1
   \   0000002C   0088               LDRH     R0,[R0, #+0]
   \   0000002E   ........           BL       LCD_WriteRAM
    765                }
   \                     ??LCD_DrawMonoPict_5:
   \   00000032   761C               ADDS     R6,R6,#+1
   \                     ??LCD_DrawMonoPict_3:
   \   00000034   202E               CMP      R6,#+32
   \   00000036   F1D2               BCS.N    ??LCD_DrawMonoPict_1
   \   00000038   54F82500           LDR      R0,[R4, R5, LSL #+2]
   \   0000003C   0121               MOVS     R1,#+1
   \   0000003E   B140               LSLS     R1,R1,R6
   \   00000040   0842               TST      R0,R1
   \   00000042   F1D1               BNE.N    ??LCD_DrawMonoPict_4
   \   00000044   ........           LDR.W    R0,??DataTable28_1
   \   00000048   0088               LDRH     R0,[R0, #+0]
   \   0000004A   ........           BL       LCD_WriteRAM
   \   0000004E   F0E7               B.N      ??LCD_DrawMonoPict_5
    766              }
    767            }
    768          }
   \                     ??LCD_DrawMonoPict_2:
   \   00000050   70BD               POP      {R4-R6,PC}       ;; return
    769          
    770          /**
    771            * @brief  Displays a bitmap picture loaded in the internal Flash.
    772            * @param  BmpAddress: Bmp picture address in the internal Flash.
    773            * @retval None
    774            */

   \                                 In section .text, align 2, keep-with-next
    775          void LCD_WriteBMP(uint32_t BmpAddress)
    776          {
   \                     LCD_WriteBMP:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
    777            uint32_t index = 0, size = 0;
   \   00000004   0025               MOVS     R5,#+0
   \   00000006   0026               MOVS     R6,#+0
    778            /* Read bitmap size */
    779            size = *(__IO uint16_t *) (BmpAddress + 2);
   \   00000008   6088               LDRH     R0,[R4, #+2]
   \   0000000A   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0600               MOVS     R6,R0
    780            size |= (*(__IO uint16_t *) (BmpAddress + 4)) << 16;
   \   0000000E   A088               LDRH     R0,[R4, #+4]
   \   00000010   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   56EA0046           ORRS     R6,R6,R0, LSL #+16
    781            /* Get bitmap data address offset */
    782            index = *(__IO uint16_t *) (BmpAddress + 10);
   \   00000016   6089               LDRH     R0,[R4, #+10]
   \   00000018   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001A   0500               MOVS     R5,R0
    783            index |= (*(__IO uint16_t *) (BmpAddress + 12)) << 16;
   \   0000001C   A089               LDRH     R0,[R4, #+12]
   \   0000001E   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000020   55EA0045           ORRS     R5,R5,R0, LSL #+16
    784            size = (size - index)/2;
   \   00000024   701B               SUBS     R0,R6,R5
   \   00000026   4608               LSRS     R6,R0,#+1
    785            BmpAddress += index;
   \   00000028   2C19               ADDS     R4,R5,R4
    786            /* Set GRAM write direction and BGR = 1 */
    787            /* I/D=00 (Horizontal : decrement, Vertical : decrement) */
    788            /* AM=1 (address is updated in vertical writing direction) */
    789            LCD_WriteReg(LCD_REG_3, 0x1008);
   \   0000002A   41F20801           MOVW     R1,#+4104
   \   0000002E   0320               MOVS     R0,#+3
   \   00000030   ........           BL       LCD_WriteReg
    790           
    791            LCD_WriteRAM_Prepare();
   \   00000034   ........           BL       LCD_WriteRAM_Prepare
    792           
    793            for(index = 0; index < size; index++)
   \   00000038   0025               MOVS     R5,#+0
   \   0000003A   04E0               B.N      ??LCD_WriteBMP_0
    794            {
    795              LCD_WriteRAM(*(__IO uint16_t *)BmpAddress);
   \                     ??LCD_WriteBMP_1:
   \   0000003C   2088               LDRH     R0,[R4, #+0]
   \   0000003E   ........           BL       LCD_WriteRAM
    796              BmpAddress += 2;
   \   00000042   A41C               ADDS     R4,R4,#+2
    797            }
   \   00000044   6D1C               ADDS     R5,R5,#+1
   \                     ??LCD_WriteBMP_0:
   \   00000046   B542               CMP      R5,R6
   \   00000048   F8D3               BCC.N    ??LCD_WriteBMP_1
    798           
    799            /* Set GRAM write direction and BGR = 1 */
    800            /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
    801            /* AM = 1 (address is updated in vertical writing direction) */
    802            LCD_WriteReg(LCD_REG_3, 0x1018);
   \   0000004A   41F21801           MOVW     R1,#+4120
   \   0000004E   0320               MOVS     R0,#+3
   \   00000050   ........           BL       LCD_WriteReg
    803          }
   \   00000054   70BD               POP      {R4-R6,PC}       ;; return
    804          
    805          /**
    806            * @brief  Displays a full rectangle.
    807            * @param  Xpos: specifies the X position.
    808            * @param  Ypos: specifies the Y position.
    809            * @param  Height: rectangle height.
    810            * @param  Width: rectangle width.
    811            * @retval None
    812            */

   \                                 In section .text, align 2, keep-with-next
    813          void LCD_DrawFullRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
    814          {
   \                     LCD_DrawFullRect:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
   \   00000008   1F00               MOVS     R7,R3
    815            LCD_SetTextColor(TextColor);
   \   0000000A   ........           LDR.W    R0,??DataTable27_1
   \   0000000E   0088               LDRH     R0,[R0, #+0]
   \   00000010   ........           BL       LCD_SetTextColor
    816          
    817            LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);
   \   00000014   0023               MOVS     R3,#+0
   \   00000016   3200               MOVS     R2,R6
   \   00000018   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001A   2900               MOVS     R1,R5
   \   0000001C   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001E   2000               MOVS     R0,R4
   \   00000020   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   ........           BL       LCD_DrawLine
    818            LCD_DrawLine((Xpos + Height), Ypos, Width, LCD_DIR_HORIZONTAL);
   \   00000026   0023               MOVS     R3,#+0
   \   00000028   3200               MOVS     R2,R6
   \   0000002A   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000002C   2900               MOVS     R1,R5
   \   0000002E   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000030   3819               ADDS     R0,R7,R4
   \   00000032   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   ........           BL       LCD_DrawLine
    819            
    820            LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_VERTICAL);
   \   00000038   0123               MOVS     R3,#+1
   \   0000003A   3A00               MOVS     R2,R7
   \   0000003C   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000003E   2900               MOVS     R1,R5
   \   00000040   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000042   2000               MOVS     R0,R4
   \   00000044   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   ........           BL       LCD_DrawLine
    821            LCD_DrawLine(Xpos, (Ypos - Width + 1), Height, LCD_DIR_VERTICAL);
   \   0000004A   0123               MOVS     R3,#+1
   \   0000004C   3A00               MOVS     R2,R7
   \   0000004E   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000050   A81B               SUBS     R0,R5,R6
   \   00000052   411C               ADDS     R1,R0,#+1
   \   00000054   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000056   2000               MOVS     R0,R4
   \   00000058   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005A   ........           BL       LCD_DrawLine
    822          
    823            Width -= 2;
   \   0000005E   B61E               SUBS     R6,R6,#+2
    824            Height--;
   \   00000060   7F1E               SUBS     R7,R7,#+1
    825            Ypos--;
   \   00000062   6D1E               SUBS     R5,R5,#+1
    826          
    827            LCD_SetTextColor(BackColor);
   \   00000064   ........           LDR.W    R0,??DataTable27_2
   \   00000068   0088               LDRH     R0,[R0, #+0]
   \   0000006A   ........           BL       LCD_SetTextColor
   \   0000006E   09E0               B.N      ??LCD_DrawFullRect_0
    828          
    829            while(Height--)
    830            {
    831              LCD_DrawLine(++Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);    
   \                     ??LCD_DrawFullRect_1:
   \   00000070   641C               ADDS     R4,R4,#+1
   \   00000072   0023               MOVS     R3,#+0
   \   00000074   3200               MOVS     R2,R6
   \   00000076   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000078   2900               MOVS     R1,R5
   \   0000007A   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000007C   2000               MOVS     R0,R4
   \   0000007E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000080   ........           BL       LCD_DrawLine
    832            }
   \                     ??LCD_DrawFullRect_0:
   \   00000084   3800               MOVS     R0,R7
   \   00000086   471E               SUBS     R7,R0,#+1
   \   00000088   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000008A   0028               CMP      R0,#+0
   \   0000008C   F0D1               BNE.N    ??LCD_DrawFullRect_1
    833          
    834            LCD_SetTextColor(TextColor);
   \   0000008E   ........           LDR.W    R0,??DataTable27_1
   \   00000092   0088               LDRH     R0,[R0, #+0]
   \   00000094   ........           BL       LCD_SetTextColor
    835          }
   \   00000098   F1BD               POP      {R0,R4-R7,PC}    ;; return
    836          
    837          /**
    838            * @brief  Displays a full circle.
    839            * @param  Xpos: specifies the X position.
    840            * @param  Ypos: specifies the Y position.
    841            * @param  Radius
    842            * @retval None
    843            */

   \                                 In section .text, align 2, keep-with-next
    844          void LCD_DrawFullCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
    845          {
   \                     LCD_DrawFullCircle:
   \   00000000   2DE9F843           PUSH     {R3-R9,LR}
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0D00               MOVS     R5,R1
   \   00000008   1600               MOVS     R6,R2
    846            int32_t  D;    /* Decision Variable */ 
    847            uint32_t  CurX;/* Current X Value */
    848            uint32_t  CurY;/* Current Y Value */ 
    849            
    850            D = 3 - (Radius << 1);
   \   0000000A   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000000C   7000               LSLS     R0,R6,#+1
   \   0000000E   D0F10309           RSBS     R9,R0,#+3
    851          
    852            CurX = 0;
   \   00000012   0027               MOVS     R7,#+0
    853            CurY = Radius;
   \   00000014   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000016   B046               MOV      R8,R6
    854            
    855            LCD_SetTextColor(BackColor);
   \   00000018   ........           LDR.W    R0,??DataTable27_2
   \   0000001C   0088               LDRH     R0,[R0, #+0]
   \   0000001E   ........           BL       LCD_SetTextColor
   \   00000022   08E0               B.N      ??LCD_DrawFullCircle_0
    856          
    857            while (CurX <= CurY)
    858            {
    859              if(CurY > 0) 
    860              {
    861                LCD_DrawLine(Xpos - CurX, Ypos + CurY, 2*CurY, LCD_DIR_HORIZONTAL);
    862                LCD_DrawLine(Xpos + CurX, Ypos + CurY, 2*CurY, LCD_DIR_HORIZONTAL);
    863              }
    864          
    865              if(CurX > 0) 
    866              {
    867                LCD_DrawLine(Xpos - CurY, Ypos + CurX, 2*CurX, LCD_DIR_HORIZONTAL);
    868                LCD_DrawLine(Xpos + CurY, Ypos + CurX, 2*CurX, LCD_DIR_HORIZONTAL);
    869              }
    870              if (D < 0)
    871              { 
    872                D += (CurX << 2) + 6;
    873              }
    874              else
    875              {
    876                D += ((CurX - CurY) << 2) + 10;
   \                     ??LCD_DrawFullCircle_1:
   \   00000024   B7EB0800           SUBS     R0,R7,R8
   \   00000028   19EB8000           ADDS     R0,R9,R0, LSL #+2
   \   0000002C   10F10A09           ADDS     R9,R0,#+10
    877                CurY--;
   \   00000030   B8F10108           SUBS     R8,R8,#+1
    878              }
    879              CurX++;
   \                     ??LCD_DrawFullCircle_2:
   \   00000034   7F1C               ADDS     R7,R7,#+1
   \                     ??LCD_DrawFullCircle_0:
   \   00000036   B845               CMP      R8,R7
   \   00000038   3CD3               BCC.N    ??LCD_DrawFullCircle_3
   \   0000003A   B8F1000F           CMP      R8,#+0
   \   0000003E   17D0               BEQ.N    ??LCD_DrawFullCircle_4
   \   00000040   0023               MOVS     R3,#+0
   \   00000042   4046               MOV      R0,R8
   \   00000044   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000046   4200               LSLS     R2,R0,#+1
   \   00000048   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000004A   18EB0501           ADDS     R1,R8,R5
   \   0000004E   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000050   E01B               SUBS     R0,R4,R7
   \   00000052   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   ........           BL       LCD_DrawLine
   \   00000058   0023               MOVS     R3,#+0
   \   0000005A   4046               MOV      R0,R8
   \   0000005C   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005E   4200               LSLS     R2,R0,#+1
   \   00000060   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000062   18EB0501           ADDS     R1,R8,R5
   \   00000066   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000068   3819               ADDS     R0,R7,R4
   \   0000006A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006C   ........           BL       LCD_DrawLine
   \                     ??LCD_DrawFullCircle_4:
   \   00000070   002F               CMP      R7,#+0
   \   00000072   17D0               BEQ.N    ??LCD_DrawFullCircle_5
   \   00000074   0023               MOVS     R3,#+0
   \   00000076   3800               MOVS     R0,R7
   \   00000078   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000007A   4200               LSLS     R2,R0,#+1
   \   0000007C   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000007E   7919               ADDS     R1,R7,R5
   \   00000080   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000082   B4EB0800           SUBS     R0,R4,R8
   \   00000086   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000088   ........           BL       LCD_DrawLine
   \   0000008C   0023               MOVS     R3,#+0
   \   0000008E   3800               MOVS     R0,R7
   \   00000090   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000092   4200               LSLS     R2,R0,#+1
   \   00000094   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000096   7919               ADDS     R1,R7,R5
   \   00000098   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000009A   18EB0400           ADDS     R0,R8,R4
   \   0000009E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A0   ........           BL       LCD_DrawLine
   \                     ??LCD_DrawFullCircle_5:
   \   000000A4   B9F1000F           CMP      R9,#+0
   \   000000A8   BCD5               BPL.N    ??LCD_DrawFullCircle_1
   \   000000AA   19EB8700           ADDS     R0,R9,R7, LSL #+2
   \   000000AE   10F10609           ADDS     R9,R0,#+6
   \   000000B2   BFE7               B.N      ??LCD_DrawFullCircle_2
    880            }
    881          
    882            LCD_SetTextColor(TextColor);
   \                     ??LCD_DrawFullCircle_3:
   \   000000B4   ........           LDR.W    R0,??DataTable27_1
   \   000000B8   0088               LDRH     R0,[R0, #+0]
   \   000000BA   ........           BL       LCD_SetTextColor
    883            LCD_DrawCircle(Xpos, Ypos, Radius);
   \   000000BE   3200               MOVS     R2,R6
   \   000000C0   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000C2   2900               MOVS     R1,R5
   \   000000C4   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000C6   2000               MOVS     R0,R4
   \   000000C8   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000CA   ........           BL       LCD_DrawCircle
    884          }
   \   000000CE   BDE8F183           POP      {R0,R4-R9,PC}    ;; return
    885          
    886          /**
    887            * @brief  Displays an uni line (between two points).
    888            * @param  x1: specifies the point 1 x position.
    889            * @param  y1: specifies the point 1 y position.
    890            * @param  x2: specifies the point 2 x position.
    891            * @param  y2: specifies the point 2 y position.
    892            * @retval None
    893            */

   \                                 In section .text, align 2, keep-with-next
    894          void LCD_DrawUniLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
    895          {
   \                     LCD_DrawUniLine:
   \   00000000   2DE9F14F           PUSH     {R0,R4-R11,LR}
   \   00000004   82B0               SUB      SP,SP,#+8
    896            int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   5FF0000E           MOVS     LR,#+0
   \   0000000C   0024               MOVS     R4,#+0
   \   0000000E   0025               MOVS     R5,#+0
   \   00000010   0026               MOVS     R6,#+0
   \   00000012   0027               MOVS     R7,#+0
    897            yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
   \   00000014   5FF00008           MOVS     R8,#+0
   \   00000018   5FF00009           MOVS     R9,#+0
   \   0000001C   5FF0000A           MOVS     R10,#+0
   \   00000020   ADF800A0           STRH     R10,[SP, #+0]
   \   00000024   5FF0000A           MOVS     R10,#+0
   \   00000028   5FF0000B           MOVS     R11,#+0
   \   0000002C   ADF804B0           STRH     R11,[SP, #+4]
   \   00000030   5FF0000B           MOVS     R11,#+0
   \   00000034   ADF802B0           STRH     R11,[SP, #+2]
    898            curpixel = 0;
   \   00000038   5FF0000B           MOVS     R11,#+0
    899            
    900            deltax = ABS(x2 - x1);        /* The difference between the x's */
   \   0000003C   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000003E   BDF808C0           LDRH     R12,[SP, #+8]
   \   00000042   B2EB0C0C           SUBS     R12,R2,R12
   \   00000046   BCF1010F           CMP      R12,#+1
   \   0000004A   03DB               BLT.N    ??LCD_DrawUniLine_0
   \   0000004C   BDF90800           LDRSH    R0,[SP, #+8]
   \   00000050   101A               SUBS     R0,R2,R0
   \   00000052   02E0               B.N      ??LCD_DrawUniLine_1
   \                     ??LCD_DrawUniLine_0:
   \   00000054   BDF90800           LDRSH    R0,[SP, #+8]
   \   00000058   801A               SUBS     R0,R0,R2
    901            deltay = ABS(y2 - y1);        /* The difference between the y's */
   \                     ??LCD_DrawUniLine_1:
   \   0000005A   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000005C   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000005E   5C1A               SUBS     R4,R3,R1
   \   00000060   012C               CMP      R4,#+1
   \   00000062   02DB               BLT.N    ??LCD_DrawUniLine_2
   \   00000064   B3EB010E           SUBS     LR,R3,R1
   \   00000068   01E0               B.N      ??LCD_DrawUniLine_3
   \                     ??LCD_DrawUniLine_2:
   \   0000006A   B1EB030E           SUBS     LR,R1,R3
    902            x = x1;                       /* Start x off at the first pixel */
   \                     ??LCD_DrawUniLine_3:
   \   0000006E   BDF90840           LDRSH    R4,[SP, #+8]
    903            y = y1;                       /* Start y off at the first pixel */
   \   00000072   0D00               MOVS     R5,R1
    904            
    905            if (x2 >= x1)                 /* The x-values are increasing */
   \   00000074   BDF80860           LDRH     R6,[SP, #+8]
   \   00000078   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000007A   B242               CMP      R2,R6
   \   0000007C   02D3               BCC.N    ??LCD_DrawUniLine_4
    906            {
    907              xinc1 = 1;
   \   0000007E   0126               MOVS     R6,#+1
    908              xinc2 = 1;
   \   00000080   0127               MOVS     R7,#+1
   \   00000082   03E0               B.N      ??LCD_DrawUniLine_5
    909            }
    910            else                          /* The x-values are decreasing */
    911            {
    912              xinc1 = -1;
   \                     ??LCD_DrawUniLine_4:
   \   00000084   5FF0FF36           MOVS     R6,#-1
    913              xinc2 = -1;
   \   00000088   5FF0FF37           MOVS     R7,#-1
    914            }
    915            
    916            if (y2 >= y1)                 /* The y-values are increasing */
   \                     ??LCD_DrawUniLine_5:
   \   0000008C   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000008E   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000090   8B42               CMP      R3,R1
   \   00000092   04D3               BCC.N    ??LCD_DrawUniLine_6
    917            {
    918              yinc1 = 1;
   \   00000094   5FF00108           MOVS     R8,#+1
    919              yinc2 = 1;
   \   00000098   5FF00109           MOVS     R9,#+1
   \   0000009C   03E0               B.N      ??LCD_DrawUniLine_7
    920            }
    921            else                          /* The y-values are decreasing */
    922            {
    923              yinc1 = -1;
   \                     ??LCD_DrawUniLine_6:
   \   0000009E   5FF0FF38           MOVS     R8,#-1
    924              yinc2 = -1;
   \   000000A2   5FF0FF39           MOVS     R9,#-1
    925            }
    926            
    927            if (deltax >= deltay)         /* There is at least one x-value for every y-value */
   \                     ??LCD_DrawUniLine_7:
   \   000000A6   00B2               SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000A8   0FFA8EFE           SXTH     LR,LR            ;; SignExt  LR,LR,#+16,#+16
   \   000000AC   7045               CMP      R0,LR
   \   000000AE   0DDB               BLT.N    ??LCD_DrawUniLine_8
    928            {
    929              xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
   \   000000B0   0026               MOVS     R6,#+0
    930              yinc2 = 0;                  /* Don't change the y for every iteration */
   \   000000B2   5FF00009           MOVS     R9,#+0
    931              den = deltax;
   \   000000B6   ADF80000           STRH     R0,[SP, #+0]
    932              num = deltax / 2;
   \   000000BA   00B2               SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000BC   0221               MOVS     R1,#+2
   \   000000BE   90FBF1FA           SDIV     R10,R0,R1
    933              numadd = deltay;
   \   000000C2   ADF804E0           STRH     LR,[SP, #+4]
    934              numpixels = deltax;         /* There are more x-values than y-values */
   \   000000C6   ADF80200           STRH     R0,[SP, #+2]
   \   000000CA   0DE0               B.N      ??LCD_DrawUniLine_9
    935            }
    936            else                          /* There is at least one y-value for every x-value */
    937            {
    938              xinc2 = 0;                  /* Don't change the x for every iteration */
   \                     ??LCD_DrawUniLine_8:
   \   000000CC   0027               MOVS     R7,#+0
    939              yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
   \   000000CE   5FF00008           MOVS     R8,#+0
    940              den = deltay;
   \   000000D2   ADF800E0           STRH     LR,[SP, #+0]
    941              num = deltay / 2;
   \   000000D6   0FFA8EFE           SXTH     LR,LR            ;; SignExt  LR,LR,#+16,#+16
   \   000000DA   0221               MOVS     R1,#+2
   \   000000DC   9EFBF1FA           SDIV     R10,LR,R1
    942              numadd = deltax;
   \   000000E0   ADF80400           STRH     R0,[SP, #+4]
    943              numpixels = deltay;         /* There are more y-values than x-values */
   \   000000E4   ADF802E0           STRH     LR,[SP, #+2]
    944            }
    945            
    946            for (curpixel = 0; curpixel <= numpixels; curpixel++)
   \                     ??LCD_DrawUniLine_9:
   \   000000E8   5FF0000B           MOVS     R11,#+0
   \   000000EC   1BE0               B.N      ??LCD_DrawUniLine_10
    947            {
    948              PutPixel(x, y);             /* Draw the current pixel */
   \                     ??LCD_DrawUniLine_11:
   \   000000EE   2900               MOVS     R1,R5
   \   000000F0   09B2               SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   000000F2   2000               MOVS     R0,R4
   \   000000F4   00B2               SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000F6   ........           BL       PutPixel
    949              num += numadd;              /* Increase the numerator by the top of the fraction */
   \   000000FA   BDF80400           LDRH     R0,[SP, #+4]
   \   000000FE   10EB0A0A           ADDS     R10,R0,R10
    950              if (num >= den)             /* Check if numerator >= denominator */
   \   00000102   BDF90000           LDRSH    R0,[SP, #+0]
   \   00000106   0FFA8AFA           SXTH     R10,R10          ;; SignExt  R10,R10,#+16,#+16
   \   0000010A   8245               CMP      R10,R0
   \   0000010C   06DB               BLT.N    ??LCD_DrawUniLine_12
    951              {
    952                num -= den;               /* Calculate the new numerator value */
   \   0000010E   BDF80000           LDRH     R0,[SP, #+0]
   \   00000112   BAEB000A           SUBS     R10,R10,R0
    953                x += xinc1;               /* Change the x as appropriate */
   \   00000116   3419               ADDS     R4,R6,R4
    954                y += yinc1;               /* Change the y as appropriate */
   \   00000118   18EB0505           ADDS     R5,R8,R5
    955              }
    956              x += xinc2;                 /* Change the x as appropriate */
   \                     ??LCD_DrawUniLine_12:
   \   0000011C   3C19               ADDS     R4,R7,R4
    957              y += yinc2;                 /* Change the y as appropriate */
   \   0000011E   19EB0505           ADDS     R5,R9,R5
    958            }
   \   00000122   1BF1010B           ADDS     R11,R11,#+1
   \                     ??LCD_DrawUniLine_10:
   \   00000126   BDF90200           LDRSH    R0,[SP, #+2]
   \   0000012A   0FFA8BFB           SXTH     R11,R11          ;; SignExt  R11,R11,#+16,#+16
   \   0000012E   5845               CMP      R0,R11
   \   00000130   DDDA               BGE.N    ??LCD_DrawUniLine_11
    959          }
   \   00000132   BDE8F78F           POP      {R0-R2,R4-R11,PC}  ;; return
    960          
    961          /**
    962            * @brief  Displays an polyline (between many points).
    963            * @param  Points: pointer to the points array.
    964            * @param  PointCount: Number of points.
    965            * @retval None
    966            */

   \                                 In section .text, align 2, keep-with-next
    967          void LCD_PolyLine(pPoint Points, uint16_t PointCount)
    968          {
   \                     LCD_PolyLine:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
    969            int16_t X = 0, Y = 0;
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   0021               MOVS     R1,#+0
    970          
    971            if(PointCount < 2)
   \   0000000A   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000000C   022D               CMP      R5,#+2
   \   0000000E   0DD2               BCS.N    ??LCD_PolyLine_0
    972            {
    973              return;
   \   00000010   11E0               B.N      ??LCD_PolyLine_1
    974            }
    975          
    976            while(--PointCount)
    977            {
    978              X = Points->X;
   \                     ??LCD_PolyLine_2:
   \   00000012   B4F90000           LDRSH    R0,[R4, #+0]
    979              Y = Points->Y;
   \   00000016   B4F90210           LDRSH    R1,[R4, #+2]
    980              Points++;
   \   0000001A   241D               ADDS     R4,R4,#+4
    981              LCD_DrawUniLine(X, Y, Points->X, Points->Y);
   \   0000001C   6388               LDRH     R3,[R4, #+2]
   \   0000001E   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000020   2288               LDRH     R2,[R4, #+0]
   \   00000022   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000024   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000026   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000028   ........           BL       LCD_DrawUniLine
    982            }
   \                     ??LCD_PolyLine_0:
   \   0000002C   6D1E               SUBS     R5,R5,#+1
   \   0000002E   2800               MOVS     R0,R5
   \   00000030   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000032   0028               CMP      R0,#+0
   \   00000034   EDD1               BNE.N    ??LCD_PolyLine_2
    983          }
   \                     ??LCD_PolyLine_1:
   \   00000036   31BD               POP      {R0,R4,R5,PC}    ;; return
    984          
    985          /**
    986            * @brief  Displays an relative polyline (between many points).
    987            * @param  Points: pointer to the points array.
    988            * @param  PointCount: Number of points.
    989            * @param  Closed: specifies if the draw is closed or not.
    990            *           1: closed, 0 : not closed.
    991            * @retval None
    992            */

   \                                 In section .text, align 2, keep-with-next
    993          static void LCD_PolyLineRelativeClosed(pPoint Points, uint16_t PointCount, uint16_t Closed)
    994          {
   \                     LCD_PolyLineRelativeClosed:
   \   00000000   2DE9F843           PUSH     {R3-R9,LR}
   \   00000004   8046               MOV      R8,R0
   \   00000006   0C00               MOVS     R4,R1
   \   00000008   1500               MOVS     R5,R2
    995            int16_t X = 0, Y = 0;
   \   0000000A   5FF00009           MOVS     R9,#+0
   \   0000000E   0027               MOVS     R7,#+0
    996            pPoint First = Points;
   \   00000010   4646               MOV      R6,R8
    997          
    998            if(PointCount < 2)
   \   00000012   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000014   022C               CMP      R4,#+2
   \   00000016   2ED3               BCC.N    ??LCD_PolyLineRelativeClosed_0
    999            {
   1000              return;
   1001            }  
   1002            X = Points->X;
   \                     ??LCD_PolyLineRelativeClosed_1:
   \   00000018   B8F90090           LDRSH    R9,[R8, #+0]
   1003            Y = Points->Y;
   \   0000001C   B8F90270           LDRSH    R7,[R8, #+2]
   \   00000020   17E0               B.N      ??LCD_PolyLineRelativeClosed_2
   1004            while(--PointCount)
   1005            {
   1006              Points++;
   \                     ??LCD_PolyLineRelativeClosed_3:
   \   00000022   18F10408           ADDS     R8,R8,#+4
   1007              LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
   \   00000026   B8F90200           LDRSH    R0,[R8, #+2]
   \   0000002A   C319               ADDS     R3,R0,R7
   \   0000002C   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000002E   B8F90000           LDRSH    R0,[R8, #+0]
   \   00000032   10EB0902           ADDS     R2,R0,R9
   \   00000036   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000038   3900               MOVS     R1,R7
   \   0000003A   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000003C   4846               MOV      R0,R9
   \   0000003E   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000040   ........           BL       LCD_DrawUniLine
   1008              X = X + Points->X;
   \   00000044   B8F80000           LDRH     R0,[R8, #+0]
   \   00000048   10EB0909           ADDS     R9,R0,R9
   1009              Y = Y + Points->Y;
   \   0000004C   B8F80200           LDRH     R0,[R8, #+2]
   \   00000050   C719               ADDS     R7,R0,R7
   1010            }
   \                     ??LCD_PolyLineRelativeClosed_2:
   \   00000052   641E               SUBS     R4,R4,#+1
   \   00000054   2000               MOVS     R0,R4
   \   00000056   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000058   0028               CMP      R0,#+0
   \   0000005A   E2D1               BNE.N    ??LCD_PolyLineRelativeClosed_3
   1011            if(Closed)
   \   0000005C   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000005E   002D               CMP      R5,#+0
   \   00000060   09D0               BEQ.N    ??LCD_PolyLineRelativeClosed_4
   1012            {
   1013              LCD_DrawUniLine(First->X, First->Y, X, Y);
   \   00000062   3B00               MOVS     R3,R7
   \   00000064   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000066   4A46               MOV      R2,R9
   \   00000068   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000006A   7188               LDRH     R1,[R6, #+2]
   \   0000006C   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000006E   3088               LDRH     R0,[R6, #+0]
   \   00000070   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000072   ........           BL       LCD_DrawUniLine
   1014            }  
   1015          }
   \                     ??LCD_PolyLineRelativeClosed_4:
   \                     ??LCD_PolyLineRelativeClosed_0:
   \   00000076   BDE8F183           POP      {R0,R4-R9,PC}    ;; return
   1016          
   1017          /**
   1018            * @brief  Displays a closed polyline (between many points).
   1019            * @param  Points: pointer to the points array.
   1020            * @param  PointCount: Number of points.
   1021            * @retval None
   1022            */

   \                                 In section .text, align 2, keep-with-next
   1023          void LCD_ClosedPolyLine(pPoint Points, uint16_t PointCount)
   1024          {
   \                     LCD_ClosedPolyLine:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   1025            LCD_PolyLine(Points, PointCount);
   \   00000006   2900               MOVS     R1,R5
   \   00000008   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   2000               MOVS     R0,R4
   \   0000000C   ........           BL       LCD_PolyLine
   1026            LCD_DrawUniLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
   \   00000010   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000012   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   00000016   30F8023C           LDRH     R3,[R0, #-2]
   \   0000001A   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000001C   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000001E   14EB8500           ADDS     R0,R4,R5, LSL #+2
   \   00000022   30F8042C           LDRH     R2,[R0, #-4]
   \   00000026   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000028   6188               LDRH     R1,[R4, #+2]
   \   0000002A   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002C   2088               LDRH     R0,[R4, #+0]
   \   0000002E   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000030   ........           BL       LCD_DrawUniLine
   1027          }
   \   00000034   31BD               POP      {R0,R4,R5,PC}    ;; return
   1028          
   1029          /**
   1030            * @brief  Displays a relative polyline (between many points).
   1031            * @param  Points: pointer to the points array.
   1032            * @param  PointCount: Number of points.
   1033            * @retval None
   1034            */

   \                                 In section .text, align 2, keep-with-next
   1035          void LCD_PolyLineRelative(pPoint Points, uint16_t PointCount)
   1036          {
   \                     LCD_PolyLineRelative:
   \   00000000   80B5               PUSH     {R7,LR}
   1037            LCD_PolyLineRelativeClosed(Points, PointCount, 0);
   \   00000002   0022               MOVS     R2,#+0
   \   00000004   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   ........           BL       LCD_PolyLineRelativeClosed
   1038          }
   \   0000000A   01BD               POP      {R0,PC}          ;; return
   1039          
   1040          /**
   1041            * @brief  Displays a closed relative polyline (between many points).
   1042            * @param  Points: pointer to the points array.
   1043            * @param  PointCount: Number of points.
   1044            * @retval None
   1045            */

   \                                 In section .text, align 2, keep-with-next
   1046          void LCD_ClosedPolyLineRelative(pPoint Points, uint16_t PointCount)
   1047          {
   \                     LCD_ClosedPolyLineRelative:
   \   00000000   80B5               PUSH     {R7,LR}
   1048            LCD_PolyLineRelativeClosed(Points, PointCount, 1);
   \   00000002   0122               MOVS     R2,#+1
   \   00000004   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000006   ........           BL       LCD_PolyLineRelativeClosed
   1049          }
   \   0000000A   01BD               POP      {R0,PC}          ;; return
   1050          
   1051          
   1052          /**
   1053            * @brief  Displays a  full polyline (between many points).
   1054            * @param  Points: pointer to the points array.
   1055            * @param  PointCount: Number of points.
   1056            * @retval None
   1057            */

   \                                 In section .text, align 2, keep-with-next
   1058          void LCD_FillPolyLine(pPoint Points, uint16_t PointCount)
   1059          {
   \                     LCD_FillPolyLine:
   \   00000000   2DE9F24F           PUSH     {R1,R4-R11,LR}
   \   00000004   E8B0               SUB      SP,SP,#+416
   \   00000006   0400               MOVS     R4,R0
   1060            /*  public-domain code by Darel Rex Finley, 2007 */
   1061            uint16_t  nodes = 0, nodeX[MAX_POLY_CORNERS], pixelX = 0, pixelY = 0, i = 0,
   \   00000008   0025               MOVS     R5,#+0
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   0026               MOVS     R6,#+0
   \   0000000E   0027               MOVS     R7,#+0
   1062            j = 0, swap = 0;
   \   00000010   5FF00008           MOVS     R8,#+0
   \   00000014   0021               MOVS     R1,#+0
   1063            uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;
   \   00000016   5FF0000A           MOVS     R10,#+0
   \   0000001A   5FF00009           MOVS     R9,#+0
   \   0000001E   5FF0000B           MOVS     R11,#+0
   \   00000022   0022               MOVS     R2,#+0
   \   00000024   ADF80820           STRH     R2,[SP, #+8]
   1064          
   1065            IMAGE_LEFT = IMAGE_RIGHT = Points->X;
   \   00000028   2288               LDRH     R2,[R4, #+0]
   \   0000002A   9146               MOV      R9,R2
   \   0000002C   9246               MOV      R10,R2
   1066            IMAGE_TOP= IMAGE_BOTTOM = Points->Y;
   \   0000002E   6288               LDRH     R2,[R4, #+2]
   \   00000030   ADF80820           STRH     R2,[SP, #+8]
   \   00000034   9346               MOV      R11,R2
   1067          
   1068            for(i = 1; i < PointCount; i++)
   \   00000036   0122               MOVS     R2,#+1
   \   00000038   1700               MOVS     R7,R2
   \   0000003A   20E0               B.N      ??LCD_FillPolyLine_0
   1069            {
   1070              pixelX = POLY_X(i);
   \                     ??LCD_FillPolyLine_1:
   \   0000003C   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000003E   14EB8700           ADDS     R0,R4,R7, LSL #+2
   \   00000042   4088               LDRH     R0,[R0, #+2]
   1071              if(pixelX < IMAGE_LEFT)
   \   00000044   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000046   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000004A   5045               CMP      R0,R10
   \   0000004C   00D2               BCS.N    ??LCD_FillPolyLine_2
   1072              {
   1073                IMAGE_LEFT = pixelX;
   \   0000004E   8246               MOV      R10,R0
   1074              }
   1075              if(pixelX > IMAGE_RIGHT)
   \                     ??LCD_FillPolyLine_2:
   \   00000050   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000054   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000056   8145               CMP      R9,R0
   \   00000058   00D2               BCS.N    ??LCD_FillPolyLine_3
   1076              {
   1077                IMAGE_RIGHT = pixelX;
   \   0000005A   8146               MOV      R9,R0
   1078              }
   1079              
   1080              pixelY = POLY_Y(i);
   \                     ??LCD_FillPolyLine_3:
   \   0000005C   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000005E   34F82760           LDRH     R6,[R4, R7, LSL #+2]
   1081              if(pixelY < IMAGE_TOP)
   \   00000062   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000064   1FFA8BFB           UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   00000068   5E45               CMP      R6,R11
   \   0000006A   00D2               BCS.N    ??LCD_FillPolyLine_4
   1082              { 
   1083                IMAGE_TOP = pixelY;
   \   0000006C   B346               MOV      R11,R6
   1084              }
   1085              if(pixelY > IMAGE_BOTTOM)
   \                     ??LCD_FillPolyLine_4:
   \   0000006E   BDF80800           LDRH     R0,[SP, #+8]
   \   00000072   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000074   B042               CMP      R0,R6
   \   00000076   01D2               BCS.N    ??LCD_FillPolyLine_5
   1086              {
   1087                IMAGE_BOTTOM = pixelY;
   \   00000078   ADF80860           STRH     R6,[SP, #+8]
   1088              }
   1089            }
   \                     ??LCD_FillPolyLine_5:
   \   0000007C   7F1C               ADDS     R7,R7,#+1
   \                     ??LCD_FillPolyLine_0:
   \   0000007E   BDF8A001           LDRH     R0,[SP, #+416]
   \   00000082   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000084   8742               CMP      R7,R0
   \   00000086   D9D3               BCC.N    ??LCD_FillPolyLine_1
   1090            
   1091            LCD_SetTextColor(BackColor);  
   \   00000088   ........           LDR.W    R0,??DataTable27_2
   \   0000008C   0088               LDRH     R0,[R0, #+0]
   \   0000008E   ........           BL       LCD_SetTextColor
   1092          
   1093            /*  Loop through the rows of the image. */
   1094            for (pixelY = IMAGE_TOP; pixelY < IMAGE_BOTTOM; pixelY++) 
   \   00000092   5E46               MOV      R6,R11
   \   00000094   64E0               B.N      ??LCD_FillPolyLine_6
   1095            {  
   1096              /* Build a list of nodes. */
   1097              nodes = 0; j = PointCount-1;
   1098          
   1099              for (i = 0; i < PointCount; i++) 
   1100              {
   1101                if (POLY_Y(i)<(double) pixelY && POLY_Y(j)>=(double) pixelY || POLY_Y(j)<(double) pixelY && POLY_Y(i)>=(double) pixelY) 
   1102                {
   1103                  nodeX[nodes++]=(int) (POLY_X(i)+((pixelY-POLY_Y(i))*(POLY_X(j)-POLY_X(i)))/(POLY_Y(j)-POLY_Y(i))); 
   1104                }
   1105                j = i; 
   1106              }
   1107            
   1108              /* Sort the nodes, via a simple Bubble sort. */
   1109              i = 0;
   1110              while (i < nodes-1) 
   1111              {
   1112                if (nodeX[i]>nodeX[i+1]) 
   1113                {
   1114                  swap = nodeX[i]; 
   1115                  nodeX[i] = nodeX[i+1]; 
   1116                  nodeX[i+1] = swap; 
   1117                  if(i)
   1118                  {
   1119                    i--; 
   1120                  }
   1121                }
   1122                else 
   1123                {
   1124                  i++;
   1125                }
   1126              }
   1127            
   1128              /*  Fill the pixels between node pairs. */
   1129              for (i = 0; i < nodes; i+=2) 
   1130              {
   1131                if(nodeX[i] >= IMAGE_RIGHT) 
   1132                {
   1133                  break;
   1134                }
   1135                if(nodeX[i+1] > IMAGE_LEFT) 
   \                     ??LCD_FillPolyLine_7:
   \   00000096   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000098   03A8               ADD      R0,SP,#+12
   \   0000009A   10EB4700           ADDS     R0,R0,R7, LSL #+1
   \   0000009E   4088               LDRH     R0,[R0, #+2]
   \   000000A0   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000A4   8245               CMP      R10,R0
   \   000000A6   4DD2               BCS.N    ??LCD_FillPolyLine_8
   1136                {
   1137                  if (nodeX[i] < IMAGE_LEFT)
   \   000000A8   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000AA   03A8               ADD      R0,SP,#+12
   \   000000AC   30F81700           LDRH     R0,[R0, R7, LSL #+1]
   \   000000B0   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000B4   5045               CMP      R0,R10
   \   000000B6   03D2               BCS.N    ??LCD_FillPolyLine_9
   1138                  {
   1139                    nodeX[i]=IMAGE_LEFT;
   \   000000B8   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000BA   03A8               ADD      R0,SP,#+12
   \   000000BC   20F817A0           STRH     R10,[R0, R7, LSL #+1]
   1140                  }
   1141                  if(nodeX[i+1] > IMAGE_RIGHT)
   \                     ??LCD_FillPolyLine_9:
   \   000000C0   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000C2   03A8               ADD      R0,SP,#+12
   \   000000C4   10EB4700           ADDS     R0,R0,R7, LSL #+1
   \   000000C8   4088               LDRH     R0,[R0, #+2]
   \   000000CA   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000000CE   8145               CMP      R9,R0
   \   000000D0   05D2               BCS.N    ??LCD_FillPolyLine_10
   1142                  {
   1143                    nodeX[i+1] = IMAGE_RIGHT;
   \   000000D2   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000D4   03A8               ADD      R0,SP,#+12
   \   000000D6   10EB4700           ADDS     R0,R0,R7, LSL #+1
   \   000000DA   A0F80290           STRH     R9,[R0, #+2]
   1144                  }
   1145                  LCD_SetTextColor(BackColor);
   \                     ??LCD_FillPolyLine_10:
   \   000000DE   ........           LDR.W    R0,??DataTable27_2
   \   000000E2   0088               LDRH     R0,[R0, #+0]
   \   000000E4   ........           BL       LCD_SetTextColor
   1146                  LCD_DrawLine(pixelY, nodeX[i+1], nodeX[i+1] - nodeX[i], LCD_DIR_HORIZONTAL);
   \   000000E8   0023               MOVS     R3,#+0
   \   000000EA   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000EC   03A8               ADD      R0,SP,#+12
   \   000000EE   10EB4700           ADDS     R0,R0,R7, LSL #+1
   \   000000F2   4088               LDRH     R0,[R0, #+2]
   \   000000F4   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000F6   03A9               ADD      R1,SP,#+12
   \   000000F8   31F81710           LDRH     R1,[R1, R7, LSL #+1]
   \   000000FC   421A               SUBS     R2,R0,R1
   \   000000FE   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000100   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000102   03A8               ADD      R0,SP,#+12
   \   00000104   10EB4700           ADDS     R0,R0,R7, LSL #+1
   \   00000108   4188               LDRH     R1,[R0, #+2]
   \   0000010A   3000               MOVS     R0,R6
   \   0000010C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000010E   ........           BL       LCD_DrawLine
   1147                  LCD_SetTextColor(TextColor);
   \   00000112   ........           LDR.W    R0,??DataTable27_1
   \   00000116   0088               LDRH     R0,[R0, #+0]
   \   00000118   ........           BL       LCD_SetTextColor
   1148                  PutPixel(pixelY, nodeX[i+1]);
   \   0000011C   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000011E   03A8               ADD      R0,SP,#+12
   \   00000120   10EB4700           ADDS     R0,R0,R7, LSL #+1
   \   00000124   B0F90210           LDRSH    R1,[R0, #+2]
   \   00000128   09B2               SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000012A   3000               MOVS     R0,R6
   \   0000012C   00B2               SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000012E   ........           BL       PutPixel
   1149                  PutPixel(pixelY, nodeX[i]);
   \   00000132   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000134   03A8               ADD      R0,SP,#+12
   \   00000136   30F91710           LDRSH    R1,[R0, R7, LSL #+1]
   \   0000013A   09B2               SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000013C   3000               MOVS     R0,R6
   \   0000013E   00B2               SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000140   ........           BL       PutPixel
   1150                  /* for (j=nodeX[i]; j<nodeX[i+1]; j++) PutPixel(j,pixelY); */
   1151                }
   \                     ??LCD_FillPolyLine_8:
   \   00000144   BF1C               ADDS     R7,R7,#+2
   \                     ??LCD_FillPolyLine_11:
   \   00000146   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000148   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000014A   AF42               CMP      R7,R5
   \   0000014C   07D2               BCS.N    ??LCD_FillPolyLine_12
   \   0000014E   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000150   03A8               ADD      R0,SP,#+12
   \   00000152   30F81700           LDRH     R0,[R0, R7, LSL #+1]
   \   00000156   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000015A   4845               CMP      R0,R9
   \   0000015C   9BD3               BCC.N    ??LCD_FillPolyLine_7
   1152              }
   \                     ??LCD_FillPolyLine_12:
   \   0000015E   761C               ADDS     R6,R6,#+1
   \                     ??LCD_FillPolyLine_6:
   \   00000160   BDF80800           LDRH     R0,[SP, #+8]
   \   00000164   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000166   8642               CMP      R6,R0
   \   00000168   80F0AB80           BCS.W    ??LCD_FillPolyLine_13
   \   0000016C   0025               MOVS     R5,#+0
   \   0000016E   BDF8A001           LDRH     R0,[SP, #+416]
   \   00000172   B0F10108           SUBS     R8,R0,#+1
   \   00000176   0027               MOVS     R7,#+0
   \   00000178   72E0               B.N      ??LCD_FillPolyLine_14
   \                     ??LCD_FillPolyLine_15:
   \   0000017A   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000017C   3000               MOVS     R0,R6
   \   0000017E   ........           BL       __aeabi_ui2d
   \   00000182   0200               MOVS     R2,R0
   \   00000184   0B00               MOVS     R3,R1
   \   00000186   CDE90023           STRD     R2,R3,[SP, #+0]
   \   0000018A   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000018C   34F92700           LDRSH    R0,[R4, R7, LSL #+2]
   \   00000190   ........           BL       __aeabi_i2d
   \   00000194   DDE90023           LDRD     R2,R3,[SP, #+0]
   \   00000198   ........           BL       __aeabi_cdcmple
   \   0000019C   12D2               BCS.N    ??LCD_FillPolyLine_16
   \   0000019E   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000001A0   3000               MOVS     R0,R6
   \   000001A2   ........           BL       __aeabi_ui2d
   \   000001A6   0200               MOVS     R2,R0
   \   000001A8   0B00               MOVS     R3,R1
   \   000001AA   CDE90023           STRD     R2,R3,[SP, #+0]
   \   000001AE   1FFA88F8           UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000001B2   34F92800           LDRSH    R0,[R4, R8, LSL #+2]
   \   000001B6   ........           BL       __aeabi_i2d
   \   000001BA   DDE90023           LDRD     R2,R3,[SP, #+0]
   \   000001BE   ........           BL       __aeabi_cdrcmple
   \   000001C2   24D9               BLS.N    ??LCD_FillPolyLine_17
   \                     ??LCD_FillPolyLine_16:
   \   000001C4   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000001C6   3000               MOVS     R0,R6
   \   000001C8   ........           BL       __aeabi_ui2d
   \   000001CC   0200               MOVS     R2,R0
   \   000001CE   0B00               MOVS     R3,R1
   \   000001D0   CDE90023           STRD     R2,R3,[SP, #+0]
   \   000001D4   1FFA88F8           UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000001D8   34F92800           LDRSH    R0,[R4, R8, LSL #+2]
   \   000001DC   ........           BL       __aeabi_i2d
   \   000001E0   DDE90023           LDRD     R2,R3,[SP, #+0]
   \   000001E4   ........           BL       __aeabi_cdcmple
   \   000001E8   38D2               BCS.N    ??LCD_FillPolyLine_18
   \   000001EA   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000001EC   3000               MOVS     R0,R6
   \   000001EE   ........           BL       __aeabi_ui2d
   \   000001F2   0200               MOVS     R2,R0
   \   000001F4   0B00               MOVS     R3,R1
   \   000001F6   CDE90023           STRD     R2,R3,[SP, #+0]
   \   000001FA   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000001FC   34F92700           LDRSH    R0,[R4, R7, LSL #+2]
   \   00000200   ........           BL       __aeabi_i2d
   \   00000204   DDE90023           LDRD     R2,R3,[SP, #+0]
   \   00000208   ........           BL       __aeabi_cdrcmple
   \   0000020C   26D8               BHI.N    ??LCD_FillPolyLine_18
   \                     ??LCD_FillPolyLine_17:
   \   0000020E   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000210   14EB8700           ADDS     R0,R4,R7, LSL #+2
   \   00000214   B0F90200           LDRSH    R0,[R0, #+2]
   \   00000218   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000021A   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000021C   34F92710           LDRSH    R1,[R4, R7, LSL #+2]
   \   00000220   711A               SUBS     R1,R6,R1
   \   00000222   1FFA88F8           UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000226   14EB8802           ADDS     R2,R4,R8, LSL #+2
   \   0000022A   B2F90220           LDRSH    R2,[R2, #+2]
   \   0000022E   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000230   14EB8703           ADDS     R3,R4,R7, LSL #+2
   \   00000234   B3F90230           LDRSH    R3,[R3, #+2]
   \   00000238   D21A               SUBS     R2,R2,R3
   \   0000023A   5143               MULS     R1,R2,R1
   \   0000023C   1FFA88F8           UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000240   34F92820           LDRSH    R2,[R4, R8, LSL #+2]
   \   00000244   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000246   34F92730           LDRSH    R3,[R4, R7, LSL #+2]
   \   0000024A   D21A               SUBS     R2,R2,R3
   \   0000024C   91FBF2F1           SDIV     R1,R1,R2
   \   00000250   0818               ADDS     R0,R1,R0
   \   00000252   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000254   03A9               ADD      R1,SP,#+12
   \   00000256   21F81500           STRH     R0,[R1, R5, LSL #+1]
   \   0000025A   6D1C               ADDS     R5,R5,#+1
   \                     ??LCD_FillPolyLine_18:
   \   0000025C   B846               MOV      R8,R7
   \   0000025E   7F1C               ADDS     R7,R7,#+1
   \                     ??LCD_FillPolyLine_14:
   \   00000260   BDF8A001           LDRH     R0,[SP, #+416]
   \   00000264   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000266   8742               CMP      R7,R0
   \   00000268   87D3               BCC.N    ??LCD_FillPolyLine_15
   \   0000026A   0027               MOVS     R7,#+0
   \   0000026C   00E0               B.N      ??LCD_FillPolyLine_19
   \                     ??LCD_FillPolyLine_20:
   \   0000026E   7F1C               ADDS     R7,R7,#+1
   \                     ??LCD_FillPolyLine_19:
   \   00000270   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000272   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000274   681E               SUBS     R0,R5,#+1
   \   00000276   8742               CMP      R7,R0
   \   00000278   21DA               BGE.N    ??LCD_FillPolyLine_21
   \   0000027A   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000027C   03A8               ADD      R0,SP,#+12
   \   0000027E   10EB4700           ADDS     R0,R0,R7, LSL #+1
   \   00000282   4088               LDRH     R0,[R0, #+2]
   \   00000284   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000286   03A9               ADD      R1,SP,#+12
   \   00000288   31F81710           LDRH     R1,[R1, R7, LSL #+1]
   \   0000028C   8842               CMP      R0,R1
   \   0000028E   EED2               BCS.N    ??LCD_FillPolyLine_20
   \   00000290   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000292   03A8               ADD      R0,SP,#+12
   \   00000294   30F81710           LDRH     R1,[R0, R7, LSL #+1]
   \   00000298   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000029A   03A8               ADD      R0,SP,#+12
   \   0000029C   10EB4700           ADDS     R0,R0,R7, LSL #+1
   \   000002A0   4088               LDRH     R0,[R0, #+2]
   \   000002A2   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000002A4   03AA               ADD      R2,SP,#+12
   \   000002A6   22F81700           STRH     R0,[R2, R7, LSL #+1]
   \   000002AA   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000002AC   03A8               ADD      R0,SP,#+12
   \   000002AE   10EB4700           ADDS     R0,R0,R7, LSL #+1
   \   000002B2   4180               STRH     R1,[R0, #+2]
   \   000002B4   BFB2               UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000002B6   002F               CMP      R7,#+0
   \   000002B8   DAD0               BEQ.N    ??LCD_FillPolyLine_19
   \   000002BA   7F1E               SUBS     R7,R7,#+1
   \   000002BC   D8E7               B.N      ??LCD_FillPolyLine_19
   \                     ??LCD_FillPolyLine_21:
   \   000002BE   0027               MOVS     R7,#+0
   \   000002C0   41E7               B.N      ??LCD_FillPolyLine_11
   1153            } 
   1154          
   1155            /* draw the edges */
   1156            LCD_SetTextColor(TextColor);
   \                     ??LCD_FillPolyLine_13:
   \   000002C2   ....               LDR.N    R0,??DataTable27_1
   \   000002C4   0088               LDRH     R0,[R0, #+0]
   \   000002C6   ........           BL       LCD_SetTextColor
   1157          }
   \   000002CA   69B0               ADD      SP,SP,#+420
   \   000002CC   BDE8F08F           POP      {R4-R11,PC}      ;; return
   1158          
   1159          /**
   1160            * @brief  Writes to the selected LCD register.
   1161            * @param  LCD_Reg: address of the selected register.
   1162            * @param  LCD_RegValue: value to write to the selected register.
   1163            * @retval None
   1164            */

   \                                 In section .text, align 2, keep-with-next
   1165          void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
   1166          {
   1167            /* Write 16-bit Index, then Write Reg */
   1168            LCD->LCD_REG = LCD_Reg;
   \                     LCD_WriteReg:
   \   00000000   5FF0D042           MOVS     R2,#+1744830464
   \   00000004   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   1080               STRH     R0,[R2, #+0]
   1169            /* Write 16-bit Reg */
   1170            LCD->LCD_RAM = LCD_RegValue;
   \   00000008   ....               LDR.N    R0,??DataTable28  ;; 0x68000002
   \   0000000A   0180               STRH     R1,[R0, #+0]
   1171          }
   \   0000000C   7047               BX       LR               ;; return
   1172          
   1173          /**
   1174            * @brief  Reads the selected LCD Register.
   1175            * @param  LCD_Reg: address of the selected register.
   1176            * @retval LCD Register Value.
   1177            */

   \                                 In section .text, align 2, keep-with-next
   1178          uint16_t LCD_ReadReg(uint8_t LCD_Reg)
   1179          {
   1180            /* Write 16-bit Index (then Read Reg) */
   1181            LCD->LCD_REG = LCD_Reg;
   \                     LCD_ReadReg:
   \   00000000   5FF0D041           MOVS     R1,#+1744830464
   \   00000004   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0880               STRH     R0,[R1, #+0]
   1182            /* Read 16-bit Reg */
   1183            return (LCD->LCD_RAM);
   \   00000008   ....               LDR.N    R0,??DataTable28  ;; 0x68000002
   \   0000000A   0088               LDRH     R0,[R0, #+0]
   \   0000000C   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000E   7047               BX       LR               ;; return
   1184          }
   1185          
   1186          /**
   1187            * @brief  Prepare to write to the LCD RAM.
   1188            * @param  None
   1189            * @retval None
   1190            */

   \                                 In section .text, align 2, keep-with-next
   1191          void LCD_WriteRAM_Prepare(void)
   1192          {
   1193            LCD->LCD_REG = LCD_REG_34;
   \                     LCD_WriteRAM_Prepare:
   \   00000000   5FF0D040           MOVS     R0,#+1744830464
   \   00000004   2221               MOVS     R1,#+34
   \   00000006   0180               STRH     R1,[R0, #+0]
   1194          }
   \   00000008   7047               BX       LR               ;; return
   1195          
   1196          /**
   1197            * @brief  Writes to the LCD RAM.
   1198            * @param  RGB_Code: the pixel color in RGB mode (5-6-5).
   1199            * @retval None
   1200            */

   \                                 In section .text, align 2, keep-with-next
   1201          void LCD_WriteRAM(uint16_t RGB_Code)
   1202          {
   1203            /* Write 16-bit GRAM Reg */
   1204            LCD->LCD_RAM = RGB_Code;
   \                     LCD_WriteRAM:
   \   00000000   ....               LDR.N    R1,??DataTable28  ;; 0x68000002
   \   00000002   0880               STRH     R0,[R1, #+0]
   1205          }
   \   00000004   7047               BX       LR               ;; return
   1206          
   1207          /**
   1208            * @brief  Reads the LCD RAM.
   1209            * @param  None
   1210            * @retval LCD RAM Value.
   1211            */

   \                                 In section .text, align 2, keep-with-next
   1212          uint16_t LCD_ReadRAM(void)
   1213          {
   1214            /* Write 16-bit Index (then Read Reg) */
   1215            LCD->LCD_REG = LCD_REG_34; /* Select GRAM Reg */
   \                     LCD_ReadRAM:
   \   00000000   5FF0D040           MOVS     R0,#+1744830464
   \   00000004   2221               MOVS     R1,#+34
   \   00000006   0180               STRH     R1,[R0, #+0]
   1216            /* Read 16-bit Reg */
   1217            return LCD->LCD_RAM;
   \   00000008   ....               LDR.N    R0,??DataTable28  ;; 0x68000002
   \   0000000A   0088               LDRH     R0,[R0, #+0]
   \   0000000C   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000E   7047               BX       LR               ;; return
   1218          }
   1219          
   1220          /**
   1221            * @brief  Power on the LCD.
   1222            * @param  None
   1223            * @retval None
   1224            */

   \                                 In section .text, align 2, keep-with-next
   1225          void LCD_PowerOn(void)
   1226          {
   \                     LCD_PowerOn:
   \   00000000   80B5               PUSH     {R7,LR}
   1227          /* Power On sequence ---------------------------------------------------------*/
   1228            LCD_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   00000002   0021               MOVS     R1,#+0
   \   00000004   1020               MOVS     R0,#+16
   \   00000006   ........           BL       LCD_WriteReg
   1229            LCD_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   0000000A   0021               MOVS     R1,#+0
   \   0000000C   1120               MOVS     R0,#+17
   \   0000000E   ........           BL       LCD_WriteReg
   1230            LCD_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
   \   00000012   0021               MOVS     R1,#+0
   \   00000014   1220               MOVS     R0,#+18
   \   00000016   ........           BL       LCD_WriteReg
   1231            LCD_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
   \   0000001A   0021               MOVS     R1,#+0
   \   0000001C   1320               MOVS     R0,#+19
   \   0000001E   ........           BL       LCD_WriteReg
   1232            _delay_(20);                 /* Dis-charge capacitor power voltage (200ms) */
   \   00000022   1420               MOVS     R0,#+20
   \   00000024   ........           BL       delay
   1233            LCD_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   00000028   41F2B071           MOVW     R1,#+6064
   \   0000002C   1020               MOVS     R0,#+16
   \   0000002E   ........           BL       LCD_WriteReg
   1234            LCD_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   00000032   40F23711           MOVW     R1,#+311
   \   00000036   1120               MOVS     R0,#+17
   \   00000038   ........           BL       LCD_WriteReg
   1235            _delay_(5);                  /* Delay 50 ms */
   \   0000003C   0520               MOVS     R0,#+5
   \   0000003E   ........           BL       delay
   1236            LCD_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
   \   00000042   40F23911           MOVW     R1,#+313
   \   00000046   1220               MOVS     R0,#+18
   \   00000048   ........           BL       LCD_WriteReg
   1237            _delay_(5);                  /* Delay 50 ms */
   \   0000004C   0520               MOVS     R0,#+5
   \   0000004E   ........           BL       delay
   1238            LCD_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
   \   00000052   4FF4E851           MOV      R1,#+7424
   \   00000056   1320               MOVS     R0,#+19
   \   00000058   ........           BL       LCD_WriteReg
   1239            LCD_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
   \   0000005C   1321               MOVS     R1,#+19
   \   0000005E   2920               MOVS     R0,#+41
   \   00000060   ........           BL       LCD_WriteReg
   1240            _delay_(5);                  /* Delay 50 ms */
   \   00000064   0520               MOVS     R0,#+5
   \   00000066   ........           BL       delay
   1241            LCD_WriteReg(LCD_REG_7, 0x0173);  /* 262K color and display ON */
   \   0000006A   40F27311           MOVW     R1,#+371
   \   0000006E   0720               MOVS     R0,#+7
   \   00000070   ........           BL       LCD_WriteReg
   1242          }
   \   00000074   01BD               POP      {R0,PC}          ;; return
   1243          
   1244          /**
   1245            * @brief  Enables the Display.
   1246            * @param  None
   1247            * @retval None
   1248            */

   \                                 In section .text, align 2, keep-with-next
   1249          void LCD_DisplayOn(void)
   1250          {
   \                     LCD_DisplayOn:
   \   00000000   80B5               PUSH     {R7,LR}
   1251            /* Display On */
   1252            LCD_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
   \   00000002   40F27311           MOVW     R1,#+371
   \   00000006   0720               MOVS     R0,#+7
   \   00000008   ........           BL       LCD_WriteReg
   1253          }
   \   0000000C   01BD               POP      {R0,PC}          ;; return
   1254          
   1255          /**
   1256            * @brief  Disables the Display.
   1257            * @param  None
   1258            * @retval None
   1259            */

   \                                 In section .text, align 2, keep-with-next
   1260          void LCD_DisplayOff(void)
   1261          {
   \                     LCD_DisplayOff:
   \   00000000   80B5               PUSH     {R7,LR}
   1262            /* Display Off */
   1263            LCD_WriteReg(LCD_REG_7, 0x0); 
   \   00000002   0021               MOVS     R1,#+0
   \   00000004   0720               MOVS     R0,#+7
   \   00000006   ........           BL       LCD_WriteReg
   1264          }
   \   0000000A   01BD               POP      {R0,PC}          ;; return
   1265          
   1266          /**
   1267            * @brief  Configures LCD Control lines (FSMC Pins) in alternate function mode.
   1268            * @param  None
   1269            * @retval None
   1270            */

   \                                 In section .text, align 2, keep-with-next
   1271          void LCD_CtrlLinesConfig(void)
   1272          {
   \                     LCD_CtrlLinesConfig:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   83B0               SUB      SP,SP,#+12
   1273            GPIO_InitTypeDef GPIO_InitStructure;
   1274          
   1275            /* Enable GPIOD, GPIOE, GPIOF, GPIOG and AFIO clocks */
   1276            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOG | RCC_AHB1Periph_GPIOE |
   1277                                   RCC_AHB1Periph_GPIOF, ENABLE);
   \   00000004   0121               MOVS     R1,#+1
   \   00000006   7820               MOVS     R0,#+120
   \   00000008   ........           BL       RCC_AHB1PeriphClockCmd
   1278          
   1279          /*-- GPIO Configuration ------------------------------------------------------*/
   1280            /* SRAM Data lines,  NOE and NWE configuration */
   1281            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
   1282                                          GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15 |
   1283                                          GPIO_Pin_4 |GPIO_Pin_5;;
   \   0000000C   4CF23370           MOVW     R0,#+50995
   \   00000010   0090               STR      R0,[SP, #+0]
   1284            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   00000012   0220               MOVS     R0,#+2
   \   00000014   8DF80400           STRB     R0,[SP, #+4]
   1285            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000018   0220               MOVS     R0,#+2
   \   0000001A   8DF80500           STRB     R0,[SP, #+5]
   1286            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   0000001E   0020               MOVS     R0,#+0
   \   00000020   8DF80600           STRB     R0,[SP, #+6]
   1287            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
   \   00000024   0020               MOVS     R0,#+0
   \   00000026   8DF80700           STRB     R0,[SP, #+7]
   1288          
   1289            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   0000002A   00A9               ADD      R1,SP,#+0
   \   0000002C   ....               LDR.N    R0,??DataTable28_2  ;; 0x40020c00
   \   0000002E   ........           BL       GPIO_Init
   1290            GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FSMC);
   \   00000032   0C22               MOVS     R2,#+12
   \   00000034   0021               MOVS     R1,#+0
   \   00000036   ....               LDR.N    R0,??DataTable28_2  ;; 0x40020c00
   \   00000038   ........           BL       GPIO_PinAFConfig
   1291            GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FSMC);
   \   0000003C   0C22               MOVS     R2,#+12
   \   0000003E   0121               MOVS     R1,#+1
   \   00000040   ....               LDR.N    R0,??DataTable28_2  ;; 0x40020c00
   \   00000042   ........           BL       GPIO_PinAFConfig
   1292            GPIO_PinAFConfig(GPIOD, GPIO_PinSource4, GPIO_AF_FSMC);
   \   00000046   0C22               MOVS     R2,#+12
   \   00000048   0421               MOVS     R1,#+4
   \   0000004A   ....               LDR.N    R0,??DataTable28_2  ;; 0x40020c00
   \   0000004C   ........           BL       GPIO_PinAFConfig
   1293            GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_FSMC);
   \   00000050   0C22               MOVS     R2,#+12
   \   00000052   0521               MOVS     R1,#+5
   \   00000054   ....               LDR.N    R0,??DataTable28_2  ;; 0x40020c00
   \   00000056   ........           BL       GPIO_PinAFConfig
   1294            GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FSMC);
   \   0000005A   0C22               MOVS     R2,#+12
   \   0000005C   0821               MOVS     R1,#+8
   \   0000005E   ....               LDR.N    R0,??DataTable28_2  ;; 0x40020c00
   \   00000060   ........           BL       GPIO_PinAFConfig
   1295            GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FSMC);
   \   00000064   0C22               MOVS     R2,#+12
   \   00000066   0921               MOVS     R1,#+9
   \   00000068   ....               LDR.N    R0,??DataTable28_2  ;; 0x40020c00
   \   0000006A   ........           BL       GPIO_PinAFConfig
   1296            GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
   \   0000006E   0C22               MOVS     R2,#+12
   \   00000070   0A21               MOVS     R1,#+10
   \   00000072   ....               LDR.N    R0,??DataTable28_2  ;; 0x40020c00
   \   00000074   ........           BL       GPIO_PinAFConfig
   1297            GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC);
   \   00000078   0C22               MOVS     R2,#+12
   \   0000007A   0E21               MOVS     R1,#+14
   \   0000007C   ....               LDR.N    R0,??DataTable28_2  ;; 0x40020c00
   \   0000007E   ........           BL       GPIO_PinAFConfig
   1298            GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC);
   \   00000082   0C22               MOVS     R2,#+12
   \   00000084   0F21               MOVS     R1,#+15
   \   00000086   ....               LDR.N    R0,??DataTable28_2  ;; 0x40020c00
   \   00000088   ........           BL       GPIO_PinAFConfig
   1299          
   1300            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
   1301                                          GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
   1302                                          GPIO_Pin_15;
   \   0000008C   4FF68070           MOVW     R0,#+65408
   \   00000090   0090               STR      R0,[SP, #+0]
   1303            GPIO_Init(GPIOE, &GPIO_InitStructure);
   \   00000092   00A9               ADD      R1,SP,#+0
   \   00000094   ....               LDR.N    R0,??DataTable28_3  ;; 0x40021000
   \   00000096   ........           BL       GPIO_Init
   1304          
   1305            GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FSMC);
   \   0000009A   0C22               MOVS     R2,#+12
   \   0000009C   0721               MOVS     R1,#+7
   \   0000009E   ....               LDR.N    R0,??DataTable28_3  ;; 0x40021000
   \   000000A0   ........           BL       GPIO_PinAFConfig
   1306            GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FSMC);
   \   000000A4   0C22               MOVS     R2,#+12
   \   000000A6   0821               MOVS     R1,#+8
   \   000000A8   ....               LDR.N    R0,??DataTable28_3  ;; 0x40021000
   \   000000AA   ........           BL       GPIO_PinAFConfig
   1307            GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FSMC);
   \   000000AE   0C22               MOVS     R2,#+12
   \   000000B0   0921               MOVS     R1,#+9
   \   000000B2   ....               LDR.N    R0,??DataTable28_3  ;; 0x40021000
   \   000000B4   ........           BL       GPIO_PinAFConfig
   1308            GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FSMC);
   \   000000B8   0C22               MOVS     R2,#+12
   \   000000BA   0A21               MOVS     R1,#+10
   \   000000BC   ....               LDR.N    R0,??DataTable28_3  ;; 0x40021000
   \   000000BE   ........           BL       GPIO_PinAFConfig
   1309            GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FSMC);
   \   000000C2   0C22               MOVS     R2,#+12
   \   000000C4   0B21               MOVS     R1,#+11
   \   000000C6   ....               LDR.N    R0,??DataTable28_3  ;; 0x40021000
   \   000000C8   ........           BL       GPIO_PinAFConfig
   1310            GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FSMC);
   \   000000CC   0C22               MOVS     R2,#+12
   \   000000CE   0C21               MOVS     R1,#+12
   \   000000D0   ....               LDR.N    R0,??DataTable28_3  ;; 0x40021000
   \   000000D2   ........           BL       GPIO_PinAFConfig
   1311            GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FSMC);
   \   000000D6   0C22               MOVS     R2,#+12
   \   000000D8   0D21               MOVS     R1,#+13
   \   000000DA   ....               LDR.N    R0,??DataTable28_3  ;; 0x40021000
   \   000000DC   ........           BL       GPIO_PinAFConfig
   1312            GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FSMC);
   \   000000E0   0C22               MOVS     R2,#+12
   \   000000E2   0E21               MOVS     R1,#+14
   \   000000E4   ....               LDR.N    R0,??DataTable28_3  ;; 0x40021000
   \   000000E6   ........           BL       GPIO_PinAFConfig
   1313            GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FSMC);
   \   000000EA   0C22               MOVS     R2,#+12
   \   000000EC   0F21               MOVS     R1,#+15
   \   000000EE   ....               LDR.N    R0,??DataTable28_3  ;; 0x40021000
   \   000000F0   ........           BL       GPIO_PinAFConfig
   1314          
   1315            /* SRAM Address lines configuration */
   1316            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
   \   000000F4   0120               MOVS     R0,#+1
   \   000000F6   0090               STR      R0,[SP, #+0]
   1317            GPIO_Init(GPIOF, &GPIO_InitStructure);  
   \   000000F8   00A9               ADD      R1,SP,#+0
   \   000000FA   ....               LDR.N    R0,??DataTable28_4  ;; 0x40021400
   \   000000FC   ........           BL       GPIO_Init
   1318            GPIO_PinAFConfig(GPIOF, GPIO_PinSource0, GPIO_AF_FSMC);	   
   \   00000100   0C22               MOVS     R2,#+12
   \   00000102   0021               MOVS     R1,#+0
   \   00000104   ....               LDR.N    R0,??DataTable28_4  ;; 0x40021400
   \   00000106   ........           BL       GPIO_PinAFConfig
   1319          
   1320            /* NE3 configuration */
   1321            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
   \   0000010A   4FF48060           MOV      R0,#+1024
   \   0000010E   0090               STR      R0,[SP, #+0]
   1322          
   1323            GPIO_Init(GPIOG, &GPIO_InitStructure);
   \   00000110   00A9               ADD      R1,SP,#+0
   \   00000112   ....               LDR.N    R0,??DataTable28_5  ;; 0x40021800
   \   00000114   ........           BL       GPIO_Init
   1324            GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, GPIO_AF_FSMC);
   \   00000118   0C22               MOVS     R2,#+12
   \   0000011A   0A21               MOVS     R1,#+10
   \   0000011C   ....               LDR.N    R0,??DataTable28_5  ;; 0x40021800
   \   0000011E   ........           BL       GPIO_PinAFConfig
   1325          }
   \   00000122   07BD               POP      {R0-R2,PC}       ;; return
   1326          
   1327          /**
   1328            * @brief  Configures the Parallel interface (FSMC) for LCD(Parallel mode)
   1329            * @param  None
   1330            * @retval None
   1331            */

   \                                 In section .text, align 2, keep-with-next
   1332          void LCD_FSMCConfig(void)
   1333          {
   \                     LCD_FSMCConfig:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   97B0               SUB      SP,SP,#+92
   1334            FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
   1335            FSMC_NORSRAMTimingInitTypeDef  p;
   1336             
   1337            /* Enable FSMC clock */
   1338            RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
   \   00000004   0121               MOVS     R1,#+1
   \   00000006   0120               MOVS     R0,#+1
   \   00000008   ........           BL       RCC_AHB3PeriphClockCmd
   1339            
   1340          /*-- FSMC Configuration ------------------------------------------------------*/
   1341          /*----------------------- SRAM Bank 3 ----------------------------------------*/
   1342            /* FSMC_Bank1_NORSRAM4 configuration */
   1343            p.FSMC_AddressSetupTime = 1;
   \   0000000C   0120               MOVS     R0,#+1
   \   0000000E   0090               STR      R0,[SP, #+0]
   1344            p.FSMC_AddressHoldTime = 0;
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   0190               STR      R0,[SP, #+4]
   1345            p.FSMC_DataSetupTime = 9;
   \   00000014   0920               MOVS     R0,#+9
   \   00000016   0290               STR      R0,[SP, #+8]
   1346            p.FSMC_BusTurnAroundDuration = 0;
   \   00000018   0020               MOVS     R0,#+0
   \   0000001A   0390               STR      R0,[SP, #+12]
   1347            p.FSMC_CLKDivision = 0;
   \   0000001C   0020               MOVS     R0,#+0
   \   0000001E   0490               STR      R0,[SP, #+16]
   1348            p.FSMC_DataLatency = 0;
   \   00000020   0020               MOVS     R0,#+0
   \   00000022   0590               STR      R0,[SP, #+20]
   1349            p.FSMC_AccessMode = FSMC_AccessMode_A;
   \   00000024   0020               MOVS     R0,#+0
   \   00000026   0690               STR      R0,[SP, #+24]
   1350            /* Color LCD configuration ------------------------------------
   1351               LCD configured as follow:
   1352                  - Data/Address MUX = Disable
   1353                  - Memory Type = SRAM
   1354                  - Data Width = 16bit
   1355                  - Write Operation = Enable
   1356                  - Extended Mode = Enable
   1357                  - Asynchronous Wait = Disable */
   1358          
   1359            FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM3;
   \   00000028   0420               MOVS     R0,#+4
   \   0000002A   0790               STR      R0,[SP, #+28]
   1360            FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
   \   0000002C   0020               MOVS     R0,#+0
   \   0000002E   0890               STR      R0,[SP, #+32]
   1361            FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
   \   00000030   0020               MOVS     R0,#+0
   \   00000032   0990               STR      R0,[SP, #+36]
   1362            FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
   \   00000034   1020               MOVS     R0,#+16
   \   00000036   0A90               STR      R0,[SP, #+40]
   1363            FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
   \   00000038   0020               MOVS     R0,#+0
   \   0000003A   0B90               STR      R0,[SP, #+44]
   1364            FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
   \   0000003C   0020               MOVS     R0,#+0
   \   0000003E   0C90               STR      R0,[SP, #+48]
   1365            FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
   \   00000040   0020               MOVS     R0,#+0
   \   00000042   0D90               STR      R0,[SP, #+52]
   1366            FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
   \   00000044   0020               MOVS     R0,#+0
   \   00000046   0E90               STR      R0,[SP, #+56]
   1367            FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
   \   00000048   0020               MOVS     R0,#+0
   \   0000004A   0F90               STR      R0,[SP, #+60]
   1368            FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
   \   0000004C   4FF48050           MOV      R0,#+4096
   \   00000050   1090               STR      R0,[SP, #+64]
   1369            FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
   \   00000052   0020               MOVS     R0,#+0
   \   00000054   1190               STR      R0,[SP, #+68]
   1370            FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
   \   00000056   0020               MOVS     R0,#+0
   \   00000058   1290               STR      R0,[SP, #+72]
   1371            FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
   \   0000005A   0020               MOVS     R0,#+0
   \   0000005C   1390               STR      R0,[SP, #+76]
   1372            FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
   \   0000005E   00A8               ADD      R0,SP,#+0
   \   00000060   1490               STR      R0,[SP, #+80]
   1373            FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
   \   00000062   00A8               ADD      R0,SP,#+0
   \   00000064   1590               STR      R0,[SP, #+84]
   1374          
   1375            FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);   
   \   00000066   07A8               ADD      R0,SP,#+28
   \   00000068   ........           BL       FSMC_NORSRAMInit
   1376          
   1377            /* Enable FSMC NOR/SRAM Bank3 */
   1378            FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE);
   \   0000006C   0121               MOVS     R1,#+1
   \   0000006E   0420               MOVS     R0,#+4
   \   00000070   ........           BL       FSMC_NORSRAMCmd
   1379          }
   \   00000074   17B0               ADD      SP,SP,#+92
   \   00000076   00BD               POP      {PC}             ;; return
   1380          
   1381          /**
   1382            * @brief  Displays a pixel.
   1383            * @param  x: pixel x.
   1384            * @param  y: pixel y.  
   1385            * @retval None
   1386            */

   \                                 In section .text, align 2, keep-with-next
   1387          static void PutPixel(int16_t x, int16_t y)
   1388          { 
   \                     PutPixel:
   \   00000000   80B5               PUSH     {R7,LR}
   1389            if(x < 0 || x > 239 || y < 0 || y > 319)
   \   00000002   021E               SUBS     R2,R0,#+0
   \   00000004   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000006   F02A               CMP      R2,#+240
   \   00000008   05D2               BCS.N    ??PutPixel_0
   \   0000000A   0A1E               SUBS     R2,R1,#+0
   \   0000000C   4FF4A073           MOV      R3,#+320
   \   00000010   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000012   9A42               CMP      R2,R3
   \   00000014   00D3               BCC.N    ??PutPixel_1
   1390            {
   1391              return;  
   \                     ??PutPixel_0:
   \   00000016   05E0               B.N      ??PutPixel_2
   1392            }
   1393            LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
   \                     ??PutPixel_1:
   \   00000018   0023               MOVS     R3,#+0
   \   0000001A   0122               MOVS     R2,#+1
   \   0000001C   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   ........           BL       LCD_DrawLine
   1394          }
   \                     ??PutPixel_2:
   \   00000024   01BD               POP      {R0,PC}          ;; return
   1395          
   1396          
   1397          #ifndef USE_Delay
   1398          /**
   1399            * @brief  Inserts a delay time.
   1400            * @param  nCount: specifies the delay time length.
   1401            * @retval None
   1402            */

   \                                 In section .text, align 2, keep-with-next
   1403          static void delay(__IO uint32_t nCount)
   1404          {
   \                     delay:
   \   00000000   01B4               PUSH     {R0}
   \   00000002   81B0               SUB      SP,SP,#+4
   1405            __IO uint32_t index = 0; 
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   0090               STR      R0,[SP, #+0]
   1406            for(index = (100000 * nCount); index != 0; index--)
   \   00000008   0198               LDR      R0,[SP, #+4]
   \   0000000A   ....               LDR.N    R1,??DataTable28_6  ;; 0x186a0
   \   0000000C   4843               MULS     R0,R1,R0
   \   0000000E   0090               STR      R0,[SP, #+0]
   \   00000010   02E0               B.N      ??delay_0
   \                     ??delay_1:
   \   00000012   0098               LDR      R0,[SP, #+0]
   \   00000014   401E               SUBS     R0,R0,#+1
   \   00000016   0090               STR      R0,[SP, #+0]
   \                     ??delay_0:
   \   00000018   0098               LDR      R0,[SP, #+0]
   \   0000001A   0028               CMP      R0,#+0
   \   0000001C   F9D1               BNE.N    ??delay_1
   1407            {
   1408            }
   1409          }
   \   0000001E   02B0               ADD      SP,SP,#+8
   \   00000020   7047               BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   000C0240           DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \   00000000   00100240           DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_2:
   \   00000000   00140240           DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_3:
   \   00000000   00180240           DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   ........           DC32     Font16x24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_1:
   \   00000000   ........           DC32     TextColor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_2:
   \   00000000   ........           DC32     BackColor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_3:
   \   00000000   ........           DC32     LCD_Currentfonts

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28:
   \   00000000   02000068           DC32     0x68000002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_1:
   \   00000000   ........           DC32     BackColor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_2:
   \   00000000   000C0240           DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_3:
   \   00000000   00100240           DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_4:
   \   00000000   00140240           DC32     0x40021400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_5:
   \   00000000   00180240           DC32     0x40021800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_6:
   \   00000000   A0860100           DC32     0x186a0
   1410          #endif /* USE_Delay*/
   1411          /**
   1412            * @}
   1413            */ 
   1414          
   1415          /**
   1416            * @}
   1417            */ 
   1418            
   1419          /**
   1420            * @}
   1421            */ 
   1422          
   1423          /**
   1424            * @}
   1425            */ 
   1426            
   1427          /**
   1428            * @}
   1429            */  
   1430          
   1431          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

     Function                   .cstack
     --------                   -------
     LCD_Clear                      16
     LCD_ClearLine                  16
     LCD_ClosedPolyLine             16
     LCD_ClosedPolyLineRelative      8
     LCD_CtrlLinesConfig            16
     LCD_DeInit                     16
     LCD_DisplayChar                 8
     LCD_DisplayOff                  8
     LCD_DisplayOn                   8
     LCD_DisplayStringLine          16
     LCD_DrawChar                   24
     LCD_DrawCircle                 24
     LCD_DrawFullCircle             32
     LCD_DrawFullRect               24
     LCD_DrawLine                   24
     LCD_DrawMonoPict               16
     LCD_DrawRect                   24
     LCD_DrawUniLine                48
     LCD_FSMCConfig                 96
     LCD_FillPolyLine              456
     LCD_GetColors                   0
     LCD_GetFont                     0
     LCD_PolyLine                   16
     LCD_PolyLineRelative            8
     LCD_PolyLineRelativeClosed     32
     LCD_PowerOn                     8
     LCD_ReadRAM                     0
     LCD_ReadReg                     0
     LCD_SetBackColor                4
     LCD_SetColors                   8
     LCD_SetCursor                   8
     LCD_SetDisplayWindow           16
     LCD_SetFont                     0
     LCD_SetTextColor                4
     LCD_WindowModeDisable           8
     LCD_WriteBMP                   16
     LCD_WriteRAM                    0
     LCD_WriteRAM_Prepare            0
     LCD_WriteReg                    0
     PutPixel                        8
     STM3220F_LCD_Init               8
     delay                           8


   Section sizes:

     Function/Label             Bytes
     --------------             -----
     ASCII16x24_Table           4560
     ASCII12x12_Table           2304
     ASCII8x12_Table            2304
     ASCII8x8_Table             1536
     Font16x24                     8
     Font12x12                     8
     Font8x12                      8
     Font8x8                       8
     LCD_Currentfonts              4
     TextColor                     2
     BackColor                     2
     LCD_DeInit                  638
     STM3220F_LCD_Init          1052
     LCD_SetColors                26
     LCD_GetColors                18
     LCD_SetTextColor             16
     LCD_SetBackColor             16
     LCD_SetFont                   8
     LCD_GetFont                   8
     LCD_ClearLine                54
     LCD_Clear                    42
     LCD_SetCursor                28
     LCD_DrawChar                188
     LCD_DisplayChar              38
     LCD_DisplayStringLine        70
     LCD_SetDisplayWindow        108
     LCD_WindowModeDisable        30
     LCD_DrawLine                112
     LCD_DrawRect                 90
     LCD_DrawCircle              270
     LCD_DrawMonoPict             82
     LCD_WriteBMP                 86
     LCD_DrawFullRect            154
     LCD_DrawFullCircle          210
     LCD_DrawUniLine             310
     LCD_PolyLine                 56
     LCD_PolyLineRelativeClosed  122
     LCD_ClosedPolyLine           54
     LCD_PolyLineRelative         12
     LCD_ClosedPolyLineRelative   12
     LCD_FillPolyLine            720
     LCD_WriteReg                 14
     LCD_ReadReg                  16
     LCD_WriteRAM_Prepare         10
     LCD_WriteRAM                  6
     LCD_ReadRAM                  16
     LCD_PowerOn                 118
     LCD_DisplayOn                14
     LCD_DisplayOff               12
     LCD_CtrlLinesConfig         292
     LCD_FSMCConfig              120
     PutPixel                     38
     delay                        34
     ??DataTable21                 4
     ??DataTable21_1               4
     ??DataTable21_2               4
     ??DataTable21_3               4
     ??DataTable27                 4
     ??DataTable27_1               4
     ??DataTable27_2               4
     ??DataTable27_3               4
     ??DataTable28                 4
     ??DataTable28_1               4
     ??DataTable28_2               4
     ??DataTable28_3               4
     ??DataTable28_4               4
     ??DataTable28_5               4
     ??DataTable28_6               4

 
      6 bytes in section .bss
     34 bytes in section .data
 16 084 bytes in section .text
 
 16 084 bytes of CODE memory
     40 bytes of DATA memory

Errors: none
Warnings: none
