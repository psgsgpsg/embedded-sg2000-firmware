###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     12/Jan/2012  04:01:42 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\묵작업\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\DAC_Con #
#                    trol.c                                                   #
#    Command line =  "F:\묵작업\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\DAC_Co #
#                    ntrol.c" -D USE_STDPERIPH_DRIVER -D STM32F2XX -D         #
#                    USE_STM3220F_EVAL -D USE_USB_OTG_FS -D                   #
#                    RTC_CLOCK_SOURCE_LSE -lC "F:\묵작업\[ NewDTG             #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\STM3220F_EVAL\List\" #
#                     -lA "F:\묵작업\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\E #
#                    WARM\STM3220F_EVAL\List\" -o "F:\묵작업\[ NewDTG         #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\STM3220F_EVAL\Obj\"  #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0\arm\INC\c\DLib_Config_Full.h" -I           #
#                    "F:\묵작업\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\ #
#                    ..\" -I "F:\묵작업\[ NewDTG                              #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Libraries\CMSI #
#                    S\CM3\CoreSupport\" -I "F:\묵작업\[ NewDTG               #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Libraries\CMSI #
#                    S\CM3\DeviceSupport\ST\STM32F2xx\" -I "F:\묵작업\[       #
#                    NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Librari #
#                    es\STM32F2xx_StdPeriph_Driver\inc\" -I "F:\묵작업\[      #
#                    NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Utiliti #
#                    es\STM32_EVAL\" -I "F:\묵작업\[ NewDTG                   #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Utilities\STM3 #
#                    2_EVAL\Common\" -I "F:\묵작업\[ NewDTG                   #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Utilities\STM3 #
#                    2_EVAL\STM3220F_EVAL\" -I "F:\묵작업\[ NewDTG            #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Libraries\STM3 #
#                    2_USB_OTG_Driver\inc\" -I "F:\묵작업\[ NewDTG            #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Libraries\STM3 #
#                    2_USB_Device_Library\Core\inc\" -I "F:\묵작업\[ NewDTG   #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\..\Libraries\STM3 #
#                    2_USB_Device_Library\Class\msc\inc\" -I "F:\묵작업\[     #
#                    NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\Usb\" -I   #
#                    "F:\묵작업\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\ #
#                    ..\Usb\Inc\" -I "F:\묵작업\[ NewDTG                      #
#                    ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\..\Usb\src\" -I      #
#                    "F:\묵작업\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\ #
#                    ..\..\Libraries\STM32_USB_HOST_Library\Core\inc\" -I     #
#                    "F:\묵작업\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\ #
#                    ..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\inc\"   #
#                    -I "F:\묵작업\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWA #
#                    RM\..\..\Libraries\STM32_USB_Device_Library\Class\cdc\in #
#                    c\" -Ol --use_c++_inline                                 #
#    List file    =  F:\묵작업\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\S #
#                    TM3220F_EVAL\List\DAC_Control.lst                        #
#    Object file  =  F:\묵작업\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\EWARM\S #
#                    TM3220F_EVAL\Obj\DAC_Control.o                           #
#                                                                             #
#                                                                             #
###############################################################################

F:\묵작업\[ NewDTG ]\WORK\DTG_EMS_SYSTEM\Project\DAC_Control.c
      1          
      2          #include "main.h"
      3          #include "DAC_Control.h"
      4          
      5          /*
      6          //////////////////////////////////////////////////////////////////////////////
      7          // -주의 : 타이머 6와 같이 동작한다.
      8          //      : DMA_InitStructure.DMA_MemoryDataSize <- 이변수값을 DAC두개도 똑같이 적어주면
      9                  동작하지 않는다. 기본적인 변수는 같이 적어주고
     10                  Channel1 = DMA_MemoryDataSize_Byte
     11                  Channel2 = DMA_MemoryDataSize_HalfWord
     12                  이렇게 적어주어야 동작이 원활하게 이루어진다.
     13          
     14          // 함수 설명
     15          // void DAC_Ch2_SineWaveConfig(void)
     16          // 
     17          //
     18          //////////////////////////////////////////////////////////////////////////////
     19          */
     20          
     21          /**
     22            * @brief  DAC  Channel2 SineWave Configuration
     23            * @param  None
     24            * @retval None
     25            */
     26          //#define DAC_DHR12R1_ADDRESS    0x40007408
     27          //
     28          //#define DAC_DHR12R2_ADDRESS    0x40007414
     29          //#define DAC_DHR8R1_ADDRESS     0x40007410
     30          //
     31          
     32          //const uint16_t Sine12bit[32] = {
     33          //                      2047, 2447, 2831, 3185, 3498, 3750, 3939, 4056, 4095, 4056,
     34          //                      3939, 3750, 3495, 3185, 2831, 2447, 2047, 1647, 1263, 909, 
     35          //                      599, 344, 155, 38, 0, 38, 155, 344, 599, 909, 1263, 1647};
     36          //const uint8_t Escalator8bit[6] = {0xFF, 0xFF, 0x32, 0x32, 0x00, 0x00};
     37          //
     38          //uint8_t DMA_Channel1[2] = {0xff,0};
     39          //uint8_t DMA_Channel2[2] = {0xff,0};
     40          

   \                                 In section .bss, align 4
     41          DAC_InitTypeDef  DAC_InitStructure;
   \                     DAC_InitStructure:
   \   00000000                      DS8 16
     42          

   \                                 In section .bss, align 4
     43          u32 Reference_Channel1;
   \                     Reference_Channel1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     44          u32 Reference_Channel2;
   \                     Reference_Channel2:
   \   00000000                      DS8 4
     45          

   \                                 In section .text, align 2, keep-with-next
     46          void DAC_GPIO_Config(void)
     47          {
   \                     DAC_GPIO_Config:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   83B0               SUB      SP,SP,#+12
     48             GPIO_InitTypeDef GPIO_InitStructure;
     49          
     50            /* DMA1 clock and GPIOA clock enable (to be used with DAC) */
     51            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_AHB1Periph_GPIOA, ENABLE);
   \   00000004   0121               MOVS     R1,#+1
   \   00000006   ....               LDR.N    R0,??DataTable3  ;; 0x200001
   \   00000008   ........           BL       RCC_AHB1PeriphClockCmd
     52          
     53            /* DAC Periph clock enable */
     54            RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
   \   0000000C   0121               MOVS     R1,#+1
   \   0000000E   5FF00050           MOVS     R0,#+536870912
   \   00000012   ........           BL       RCC_APB1PeriphClockCmd
     55          
     56            /* DAC channel 1 & 2 (DAC_OUT1 = PA.4)(DAC_OUT2 = PA.5) configuration */
     57            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
   \   00000016   3020               MOVS     R0,#+48
   \   00000018   0090               STR      R0,[SP, #+0]
     58            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
   \   0000001A   0320               MOVS     R0,#+3
   \   0000001C   8DF80400           STRB     R0,[SP, #+4]
     59            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   00000020   0020               MOVS     R0,#+0
   \   00000022   8DF80700           STRB     R0,[SP, #+7]
     60            GPIO_Init(GPIOA, &GPIO_InitStructure); 
   \   00000026   00A9               ADD      R1,SP,#+0
   \   00000028   ....               LDR.N    R0,??DataTable3_1  ;; 0x40020000
   \   0000002A   ........           BL       GPIO_Init
     61          }
   \   0000002E   07BD               POP      {R0-R2,PC}       ;; return
     62          

   \                                 In section .text, align 2, keep-with-next
     63          void DAC_Config(void)
     64          {
     65           
     66               if(SFLASH_Memory.RPM_Reference == 0 || SFLASH_Memory.SPEED_Reference == 0)
   \                     DAC_Config:
   \   00000000   ....               LDR.N    R0,??DataTable3_2
   \   00000002   B0F86E00           LDRH     R0,[R0, #+110]
   \   00000006   0028               CMP      R0,#+0
   \   00000008   04D0               BEQ.N    ??DAC_Config_0
   \   0000000A   ....               LDR.N    R0,??DataTable3_2
   \   0000000C   B0F86C00           LDRH     R0,[R0, #+108]
   \   00000010   0028               CMP      R0,#+0
   \   00000012   08D1               BNE.N    ??DAC_Config_1
     67               {
     68                    // 출력 계산 2.5V -> 증폭 25V / 4096단계로 나누워짐
     69                    // 결과적으로 10이 약 0.06볼트임          
     70                    // 약 17이 0.1V임 
     71                    Reference_Channel1 = 750 ;	          // 스피드
   \                     ??DAC_Config_0:
   \   00000014   ....               LDR.N    R0,??DataTable3_3
   \   00000016   40F2EE21           MOVW     R1,#+750
   \   0000001A   0160               STR      R1,[R0, #+0]
     72                    Reference_Channel2 = 750 ;     	     // RPM          
   \   0000001C   ....               LDR.N    R0,??DataTable3_4
   \   0000001E   40F2EE21           MOVW     R1,#+750
   \   00000022   0160               STR      R1,[R0, #+0]
   \   00000024   0DE0               B.N      ??DAC_Config_2
     73               }
     74               else
     75               {
     76                    
     77                    Reference_Channel1 = SFLASH_Memory.SPEED_Reference * DAC_ADJUST;	// 스피드
   \                     ??DAC_Config_1:
   \   00000026   ....               LDR.N    R0,??DataTable3_2
   \   00000028   B0F86C00           LDRH     R0,[R0, #+108]
   \   0000002C   0F21               MOVS     R1,#+15
   \   0000002E   4843               MULS     R0,R1,R0
   \   00000030   ....               LDR.N    R1,??DataTable3_3
   \   00000032   0860               STR      R0,[R1, #+0]
     78                    Reference_Channel2 = SFLASH_Memory.RPM_Reference * DAC_ADJUST;     	// RPM
   \   00000034   ....               LDR.N    R0,??DataTable3_2
   \   00000036   B0F86E00           LDRH     R0,[R0, #+110]
   \   0000003A   0F21               MOVS     R1,#+15
   \   0000003C   4843               MULS     R0,R1,R0
   \   0000003E   ....               LDR.N    R1,??DataTable3_4
   \   00000040   0860               STR      R0,[R1, #+0]
     79               }
     80          }
   \                     ??DAC_Config_2:
   \   00000042   7047               BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     81          void DAC_Ch1_Config(void)
     82          {
   \                     DAC_Ch1_Config:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   8FB0               SUB      SP,SP,#+60
     83            DMA_InitTypeDef DMA_InitStructure;
     84          
     85            /* DAC channel1 Configuration */
     86            DAC_InitStructure.DAC_Trigger = DAC_Trigger_T6_TRGO;
   \   00000004   ....               LDR.N    R0,??DataTable3_5
   \   00000006   0421               MOVS     R1,#+4
   \   00000008   0160               STR      R1,[R0, #+0]
     87            DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
   \   0000000A   ....               LDR.N    R0,??DataTable3_5
   \   0000000C   0021               MOVS     R1,#+0
   \   0000000E   4160               STR      R1,[R0, #+4]
     88            DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
   \   00000010   ....               LDR.N    R0,??DataTable3_5
   \   00000012   0021               MOVS     R1,#+0
   \   00000014   C160               STR      R1,[R0, #+12]
     89            DAC_Init(DAC_Channel_1, &DAC_InitStructure);
   \   00000016   ....               LDR.N    R1,??DataTable3_5
   \   00000018   0020               MOVS     R0,#+0
   \   0000001A   ........           BL       DAC_Init
     90          
     91            /* DMA1_Stream6 channel7 configuration **************************************/
     92            DMA_DeInit(DMA1_Stream6);
   \   0000001E   ....               LDR.N    R0,??DataTable3_6  ;; 0x400260a0
   \   00000020   ........           BL       DMA_DeInit
     93            DMA_InitStructure.DMA_Channel = DMA_Channel_7;  
   \   00000024   5FF06060           MOVS     R0,#+234881024
   \   00000028   0090               STR      R0,[SP, #+0]
     94            DMA_InitStructure.DMA_PeripheralBaseAddr = DAC_DHR12R2_ADDRESS;
   \   0000002A   ....               LDR.N    R0,??DataTable3_7  ;; 0x40007414
   \   0000002C   0190               STR      R0,[SP, #+4]
     95            DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&Reference_Channel1;
   \   0000002E   ....               LDR.N    R0,??DataTable3_3
   \   00000030   0290               STR      R0,[SP, #+8]
     96            DMA_InitStructure.DMA_BufferSize = 1;
   \   00000032   0120               MOVS     R0,#+1
   \   00000034   0490               STR      R0,[SP, #+16]
     97            DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;   // 2Byate 데이터 범위 Byte는 16 / HalfWord 4096 
   \   00000036   4FF40060           MOV      R0,#+2048
   \   0000003A   0790               STR      R0,[SP, #+28]
     98            DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;          // 2Byte 
   \   0000003C   4FF40050           MOV      R0,#+8192
   \   00000040   0890               STR      R0,[SP, #+32]
     99            DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;                  // 데이터를 어디서 받아오는지 
   \   00000042   4020               MOVS     R0,#+64
   \   00000044   0390               STR      R0,[SP, #+12]
    100            DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;         // 주소는 고정입
   \   00000046   0020               MOVS     R0,#+0
   \   00000048   0590               STR      R0,[SP, #+20]
    101            DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;                 // 메모리 주소도 고               
   \   0000004A   0020               MOVS     R0,#+0
   \   0000004C   0690               STR      R0,[SP, #+24]
    102            DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
   \   0000004E   4FF48070           MOV      R0,#+256
   \   00000052   0990               STR      R0,[SP, #+36]
    103            DMA_InitStructure.DMA_Priority = DMA_Priority_High;
   \   00000054   5FF40030           MOVS     R0,#+131072
   \   00000058   0A90               STR      R0,[SP, #+40]
    104            DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
   \   0000005A   0020               MOVS     R0,#+0
   \   0000005C   0B90               STR      R0,[SP, #+44]
    105            DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
   \   0000005E   0120               MOVS     R0,#+1
   \   00000060   0C90               STR      R0,[SP, #+48]
    106            DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
   \   00000062   0020               MOVS     R0,#+0
   \   00000064   0D90               STR      R0,[SP, #+52]
    107            DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
   \   00000066   0020               MOVS     R0,#+0
   \   00000068   0E90               STR      R0,[SP, #+56]
    108            DMA_Init(DMA1_Stream6, &DMA_InitStructure);
   \   0000006A   00A9               ADD      R1,SP,#+0
   \   0000006C   ....               LDR.N    R0,??DataTable3_6  ;; 0x400260a0
   \   0000006E   ........           BL       DMA_Init
    109          
    110            /* Enable DMA1_Stream6 */
    111            DMA_Cmd(DMA1_Stream6, ENABLE);
   \   00000072   0121               MOVS     R1,#+1
   \   00000074   ....               LDR.N    R0,??DataTable3_6  ;; 0x400260a0
   \   00000076   ........           BL       DMA_Cmd
    112            
    113            /* Enable DAC Channel1 */
    114            DAC_Cmd(DAC_Channel_1, ENABLE);
   \   0000007A   0121               MOVS     R1,#+1
   \   0000007C   0020               MOVS     R0,#+0
   \   0000007E   ........           BL       DAC_Cmd
    115          
    116            /* Enable DMA for DAC Channel1 */
    117            DAC_DMACmd(DAC_Channel_1, ENABLE);
   \   00000082   0121               MOVS     R1,#+1
   \   00000084   0020               MOVS     R0,#+0
   \   00000086   ........           BL       DAC_DMACmd
    118          }
   \   0000008A   0FB0               ADD      SP,SP,#+60
   \   0000008C   00BD               POP      {PC}             ;; return

   \                                 In section .text, align 2, keep-with-next
    119          void DAC_Ch2_Config(void)
    120          {
   \                     DAC_Ch2_Config:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   8FB0               SUB      SP,SP,#+60
    121            DMA_InitTypeDef DMA_InitStructure;
    122          
    123            /* DAC channel1 Configuration */
    124            DAC_InitStructure.DAC_Trigger = DAC_Trigger_T6_TRGO;
   \   00000004   ....               LDR.N    R0,??DataTable3_5
   \   00000006   0421               MOVS     R1,#+4
   \   00000008   0160               STR      R1,[R0, #+0]
    125            DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
   \   0000000A   ....               LDR.N    R0,??DataTable3_5
   \   0000000C   0021               MOVS     R1,#+0
   \   0000000E   4160               STR      R1,[R0, #+4]
    126            DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
   \   00000010   ....               LDR.N    R0,??DataTable3_5
   \   00000012   0021               MOVS     R1,#+0
   \   00000014   C160               STR      R1,[R0, #+12]
    127            DAC_Init(DAC_Channel_2, &DAC_InitStructure);
   \   00000016   ....               LDR.N    R1,??DataTable3_5
   \   00000018   1020               MOVS     R0,#+16
   \   0000001A   ........           BL       DAC_Init
    128          
    129            /* DMA1_Stream6 channel7 configuration **************************************/  
    130            DMA_DeInit(DMA1_Stream5);
   \   0000001E   ....               LDR.N    R0,??DataTable3_8  ;; 0x40026088
   \   00000020   ........           BL       DMA_DeInit
    131            DMA_InitStructure.DMA_Channel = DMA_Channel_7;  
   \   00000024   5FF06060           MOVS     R0,#+234881024
   \   00000028   0090               STR      R0,[SP, #+0]
    132            DMA_InitStructure.DMA_PeripheralBaseAddr = DAC_DHR12R1_ADDRESS;
   \   0000002A   ....               LDR.N    R0,??DataTable3_9  ;; 0x40007408
   \   0000002C   0190               STR      R0,[SP, #+4]
    133            DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&Reference_Channel2;
   \   0000002E   ....               LDR.N    R0,??DataTable3_4
   \   00000030   0290               STR      R0,[SP, #+8]
    134            DMA_InitStructure.DMA_BufferSize = 1;
   \   00000032   0120               MOVS     R0,#+1
   \   00000034   0490               STR      R0,[SP, #+16]
    135            DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
   \   00000036   4FF40060           MOV      R0,#+2048
   \   0000003A   0790               STR      R0,[SP, #+28]
    136            DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
   \   0000003C   4FF40050           MOV      R0,#+8192
   \   00000040   0890               STR      R0,[SP, #+32]
    137            DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
   \   00000042   4020               MOVS     R0,#+64
   \   00000044   0390               STR      R0,[SP, #+12]
    138            DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
   \   00000046   0020               MOVS     R0,#+0
   \   00000048   0590               STR      R0,[SP, #+20]
    139            DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
   \   0000004A   0020               MOVS     R0,#+0
   \   0000004C   0690               STR      R0,[SP, #+24]
    140            DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
   \   0000004E   4FF48070           MOV      R0,#+256
   \   00000052   0990               STR      R0,[SP, #+36]
    141            DMA_InitStructure.DMA_Priority = DMA_Priority_High;
   \   00000054   5FF40030           MOVS     R0,#+131072
   \   00000058   0A90               STR      R0,[SP, #+40]
    142            DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
   \   0000005A   0020               MOVS     R0,#+0
   \   0000005C   0B90               STR      R0,[SP, #+44]
    143            DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
   \   0000005E   0120               MOVS     R0,#+1
   \   00000060   0C90               STR      R0,[SP, #+48]
    144            DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
   \   00000062   0020               MOVS     R0,#+0
   \   00000064   0D90               STR      R0,[SP, #+52]
    145            DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
   \   00000066   0020               MOVS     R0,#+0
   \   00000068   0E90               STR      R0,[SP, #+56]
    146            DMA_Init(DMA1_Stream5, &DMA_InitStructure);
   \   0000006A   00A9               ADD      R1,SP,#+0
   \   0000006C   ....               LDR.N    R0,??DataTable3_8  ;; 0x40026088
   \   0000006E   ........           BL       DMA_Init
    147          
    148            /* Enable DMA1_Stream6 */
    149            DMA_Cmd(DMA1_Stream5, ENABLE);
   \   00000072   0121               MOVS     R1,#+1
   \   00000074   ....               LDR.N    R0,??DataTable3_8  ;; 0x40026088
   \   00000076   ........           BL       DMA_Cmd
    150            
    151            /* Enable DAC Channel1 */
    152            DAC_Cmd(DAC_Channel_2, ENABLE);
   \   0000007A   0121               MOVS     R1,#+1
   \   0000007C   1020               MOVS     R0,#+16
   \   0000007E   ........           BL       DAC_Cmd
    153          
    154            /* Enable DMA for DAC Channel1 */
    155            DAC_DMACmd(DAC_Channel_2, ENABLE);
   \   00000082   0121               MOVS     R1,#+1
   \   00000084   1020               MOVS     R0,#+16
   \   00000086   ........           BL       DAC_DMACmd
    156          }
   \   0000008A   0FB0               ADD      SP,SP,#+60
   \   0000008C   00BD               POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   01002000           DC32     0x200001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   00000240           DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   ........           DC32     SFLASH_Memory

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   ........           DC32     Reference_Channel1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   ........           DC32     Reference_Channel2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   ........           DC32     DAC_InitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   A0600240           DC32     0x400260a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   14740040           DC32     0x40007414

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   88600240           DC32     0x40026088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   08740040           DC32     0x40007408
    157          
    158          //
    159          //void DAC_Ch2_SineWaveConfig(void)
    160          //{
    161          //  DMA_InitTypeDef DMA_InitStructure;
    162          //  
    163          //  /* DAC channel2 Configuration */
    164          //  DAC_InitStructure.DAC_Trigger = DAC_Trigger_T6_TRGO;
    165          //  DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
    166          //  DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
    167          //  DAC_Init(DAC_Channel_2, &DAC_InitStructure);
    168          //
    169          //  /* DMA1_Stream5 channel7 configuration **************************************/
    170          //  DMA_DeInit(DMA1_Stream5);
    171          //  DMA_InitStructure.DMA_Channel = DMA_Channel_7;  
    172          //  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)DAC_DHR12R2_ADDRESS;
    173          //  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&Sine12bit;
    174          //  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
    175          //  DMA_InitStructure.DMA_BufferSize = 32;
    176          //  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    177          //  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    178          //  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
    179          //  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    180          //  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    181          //  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    182          //  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
    183          //  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
    184          //  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
    185          //  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
    186          //  DMA_Init(DMA1_Stream5, &DMA_InitStructure);
    187          //
    188          //  /* Enable DMA1_Stream5 */
    189          //  DMA_Cmd(DMA1_Stream5, ENABLE);
    190          //
    191          //  /* Enable DAC Channel2 */
    192          //  DAC_Cmd(DAC_Channel_2, ENABLE);
    193          //
    194          //  /* Enable DMA for DAC Channel2 */
    195          //  DAC_DMACmd(DAC_Channel_2, ENABLE);
    196          //}
    197          //
    198          ///**
    199          //  * @brief  DAC Channel1 Escalator Configuration
    200          //  * @param  None
    201          //  * @retval None
    202          //  */
    203          //void DAC_Ch1_EscalatorConfig(void)
    204          //{
    205          //  DMA_InitTypeDef DMA_InitStructure;
    206          //
    207          //  /* DAC channel1 Configuration */
    208          //  DAC_InitStructure.DAC_Trigger = DAC_Trigger_T6_TRGO;
    209          //  DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
    210          //  DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
    211          //  DAC_Init(DAC_Channel_1, &DAC_InitStructure);
    212          //
    213          //  /* DMA1_Stream6 channel7 configuration **************************************/  
    214          //  DMA_DeInit(DMA1_Stream6);
    215          //  DMA_InitStructure.DMA_Channel = DMA_Channel_7;  
    216          //  DMA_InitStructure.DMA_PeripheralBaseAddr = DAC_DHR8R1_ADDRESS;
    217          //  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&Escalator8bit;
    218          //  DMA_InitStructure.DMA_BufferSize = 6;
    219          //  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    220          //  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
    221          //  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
    222          //  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    223          //  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    224          //  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    225          //  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    226          //  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
    227          //  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
    228          //  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
    229          //  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
    230          //  DMA_Init(DMA1_Stream6, &DMA_InitStructure);    
    231          //
    232          //  /* Enable DMA1_Stream6 */
    233          //  DMA_Cmd(DMA1_Stream6, ENABLE);
    234          //  
    235          //  /* Enable DAC Channel1 */
    236          //  DAC_Cmd(DAC_Channel_1, ENABLE);
    237          //
    238          //  /* Enable DMA for DAC Channel1 */
    239          //  DAC_DMACmd(DAC_Channel_1, ENABLE);
    240          //}

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     DAC_Ch1_Config      64
     DAC_Ch2_Config      64
     DAC_Config           0
     DAC_GPIO_Config     16


   Section sizes:

     Function/Label     Bytes
     --------------     -----
     DAC_InitStructure    16
     Reference_Channel1    4
     Reference_Channel2    4
     DAC_GPIO_Config      48
     DAC_Config           68
     DAC_Ch1_Config      142
     DAC_Ch2_Config      142
     ??DataTable3          4
     ??DataTable3_1        4
     ??DataTable3_2        4
     ??DataTable3_3        4
     ??DataTable3_4        4
     ??DataTable3_5        4
     ??DataTable3_6        4
     ??DataTable3_7        4
     ??DataTable3_8        4
     ??DataTable3_9        4

 
  24 bytes in section .bss
 440 bytes in section .text
 
 440 bytes of CODE memory
  24 bytes of DATA memory

Errors: none
Warnings: none
