###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.10.1.52143/W32 for ARM     08/Jan/2012  13:10:14 #
# Copyright 1999-2010 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Libraries\STM32_USB_ #
#                    HOST_Library\Class\MSC\src\usbh_msc_bot.c                #
#    Command line =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Libraries\STM32_USB_ #
#                    HOST_Library\Class\MSC\src\usbh_msc_bot.c -D             #
#                    USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM3220F_EVAL   #
#                    -D USE_USB_OTG_FS -D RTC_CLOCK_SOURCE_LSE -lC            #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\STM322 #
#                    0F_EVAL\List\ -lA E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Pr #
#                    oject\EWARM\STM3220F_EVAL\List\ -o                       #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\STM322 #
#                    0F_EVAL\Obj\ --no_cse --no_unroll --no_inline            #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWAR #
#                    M\..\ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWA #
#                    RM\..\..\Libraries\CMSIS\CM3\CoreSupport\ -I             #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\ -I       #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32F2xx_StdPeriph_Driver\inc\ -I             #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Utilities\STM32_EVAL\ -I E:\Work\Firmware\DTG\DTG_EMS_SY #
#                    STEM\Project\EWARM\..\..\Utilities\STM32_EVAL\Common\    #
#                    -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\ #
#                    ..\Utilities\STM32_EVAL\STM3220F_EVAL\ -I                #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32_USB_OTG_Driver\inc\ -I                   #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32_USB_Device_Library\Core\inc\ -I          #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\..\ #
#                    Libraries\STM32_USB_Device_Library\Class\msc\inc\ -I     #
#                    E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\..\Usb #
#                    \ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\. #
#                    .\Usb\Inc\ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Projec #
#                    t\EWARM\..\Usb\src\ -I E:\Work\Firmware\DTG\DTG_EMS_SYST #
#                    EM\Project\EWARM\..\..\Libraries\STM32_USB_HOST_Library\ #
#                    Core\inc\ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project #
#                    \EWARM\..\..\Libraries\STM32_USB_HOST_Library\Class\MSC\ #
#                    inc\ -I E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWAR #
#                    M\..\..\Libraries\STM32_USB_Device_Library\Class\cdc\inc #
#                    \ -Ol --use_c++_inline                                   #
#    List file    =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\STM322 #
#                    0F_EVAL\List\usbh_msc_bot.lst                            #
#    Object file  =  E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Project\EWARM\STM322 #
#                    0F_EVAL\Obj\usbh_msc_bot.o                               #
#                                                                             #
#                                                                             #
###############################################################################

E:\Work\Firmware\DTG\DTG_EMS_SYSTEM\Libraries\STM32_USB_HOST_Library\Class\MSC\src\usbh_msc_bot.c
      1          /**
      2            ******************************************************************************
      3            * @file    usbh_msc_bot.c 
      4            * @author  MCD Application Team
      5            * @version V2.0.0RC1
      6            * @date    18-March-2011
      7            * @brief   This file includes the mass storage related functions
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */ 
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "usbh_msc_core.h"
     24          #include "usbh_msc_scsi.h"
     25          #include "usbh_msc_bot.h"
     26          #include "usbh_ioreq.h"
     27          #include "usbh_def.h"
     28          #include "usb_hcd_int.h"
     29          
     30          
     31          /** @addtogroup USBH_LIB
     32          * @{
     33          */
     34          
     35          /** @addtogroup USBH_CLASS
     36          * @{
     37          */
     38          
     39          /** @addtogroup USBH_MSC_CLASS
     40          * @{
     41          */
     42          
     43          /** @defgroup USBH_MSC_BOT 
     44          * @brief    This file includes the mass storage related functions
     45          * @{
     46          */ 
     47          
     48          
     49          /** @defgroup USBH_MSC_BOT_Private_TypesDefinitions
     50          * @{
     51          */ 
     52          /**
     53          * @}
     54          */ 
     55          
     56          /** @defgroup USBH_MSC_BOT_Private_Defines
     57          * @{
     58          */ 
     59          /**
     60          * @}
     61          */ 
     62          
     63          /** @defgroup USBH_MSC_BOT_Private_Macros
     64          * @{
     65          */ 
     66          /**
     67          * @}
     68          */ 
     69          
     70          
     71          /** @defgroup USBH_MSC_BOT_Private_Variables
     72          * @{
     73          */ 
     74          
     75          #ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
     76          #pragma data_alignment = 4 
     77          #endif

   \                                 In section .bss, align 4
     78          HostCBWPkt_TypeDef USBH_MSC_CBWData;
   \                     USBH_MSC_CBWData:
   \   00000000                      DS8 32

   \                                 In section .bss, align 4
     79          HostCSWPkt_TypeDef USBH_MSC_CSWData;
   \                     USBH_MSC_CSWData:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
     80          static uint32_t BOTStallErrorCount;   /* Keeps count of STALL Error Cases*/
   \                     BOTStallErrorCount:
   \   00000000                      DS8 4
     81          
     82          /**
     83          * @}
     84          */ 
     85          
     86          
     87          /** @defgroup USBH_MSC_BOT_Private_FunctionPrototypes
     88          * @{
     89          */ 
     90          /**
     91          * @}
     92          */ 
     93          
     94          
     95          /** @defgroup USBH_MSC_BOT_Exported_Variables
     96          * @{
     97          */ 

   \                                 In section .bss, align 4
     98          USBH_BOTXfer_TypeDef USBH_MSC_BOTXferParam; 
   \                     USBH_MSC_BOTXferParam:
   \   00000000                      DS8 16
     99          /**
    100          * @}
    101          */ 
    102          
    103          
    104          /** @defgroup USBH_MSC_BOT_Private_Functions
    105          * @{
    106          */ 
    107          
    108          
    109          /**
    110          * @brief  USBH_MSC_Init 
    111          *         Initializes the mass storage parameters
    112          * @param  None
    113          * @retval None
    114          */

   \                                 In section .text, align 2, keep-with-next
    115          void USBH_MSC_Init(USB_OTG_CORE_HANDLE *pdev )
    116          {
   \                     USBH_MSC_Init:
   \   00000000   80B5               PUSH     {R7,LR}
    117            if(HCD_IsDeviceConnected(pdev))
   \   00000002   ........           BL       HCD_IsDeviceConnected
   \   00000006   0028               CMP      R0,#+0
   \   00000008   11D0               BEQ.N    ??USBH_MSC_Init_0
    118            {      
    119              USBH_MSC_CBWData.field.CBWSignature = USBH_MSC_BOT_CBW_SIGNATURE;
   \   0000000A   ........           LDR.W    R0,??DataTable3
   \   0000000E   ........           LDR.W    R1,??DataTable3_1  ;; 0x43425355
   \   00000012   0160               STR      R1,[R0, #+0]
    120              USBH_MSC_CBWData.field.CBWTag = USBH_MSC_BOT_CBW_TAG;
   \   00000014   ........           LDR.W    R0,??DataTable3
   \   00000018   ........           LDR.W    R1,??DataTable3_2  ;; 0x20304050
   \   0000001C   4160               STR      R1,[R0, #+4]
    121              USBH_MSC_CBWData.field.CBWLUN = 0;  /*Only one LUN is supported*/
   \   0000001E   ........           LDR.W    R0,??DataTable3
   \   00000022   0021               MOVS     R1,#+0
   \   00000024   4173               STRB     R1,[R0, #+13]
    122              USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;  
   \   00000026   ........           LDR.W    R0,??DataTable3_3
   \   0000002A   0121               MOVS     R1,#+1
   \   0000002C   C170               STRB     R1,[R0, #+3]
    123            }
    124            
    125            BOTStallErrorCount = 0;
   \                     ??USBH_MSC_Init_0:
   \   0000002E   ........           LDR.W    R0,??DataTable3_4
   \   00000032   0021               MOVS     R1,#+0
   \   00000034   0160               STR      R1,[R0, #+0]
    126            MSCErrorCount = 0;
   \   00000036   ........           LDR.W    R0,??DataTable3_5
   \   0000003A   0021               MOVS     R1,#+0
   \   0000003C   0170               STRB     R1,[R0, #+0]
    127          }
   \   0000003E   01BD               POP      {R0,PC}          ;; return
    128          
    129          /**
    130          * @brief  USBH_MSC_HandleBOTXfer 
    131          *         This function manages the different states of BOT transfer and 
    132          *         updates the status to upper layer.
    133          * @param  None
    134          * @retval None
    135          * 
    136          */

   \                                 In section .text, align 2, keep-with-next
    137          void USBH_MSC_HandleBOTXfer (USB_OTG_CORE_HANDLE *pdev ,USBH_HOST *phost)
    138          {
   \                     USBH_MSC_HandleBOTXfer:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
    139            uint8_t xferDirection, index;
    140            static uint32_t remainingDataLength;
    141            static uint8_t *datapointer;
    142            static uint8_t error_direction;
    143            USBH_Status status;
    144            
    145            URB_STATE URB_Status = URB_IDLE;
   \   00000006   0026               MOVS     R6,#+0
    146            
    147            if(HCD_IsDeviceConnected(pdev))
   \   00000008   2000               MOVS     R0,R4
   \   0000000A   ........           BL       HCD_IsDeviceConnected
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   00F09881           BEQ.W    ??USBH_MSC_HandleBOTXfer_0
    148            {  
    149              
    150              switch (USBH_MSC_BOTXferParam.BOTState)
   \   00000014   ........           LDR.W    R0,??DataTable3_3
   \   00000018   0079               LDRB     R0,[R0, #+4]
   \   0000001A   0128               CMP      R0,#+1
   \   0000001C   12D0               BEQ.N    ??USBH_MSC_HandleBOTXfer_1
   \   0000001E   C0F09181           BCC.W    ??USBH_MSC_HandleBOTXfer_2
   \   00000022   0328               CMP      R0,#+3
   \   00000024   70D0               BEQ.N    ??USBH_MSC_HandleBOTXfer_3
   \   00000026   1FD3               BCC.N    ??USBH_MSC_HandleBOTXfer_4
   \   00000028   0528               CMP      R0,#+5
   \   0000002A   00F01581           BEQ.W    ??USBH_MSC_HandleBOTXfer_5
   \   0000002E   C0F0BB80           BCC.W    ??USBH_MSC_HandleBOTXfer_6
   \   00000032   0728               CMP      R0,#+7
   \   00000034   00F05681           BEQ.W    ??USBH_MSC_HandleBOTXfer_7
   \   00000038   C0F03081           BCC.W    ??USBH_MSC_HandleBOTXfer_8
   \   0000003C   0828               CMP      R0,#+8
   \   0000003E   00F06D81           BEQ.W    ??USBH_MSC_HandleBOTXfer_9
   \   00000042   7FE1               B.N      ??USBH_MSC_HandleBOTXfer_2
    151              {
    152              case USBH_MSC_SEND_CBW:
    153                /* send CBW */    
    154                USBH_BulkSendData (pdev,
    155                                   &USBH_MSC_CBWData.CBWArray[0], 
    156                                   USBH_MSC_BOT_CBW_PACKET_LENGTH , 
    157                                   MSC_Machine.hc_num_out);
   \                     ??USBH_MSC_HandleBOTXfer_1:
   \   00000044   ........           LDR.W    R0,??DataTable3_6
   \   00000048   4378               LDRB     R3,[R0, #+1]
   \   0000004A   1F22               MOVS     R2,#+31
   \   0000004C   ........           LDR.W    R1,??DataTable3
   \   00000050   2000               MOVS     R0,R4
   \   00000052   ........           BL       USBH_BulkSendData
    158                
    159                USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_SEND_CBW;
   \   00000056   ........           LDR.W    R0,??DataTable3_3
   \   0000005A   0121               MOVS     R1,#+1
   \   0000005C   4171               STRB     R1,[R0, #+5]
    160                USBH_MSC_BOTXferParam.BOTState = USBH_MSC_SENT_CBW;
   \   0000005E   ........           LDR.W    R0,??DataTable3_3
   \   00000062   0221               MOVS     R1,#+2
   \   00000064   0171               STRB     R1,[R0, #+4]
    161                
    162                break;
   \   00000066   6DE1               B.N      ??USBH_MSC_HandleBOTXfer_0
    163                
    164              case USBH_MSC_SENT_CBW:
    165                URB_Status = HCD_GetURB_State(pdev , MSC_Machine.hc_num_out);
   \                     ??USBH_MSC_HandleBOTXfer_4:
   \   00000068   ........           LDR.W    R0,??DataTable3_6
   \   0000006C   4178               LDRB     R1,[R0, #+1]
   \   0000006E   2000               MOVS     R0,R4
   \   00000070   ........           BL       HCD_GetURB_State
   \   00000074   0600               MOVS     R6,R0
    166                
    167                if(URB_Status == URB_DONE)
   \   00000076   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000078   012E               CMP      R6,#+1
   \   0000007A   2FD1               BNE.N    ??USBH_MSC_HandleBOTXfer_10
    168                { 
    169                  BOTStallErrorCount = 0;
   \   0000007C   ........           LDR.W    R0,??DataTable3_4
   \   00000080   0021               MOVS     R1,#+0
   \   00000082   0160               STR      R1,[R0, #+0]
    170                  USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_SENT_CBW; 
   \   00000084   ........           LDR.W    R0,??DataTable3_3
   \   00000088   0221               MOVS     R1,#+2
   \   0000008A   4171               STRB     R1,[R0, #+5]
    171                  
    172                  /* If the CBW Pkt is sent successful, then change the state */
    173                  xferDirection = (USBH_MSC_CBWData.field.CBWFlags & USB_REQ_DIR_MASK);
   \   0000008C   ........           LDR.W    R0,??DataTable3
   \   00000090   007B               LDRB     R0,[R0, #+12]
   \   00000092   10F08000           ANDS     R0,R0,#0x80
    174                  
    175                  if ( USBH_MSC_CBWData.field.CBWTransferLength != 0 )
   \   00000096   ........           LDR.W    R1,??DataTable3
   \   0000009A   8968               LDR      R1,[R1, #+8]
   \   0000009C   0029               CMP      R1,#+0
   \   0000009E   18D0               BEQ.N    ??USBH_MSC_HandleBOTXfer_11
    176                  {
    177                    remainingDataLength = USBH_MSC_CBWData.field.CBWTransferLength ;
   \   000000A0   ........           LDR.W    R1,??DataTable3
   \   000000A4   8968               LDR      R1,[R1, #+8]
   \   000000A6   ........           LDR.W    R2,??DataTable3_7
   \   000000AA   1160               STR      R1,[R2, #+0]
    178                    datapointer = USBH_MSC_BOTXferParam.pRxTxBuff;
   \   000000AC   ........           LDR.W    R1,??DataTable3_3
   \   000000B0   8968               LDR      R1,[R1, #+8]
   \   000000B2   ........           LDR.W    R2,??DataTable3_8
   \   000000B6   1160               STR      R1,[R2, #+0]
    179                    
    180                    /* If there is Data Transfer Stage */
    181                    if (xferDirection == USB_D2H)
   \   000000B8   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BA   8028               CMP      R0,#+128
   \   000000BC   04D1               BNE.N    ??USBH_MSC_HandleBOTXfer_12
    182                    {
    183                      /* Data Direction is IN */
    184                      USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOT_DATAIN_STATE;
   \   000000BE   ........           LDR.W    R0,??DataTable3_3
   \   000000C2   0321               MOVS     R1,#+3
   \   000000C4   0171               STRB     R1,[R0, #+4]
   \   000000C6   1EE0               B.N      ??USBH_MSC_HandleBOTXfer_13
    185                    }
    186                    else
    187                    {
    188                      /* Data Direction is OUT */
    189                      USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOT_DATAOUT_STATE;
   \                     ??USBH_MSC_HandleBOTXfer_12:
   \   000000C8   ........           LDR.W    R0,??DataTable3_3
   \   000000CC   0421               MOVS     R1,#+4
   \   000000CE   0171               STRB     R1,[R0, #+4]
   \   000000D0   19E0               B.N      ??USBH_MSC_HandleBOTXfer_13
    190                    } 
    191                  }
    192                  
    193                  else
    194                  {/* If there is NO Data Transfer Stage */
    195                    USBH_MSC_BOTXferParam.BOTState = USBH_MSC_RECEIVE_CSW_STATE;
   \                     ??USBH_MSC_HandleBOTXfer_11:
   \   000000D2   ........           LDR.W    R0,??DataTable3_3
   \   000000D6   0521               MOVS     R1,#+5
   \   000000D8   0171               STRB     R1,[R0, #+4]
   \   000000DA   14E0               B.N      ??USBH_MSC_HandleBOTXfer_13
    196                  }
    197                  
    198                }   
    199                else if(URB_Status == URB_NOTREADY)
   \                     ??USBH_MSC_HandleBOTXfer_10:
   \   000000DC   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000DE   022E               CMP      R6,#+2
   \   000000E0   06D1               BNE.N    ??USBH_MSC_HandleBOTXfer_14
    200                {
    201                  USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOTXferParam.BOTStateBkp;    
   \   000000E2   ........           LDR.W    R0,??DataTable3_3
   \   000000E6   ........           LDR.W    R1,??DataTable3_3
   \   000000EA   4979               LDRB     R1,[R1, #+5]
   \   000000EC   0171               STRB     R1,[R0, #+4]
   \   000000EE   0AE0               B.N      ??USBH_MSC_HandleBOTXfer_13
    202                }     
    203                else if(URB_Status == URB_STALL)
   \                     ??USBH_MSC_HandleBOTXfer_14:
   \   000000F0   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000F2   042E               CMP      R6,#+4
   \   000000F4   07D1               BNE.N    ??USBH_MSC_HandleBOTXfer_13
    204                {
    205                  error_direction = USBH_MSC_DIR_OUT;
   \   000000F6   ........           LDR.W    R0,??DataTable3_9
   \   000000FA   0121               MOVS     R1,#+1
   \   000000FC   0170               STRB     R1,[R0, #+0]
    206                  USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_OUT;
   \   000000FE   ........           LDR.W    R0,??DataTable3_3
   \   00000102   0821               MOVS     R1,#+8
   \   00000104   0171               STRB     R1,[R0, #+4]
    207                }
    208                break;
   \                     ??USBH_MSC_HandleBOTXfer_13:
   \   00000106   1DE1               B.N      ??USBH_MSC_HandleBOTXfer_0
    209                
    210              case USBH_MSC_BOT_DATAIN_STATE:
    211                
    212                URB_Status =   HCD_GetURB_State(pdev , MSC_Machine.hc_num_in);
   \                     ??USBH_MSC_HandleBOTXfer_3:
   \   00000108   ........           LDR.W    R0,??DataTable3_6
   \   0000010C   0178               LDRB     R1,[R0, #+0]
   \   0000010E   2000               MOVS     R0,R4
   \   00000110   ........           BL       HCD_GetURB_State
   \   00000114   0600               MOVS     R6,R0
    213                /* BOT DATA IN stage */
    214                if((URB_Status == URB_DONE) ||(USBH_MSC_BOTXferParam.BOTStateBkp != USBH_MSC_BOT_DATAIN_STATE))
   \   00000116   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000118   012E               CMP      R6,#+1
   \   0000011A   04D0               BEQ.N    ??USBH_MSC_HandleBOTXfer_15
   \   0000011C   ........           LDR.W    R0,??DataTable3_3
   \   00000120   4079               LDRB     R0,[R0, #+5]
   \   00000122   0328               CMP      R0,#+3
   \   00000124   33D0               BEQ.N    ??USBH_MSC_HandleBOTXfer_16
    215                {
    216                  BOTStallErrorCount = 0;
   \                     ??USBH_MSC_HandleBOTXfer_15:
   \   00000126   ....               LDR.N    R0,??DataTable3_4
   \   00000128   0021               MOVS     R1,#+0
   \   0000012A   0160               STR      R1,[R0, #+0]
    217                  USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_BOT_DATAIN_STATE;    
   \   0000012C   ....               LDR.N    R0,??DataTable3_3
   \   0000012E   0321               MOVS     R1,#+3
   \   00000130   4171               STRB     R1,[R0, #+5]
    218                  
    219                  if(remainingDataLength > USBH_MSC_MPS_SIZE)
   \   00000132   ....               LDR.N    R0,??DataTable3_7
   \   00000134   0068               LDR      R0,[R0, #+0]
   \   00000136   4128               CMP      R0,#+65
   \   00000138   13D3               BCC.N    ??USBH_MSC_HandleBOTXfer_17
    220                  {
    221                    USBH_BulkReceiveData (pdev,
    222          	                        datapointer, 
    223          			        USBH_MSC_MPS_SIZE , 
    224          			        MSC_Machine.hc_num_in);
   \   0000013A   ....               LDR.N    R0,??DataTable3_6
   \   0000013C   0378               LDRB     R3,[R0, #+0]
   \   0000013E   4022               MOVS     R2,#+64
   \   00000140   ....               LDR.N    R0,??DataTable3_8
   \   00000142   0168               LDR      R1,[R0, #+0]
   \   00000144   2000               MOVS     R0,R4
   \   00000146   ........           BL       USBH_BulkReceiveData
    225                    
    226                    remainingDataLength -= USBH_MSC_MPS_SIZE;
   \   0000014A   ....               LDR.N    R0,??DataTable3_7
   \   0000014C   0068               LDR      R0,[R0, #+0]
   \   0000014E   4038               SUBS     R0,R0,#+64
   \   00000150   ....               LDR.N    R1,??DataTable3_7
   \   00000152   0860               STR      R0,[R1, #+0]
    227                    datapointer = datapointer + USBH_MSC_MPS_SIZE;
   \   00000154   ....               LDR.N    R0,??DataTable3_8
   \   00000156   0068               LDR      R0,[R0, #+0]
   \   00000158   00F24000           ADDW     R0,R0,#+64
   \   0000015C   ....               LDR.N    R1,??DataTable3_8
   \   0000015E   0860               STR      R0,[R1, #+0]
   \   00000160   21E0               B.N      ??USBH_MSC_HandleBOTXfer_18
    228                  }
    229                  else if ( remainingDataLength == 0)
   \                     ??USBH_MSC_HandleBOTXfer_17:
   \   00000162   ....               LDR.N    R0,??DataTable3_7
   \   00000164   0068               LDR      R0,[R0, #+0]
   \   00000166   0028               CMP      R0,#+0
   \   00000168   03D1               BNE.N    ??USBH_MSC_HandleBOTXfer_19
    230                  {
    231                    /* If value was 0, and successful transfer, then change the state */
    232                    USBH_MSC_BOTXferParam.BOTState = USBH_MSC_RECEIVE_CSW_STATE;
   \   0000016A   ....               LDR.N    R0,??DataTable3_3
   \   0000016C   0521               MOVS     R1,#+5
   \   0000016E   0171               STRB     R1,[R0, #+4]
   \   00000170   19E0               B.N      ??USBH_MSC_HandleBOTXfer_18
    233                  }
    234                  else
    235                  {       
    236                    USBH_BulkReceiveData (pdev,
    237          	                        datapointer, 
    238          			        remainingDataLength , 
    239          			        MSC_Machine.hc_num_in);
   \                     ??USBH_MSC_HandleBOTXfer_19:
   \   00000172   ....               LDR.N    R0,??DataTable3_6
   \   00000174   0378               LDRB     R3,[R0, #+0]
   \   00000176   ....               LDR.N    R0,??DataTable3_7
   \   00000178   0268               LDR      R2,[R0, #+0]
   \   0000017A   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000017C   ....               LDR.N    R0,??DataTable3_8
   \   0000017E   0168               LDR      R1,[R0, #+0]
   \   00000180   2000               MOVS     R0,R4
   \   00000182   ........           BL       USBH_BulkReceiveData
    240                    
    241                    remainingDataLength = 0; /* Reset this value and keep in same state */
   \   00000186   ....               LDR.N    R0,??DataTable3_7
   \   00000188   0021               MOVS     R1,#+0
   \   0000018A   0160               STR      R1,[R0, #+0]
   \   0000018C   0BE0               B.N      ??USBH_MSC_HandleBOTXfer_18
    242                  }
    243                }
    244                else if(URB_Status == URB_STALL)
   \                     ??USBH_MSC_HandleBOTXfer_16:
   \   0000018E   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000190   042E               CMP      R6,#+4
   \   00000192   08D1               BNE.N    ??USBH_MSC_HandleBOTXfer_18
    245                {
    246                  /* This is Data Stage STALL Condition */
    247                  
    248                  error_direction = USBH_MSC_DIR_IN;
   \   00000194   ....               LDR.N    R0,??DataTable3_9
   \   00000196   0021               MOVS     R1,#+0
   \   00000198   0170               STRB     R1,[R0, #+0]
    249                  USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_IN;
   \   0000019A   ....               LDR.N    R0,??DataTable3_3
   \   0000019C   0721               MOVS     R1,#+7
   \   0000019E   0171               STRB     R1,[R0, #+4]
    250                  
    251                  /* Refer to USB Mass-Storage Class : BOT (www.usb.org) 
    252                  6.7.2 Host expects to receive data from the device
    253                  3. On a STALL condition receiving data, then:
    254                  The host shall accept the data received.
    255                  The host shall clear the Bulk-In pipe.
    256                  4. The host shall attempt to receive a CSW.
    257                  
    258                  USBH_MSC_BOTXferParam.BOTStateBkp is used to switch to the Original 
    259                  state after the ClearFeature Command is issued.
    260                  */
    261                  USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
   \   000001A0   ....               LDR.N    R0,??DataTable3_3
   \   000001A2   0521               MOVS     R1,#+5
   \   000001A4   4171               STRB     R1,[R0, #+5]
    262                  
    263                }     
    264                break;   
   \                     ??USBH_MSC_HandleBOTXfer_18:
   \   000001A6   CDE0               B.N      ??USBH_MSC_HandleBOTXfer_0
    265                
    266                
    267              case USBH_MSC_BOT_DATAOUT_STATE:
    268                /* BOT DATA OUT stage */
    269                URB_Status = HCD_GetURB_State(pdev , MSC_Machine.hc_num_out);       
   \                     ??USBH_MSC_HandleBOTXfer_6:
   \   000001A8   ....               LDR.N    R0,??DataTable3_6
   \   000001AA   4178               LDRB     R1,[R0, #+1]
   \   000001AC   2000               MOVS     R0,R4
   \   000001AE   ........           BL       HCD_GetURB_State
   \   000001B2   0600               MOVS     R6,R0
    270                if(URB_Status == URB_DONE)
   \   000001B4   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001B6   012E               CMP      R6,#+1
   \   000001B8   33D1               BNE.N    ??USBH_MSC_HandleBOTXfer_20
    271                {
    272                  BOTStallErrorCount = 0;
   \   000001BA   ....               LDR.N    R0,??DataTable3_4
   \   000001BC   0021               MOVS     R1,#+0
   \   000001BE   0160               STR      R1,[R0, #+0]
    273                  USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_BOT_DATAOUT_STATE;    
   \   000001C0   ....               LDR.N    R0,??DataTable3_3
   \   000001C2   0421               MOVS     R1,#+4
   \   000001C4   4171               STRB     R1,[R0, #+5]
    274                  if(remainingDataLength > USBH_MSC_MPS_SIZE)
   \   000001C6   ....               LDR.N    R0,??DataTable3_7
   \   000001C8   0068               LDR      R0,[R0, #+0]
   \   000001CA   4128               CMP      R0,#+65
   \   000001CC   13D3               BCC.N    ??USBH_MSC_HandleBOTXfer_21
    275                  {
    276                    USBH_BulkSendData (pdev,
    277                                       datapointer, 
    278                                       USBH_MSC_MPS_SIZE , 
    279                                       MSC_Machine.hc_num_out);
   \   000001CE   ....               LDR.N    R0,??DataTable3_6
   \   000001D0   4378               LDRB     R3,[R0, #+1]
   \   000001D2   4022               MOVS     R2,#+64
   \   000001D4   ....               LDR.N    R0,??DataTable3_8
   \   000001D6   0168               LDR      R1,[R0, #+0]
   \   000001D8   2000               MOVS     R0,R4
   \   000001DA   ........           BL       USBH_BulkSendData
    280                    datapointer = datapointer + USBH_MSC_MPS_SIZE;
   \   000001DE   ....               LDR.N    R0,??DataTable3_8
   \   000001E0   0068               LDR      R0,[R0, #+0]
   \   000001E2   00F24000           ADDW     R0,R0,#+64
   \   000001E6   ....               LDR.N    R1,??DataTable3_8
   \   000001E8   0860               STR      R0,[R1, #+0]
    281                    remainingDataLength = remainingDataLength - USBH_MSC_MPS_SIZE;
   \   000001EA   ....               LDR.N    R0,??DataTable3_7
   \   000001EC   0068               LDR      R0,[R0, #+0]
   \   000001EE   4038               SUBS     R0,R0,#+64
   \   000001F0   ....               LDR.N    R1,??DataTable3_7
   \   000001F2   0860               STR      R0,[R1, #+0]
   \   000001F4   2FE0               B.N      ??USBH_MSC_HandleBOTXfer_22
    282                  }
    283                  else if ( remainingDataLength == 0)
   \                     ??USBH_MSC_HandleBOTXfer_21:
   \   000001F6   ....               LDR.N    R0,??DataTable3_7
   \   000001F8   0068               LDR      R0,[R0, #+0]
   \   000001FA   0028               CMP      R0,#+0
   \   000001FC   03D1               BNE.N    ??USBH_MSC_HandleBOTXfer_23
    284                  {
    285                    /* If value was 0, and successful transfer, then change the state */
    286                    USBH_MSC_BOTXferParam.BOTState = USBH_MSC_RECEIVE_CSW_STATE;
   \   000001FE   ....               LDR.N    R0,??DataTable3_3
   \   00000200   0521               MOVS     R1,#+5
   \   00000202   0171               STRB     R1,[R0, #+4]
   \   00000204   27E0               B.N      ??USBH_MSC_HandleBOTXfer_22
    287                  }
    288                  else
    289                  {
    290                    USBH_BulkSendData (pdev,
    291          	                     datapointer, 
    292          			     remainingDataLength , 
    293          			     MSC_Machine.hc_num_out);
   \                     ??USBH_MSC_HandleBOTXfer_23:
   \   00000206   ....               LDR.N    R0,??DataTable3_6
   \   00000208   4378               LDRB     R3,[R0, #+1]
   \   0000020A   ....               LDR.N    R0,??DataTable3_7
   \   0000020C   0268               LDR      R2,[R0, #+0]
   \   0000020E   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000210   ....               LDR.N    R0,??DataTable3_8
   \   00000212   0168               LDR      R1,[R0, #+0]
   \   00000214   2000               MOVS     R0,R4
   \   00000216   ........           BL       USBH_BulkSendData
    294                    
    295                    remainingDataLength = 0; /* Reset this value and keep in same state */   
   \   0000021A   ....               LDR.N    R0,??DataTable3_7
   \   0000021C   0021               MOVS     R1,#+0
   \   0000021E   0160               STR      R1,[R0, #+0]
   \   00000220   19E0               B.N      ??USBH_MSC_HandleBOTXfer_22
    296                  }      
    297                }
    298                
    299                else if(URB_Status == URB_NOTREADY)
   \                     ??USBH_MSC_HandleBOTXfer_20:
   \   00000222   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000224   022E               CMP      R6,#+2
   \   00000226   0AD1               BNE.N    ??USBH_MSC_HandleBOTXfer_24
    300                {
    301                  USBH_BulkSendData (pdev,
    302          	                   (datapointer - USBH_MSC_MPS_SIZE), 
    303          			   USBH_MSC_MPS_SIZE , 
    304          			   MSC_Machine.hc_num_out);
   \   00000228   ....               LDR.N    R0,??DataTable3_6
   \   0000022A   4378               LDRB     R3,[R0, #+1]
   \   0000022C   4022               MOVS     R2,#+64
   \   0000022E   ....               LDR.N    R0,??DataTable3_8
   \   00000230   0068               LDR      R0,[R0, #+0]
   \   00000232   B0F14001           SUBS     R1,R0,#+64
   \   00000236   2000               MOVS     R0,R4
   \   00000238   ........           BL       USBH_BulkSendData
   \   0000023C   0BE0               B.N      ??USBH_MSC_HandleBOTXfer_22
    305                }
    306                
    307                else if(URB_Status == URB_STALL)
   \                     ??USBH_MSC_HandleBOTXfer_24:
   \   0000023E   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000240   042E               CMP      R6,#+4
   \   00000242   08D1               BNE.N    ??USBH_MSC_HandleBOTXfer_22
    308                {
    309                  error_direction = USBH_MSC_DIR_OUT;
   \   00000244   ....               LDR.N    R0,??DataTable3_9
   \   00000246   0121               MOVS     R1,#+1
   \   00000248   0170               STRB     R1,[R0, #+0]
    310                  USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_OUT;
   \   0000024A   ....               LDR.N    R0,??DataTable3_3
   \   0000024C   0821               MOVS     R1,#+8
   \   0000024E   0171               STRB     R1,[R0, #+4]
    311                  
    312                  /* Refer to USB Mass-Storage Class : BOT (www.usb.org) 
    313                  6.7.3 Ho - Host expects to send data to the device
    314                  3. On a STALL condition sending data, then:
    315                  " The host shall clear the Bulk-Out pipe.
    316                  4. The host shall attempt to receive a CSW.
    317                  
    318                  The Above statement will do the clear the Bulk-Out pipe.
    319                  The Below statement will help in Getting the CSW.  
    320                  
    321                  USBH_MSC_BOTXferParam.BOTStateBkp is used to switch to the Original 
    322                  state after the ClearFeature Command is issued.
    323                  */
    324                  
    325                  USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
   \   00000250   ....               LDR.N    R0,??DataTable3_3
   \   00000252   0521               MOVS     R1,#+5
   \   00000254   4171               STRB     R1,[R0, #+5]
    326                  
    327                }
    328                break;
   \                     ??USBH_MSC_HandleBOTXfer_22:
   \   00000256   75E0               B.N      ??USBH_MSC_HandleBOTXfer_0
    329                
    330              case USBH_MSC_RECEIVE_CSW_STATE:
    331                /* BOT CSW stage */     
    332                  /* NOTE: We cannot reset the BOTStallErrorCount here as it may come from 
    333                  the clearFeature from previous command */
    334                  
    335                  USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
   \                     ??USBH_MSC_HandleBOTXfer_5:
   \   00000258   ....               LDR.N    R0,??DataTable3_3
   \   0000025A   0521               MOVS     R1,#+5
   \   0000025C   4171               STRB     R1,[R0, #+5]
    336                  
    337                  USBH_MSC_BOTXferParam.pRxTxBuff = USBH_MSC_CSWData.CSWArray;
   \   0000025E   ....               LDR.N    R0,??DataTable3_3
   \   00000260   ....               LDR.N    R1,??DataTable3_10
   \   00000262   8160               STR      R1,[R0, #+8]
    338                  USBH_MSC_BOTXferParam.DataLength = USBH_MSC_CSW_MAX_LENGTH;
   \   00000264   ....               LDR.N    R0,??DataTable3_3
   \   00000266   3F21               MOVS     R1,#+63
   \   00000268   8181               STRH     R1,[R0, #+12]
    339                  
    340                  for(index = USBH_MSC_CSW_LENGTH; index != 0; index--)
   \   0000026A   0D20               MOVS     R0,#+13
   \   0000026C   04E0               B.N      ??USBH_MSC_HandleBOTXfer_25
    341                  {
    342                    USBH_MSC_CSWData.CSWArray[index] = 0;
   \                     ??USBH_MSC_HandleBOTXfer_26:
   \   0000026E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000270   ....               LDR.N    R1,??DataTable3_10
   \   00000272   0022               MOVS     R2,#+0
   \   00000274   4254               STRB     R2,[R0, R1]
    343                  }
   \   00000276   401E               SUBS     R0,R0,#+1
   \                     ??USBH_MSC_HandleBOTXfer_25:
   \   00000278   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000027A   0028               CMP      R0,#+0
   \   0000027C   F7D1               BNE.N    ??USBH_MSC_HandleBOTXfer_26
    344                  
    345                  USBH_MSC_CSWData.CSWArray[0] = 0;
   \   0000027E   ....               LDR.N    R0,??DataTable3_10
   \   00000280   0021               MOVS     R1,#+0
   \   00000282   0170               STRB     R1,[R0, #+0]
    346                  
    347                  USBH_BulkReceiveData (pdev,
    348                                        USBH_MSC_BOTXferParam.pRxTxBuff, 
    349                                        USBH_MSC_CSW_MAX_LENGTH , 
    350                                        MSC_Machine.hc_num_in);
   \   00000284   ....               LDR.N    R0,??DataTable3_6
   \   00000286   0378               LDRB     R3,[R0, #+0]
   \   00000288   3F22               MOVS     R2,#+63
   \   0000028A   ....               LDR.N    R0,??DataTable3_3
   \   0000028C   8168               LDR      R1,[R0, #+8]
   \   0000028E   2000               MOVS     R0,R4
   \   00000290   ........           BL       USBH_BulkReceiveData
    351                  USBH_MSC_BOTXferParam.BOTState = USBH_MSC_DECODE_CSW;    
   \   00000294   ....               LDR.N    R0,??DataTable3_3
   \   00000296   0621               MOVS     R1,#+6
   \   00000298   0171               STRB     R1,[R0, #+4]
    352          
    353                break;
   \   0000029A   53E0               B.N      ??USBH_MSC_HandleBOTXfer_0
    354                
    355              case USBH_MSC_DECODE_CSW:
    356                URB_Status = HCD_GetURB_State(pdev , MSC_Machine.hc_num_in);
   \                     ??USBH_MSC_HandleBOTXfer_8:
   \   0000029C   ....               LDR.N    R0,??DataTable3_6
   \   0000029E   0178               LDRB     R1,[R0, #+0]
   \   000002A0   2000               MOVS     R0,R4
   \   000002A2   ........           BL       HCD_GetURB_State
   \   000002A6   0600               MOVS     R6,R0
    357                /* Decode CSW */
    358                if(URB_Status == URB_DONE)
   \   000002A8   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002AA   012E               CMP      R6,#+1
   \   000002AC   10D1               BNE.N    ??USBH_MSC_HandleBOTXfer_27
    359                {
    360                  BOTStallErrorCount = 0;
   \   000002AE   ....               LDR.N    R0,??DataTable3_4
   \   000002B0   0021               MOVS     R1,#+0
   \   000002B2   0160               STR      R1,[R0, #+0]
    361                  USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
   \   000002B4   ....               LDR.N    R0,??DataTable3_3
   \   000002B6   0521               MOVS     R1,#+5
   \   000002B8   4171               STRB     R1,[R0, #+5]
    362                  
    363                  USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOTXferParam.MSCStateCurrent ;
   \   000002BA   ....               LDR.N    R0,??DataTable3_3
   \   000002BC   8078               LDRB     R0,[R0, #+2]
   \   000002BE   ....               LDR.N    R1,??DataTable3_3
   \   000002C0   0870               STRB     R0,[R1, #+0]
    364                  
    365                  USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_DecodeCSW(pdev , phost);
   \   000002C2   2900               MOVS     R1,R5
   \   000002C4   2000               MOVS     R0,R4
   \   000002C6   ........           BL       USBH_MSC_DecodeCSW
   \   000002CA   ....               LDR.N    R1,??DataTable3_3
   \   000002CC   C873               STRB     R0,[R1, #+15]
   \   000002CE   08E0               B.N      ??USBH_MSC_HandleBOTXfer_28
    366                }
    367                else if(URB_Status == URB_STALL)     
   \                     ??USBH_MSC_HandleBOTXfer_27:
   \   000002D0   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002D2   042E               CMP      R6,#+4
   \   000002D4   05D1               BNE.N    ??USBH_MSC_HandleBOTXfer_28
    368                {
    369                  error_direction = USBH_MSC_DIR_IN;
   \   000002D6   ....               LDR.N    R0,??DataTable3_9
   \   000002D8   0021               MOVS     R1,#+0
   \   000002DA   0170               STRB     R1,[R0, #+0]
    370                  USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_IN;
   \   000002DC   ....               LDR.N    R0,??DataTable3_3
   \   000002DE   0721               MOVS     R1,#+7
   \   000002E0   0171               STRB     R1,[R0, #+4]
    371                }
    372                break;
   \                     ??USBH_MSC_HandleBOTXfer_28:
   \   000002E2   2FE0               B.N      ??USBH_MSC_HandleBOTXfer_0
    373                
    374              case USBH_MSC_BOT_ERROR_IN: 
    375                status = USBH_MSC_BOT_Abort(pdev, phost, USBH_MSC_DIR_IN);
   \                     ??USBH_MSC_HandleBOTXfer_7:
   \   000002E4   0022               MOVS     R2,#+0
   \   000002E6   2900               MOVS     R1,R5
   \   000002E8   2000               MOVS     R0,R4
   \   000002EA   ........           BL       USBH_MSC_BOT_Abort
    376                if (status == USBH_OK)
   \   000002EE   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002F0   0028               CMP      R0,#+0
   \   000002F2   0CD1               BNE.N    ??USBH_MSC_HandleBOTXfer_29
    377                {
    378                  /* Check if the error was due in Both the directions */
    379                  if (error_direction == USBH_MSC_BOTH_DIR)
   \   000002F4   ....               LDR.N    R0,??DataTable3_9
   \   000002F6   0078               LDRB     R0,[R0, #+0]
   \   000002F8   0228               CMP      R0,#+2
   \   000002FA   03D1               BNE.N    ??USBH_MSC_HandleBOTXfer_30
    380                  {/* If Both directions are Needed, Switch to OUT Direction */
    381                    USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOT_ERROR_OUT;
   \   000002FC   ....               LDR.N    R0,??DataTable3_3
   \   000002FE   0821               MOVS     R1,#+8
   \   00000300   0171               STRB     R1,[R0, #+4]
   \   00000302   0AE0               B.N      ??USBH_MSC_HandleBOTXfer_31
    382                  }
    383                  else
    384                  {
    385                    /* Switch Back to the Original State, In many cases this will be 
    386                    USBH_MSC_RECEIVE_CSW_STATE state */
    387                    USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOTXferParam.BOTStateBkp;
   \                     ??USBH_MSC_HandleBOTXfer_30:
   \   00000304   ....               LDR.N    R0,??DataTable3_3
   \   00000306   ....               LDR.N    R1,??DataTable3_3
   \   00000308   4979               LDRB     R1,[R1, #+5]
   \   0000030A   0171               STRB     R1,[R0, #+4]
   \   0000030C   05E0               B.N      ??USBH_MSC_HandleBOTXfer_31
    388                  }
    389                }
    390                else if (status == USBH_UNRECOVERED_ERROR)
   \                     ??USBH_MSC_HandleBOTXfer_29:
   \   0000030E   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000310   0428               CMP      R0,#+4
   \   00000312   02D1               BNE.N    ??USBH_MSC_HandleBOTXfer_31
    391                {
    392                  /* This means that there is a STALL Error limit, Do Reset Recovery */
    393                  USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_PHASE_ERROR;
   \   00000314   ....               LDR.N    R0,??DataTable3_3
   \   00000316   0221               MOVS     R1,#+2
   \   00000318   C173               STRB     R1,[R0, #+15]
    394                }
    395                break;
   \                     ??USBH_MSC_HandleBOTXfer_31:
   \   0000031A   13E0               B.N      ??USBH_MSC_HandleBOTXfer_0
    396                
    397              case USBH_MSC_BOT_ERROR_OUT: 
    398                status = USBH_MSC_BOT_Abort(pdev, phost, USBH_MSC_DIR_OUT);
   \                     ??USBH_MSC_HandleBOTXfer_9:
   \   0000031C   0122               MOVS     R2,#+1
   \   0000031E   2900               MOVS     R1,R5
   \   00000320   2000               MOVS     R0,R4
   \   00000322   ........           BL       USBH_MSC_BOT_Abort
    399                if ( status == USBH_OK)
   \   00000326   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000328   0028               CMP      R0,#+0
   \   0000032A   04D1               BNE.N    ??USBH_MSC_HandleBOTXfer_32
    400                { /* Switch Back to the Original State */
    401                  USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOTXferParam.BOTStateBkp;        
   \   0000032C   ....               LDR.N    R0,??DataTable3_3
   \   0000032E   ....               LDR.N    R1,??DataTable3_3
   \   00000330   4979               LDRB     R1,[R1, #+5]
   \   00000332   0171               STRB     R1,[R0, #+4]
   \   00000334   05E0               B.N      ??USBH_MSC_HandleBOTXfer_33
    402                }
    403                else if (status == USBH_UNRECOVERED_ERROR)
   \                     ??USBH_MSC_HandleBOTXfer_32:
   \   00000336   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000338   0428               CMP      R0,#+4
   \   0000033A   02D1               BNE.N    ??USBH_MSC_HandleBOTXfer_33
    404                {
    405                  /* This means that there is a STALL Error limit, Do Reset Recovery */
    406                  USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_PHASE_ERROR;
   \   0000033C   ....               LDR.N    R0,??DataTable3_3
   \   0000033E   0221               MOVS     R1,#+2
   \   00000340   C173               STRB     R1,[R0, #+15]
    407                }
    408                break;
   \                     ??USBH_MSC_HandleBOTXfer_33:
   \   00000342   FFE7               B.N      ??USBH_MSC_HandleBOTXfer_0
    409                
    410              default:      
    411                break;
    412              }
    413            }
    414          }
   \                     ??USBH_MSC_HandleBOTXfer_2:
   \                     ??USBH_MSC_HandleBOTXfer_0:
   \   00000344   70BD               POP      {R4-R6,PC}       ;; return

   \                                 In section .bss, align 4
   \                     ??remainingDataLength:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??datapointer:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   \                     ??error_direction:
   \   00000000                      DS8 1
    415          
    416          /**
    417          * @brief  USBH_MSC_BOT_Abort 
    418          *         This function manages the different Error handling for STALL
    419          * @param  direction : IN / OUT 
    420          * @retval None
    421          */

   \                                 In section .text, align 2, keep-with-next
    422          USBH_Status USBH_MSC_BOT_Abort(USB_OTG_CORE_HANDLE *pdev, 
    423                                         USBH_HOST *phost,
    424                                         uint8_t direction)
    425          {
   \                     USBH_MSC_BOT_Abort:
   \   00000000   80B5               PUSH     {R7,LR}
    426            USBH_Status status;
    427            
    428            status = USBH_BUSY;
   \   00000002   0123               MOVS     R3,#+1
    429            
    430            switch (direction)
   \   00000004   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   002A               CMP      R2,#+0
   \   00000008   02D0               BEQ.N    ??USBH_MSC_BOT_Abort_0
   \   0000000A   012A               CMP      R2,#+1
   \   0000000C   08D0               BEQ.N    ??USBH_MSC_BOT_Abort_1
   \   0000000E   0FE0               B.N      ??USBH_MSC_BOT_Abort_2
    431            {
    432            case USBH_MSC_DIR_IN :
    433              /* send ClrFeture on Bulk IN endpoint */
    434              status = USBH_ClrFeature(pdev,
    435                                       phost,
    436                                       MSC_Machine.MSBulkInEp,
    437                                       MSC_Machine.hc_num_in);
   \                     ??USBH_MSC_BOT_Abort_0:
   \   00000010   ....               LDR.N    R2,??DataTable3_6
   \   00000012   1378               LDRB     R3,[R2, #+0]
   \   00000014   ....               LDR.N    R2,??DataTable3_6
   \   00000016   D278               LDRB     R2,[R2, #+3]
   \   00000018   ........           BL       USBH_ClrFeature
   \   0000001C   0300               MOVS     R3,R0
    438              
    439              break;
   \   0000001E   07E0               B.N      ??USBH_MSC_BOT_Abort_3
    440              
    441            case USBH_MSC_DIR_OUT :
    442              /*send ClrFeature on Bulk OUT endpoint */
    443              status = USBH_ClrFeature(pdev, 
    444                                       phost,
    445                                       MSC_Machine.MSBulkOutEp,
    446                                       MSC_Machine.hc_num_out);
   \                     ??USBH_MSC_BOT_Abort_1:
   \   00000020   ....               LDR.N    R2,??DataTable3_6
   \   00000022   5378               LDRB     R3,[R2, #+1]
   \   00000024   ....               LDR.N    R2,??DataTable3_6
   \   00000026   9278               LDRB     R2,[R2, #+2]
   \   00000028   ........           BL       USBH_ClrFeature
   \   0000002C   0300               MOVS     R3,R0
    447              break;
   \   0000002E   FFE7               B.N      ??USBH_MSC_BOT_Abort_3
    448              
    449            default:
    450              break;
    451            }
    452            
    453            BOTStallErrorCount++; /* Check Continous Number of times, STALL has Occured */ 
   \                     ??USBH_MSC_BOT_Abort_2:
   \                     ??USBH_MSC_BOT_Abort_3:
   \   00000030   ....               LDR.N    R0,??DataTable3_4
   \   00000032   0068               LDR      R0,[R0, #+0]
   \   00000034   401C               ADDS     R0,R0,#+1
   \   00000036   ....               LDR.N    R1,??DataTable3_4
   \   00000038   0860               STR      R0,[R1, #+0]
    454            if (BOTStallErrorCount > MAX_BULK_STALL_COUNT_LIMIT )
   \   0000003A   ....               LDR.N    R0,??DataTable3_4
   \   0000003C   0068               LDR      R0,[R0, #+0]
   \   0000003E   0528               CMP      R0,#+5
   \   00000040   00D3               BCC.N    ??USBH_MSC_BOT_Abort_4
    455            {
    456              status = USBH_UNRECOVERED_ERROR;
   \   00000042   0423               MOVS     R3,#+4
    457            }
    458            
    459            return status;
   \                     ??USBH_MSC_BOT_Abort_4:
   \   00000044   1800               MOVS     R0,R3
   \   00000046   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   02BD               POP      {R1,PC}          ;; return
    460          }
    461          
    462          /**
    463          * @brief  USBH_MSC_DecodeCSW
    464          *         This function decodes the CSW received by the device and updates the
    465          *         same to upper layer.
    466          * @param  None
    467          * @retval On success USBH_MSC_OK, on failure USBH_MSC_FAIL
    468          * @notes
    469          *     Refer to USB Mass-Storage Class : BOT (www.usb.org)
    470          *    6.3.1 Valid CSW Conditions :
    471          *     The host shall consider the CSW valid when:
    472          *     1. dCSWSignature is equal to 53425355h
    473          *     2. the CSW is 13 (Dh) bytes in length,
    474          *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
    475          */
    476          

   \                                 In section .text, align 2, keep-with-next
    477          uint8_t USBH_MSC_DecodeCSW(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
    478          {
   \                     USBH_MSC_DecodeCSW:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0500               MOVS     R5,R0
    479            uint8_t status;
    480            uint32_t dataXferCount = 0;
   \   00000004   0026               MOVS     R6,#+0
    481            status = USBH_MSC_FAIL;
   \   00000006   0124               MOVS     R4,#+1
    482            
    483            if(HCD_IsDeviceConnected(pdev))
   \   00000008   2800               MOVS     R0,R5
   \   0000000A   ........           BL       HCD_IsDeviceConnected
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   27D0               BEQ.N    ??USBH_MSC_DecodeCSW_0
    484            {
    485              /*Checking if the transfer length is diffrent than 13*/
    486              dataXferCount = HCD_GetXferCnt(pdev, MSC_Machine.hc_num_in); 
   \   00000012   ....               LDR.N    R0,??DataTable3_6
   \   00000014   0178               LDRB     R1,[R0, #+0]
   \   00000016   2800               MOVS     R0,R5
   \   00000018   ........           BL       HCD_GetXferCnt
   \   0000001C   0600               MOVS     R6,R0
    487              
    488              if(dataXferCount != USBH_MSC_CSW_LENGTH)
   \   0000001E   0D2E               CMP      R6,#+13
   \   00000020   01D0               BEQ.N    ??USBH_MSC_DecodeCSW_1
    489              {
    490                /*(4) Hi > Dn (Host expects to receive data from the device,
    491                Device intends to transfer no data)
    492                (5) Hi > Di (Host expects to receive data from the device,
    493                Device intends to send data to the host)
    494                (9) Ho > Dn (Host expects to send data to the device,
    495                Device intends to transfer no data)
    496                (11) Ho > Do  (Host expects to send data to the device,
    497                Device intends to receive data from the host)*/
    498                
    499                
    500                status = USBH_MSC_PHASE_ERROR;
   \   00000022   0224               MOVS     R4,#+2
   \   00000024   1DE0               B.N      ??USBH_MSC_DecodeCSW_0
    501              }
    502              else
    503              { /* CSW length is Correct */
    504                
    505                /* Check validity of the CSW Signature and CSWStatus */
    506                if(USBH_MSC_CSWData.field.CSWSignature == USBH_MSC_BOT_CSW_SIGNATURE)
   \                     ??USBH_MSC_DecodeCSW_1:
   \   00000026   ....               LDR.N    R0,??DataTable3_10
   \   00000028   0068               LDR      R0,[R0, #+0]
   \   0000002A   ....               LDR.N    R1,??DataTable3_11  ;; 0x53425355
   \   0000002C   8842               CMP      R0,R1
   \   0000002E   17D1               BNE.N    ??USBH_MSC_DecodeCSW_2
    507                {/* Check Condition 1. dCSWSignature is equal to 53425355h */
    508                  
    509                  if(USBH_MSC_CSWData.field.CSWTag == USBH_MSC_CBWData.field.CBWTag)
   \   00000030   ....               LDR.N    R0,??DataTable3_10
   \   00000032   4068               LDR      R0,[R0, #+4]
   \   00000034   ....               LDR.N    R1,??DataTable3
   \   00000036   4968               LDR      R1,[R1, #+4]
   \   00000038   8842               CMP      R0,R1
   \   0000003A   12D1               BNE.N    ??USBH_MSC_DecodeCSW_0
    510                  {
    511                    /* Check Condition 3. dCSWTag matches the dCBWTag from the 
    512                    corresponding CBW */
    513                    
    514                    if(USBH_MSC_CSWData.field.CSWStatus == USBH_MSC_OK) 
   \   0000003C   ....               LDR.N    R0,??DataTable3_10
   \   0000003E   007B               LDRB     R0,[R0, #+12]
   \   00000040   0028               CMP      R0,#+0
   \   00000042   01D1               BNE.N    ??USBH_MSC_DecodeCSW_3
    515                    {
    516                      /* Refer to USB Mass-Storage Class : BOT (www.usb.org) 
    517                      
    518                      Hn Host expects no data transfers
    519                      Hi Host expects to receive data from the device
    520                      Ho Host expects to send data to the device
    521                      
    522                      Dn Device intends to transfer no data
    523                      Di Device intends to send data to the host
    524                      Do Device intends to receive data from the host
    525                      
    526                      Section 6.7 
    527                      (1) Hn = Dn (Host expects no data transfers,
    528                      Device intends to transfer no data)
    529                      (6) Hi = Di (Host expects to receive data from the device,
    530                      Device intends to send data to the host)
    531                      (12) Ho = Do (Host expects to send data to the device, 
    532                      Device intends to receive data from the host)
    533                      
    534                      */
    535                      
    536                      status = USBH_MSC_OK;
   \   00000044   0024               MOVS     R4,#+0
   \   00000046   0CE0               B.N      ??USBH_MSC_DecodeCSW_0
    537                    }
    538                    else if(USBH_MSC_CSWData.field.CSWStatus == USBH_MSC_FAIL)
   \                     ??USBH_MSC_DecodeCSW_3:
   \   00000048   ....               LDR.N    R0,??DataTable3_10
   \   0000004A   007B               LDRB     R0,[R0, #+12]
   \   0000004C   0128               CMP      R0,#+1
   \   0000004E   01D1               BNE.N    ??USBH_MSC_DecodeCSW_4
    539                    {
    540                      status = USBH_MSC_FAIL;
   \   00000050   0124               MOVS     R4,#+1
   \   00000052   06E0               B.N      ??USBH_MSC_DecodeCSW_0
    541                    }
    542                    
    543                    else if(USBH_MSC_CSWData.field.CSWStatus == USBH_MSC_PHASE_ERROR)
   \                     ??USBH_MSC_DecodeCSW_4:
   \   00000054   ....               LDR.N    R0,??DataTable3_10
   \   00000056   007B               LDRB     R0,[R0, #+12]
   \   00000058   0228               CMP      R0,#+2
   \   0000005A   02D1               BNE.N    ??USBH_MSC_DecodeCSW_0
    544                    { 
    545                      /* Refer to USB Mass-Storage Class : BOT (www.usb.org) 
    546                      Section 6.7 
    547                      (2) Hn < Di ( Host expects no data transfers, 
    548                      Device intends to send data to the host)
    549                      (3) Hn < Do ( Host expects no data transfers, 
    550                      Device intends to receive data from the host)
    551                      (7) Hi < Di ( Host expects to receive data from the device, 
    552                      Device intends to send data to the host)
    553                      (8) Hi <> Do ( Host expects to receive data from the device, 
    554                      Device intends to receive data from the host)
    555                      (10) Ho <> Di (Host expects to send data to the device,
    556                      Di Device intends to send data to the host)
    557                      (13) Ho < Do (Host expects to send data to the device, 
    558                      Device intends to receive data from the host)
    559                      */
    560                      
    561                      status = USBH_MSC_PHASE_ERROR;
   \   0000005C   0224               MOVS     R4,#+2
   \   0000005E   00E0               B.N      ??USBH_MSC_DecodeCSW_0
    562                    }
    563                  } /* CSW Tag Matching is Checked  */
    564                } /* CSW Signature Correct Checking */
    565                else
    566                {
    567                  /* If the CSW Signature is not valid, We sall return the Phase Error to
    568                  Upper Layers for Reset Recovery */
    569                  
    570                  status = USBH_MSC_PHASE_ERROR;
   \                     ??USBH_MSC_DecodeCSW_2:
   \   00000060   0224               MOVS     R4,#+2
    571                }
    572              } /* CSW Length Check*/
    573            }
    574            
    575            USBH_MSC_BOTXferParam.BOTXferStatus  = status;
   \                     ??USBH_MSC_DecodeCSW_0:
   \   00000062   ....               LDR.N    R0,??DataTable3_3
   \   00000064   C473               STRB     R4,[R0, #+15]
    576            return status;
   \   00000066   2000               MOVS     R0,R4
   \   00000068   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   70BD               POP      {R4-R6,PC}       ;; return
    577          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     USBH_MSC_CBWData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   55534243           DC32     0x43425355

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   50403020           DC32     0x20304050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   ........           DC32     USBH_MSC_BOTXferParam

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   ........           DC32     BOTStallErrorCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   ........           DC32     MSCErrorCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   ........           DC32     MSC_Machine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   ........           DC32     ??remainingDataLength

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   ........           DC32     ??datapointer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   ........           DC32     ??error_direction

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   ........           DC32     USBH_MSC_CSWData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   55534253           DC32     0x53425355
    578          
    579          
    580          /**
    581          * @}
    582          */ 
    583          
    584          /**
    585          * @}
    586          */ 
    587          
    588          /**
    589          * @}
    590          */
    591          
    592          /**
    593          * @}
    594          */ 
    595          
    596          /**
    597          * @}
    598          */
    599          
    600          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
    601          
    602          
    603          

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     USBH_MSC_BOT_Abort          8
     USBH_MSC_DecodeCSW         16
     USBH_MSC_HandleBOTXfer     16
     USBH_MSC_Init               8


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     USBH_MSC_CBWData         32
     USBH_MSC_CSWData         16
     BOTStallErrorCount        4
     USBH_MSC_BOTXferParam    16
     USBH_MSC_Init            64
     USBH_MSC_HandleBOTXfer  838
     remainingDataLength       4
     datapointer               4
     error_direction           1
     USBH_MSC_BOT_Abort       74
     USBH_MSC_DecodeCSW      108
     ??DataTable3              4
     ??DataTable3_1            4
     ??DataTable3_2            4
     ??DataTable3_3            4
     ??DataTable3_4            4
     ??DataTable3_5            4
     ??DataTable3_6            4
     ??DataTable3_7            4
     ??DataTable3_8            4
     ??DataTable3_9            4
     ??DataTable3_10           4
     ??DataTable3_11           4

 
    77 bytes in section .bss
 1 132 bytes in section .text
 
 1 132 bytes of CODE memory
    77 bytes of DATA memory

Errors: none
Warnings: none
